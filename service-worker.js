(()=>{"use strict";function e(e){return{log:function(t,...n){console.log(`[${e} 1.0.40] ${t}`,...n)},error:function(t,...n){console.error(`[${e} 1.0.40] ${t}`,...n)},warn:function(t,...n){console.warn(`[${e} 1.0.40] ${t}`,...n)},debug:function(t,...n){console.debug(`[${e} 1.0.40] ${t}`,...n)}}}const{log:t,error:n,warn:r,debug:c}=e("app"),a=[/tailwind/i],i="claptastic-store-1.0.40",{error:s,debug:o,log:l,warn:u}=e("sw");l("loading service worker"),self.addEventListener("activate",(e=>{l("activating",e),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(i!==e)return l("deleting cache",e),caches.delete(e)}))))))})),self.addEventListener("install",(e=>{l("installing"),self.skipWaiting()})),self.addEventListener("fetch",(e=>{const t=e.request.url;if(!1===t.toLowerCase().includes("/claptastic/"))return l("Bypassing fetch as url is not local"),!1;e.respondWith((async()=>{const n=await caches.open(i);let r;try{if(function(e){return a.some((t=>t.test(e)))}(t)){const r=await n.match(e.request);if(r)return l("returning immutable cached resource: "+t),r}if(o("fetching: "+t),r=await fetch(e.request),!r.ok)throw r;o(`updating cache: ${t}`),await n.put(e.request,r.clone())}catch(r){u(`Error fetching response. Last chance find a local cache version: ${t}`,r);const c=n.match(e.request);if(c)return c}return r})())}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vc3JjL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vc3JjL3NlcnZpY2Utd29ya2VyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZUxvZ2dlciIsInByZWZpeCIsImxvZyIsIm1zZyIsImFyZ3MiLCJjb25zb2xlIiwiZXJyb3IiLCJ3YXJuIiwiZGVidWciLCJpbW11dGFibGVVcmxzIiwiY2FjaGVOYW1lIiwibG9nZ2VyIiwic2VsZiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwid2FpdFVudGlsIiwiY2FjaGVzIiwia2V5cyIsInRoZW4iLCJrZXlMaXN0IiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsImtleSIsImRlbGV0ZSIsInNraXBXYWl0aW5nIiwiZmV0Y2hFdmVudCIsInVybCIsInJlcXVlc3QiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwicmVzcG9uZFdpdGgiLCJjYWNoZSIsIm9wZW4iLCJmZXRjaFJlc3BvbnNlIiwic29tZSIsIngiLCJ0ZXN0IiwiaXNJbW11dGFibGVSZXNvdXJjZSIsImNhY2hlZFJlc3BvbnNlIiwibWF0Y2giLCJmZXRjaCIsIm9rIiwicHV0IiwiY2xvbmUiLCJlcnIiXSwibWFwcGluZ3MiOiJtQkFBZSxTQUFTQSxFQUFhQyxHQWtCbkMsTUFBTyxDQUFFQyxJQWhCVCxTQUFhQyxLQUFRQyxHQUNuQkMsUUFBUUgsSUFBSyxJQUFHRCxhQUFzQkUsT0FBVUMsSUFlcENFLE1BWmQsU0FBZUgsS0FBUUMsR0FDckJDLFFBQVFDLE1BQU8sSUFBR0wsYUFBc0JFLE9BQVVDLElBVy9CRyxLQVJyQixTQUFjSixLQUFRQyxHQUNwQkMsUUFBUUUsS0FBTSxJQUFHTixhQUFzQkUsT0FBVUMsSUFPeEJJLE1BSjNCLFNBQWVMLEtBQVFDLEdBQ3JCQyxRQUFRRyxNQUFPLElBQUdQLGFBQXNCRSxPQUFVQyxLQU0vQyxNQUFNLElBQUVGLEVBQUYsTUFBT0ksRUFBUCxLQUFjQyxFQUFkLE1BQW9CQyxHQUFVUixFQUFhLE9DbEJsRFMsRUFBZ0IsQ0FBQyxhQUVqQkMsRUFBYSwyQkFHWEosTUFBRixFQUFTRSxNQUFULEVBQWdCTixJQUFoQixFQUFxQkssUUFBU0ksRUFBTyxNQUUzQ1QsRUFBSSwwQkFNSlUsS0FBS0MsaUJBQWlCLFlBQWFDLElBQ2pDWixFQUFJLGFBQWNZLEdBRWxCQSxFQUFFQyxVQUNBQyxPQUFPQyxPQUFPQyxNQUFNQyxHQUNYQyxRQUFRQyxJQUNiRixFQUFRRyxLQUFLQyxJQUNYLEdBQUliLElBQWNhLEVBRWhCLE9BREFyQixFQUFJLGlCQUFrQnFCLEdBQ2ZQLE9BQU9RLE9BQU9ELGFBUWpDWCxLQUFLQyxpQkFBaUIsV0FBWUMsSUFDaENaLEVBQUksY0FDSlUsS0FBS2EsaUJBUVBiLEtBQUtDLGlCQUFpQixTQUFVYSxJQUM5QixNQUFNQyxFQUFNRCxFQUFXRSxRQUFRRCxJQUMvQixJQUFtRCxJQUEvQ0EsRUFBSUUsY0FBY0MsU0FBUyxnQkFFN0IsT0FEQTVCLEVBQUksd0NBQ0csRUFFVHdCLEVBQVdLLFlBQ1QsV0FDRSxNQUFNQyxRQUFjaEIsT0FBT2lCLEtBQUt2QixHQUNoQyxJQUFJd0IsRUFFSixJQUNFLEdBM0NSLFNBQTZCUCxHQUMzQixPQUFPbEIsRUFBYzBCLE1BQU1DLEdBQU1BLEVBQUVDLEtBQUtWLEtBMEM5QlcsQ0FBb0JYLEdBQU0sQ0FDNUIsTUFBTVksUUFBdUJQLEVBQU1RLE1BQU1kLEVBQVdFLFNBQ3BELEdBQUlXLEVBRUYsT0FEQXJDLEVBQUksd0NBQTBDeUIsR0FDdkNZLEVBS1gsR0FGQS9CLEVBQU0sYUFBZW1CLEdBQ3JCTyxRQUFzQk8sTUFBTWYsRUFBV0UsVUFDbENNLEVBQWNRLEdBQ2pCLE1BQU1SLEVBRVIxQixFQUFPLG1CQUFrQm1CLFdBQ25CSyxFQUFNVyxJQUFJakIsRUFBV0UsUUFBU00sRUFBY1UsU0FDbEQsTUFBT0MsR0FDUHRDLEVBQ0csb0VBQW1Fb0IsSUFDcEVrQixHQUVGLE1BQU1OLEVBQWlCUCxFQUFNUSxNQUFNZCxFQUFXRSxTQUM5QyxHQUFJVyxFQUFnQixPQUFPQSxFQUc3QixPQUFPTCxHQTVCVCxRIiwiZmlsZSI6InNlcnZpY2Utd29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTG9nZ2VyKHByZWZpeCkge1xuICBjb25zdCB2ZXJzaW9uID0gV0VCUEFDS19WRVJTSU9OO1xuICBmdW5jdGlvbiBsb2cobXNnLCAuLi5hcmdzKSB7XG4gICAgY29uc29sZS5sb2coYFske3ByZWZpeH0gJHt2ZXJzaW9ufV0gJHttc2d9YCwgLi4uYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBlcnJvcihtc2csIC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLmVycm9yKGBbJHtwcmVmaXh9ICR7dmVyc2lvbn1dICR7bXNnfWAsIC4uLmFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLndhcm4oYFske3ByZWZpeH0gJHt2ZXJzaW9ufV0gJHttc2d9YCwgLi4uYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJ1Zyhtc2csIC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLmRlYnVnKGBbJHtwcmVmaXh9ICR7dmVyc2lvbn1dICR7bXNnfWAsIC4uLmFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHsgbG9nLCBlcnJvciwgd2FybiwgZGVidWcgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHsgbG9nLCBlcnJvciwgd2FybiwgZGVidWcgfSA9IGNyZWF0ZUxvZ2dlcihcImFwcFwiKTtcbiIsImNvbnN0IHZlcnNpb24gPSBXRUJQQUNLX1ZFUlNJT047XG5cbmNvbnN0IGFwcGtleSA9IFwiY2xhcHRhc3RpY1wiO1xuY29uc3QgaW1tdXRhYmxlVXJscyA9IFsvdGFpbHdpbmQvaV07XG5cbmNvbnN0IGNhY2hlTmFtZSA9IGAke2FwcGtleX0tc3RvcmUtJHt2ZXJzaW9ufWA7XG5cbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyXCI7XG5jb25zdCB7IGVycm9yLCBkZWJ1ZywgbG9nLCB3YXJuIH0gPSBsb2dnZXIoXCJzd1wiKTtcblxubG9nKFwibG9hZGluZyBzZXJ2aWNlIHdvcmtlclwiKTtcblxuZnVuY3Rpb24gaXNJbW11dGFibGVSZXNvdXJjZSh1cmwpIHtcbiAgcmV0dXJuIGltbXV0YWJsZVVybHMuc29tZSgoeCkgPT4geC50ZXN0KHVybCkpO1xufVxuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoXCJhY3RpdmF0ZVwiLCAoZSkgPT4ge1xuICBsb2coXCJhY3RpdmF0aW5nXCIsIGUpO1xuXG4gIGUud2FpdFVudGlsKFxuICAgIGNhY2hlcy5rZXlzKCkudGhlbigoa2V5TGlzdCkgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICBrZXlMaXN0Lm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgaWYgKGNhY2hlTmFtZSAhPT0ga2V5KSB7XG4gICAgICAgICAgICBsb2coXCJkZWxldGluZyBjYWNoZVwiLCBrZXkpO1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0pXG4gICk7XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiaW5zdGFsbFwiLCAoZSkgPT4ge1xuICBsb2coXCJpbnN0YWxsaW5nXCIpO1xuICBzZWxmLnNraXBXYWl0aW5nKCk7XG4gIC8vIGxvZyhcImluc3RhbGxpbmdcIiwgZmlsZXNUb0NhY2hlKTtcbiAgLy8gZS53YWl0VW50aWwoXG4gIC8vICAgY2FjaGVzLm9wZW4oY2FjaGVOYW1lKS50aGVuKChjYWNoZSkgPT4gY2FjaGUuYWRkQWxsKGZpbGVzVG9DYWNoZSkpXG4gIC8vICk7XG59KTtcblxuLy8gRmV0Y2hpbmcgY29udGVudCB1c2luZyBTZXJ2aWNlIFdvcmtlclxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiZmV0Y2hcIiwgKGZldGNoRXZlbnQpID0+IHtcbiAgY29uc3QgdXJsID0gZmV0Y2hFdmVudC5yZXF1ZXN0LnVybDtcbiAgaWYgKHVybC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFwiL2NsYXB0YXN0aWMvXCIpID09PSBmYWxzZSkge1xuICAgIGxvZyhcIkJ5cGFzc2luZyBmZXRjaCBhcyB1cmwgaXMgbm90IGxvY2FsXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmZXRjaEV2ZW50LnJlc3BvbmRXaXRoKFxuICAgIChhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IGNhY2hlcy5vcGVuKGNhY2hlTmFtZSk7XG4gICAgICBsZXQgZmV0Y2hSZXNwb25zZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzSW1tdXRhYmxlUmVzb3VyY2UodXJsKSkge1xuICAgICAgICAgIGNvbnN0IGNhY2hlZFJlc3BvbnNlID0gYXdhaXQgY2FjaGUubWF0Y2goZmV0Y2hFdmVudC5yZXF1ZXN0KTtcbiAgICAgICAgICBpZiAoY2FjaGVkUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGxvZyhcInJldHVybmluZyBpbW11dGFibGUgY2FjaGVkIHJlc291cmNlOiBcIiArIHVybCk7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkUmVzcG9uc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRlYnVnKFwiZmV0Y2hpbmc6IFwiICsgdXJsKTtcbiAgICAgICAgZmV0Y2hSZXNwb25zZSA9IGF3YWl0IGZldGNoKGZldGNoRXZlbnQucmVxdWVzdCk7XG4gICAgICAgIGlmICghZmV0Y2hSZXNwb25zZS5vaykge1xuICAgICAgICAgIHRocm93IGZldGNoUmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcoYHVwZGF0aW5nIGNhY2hlOiAke3VybH1gKTtcbiAgICAgICAgYXdhaXQgY2FjaGUucHV0KGZldGNoRXZlbnQucmVxdWVzdCwgZmV0Y2hSZXNwb25zZS5jbG9uZSgpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBFcnJvciBmZXRjaGluZyByZXNwb25zZS4gTGFzdCBjaGFuY2UgZmluZCBhIGxvY2FsIGNhY2hlIHZlcnNpb246ICR7dXJsfWAsXG4gICAgICAgICAgZXJyXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGNhY2hlZFJlc3BvbnNlID0gY2FjaGUubWF0Y2goZmV0Y2hFdmVudC5yZXF1ZXN0KTtcbiAgICAgICAgaWYgKGNhY2hlZFJlc3BvbnNlKSByZXR1cm4gY2FjaGVkUmVzcG9uc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmZXRjaFJlc3BvbnNlO1xuICAgIH0pKClcbiAgKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==