/*! For license information please see main.2ed125e6711b1f6b0fbf.js.LICENSE.txt */
(()=>{var e={679:(e,t,n)=>{"use strict";var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),v=u(n),m=0;m<i.length;++m){var g=i[m];if(!(a[g]||r&&r[g]||v&&v[g]||l&&l[g])){var y=d(n,g);try{s(t,g,y)}catch(e){}}}}return t}},483:(e,t,n)=>{e.exports=function e(t,n,r){function o(i,l){if(!n[i]){if(!t[i]){if(a)return a(i,!0);var u=new Error("Cannot find module '"+i+"'");throw u.code="MODULE_NOT_FOUND",u}var s=n[i]={exports:{}};t[i][0].call(s.exports,(function(e){return o(t[i][1][e]||e)}),s,s.exports,e,t,n,r)}return n[i].exports}for(var a=void 0,i=0;i<r.length;i++)o(r[i]);return o}({1:[function(e,t,r){(function(e){"use strict";var n,r,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var a=0,i=new o(c),l=e.document.createTextNode("");i.observe(l,{characterData:!0}),n=function(){l.data=a=++a%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){c(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(c,0)};else{var u=new e.MessageChannel;u.port1.onmessage=c,n=function(){u.port2.postMessage(0)}}var s=[];function c(){var e,t;r=!0;for(var n=s.length;n;){for(t=s,s=[],e=-1;++e<n;)t[e]();n=s.length}r=!1}t.exports=function(e){1!==s.push(e)||r||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){"use strict";var r=e(1);function o(){}var a={},i=["REJECTED"],l=["FULFILLED"],u=["PENDING"];function s(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,e!==o&&p(this,e)}function c(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function f(e,t,n){r((function(){var r;try{r=t(n)}catch(t){return a.reject(e,t)}r===e?a.reject(e,new TypeError("Cannot resolve promise with itself")):a.resolve(e,r)}))}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var n=!1;function r(t){n||(n=!0,a.reject(e,t))}function o(t){n||(n=!0,a.resolve(e,t))}var i=h((function(){t(o,r)}));"error"===i.status&&r(i.value)}function h(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=s,s.prototype.catch=function(e){return this.then(null,e)},s.prototype.then=function(e,t){if("function"!=typeof e&&this.state===l||"function"!=typeof t&&this.state===i)return this;var n=new this.constructor(o);return this.state!==u?f(n,this.state===l?e:t,this.outcome):this.queue.push(new c(n,e,t)),n},c.prototype.callFulfilled=function(e){a.resolve(this.promise,e)},c.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},c.prototype.callRejected=function(e){a.reject(this.promise,e)},c.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},a.resolve=function(e,t){var n=h(d,t);if("error"===n.status)return a.reject(e,n.value);var r=n.value;if(r)p(e,r);else{e.state=l,e.outcome=t;for(var o=-1,i=e.queue.length;++o<i;)e.queue[o].callFulfilled(t)}return e},a.reject=function(e,t){e.state=i,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},s.resolve=function(e){return e instanceof this?e:a.resolve(new this(o),e)},s.reject=function(e){var t=new this(o);return a.reject(t,e)},s.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var i=new Array(n),l=0,u=-1,s=new this(o);++u<n;)c(e[u],u);return s;function c(e,o){t.resolve(e).then((function(e){i[o]=e,++l!==n||r||(r=!0,a.resolve(s,i))}),(function(e){r||(r=!0,a.reject(s,e))}))}},s.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n,r=e.length,i=!1;if(!r)return this.resolve([]);for(var l=-1,u=new this(o);++l<r;)n=e[l],t.resolve(n).then((function(e){i||(i=!0,a.resolve(u,e))}),(function(e){i||(i=!0,a.reject(u,e))}));return u}},{1:1}],3:[function(e,t,r){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var o=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function a(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var i=Promise;function l(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function u(e,t,n){"function"==typeof t&&e.then(t),"function"==typeof n&&e.catch(n)}function s(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function c(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var f="local-forage-detect-blob-support",d=void 0,p={},h=Object.prototype.toString,v="readonly",m="readwrite";function g(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),o=0;o<t;o++)r[o]=e.charCodeAt(o);return n}function y(e){return"boolean"==typeof d?i.resolve(d):function(e){return new i((function(t){var n=e.transaction(f,m),r=a([""]);n.objectStore(f).put(r,"key"),n.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},n.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)}})).catch((function(){return!1}))}(e).then((function(e){return d=e}))}function b(e){var t=p[e.name],n={};n.promise=new i((function(e,t){n.resolve=e,n.reject=t})),t.deferredOperations.push(n),t.dbReady?t.dbReady=t.dbReady.then((function(){return n.promise})):t.dbReady=n.promise}function w(e){var t=p[e.name].deferredOperations.pop();if(t)return t.resolve(),t.promise}function S(e,t){var n=p[e.name].deferredOperations.pop();if(n)return n.reject(t),n.promise}function k(e,t){return new i((function(n,r){if(p[e.name]=p[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);b(e),e.db.close()}var a=[e.name];t&&a.push(e.version);var i=o.open.apply(o,a);t&&(i.onupgradeneeded=function(t){var n=i.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore(f)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),i.onerror=function(e){e.preventDefault(),r(i.error)},i.onsuccess=function(){n(i.result),w(e)}}))}function E(e){return k(e,!1)}function _(e){return k(e,!0)}function C(e,t){if(!e.db)return!0;var n=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,o=e.version>e.db.version;if(r&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||n){if(n){var a=e.db.version+1;a>e.version&&(e.version=a)}return!0}return!1}function x(e){return a([g(atob(e.data))],{type:e.type})}function T(e){return e&&e.__local_forage_encoded_blob}function A(e){var t=this,n=t._initReady().then((function(){var e=p[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady}));return u(n,e,e),n}function N(e,t,n,r){void 0===r&&(r=1);try{var o=e.db.transaction(e.storeName,t);n(null,o)}catch(o){if(r>0&&(!e.db||"InvalidStateError"===o.name||"NotFoundError"===o.name))return i.resolve().then((function(){if(!e.db||"NotFoundError"===o.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),_(e)})).then((function(){return function(e){b(e);for(var t=p[e.name],n=t.forages,r=0;r<n.length;r++){var o=n[r];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return e.db=null,E(e).then((function(t){return e.db=t,C(e)?_(e):t})).then((function(r){e.db=t.db=r;for(var o=0;o<n.length;o++)n[o]._dbInfo.db=r})).catch((function(t){throw S(e,t),t}))}(e).then((function(){N(e,t,n,r-1)}))})).catch(n);n(o)}}var R={_driver:"asyncStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=e[r];var o=p[n.name];o||(o={forages:[],db:null,dbReady:null,deferredOperations:[]},p[n.name]=o),o.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=A);var a=[];function l(){return i.resolve()}for(var u=0;u<o.forages.length;u++){var s=o.forages[u];s!==t&&a.push(s._initReady().catch(l))}var c=o.forages.slice(0);return i.all(a).then((function(){return n.db=o.db,E(n)})).then((function(e){return n.db=e,C(n,t._defaultConfig.version)?_(n):e})).then((function(e){n.db=o.db=e,t._dbInfo=n;for(var r=0;r<c.length;r++){var a=c[r];a!==t&&(a._dbInfo.db=n.db,a._dbInfo.version=n.version)}}))},_support:function(){try{if(!o||!o.open)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){N(n._dbInfo,v,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).openCursor(),l=1;i.onsuccess=function(){var n=i.result;if(n){var r=n.value;T(r)&&(r=x(r));var o=e(r,n.key,l++);void 0!==o?t(o):n.continue()}else t()},i.onerror=function(){r(i.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},getItem:function(e,t){var n=this;e=s(e);var r=new i((function(t,r){n.ready().then((function(){N(n._dbInfo,v,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).get(e);i.onsuccess=function(){var e=i.result;void 0===e&&(e=null),T(e)&&(e=x(e)),t(e)},i.onerror=function(){r(i.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},setItem:function(e,t,n){var r=this;e=s(e);var o=new i((function(n,o){var a;r.ready().then((function(){return a=r._dbInfo,"[object Blob]"===h.call(t)?y(a.db).then((function(e){return e?t:(n=t,new i((function(e,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:r,type:n.type})},r.readAsBinaryString(n)})));var n})):t})).then((function(t){N(r._dbInfo,m,(function(a,i){if(a)return o(a);try{var l=i.objectStore(r._dbInfo.storeName);null===t&&(t=void 0);var u=l.put(t,e);i.oncomplete=function(){void 0===t&&(t=null),n(t)},i.onabort=i.onerror=function(){var e=u.error?u.error:u.transaction.error;o(e)}}catch(e){o(e)}}))})).catch(o)}));return l(o,n),o},removeItem:function(e,t){var n=this;e=s(e);var r=new i((function(t,r){n.ready().then((function(){N(n._dbInfo,m,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).delete(e);a.oncomplete=function(){t()},a.onerror=function(){r(i.error)},a.onabort=function(){var e=i.error?i.error:i.transaction.error;r(e)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},clear:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){N(t._dbInfo,m,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=a.error?a.error:a.transaction.error;n(e)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},length:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){N(t._dbInfo,v,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).count();a.onsuccess=function(){e(a.result)},a.onerror=function(){n(a.error)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},key:function(e,t){var n=this,r=new i((function(t,r){e<0?t(null):n.ready().then((function(){N(n._dbInfo,v,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName),l=!1,u=i.openKeyCursor();u.onsuccess=function(){var n=u.result;n?0===e||l?t(n.key):(l=!0,n.advance(e)):t(null)},u.onerror=function(){r(u.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},keys:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){N(t._dbInfo,v,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).openKeyCursor(),i=[];a.onsuccess=function(){var t=a.result;t?(i.push(t.key),t.continue()):e(i)},a.onerror=function(){n(a.error)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},dropInstance:function(e,t){t=c.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,a=this;if(e.name){var u=e.name===n.name&&a._dbInfo.db?i.resolve(a._dbInfo.db):E(e).then((function(t){var n=p[e.name],r=n.forages;n.db=t;for(var o=0;o<r.length;o++)r[o]._dbInfo.db=t;return t}));r=e.storeName?u.then((function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1;b(e);var r=p[e.name],a=r.forages;t.close();for(var l=0;l<a.length;l++){var u=a[l];u._dbInfo.db=null,u._dbInfo.version=n}return new i((function(t,r){var a=o.open(e.name,n);a.onerror=function(e){a.result.close(),r(e)},a.onupgradeneeded=function(){a.result.deleteObjectStore(e.storeName)},a.onsuccess=function(){var e=a.result;e.close(),t(e)}})).then((function(e){r.db=e;for(var t=0;t<a.length;t++){var n=a[t];n._dbInfo.db=e,w(n._dbInfo)}})).catch((function(t){throw(S(e,t)||i.resolve()).catch((function(){})),t}))}})):u.then((function(t){b(e);var n=p[e.name],r=n.forages;t.close();for(var a=0;a<r.length;a++)r[a]._dbInfo.db=null;return new i((function(t,n){var r=o.deleteDatabase(e.name);r.onerror=r.onblocked=function(e){var t=r.result;t&&t.close(),n(e)},r.onsuccess=function(){var e=r.result;e&&e.close(),t(e)}})).then((function(e){n.db=e;for(var t=0;t<r.length;t++)w(r[t]._dbInfo)})).catch((function(t){throw(S(e,t)||i.resolve()).catch((function(){})),t}))}))}else r=i.reject("Invalid arguments");return l(r,t),r}};var I="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",P=/^~~local_forage_type~([^~]+)~/,M="__lfsc__:",L=M.length,O="arbf",D="blob",z="si08",V="ui08",F="uic8",U="si16",j="si32",B="ur16",$="ui32",W="fl32",H="fl64",q=L+O.length,Q=Object.prototype.toString;function G(e){var t,n,r,o,a,i=.75*e.length,l=e.length,u=0;"="===e[e.length-1]&&(i--,"="===e[e.length-2]&&i--);var s=new ArrayBuffer(i),c=new Uint8Array(s);for(t=0;t<l;t+=4)n=I.indexOf(e[t]),r=I.indexOf(e[t+1]),o=I.indexOf(e[t+2]),a=I.indexOf(e[t+3]),c[u++]=n<<2|r>>4,c[u++]=(15&r)<<4|o>>2,c[u++]=(3&o)<<6|63&a;return s}function K(e){var t,n=new Uint8Array(e),r="";for(t=0;t<n.length;t+=3)r+=I[n[t]>>2],r+=I[(3&n[t])<<4|n[t+1]>>4],r+=I[(15&n[t+1])<<2|n[t+2]>>6],r+=I[63&n[t+2]];return n.length%3==2?r=r.substring(0,r.length-1)+"=":n.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var Y={serialize:function(e,t){var n="";if(e&&(n=Q.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===Q.call(e.buffer))){var r,o=M;e instanceof ArrayBuffer?(r=e,o+=O):(r=e.buffer,"[object Int8Array]"===n?o+=z:"[object Uint8Array]"===n?o+=V:"[object Uint8ClampedArray]"===n?o+=F:"[object Int16Array]"===n?o+=U:"[object Uint16Array]"===n?o+=B:"[object Int32Array]"===n?o+=j:"[object Uint32Array]"===n?o+=$:"[object Float32Array]"===n?o+=W:"[object Float64Array]"===n?o+=H:t(new Error("Failed to get type for BinaryArray"))),t(o+K(r))}else if("[object Blob]"===n){var a=new FileReader;a.onload=function(){var n="~~local_forage_type~"+e.type+"~"+K(this.result);t("__lfsc__:blob"+n)},a.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},deserialize:function(e){if(e.substring(0,L)!==M)return JSON.parse(e);var t,n=e.substring(q),r=e.substring(L,q);if(r===D&&P.test(n)){var o=n.match(P);t=o[1],n=n.substring(o[0].length)}var i=G(n);switch(r){case O:return i;case D:return a([i],{type:t});case z:return new Int8Array(i);case V:return new Uint8Array(i);case F:return new Uint8ClampedArray(i);case U:return new Int16Array(i);case B:return new Uint16Array(i);case j:return new Int32Array(i);case $:return new Uint32Array(i);case W:return new Float32Array(i);case H:return new Float64Array(i);default:throw new Error("Unkown type: "+r)}},stringToBuffer:G,bufferToString:K};function X(e,t,n,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,r)}function J(e,t,n,r,o,a){e.executeSql(n,r,o,(function(e,i){i.code===i.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],(function(e,l){l.rows.length?a(e,i):X(e,t,(function(){e.executeSql(n,r,o,a)}),a)}),a):a(e,i)}),a)}function Z(e,t,n,r){var o=this;e=s(e);var a=new i((function(a,i){o.ready().then((function(){void 0===t&&(t=null);var l=t,u=o._dbInfo;u.serializer.serialize(t,(function(t,s){s?i(s):u.db.transaction((function(n){J(n,u,"INSERT OR REPLACE INTO "+u.storeName+" (key, value) VALUES (?, ?)",[e,t],(function(){a(l)}),(function(e,t){i(t)}))}),(function(t){if(t.code===t.QUOTA_ERR){if(r>0)return void a(Z.apply(o,[e,l,n,r-1]));i(t)}}))}))})).catch(i)}));return l(a,n),a}function ee(e){return new i((function(t,n){e.transaction((function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,r){for(var o=[],a=0;a<r.rows.length;a++)o.push(r.rows.item(a).name);t({db:e,storeNames:o})}),(function(e,t){n(t)}))}),(function(e){n(e)}))}))}var te={_driver:"webSQLStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]="string"!=typeof e[r]?e[r].toString():e[r];var o=new i((function(e,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return r(e)}n.db.transaction((function(o){X(o,n,(function(){t._dbInfo=n,e()}),(function(e,t){r(t)}))}),r)}));return n.serializer=Y,o},_support:"function"==typeof openDatabase,iterate:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){J(n,o,"SELECT * FROM "+o.storeName,[],(function(n,r){for(var a=r.rows,i=a.length,l=0;l<i;l++){var u=a.item(l),s=u.value;if(s&&(s=o.serializer.deserialize(s)),void 0!==(s=e(s,u.key,l+1)))return void t(s)}t()}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},getItem:function(e,t){var n=this;e=s(e);var r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){J(n,o,"SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],(function(e,n){var r=n.rows.length?n.rows.item(0).value:null;r&&(r=o.serializer.deserialize(r)),t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},setItem:function(e,t,n){return Z.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this;e=s(e);var r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){J(n,o,"DELETE FROM "+o.storeName+" WHERE key = ?",[e],(function(){t()}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},clear:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"DELETE FROM "+r.storeName,[],(function(){e()}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},length:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],(function(t,n){var r=n.rows.item(0).c;e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},key:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){J(n,o,"SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],(function(e,n){var r=n.rows.length?n.rows.item(0).key:null;t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},keys:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"SELECT key FROM "+r.storeName,[],(function(t,n){for(var r=[],o=0;o<n.rows.length;o++)r.push(n.rows.item(o).key);e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},dropInstance:function(e,t){t=c.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,o=this;return l(r=e.name?new i((function(t){var r;r=e.name===n.name?o._dbInfo.db:openDatabase(e.name,"","",0),e.storeName?t({db:r,storeNames:[e.storeName]}):t(ee(r))})).then((function(e){return new i((function(t,n){e.db.transaction((function(r){function o(e){return new i((function(t,n){r.executeSql("DROP TABLE IF EXISTS "+e,[],(function(){t()}),(function(e,t){n(t)}))}))}for(var a=[],l=0,u=e.storeNames.length;l<u;l++)a.push(o(e.storeNames[l]));i.all(a).then((function(){t()})).catch((function(e){n(e)}))}),(function(e){n(e)}))}))})):i.reject("Invalid arguments"),t),r}};function ne(e,t){var n=e.name+"/";return e.storeName!==t.storeName&&(n+=e.storeName+"/"),n}function re(){return!function(){var e="_localforage_support_test";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch(e){return!0}}()||localStorage.length>0}var oe={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=ne(e,this._defaultConfig),re()?(this._dbInfo=t,t.serializer=Y,i.resolve()):i.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=n.ready().then((function(){for(var t=n._dbInfo,r=t.keyPrefix,o=r.length,a=localStorage.length,i=1,l=0;l<a;l++){var u=localStorage.key(l);if(0===u.indexOf(r)){var s=localStorage.getItem(u);if(s&&(s=t.serializer.deserialize(s)),void 0!==(s=e(s,u.substring(o),i++)))return s}}}));return l(r,t),r},getItem:function(e,t){var n=this;e=s(e);var r=n.ready().then((function(){var t=n._dbInfo,r=localStorage.getItem(t.keyPrefix+e);return r&&(r=t.serializer.deserialize(r)),r}));return l(r,t),r},setItem:function(e,t,n){var r=this;e=s(e);var o=r.ready().then((function(){void 0===t&&(t=null);var n=t;return new i((function(o,a){var i=r._dbInfo;i.serializer.serialize(t,(function(t,r){if(r)a(r);else try{localStorage.setItem(i.keyPrefix+e,t),o(n)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||a(e),a(e)}}))}))}));return l(o,n),o},removeItem:function(e,t){var n=this;e=s(e);var r=n.ready().then((function(){var t=n._dbInfo;localStorage.removeItem(t.keyPrefix+e)}));return l(r,t),r},clear:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var r=localStorage.key(n);0===r.indexOf(e)&&localStorage.removeItem(r)}}));return l(n,e),n},length:function(e){var t=this.keys().then((function(e){return e.length}));return l(t,e),t},key:function(e,t){var n=this,r=n.ready().then((function(){var t,r=n._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(r.keyPrefix.length)),t}));return l(r,t),r},keys:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo,n=localStorage.length,r=[],o=0;o<n;o++){var a=localStorage.key(o);0===a.indexOf(e.keyPrefix)&&r.push(a.substring(e.keyPrefix.length))}return r}));return l(n,e),n},dropInstance:function(e,t){if(t=c.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var n=this.config();e.name=e.name||n.name,e.storeName=e.storeName||n.storeName}var r,o=this;return l(r=e.name?new i((function(t){e.storeName?t(ne(e,o._defaultConfig)):t(e.name+"/")})).then((function(e){for(var t=localStorage.length-1;t>=0;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}})):i.reject("Invalid arguments"),t),r}},ae=function(e,t){for(var n=e.length,r=0;r<n;){if((o=e[r])===(a=t)||"number"==typeof o&&"number"==typeof a&&isNaN(o)&&isNaN(a))return!0;r++}var o,a;return!1},ie=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},le={},ue={},se={INDEXEDDB:R,WEBSQL:te,LOCALSTORAGE:oe},ce=[se.INDEXEDDB._driver,se.WEBSQL._driver,se.LOCALSTORAGE._driver],fe=["dropInstance"],de=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(fe),pe={description:"",driver:ce.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function he(e,t){e[t]=function(){var n=arguments;return e.ready().then((function(){return e[t].apply(e,n)}))}}function ve(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var n in t)t.hasOwnProperty(n)&&(ie(t[n])?arguments[0][n]=t[n].slice():arguments[0][n]=t[n])}return arguments[0]}var me=new(function(){function e(t){for(var n in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),se)if(se.hasOwnProperty(n)){var r=se[n],o=r._driver;this[n]=o,le[o]||this.defineDriver(r)}this._defaultConfig=ve({},pe),this._config=ve({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":r(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e)||!e.driver||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,n){var r=new i((function(t,n){try{var r=e._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void n(o);for(var a=de.concat("_initStorage"),u=0,s=a.length;u<s;u++){var c=a[u];if((!ae(fe,c)||e[c])&&"function"!=typeof e[c])return void n(o)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),n=i.reject(t);return l(n,arguments[arguments.length-1]),n}},n=0,r=fe.length;n<r;n++){var o=fe[n];e[o]||(e[o]=t(o))}}();var f=function(n){le[r]&&console.info("Redefining LocalForage driver: "+r),le[r]=e,ue[r]=n,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(f,n):f(!!e._support):f(!0)}catch(e){n(e)}}));return u(r,t,n),r},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,n){var r=le[e]?i.resolve(le[e]):i.reject(new Error("Driver not found."));return u(r,t,n),r},e.prototype.getSerializer=function(e){var t=i.resolve(Y);return u(t,e),t},e.prototype.ready=function(e){var t=this,n=t._driverSet.then((function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready}));return u(n,e,e),n},e.prototype.setDriver=function(e,t,n){var r=this;ie(e)||(e=[e]);var o=this._getSupportedDrivers(e);function a(){r._config.driver=r.driver()}function l(e){return r._extend(e),a(),r._ready=r._initStorage(r._config),r._ready}var s=null!==this._driverSet?this._driverSet.catch((function(){return i.resolve()})):i.resolve();return this._driverSet=s.then((function(){var e=o[0];return r._dbInfo=null,r._ready=null,r.getDriver(e).then((function(e){r._driver=e._driver,a(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var o=e[t];return t++,r._dbInfo=null,r._ready=null,r.getDriver(o).then(l).catch(n)}a();var u=new Error("No available storage method found.");return r._driverSet=i.reject(u),r._driverSet}()}}(o)}))})).catch((function(){a();var e=new Error("No available storage method found.");return r._driverSet=i.reject(e),r._driverSet})),u(this._driverSet,t,n),this._driverSet},e.prototype.supports=function(e){return!!ue[e]},e.prototype._extend=function(e){ve(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e[n];this.supports(o)&&t.push(o)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=de.length;e<t;e++)he(this,de[e])},e.prototype.createInstance=function(t){return new e(t)},e}());t.exports=me},{3:3}]},{},[4])(4)},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),a=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var S=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,E=60106,_=60107,C=60108,x=60114,T=60109,A=60110,N=60112,R=60113,I=60120,P=60115,M=60116,L=60121,O=60128,D=60129,z=60130,V=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;k=F("react.element"),E=F("react.portal"),_=F("react.fragment"),C=F("react.strict_mode"),x=F("react.profiler"),T=F("react.provider"),A=F("react.context"),N=F("react.forward_ref"),R=F("react.suspense"),I=F("react.suspense_list"),P=F("react.memo"),M=F("react.lazy"),L=F("react.block"),F("react.scope"),O=F("react.opaque.id"),D=F("react.debug_trace_mode"),z=F("react.offscreen"),V=F("react.legacy_hidden")}var U,j="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=j&&e[j]||e["@@iterator"])?e:null}function $(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function q(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _:return"Fragment";case E:return"Portal";case x:return"Profiler";case C:return"StrictMode";case R:return"Suspense";case I:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case A:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case N:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case P:return Q(e.type);case L:return Q(e._render);case M:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function G(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function se(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,me=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function Se(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var ke=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Te=null,Ae=null;function Ne(e){if(e=Zr(e)){if("function"!=typeof xe)throw Error(i(280));var t=e.stateNode;t&&(t=to(t),xe(e.stateNode,e.type,t))}}function Re(e){Te?Ae?Ae.push(e):Ae=[e]:Te=e}function Ie(){if(Te){var e=Te,t=Ae;if(Ae=Te=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Pe(e,t){return e(t)}function Me(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var Oe=Pe,De=!1,ze=!1;function Ve(){null===Te&&null===Ae||(Le(),Ie())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var je={};Object.defineProperty(je,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",je,je),window.removeEventListener("test",je,je)}catch(ve){Ue=!1}function Be(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var $e=!1,We=null,He=!1,qe=null,Qe={onError:function(e){$e=!0,We=e}};function Ge(e,t,n,r,o,a,i,l,u){$e=!1,We=null,Be.apply(Qe,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ke(e)!==e)throw Error(i(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Xe(o),e;if(a===r)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function vt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Jr(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&gt(it)&&(it=null),null!==lt&&gt(lt)&&(lt=null),null!==ut&&gt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function St(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)mt(n),null===n.blockedOn&&ft.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},_t={},Ct={};function xt(e){if(_t[e])return _t[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return _t[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Tt=xt("animationend"),At=xt("animationiteration"),Nt=xt("animationstart"),Rt=xt("transitionend"),It=new Map,Pt=new Map,Mt=["abort","abort",Tt,"animationEnd",At,"animationIteration",Nt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Rt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(r,t),It.set(r,o),s(o,[r])}}(0,a.unstable_now)();var Ot=8;function Dt(e){if(0!=(1&e))return Ot=15,1;if(0!=(2&e))return Ot=14,2;if(0!=(4&e))return Ot=13,4;var t=24&e;return 0!==t?(Ot=12,t):0!=(32&e)?(Ot=11,32):0!=(t=192&e)?(Ot=10,t):0!=(256&e)?(Ot=9,256):0!=(t=3584&e)?(Ot=8,t):0!=(4096&e)?(Ot=7,4096):0!=(t=4186112&e)?(Ot=6,t):0!=(t=62914560&e)?(Ot=5,t):67108864&e?(Ot=4,67108864):0!=(134217728&e)?(Ot=3,134217728):0!=(t=805306368&e)?(Ot=2,t):0!=(1073741824&e)?(Ot=1,1073741824):(Ot=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return Ot=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=Ot=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=Dt(u),o=Ot):0!=(l&=a)&&(r=Dt(l),o=Ot)}else 0!=(a=n&~i)?(r=Dt(a),o=Ot):0!==l&&(r=Dt(l),o=Ot);if(0===r)return 0;if(r=n&((0>(r=31-$t(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Dt(t),o<=Ot)return t;Ot=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-$t(t)),r|=e[n],t&=~o;return r}function Vt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Ft(10,t):e;case 10:return 0===(e=Ut(192&~t))?Ft(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&0===(e=Ut(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ut(e){return e&-e}function jt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-$t(t)]=n}var $t=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,qt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Gt=!0;function Kt(e,t,n,r){De||Le();var o=Xt,a=De;De=!0;try{Me(o,e,t,n,r)}finally{(De=a)||Ve()}}function Yt(e,t,n,r){Qt(qt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Gt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Jt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=vt(it,e,t,n,r,o),!0;case"dragenter":return lt=vt(lt,e,t,n,r,o),!0;case"mouseover":return ut=vt(ut,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,vt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,vt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Ir(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Ce(r);if(null!==(o=Jr(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ye(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ir(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),vn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),mn=ln(vn),gn=ln(o({},vn,{dataTransfer:0})),yn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=ln(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Sn=ln(o({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function xn(){return Cn}var Tn=ln(o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),An=ln(o({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),Rn=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),In=ln(o({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Pn=[9,13,27,32],Mn=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var On=f&&"TextEvent"in window&&!Ln,Dn=f&&(!Mn||Ln&&8<Ln&&11>=Ln),zn=String.fromCharCode(32),Vn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Wn(e,t,n,r){Re(r),0<(t=Mr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,qn=null;function Qn(e){Cr(e,0)}function Gn(e){if(X(eo(e)))return e}function Kn(e,t){if("change"===e)return t}var Yn=!1;if(f){var Xn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Xn=Jn}else Xn=!1;Yn=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Hn&&(Hn.detachEvent("onpropertychange",tr),qn=Hn=null)}function tr(e){if("value"===e.propertyName&&Gn(qn)){var t=[];if(Wn(t,qn,e,Ce(e)),e=Qn,De)e(t);else{De=!0;try{Pe(e,t)}finally{De=!1,Ve()}}}}function nr(e,t,n){"focusin"===e?(er(),qn=n,(Hn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(qn)}function or(e,t){if("click"===e)return Gn(t)}function ar(e,t){if("input"===e||"change"===e)return Gn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,vr=null,mr=null,gr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==vr||vr!==J(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Mr(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(Mt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<wr.length;Sr++)Pt.set(wr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function _r(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Ge.apply(this,arguments),$e){if(!$e)throw Error(i(198));var c=We;$e=!1,We=null,He||(He=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;_r(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;_r(o,l,s),a=u}}}if(He)throw e=qe,He=!1,qe=null,e}function xr(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Rr(t,e,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Ar(e){e[Tr]||(e[Tr]=!0,l.forEach((function(t){Er.has(t)||Nr(t,!1,e,null),Nr(t,!0,e,null)})))}function Nr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Er.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Rr(a,e,o,t),i.add(l))}function Rr(e,t,n,r){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Yt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ir(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Jr(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{Oe(e,t,n)}finally{ze=!1,Ve()}}((function(){var r=a,o=Ce(n),i=[];e:{var l=It.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Tn;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Nn;break;case Tt:case At:case Nt:u=bn;break;case Rt:u=Rn;break;case"scroll":u=hn;break;case"wheel":u=In;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=An}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=Fe(h,d))&&c.push(Pr(h,v,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Jr(s)&&!s[Yr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Jr(s):null)&&(s!==(f=Ke(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=mn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=An,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:eo(u),p=null==s?l:eo(s),(l=new c(v,h+"leave",u,n,o)).target=f,l.relatedTarget=p,v=null,Jr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,v=c),f=v,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Lr(p))h++;for(p=0,v=d;v;v=Lr(v))p++;for(;0<h-p;)c=Lr(c),h--;for(;0<p-h;)d=Lr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Lr(c),d=Lr(d)}c=null}else c=null;null!==u&&Or(i,l,u,c,!1),null!==s&&null!==f&&Or(i,f,s,c,!0)}if("select"===(u=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var m=Kn;else if($n(l))if(Yn)m=ar;else{m=rr;var g=nr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=or);switch(m&&(m=m(e,r))?Wn(i,m,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&oe(l,"number",l.value)),g=r?eo(r):window,e){case"focusin":($n(g)||"true"===g.contentEditable)&&(vr=g,mr=r,gr=null);break;case"focusout":gr=mr=vr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(i,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(i,n,o)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else jn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(jn||"onCompositionStart"!==b?"onCompositionEnd"===b&&jn&&(y=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,jn=!0)),0<(g=Mr(r,b)).length&&(b=new Sn(b,e,null,n,o),i.push({event:b,listeners:g}),(y||null!==(y=Un(n)))&&(b.data=y))),(y=On?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Vn=!0,zn);case"textInput":return(e=t.data)===zn&&Vn?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Mn&&Fn(e,t)?(e=nn(),tn=en=Zt=null,jn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(o=new Sn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Cr(i,t)}))}function Pr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,n))&&r.unshift(Pr(e,a,o)),null!=(a=Fe(e,t))&&r.push(Pr(e,a,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Or(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Fe(n,a))&&i.unshift(Pr(n,u,l)):o||null!=(u=Fe(n,a))&&i.push(Pr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var zr=null,Vr=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ur(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var jr="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function $r(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0,Qr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Qr,Kr="__reactProps$"+Qr,Yr="__reactContainer$"+Qr,Xr="__reactEvents$"+Qr;function Jr(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Gr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Gr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function to(e){return e[Kr]||null}function no(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){oo++,ro[oo]=e.current,e.current=t}var uo={},so=ao(uo),co=ao(!1),fo=uo;function po(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return null!=e.childContextTypes}function vo(){io(co),io(so)}function mo(e,t,n){if(so.current!==uo)throw Error(i(168));lo(so,t),lo(co,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,fo=so.current,lo(so,e),lo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=go(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,io(co),io(so),lo(so,e)):io(co),lo(co,n)}var wo=null,So=null,ko=a.unstable_runWithPriority,Eo=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,Co=a.unstable_shouldYield,xo=a.unstable_requestPaint,To=a.unstable_now,Ao=a.unstable_getCurrentPriorityLevel,No=a.unstable_ImmediatePriority,Ro=a.unstable_UserBlockingPriority,Io=a.unstable_NormalPriority,Po=a.unstable_LowPriority,Mo=a.unstable_IdlePriority,Lo={},Oo=void 0!==xo?xo:function(){},Do=null,zo=null,Vo=!1,Fo=To(),Uo=1e4>Fo?To:function(){return To()-Fo};function jo(){switch(Ao()){case No:return 99;case Ro:return 98;case Io:return 97;case Po:return 96;case Mo:return 95;default:throw Error(i(332))}}function Bo(e){switch(e){case 99:return No;case 98:return Ro;case 97:return Io;case 96:return Po;case 95:return Mo;default:throw Error(i(332))}}function $o(e,t){return e=Bo(e),ko(e,t)}function Wo(e,t,n){return e=Bo(e),Eo(e,t,n)}function Ho(){if(null!==zo){var e=zo;zo=null,_o(e)}qo()}function qo(){if(!Vo&&null!==Do){Vo=!0;var e=0;try{var t=Do;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Eo(No,Ho),t}finally{Vo=!1}}}var Qo=S.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=ao(null),Yo=null,Xo=null,Jo=null;function Zo(){Jo=Xo=Yo=null}function ea(e){var t=Ko.current;io(Ko),e.type._context._currentValue=t}function ta(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function na(e,t){Yo=e,Jo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Mi=!0),e.firstContext=null)}function ra(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(i(308));Xo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var oa=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ia(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function la(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var a=e.updateQueue;oa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,l=0,f=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,v=i;switch(u=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=v.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:oa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Ol|=l,e.lanes=l,e.memoizedState=d}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var da=(new r.Component).refs;function pa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ha={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.payload=t,null!=n&&(a.callback=n),ua(e,a),uu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ua(e,a),uu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=iu(),r=lu(e),o=la(n,r);o.tag=2,null!=t&&(o.callback=t),ua(e,o),uu(e,r,n)}};function va(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function ma(e,t,n){var r=!1,o=uo,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(o=ho(t)?fo:so.current,a=(r=null!=(r=t.contextTypes))?po(e,o):uo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ha,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ga(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ha.enqueueReplaceState(t,t.state,null)}function ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=da,aa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ra(a):(a=ho(t)?fo:so.current,o.context=po(e,a)),ca(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(pa(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ha.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ba=Array.isArray;function wa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===da&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Sa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ka(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Uu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Wu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wa(e,t,n),r.return=e,r):((r=ju(n.type,n.key,n.props,null,e.mode,r)).ref=wa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Bu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=ju(t.type,t.key,t.props,null,e.mode,n)).ref=wa(e,null,t),n.return=e,n;case E:return(t=Hu(t,e.mode,n)).return=e,t}if(ba(t)||B(t))return(t=Bu(t,e.mode,n,null)).return=e,t;Sa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?n.type===_?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(ba(n)||B(n))return null!==o?null:f(e,t,n,r,null);Sa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===_?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ba(r)||B(r))return f(t,e=e.get(n)||null,r,o,null);Sa(t,r)}return null}function v(o,i,l,u){for(var s=null,c=null,f=i,v=i=0,m=null;null!==f&&v<l.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var g=p(o,f,l[v],u);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,v),null===c?s=g:c.sibling=g,c=g,f=m}if(v===l.length)return n(o,f),s;if(null===f){for(;v<l.length;v++)null!==(f=d(o,l[v],u))&&(i=a(f,i,v),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);v<l.length;v++)null!==(m=h(f,o,v,l[v],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),i=a(m,i,v),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(o,e)})),s}function m(o,l,u,s){var c=B(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,v=l,m=l=0,g=null,y=u.next();null!==v&&!y.done;m++,y=u.next()){v.index>m?(g=v,v=null):g=v.sibling;var b=p(o,v,y.value,s);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(o,v),l=a(b,l,m),null===f?c=b:f.sibling=b,f=b,v=g}if(y.done)return n(o,v),c;if(null===v){for(;!y.done;m++,y=u.next())null!==(y=d(o,y.value,s))&&(l=a(y,l,m),null===f?c=y:f.sibling=y,f=y);return c}for(v=r(o,v);!y.done;m++,y=u.next())null!==(y=h(v,o,m,y.value,s))&&(e&&null!==y.alternate&&v.delete(null===y.key?m:y.key),l=a(y,l,m),null===f?c=y:f.sibling=y,f=y);return e&&v.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===_&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case k:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===_){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=wa(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===_?((r=Bu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=ju(a.type,a.key,a.props,null,e.mode,u)).ref=wa(e,r,a),u.return=e,e=u)}return l(e);case E:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Wu(a,e.mode,u)).return=e,e=r),l(e);if(ba(a))return v(e,r,a,u);if(B(a))return m(e,r,a,u);if(c&&Sa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var Ea=ka(!0),_a=ka(!1),Ca={},xa=ao(Ca),Ta=ao(Ca),Aa=ao(Ca);function Na(e){if(e===Ca)throw Error(i(174));return e}function Ra(e,t){switch(lo(Aa,t),lo(Ta,e),lo(xa,Ca),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(xa),lo(xa,t)}function Ia(){io(xa),io(Ta),io(Aa)}function Pa(e){Na(Aa.current);var t=Na(xa.current),n=pe(t,e.type);t!==n&&(lo(Ta,e),lo(xa,n))}function Ma(e){Ta.current===e&&(io(xa),io(Ta))}var La=ao(0);function Oa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,za=null,Va=!1;function Fa(e,t){var n=Vu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ja(e){if(Va){var t=za;if(t){var n=t;if(!Ua(e,t)){if(!(t=Wr(n.nextSibling))||!Ua(e,t))return e.flags=-1025&e.flags|2,Va=!1,void(Da=e);Fa(Da,n)}Da=e,za=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Va=!1,Da=e}}function Ba(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function $a(e){if(e!==Da)return!1;if(!Va)return Ba(e),Va=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ur(t,e.memoizedProps))for(t=za;t;)Fa(e,t),t=Wr(t.nextSibling);if(Ba(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){za=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}za=null}}else za=Da?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){za=Da=null,Va=!1}var Ha=[];function qa(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var Qa=S.ReactCurrentDispatcher,Ga=S.ReactCurrentBatchConfig,Ka=0,Ya=null,Xa=null,Ja=null,Za=!1,ei=!1;function ti(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ri(e,t,n,r,o,a){if(Ka=a,Ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Ni:Ri,e=n(r,o),ei){a=0;do{if(ei=!1,!(25>a))throw Error(i(301));a+=1,Ja=Xa=null,t.updateQueue=null,Qa.current=Ii,e=n(r,o)}while(ei)}if(Qa.current=Ai,t=null!==Xa&&null!==Xa.next,Ka=0,Ja=Xa=Ya=null,Za=!1,t)throw Error(i(300));return e}function oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ja?Ya.memoizedState=Ja=e:Ja=Ja.next=e,Ja}function ai(){if(null===Xa){var e=Ya.alternate;e=null!==e?e.memoizedState:null}else e=Xa.next;var t=null===Ja?Ya.memoizedState:Ja.next;if(null!==t)Ja=t,Xa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Xa=e).memoizedState,baseState:Xa.baseState,baseQueue:Xa.baseQueue,queue:Xa.queue,next:null},null===Ja?Ya.memoizedState=Ja=e:Ja=Ja.next=e}return Ja}function ii(e,t){return"function"==typeof t?t(e):t}function li(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Xa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((Ka&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,Ya.lanes|=c,Ol|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,ir(r,t.memoizedState)||(Mi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ui(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ir(a,t.memoizedState)||(Mi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function si(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Ha.push(t))),e)return n(t._source);throw Ha.push(t),Error(i(350))}function ci(e,t,n,r){var o=Tl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Qa.current,s=u.useState((function(){return si(o,t,n)})),c=s[1],f=s[0];s=Ja;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var m=Ya;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ir(l,e)){e=n(t._source),ir(f,e)||(c(e),e=lu(m),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-$t(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=lu(m);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(v,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:f}).dispatch=c=Ti.bind(null,Ya,e),s.queue=e,s.baseQueue=null,f=si(o,t,n),s.memoizedState=s.baseState=f),f}function fi(e,t,n){return ci(ai(),e,t,n)}function di(e){var t=oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e}).dispatch=Ti.bind(null,Ya,e),[t.memoizedState,e]}function pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ya.updateQueue)?(t={lastEffect:null},Ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hi(e){return e={current:e},oi().memoizedState=e}function vi(){return ai().memoizedState}function mi(e,t,n,r){var o=oi();Ya.flags|=e,o.memoizedState=pi(1|t,n,void 0,void 0===r?null:r)}function gi(e,t,n,r){var o=ai();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&ni(r,i.deps))return void pi(t,n,a,r)}Ya.flags|=e,o.memoizedState=pi(1|t,n,a,r)}function yi(e,t){return mi(516,4,e,t)}function bi(e,t){return gi(516,4,e,t)}function wi(e,t){return gi(4,2,e,t)}function Si(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ki(e,t,n){return n=null!=n?n.concat([e]):null,gi(4,2,Si.bind(null,t,e),n)}function Ei(){}function _i(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ci(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function xi(e,t){var n=jo();$o(98>n?98:n,(function(){e(!0)})),$o(97<n?97:n,(function(){var n=Ga.transition;Ga.transition=1;try{e(!1),t()}finally{Ga.transition=n}}))}function Ti(e,t,n){var r=iu(),o=lu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ya||null!==i&&i===Ya)ei=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,ir(u,l))return}catch(e){}uu(e,o,r)}}var Ai={readContext:ra,useCallback:ti,useContext:ti,useEffect:ti,useImperativeHandle:ti,useLayoutEffect:ti,useMemo:ti,useReducer:ti,useRef:ti,useState:ti,useDebugValue:ti,useDeferredValue:ti,useTransition:ti,useMutableSource:ti,useOpaqueIdentifier:ti,unstable_isNewReconciler:!1},Ni={readContext:ra,useCallback:function(e,t){return oi().memoizedState=[e,void 0===t?null:t],e},useContext:ra,useEffect:yi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,mi(4,2,Si.bind(null,t,e),n)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var n=oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ti.bind(null,Ya,e),[r.memoizedState,e]},useRef:hi,useState:di,useDebugValue:Ei,useDeferredValue:function(e){var t=di(e),n=t[0],r=t[1];return yi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=di(!1),t=e[0];return hi(e=xi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oi();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ci(r,e,t,n)},useOpaqueIdentifier:function(){if(Va){var e=!1,t=function(e){return{$$typeof:O,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(i(355))})),n=di(t)[1];return 0==(2&Ya.mode)&&(Ya.flags|=516,pi(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return di(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Ri={readContext:ra,useCallback:_i,useContext:ra,useEffect:bi,useImperativeHandle:ki,useLayoutEffect:wi,useMemo:Ci,useReducer:li,useRef:vi,useState:function(){return li(ii)},useDebugValue:Ei,useDeferredValue:function(e){var t=li(ii),n=t[0],r=t[1];return bi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=li(ii)[0];return[vi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return li(ii)[0]},unstable_isNewReconciler:!1},Ii={readContext:ra,useCallback:_i,useContext:ra,useEffect:bi,useImperativeHandle:ki,useLayoutEffect:wi,useMemo:Ci,useReducer:ui,useRef:vi,useState:function(){return ui(ii)},useDebugValue:Ei,useDeferredValue:function(e){var t=ui(ii),n=t[0],r=t[1];return bi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=ui(ii)[0];return[vi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return ui(ii)[0]},unstable_isNewReconciler:!1},Pi=S.ReactCurrentOwner,Mi=!1;function Li(e,t,n,r){t.child=null===e?_a(t,null,n,r):Ea(t,e.child,n,r)}function Oi(e,t,n,r,o){n=n.render;var a=t.ref;return na(t,o),r=ri(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,Li(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Fu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=ju(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,zi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?Zi(e,t,a):(t.flags|=1,(e=Uu(i,r)).ref=t.ref,e.return=t,t.child=e)}function zi(e,t,n,r,o,a){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Mi=!1,0==(a&o))return t.lanes=e.lanes,Zi(e,t,a);0!=(16384&e.flags)&&(Mi=!0)}return Ui(e,t,n,r,a)}function Vi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},mu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},mu(0,e),null;t.memoizedState={baseLanes:0},mu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,mu(0,r);return Li(e,t,o,n),t.child}function Fi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ui(e,t,n,r,o){var a=ho(n)?fo:so.current;return a=po(t,a),na(t,o),n=ri(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,Li(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function ji(e,t,n,r,o){if(ho(n)){var a=!0;yo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,n,r),ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?ra(s):po(t,s=ho(n)?fo:so.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&ga(t,i,r,s),oa=!1;var d=t.memoizedState;i.state=d,ca(t,r,i,o),u=t.memoizedState,l!==r||d!==u||co.current||oa?("function"==typeof c&&(pa(t,n,c,r),u=t.memoizedState),(l=oa||va(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ia(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Go(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?ra(u):po(t,u=ho(n)?fo:so.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ga(t,i,r,u),oa=!1,d=t.memoizedState,i.state=d,ca(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||co.current||oa?("function"==typeof p&&(pa(t,n,p,r),h=t.memoizedState),(s=oa||va(t,n,s,r,d,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Bi(e,t,n,r,a,o)}function Bi(e,t,n,r,o,a){Fi(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&bo(t,n,!1),Zi(e,t,a);r=t.stateNode,Pi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ea(t,e.child,null,a),t.child=Ea(t,null,l,a)):Li(e,t,l,a),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function $i(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Ra(e,t.containerInfo)}var Wi,Hi,qi,Qi={dehydrated:null,retryLane:0};function Gi(e,t,n){var r,o=t.pendingProps,a=La.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),lo(La,1&a),null===e?(void 0!==o.fallback&&ja(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,t.lanes=33554432,e):((n=$u({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Uu(i,l),null!==e?r=Uu(e,r):(r=Bu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Qi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Uu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$u(t,o,0,null),n=Bu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Yi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ta(e.return,t)}function Xi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Ji(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Li(e,t,r.children,n),0!=(2&(r=La.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Yi(e,n);else if(19===e.tag)Yi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(La,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Oa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Oa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xi(t,!0,n,null,a,t.lastEffect);break;case"together":Xi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ol|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Uu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Uu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!Va)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&vo(),null;case 3:return Ia(),io(co),io(so),qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||($a(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ma(t);var a=Na(Aa.current);if(n=t.type,null!==e&&null!=t.stateNode)Hi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Na(xa.current),$a(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Gr]=t,r[Kr]=l,n){case"dialog":xr("cancel",r),xr("close",r);break;case"iframe":case"object":case"embed":xr("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)xr(kr[e],r);break;case"source":xr("error",r);break;case"img":case"image":case"link":xr("error",r),xr("load",r);break;case"details":xr("toggle",r);break;case"input":ee(r,l),xr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},xr("invalid",r);break;case"textarea":ue(r,l),xr("invalid",r)}for(var s in Ee(n,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&xr("scroll",r));switch(n){case"input":Y(r),re(r,l,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Gr]=t,e[Kr]=r,Wi(e,t),t.stateNode=e,s=_e(n,r),n){case"dialog":xr("cancel",e),xr("close",e),a=r;break;case"iframe":case"object":case"embed":xr("load",e),a=r;break;case"video":case"audio":for(a=0;a<kr.length;a++)xr(kr[a],e);a=r;break;case"source":xr("error",e),a=r;break;case"img":case"image":case"link":xr("error",e),xr("load",e),a=r;break;case"details":xr("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),xr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),xr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),xr("invalid",e);break;default:a=r}Ee(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?Se(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&xr("scroll",e):null!=f&&w(e,l,f,s))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dr)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Na(Aa.current),Na(xa.current),$a(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return io(La),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&$a(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&La.current)?0===Pl&&(Pl=3):(0!==Pl&&3!==Pl||(Pl=4),null===Tl||0==(134217727&Ol)&&0==(134217727&Dl)||du(Tl,Nl))),(r||n)&&(t.flags|=4),null);case 4:return Ia(),null===e&&Ar(t.stateNode.containerInfo),null;case 10:return ea(t),null;case 17:return ho(t.type)&&vo(),null;case 19:if(io(La),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)el(r,!1);else{if(0!==Pl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Oa(e))){for(t.flags|=64,el(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return lo(La,1&La.current|2),t.child}e=e.sibling}null!==r.tail&&Uo()>Ul&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Oa(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Va)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>Ul&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=La.current,lo(La,l?1&t|2:1&t),n):null;case 23:case 24:return gu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function nl(e){switch(e.tag){case 1:ho(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ia(),io(co),io(so),qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ma(e),null;case 13:return io(La),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(La),null;case 4:return Ia(),null;case 10:return ea(e),null;case 23:case 24:return gu(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ol(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Na(xa.current);var i,l=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in Ee(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&xr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===O?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var al="function"==typeof WeakMap?WeakMap:Map;function il(e,t,n){(n=la(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Hl=r),ol(0,t)},n}function ll(e,t,n){(n=la(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ol(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ql?ql=new Set([this]):ql.add(this),ol(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ul="function"==typeof WeakSet?WeakSet:Set;function sl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Lu(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$r(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function fl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Iu(n,e),Ru(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&St(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function dl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Iu(t,n);else{r=t;try{o()}catch(e){Lu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(sl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Lu(t,e)}break;case 5:sl(t);break;case 4:bl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vl(e){return 5===e.tag||3===e.tag||4===e.tag}function ml(e){e:{for(var t=e.return;null!==t;){if(vl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gl(e,n,t):yl(e,n,t)}function gl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(pl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),_e(e,o),t=_e(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Se(n,u):"dangerouslySetInnerHTML"===l?me(n,u):"children"===l?ge(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,St(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fl=Uo(),dl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void dl(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ul),t.forEach((function(t){var r=Du.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function kl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var El=Math.ceil,_l=S.ReactCurrentDispatcher,Cl=S.ReactCurrentOwner,xl=0,Tl=null,Al=null,Nl=0,Rl=0,Il=ao(0),Pl=0,Ml=null,Ll=0,Ol=0,Dl=0,zl=0,Vl=null,Fl=0,Ul=1/0;function jl(){Ul=Uo()+500}var Bl,$l=null,Wl=!1,Hl=null,ql=null,Ql=!1,Gl=null,Kl=90,Yl=[],Xl=[],Jl=null,Zl=0,eu=null,tu=-1,nu=0,ru=0,ou=null,au=!1;function iu(){return 0!=(48&xl)?Uo():-1!==tu?tu:tu=Uo()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===jo()?1:2;if(0===nu&&(nu=Ll),0!==Qo.transition){0!==ru&&(ru=null!==Vl?Vl.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=jo(),e=Ft(0!=(4&xl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Zl)throw Zl=0,eu=null,Error(i(185));if(null===(e=su(e,t)))return null;Bt(e,t,n),e===Tl&&(Dl|=t,4===Pl&&du(e,Nl));var r=jo();1===t?0!=(8&xl)&&0==(48&xl)?pu(e):(cu(e,n),0===xl&&(jl(),Ho())):(0==(4&xl)||98!==r&&99!==r||(null===Jl?Jl=new Set([e]):Jl.add(e)),cu(e,n)),Vl=e}function su(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-$t(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,Dt(s);var f=Ot;a[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=zt(e,e===Tl?Nl:0),t=Ot,0===r)null!==n&&(n!==Lo&&_o(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Lo&&_o(n)}15===t?(n=pu.bind(null,e),null===Do?(Do=[n],zo=Eo(No,qo)):Do.push(n),n=Lo):n=14===t?Wo(99,pu.bind(null,e)):Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),fu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fu(e){if(tu=-1,ru=nu=0,0!=(48&xl))throw Error(i(327));var t=e.callbackNode;if(Nu()&&e.callbackNode!==t)return null;var n=zt(e,e===Tl?Nl:0);if(0===n)return null;var r=n,o=xl;xl|=16;var a=wu();for(Tl===e&&Nl===r||(jl(),yu(e,r));;)try{Eu();break}catch(t){bu(e,t)}if(Zo(),_l.current=a,xl=o,null!==Al?r=0:(Tl=null,Nl=0,r=Pl),0!=(Ll&Dl))yu(e,0);else if(0!==r){if(2===r&&(xl|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(n=Vt(e))&&(r=Su(e,n))),1===r)throw t=Ml,yu(e,0),du(e,n),cu(e,Uo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:xu(e);break;case 3:if(du(e,n),(62914560&n)===n&&10<(r=Fl+500-Uo())){if(0!==zt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){iu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=jr(xu.bind(null,e),r);break}xu(e);break;case 4:if(du(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-$t(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=Uo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*El(n/1960))-n)){e.timeoutHandle=jr(xu.bind(null,e),n);break}xu(e);break;case 5:xu(e);break;default:throw Error(i(329))}}return cu(e,Uo()),e.callbackNode===t?fu.bind(null,e):null}function du(e,t){for(t&=~zl,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-$t(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&xl))throw Error(i(327));if(Nu(),e===Tl&&0!=(e.expiredLanes&Nl)){var t=Nl,n=Su(e,t);0!=(Ll&Dl)&&(n=Su(e,t=zt(e,t)))}else n=Su(e,t=zt(e,0));if(0!==e.tag&&2===n&&(xl|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(t=Vt(e))&&(n=Su(e,t))),1===n)throw n=Ml,yu(e,0),du(e,t),cu(e,Uo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,xu(e),cu(e,Uo()),null}function hu(e,t){var n=xl;xl|=1;try{return e(t)}finally{0===(xl=n)&&(jl(),Ho())}}function vu(e,t){var n=xl;xl&=-2,xl|=8;try{return e(t)}finally{0===(xl=n)&&(jl(),Ho())}}function mu(e,t){lo(Il,Rl),Rl|=t,Ll|=t}function gu(){Rl=Il.current,io(Il)}function yu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Br(n)),null!==Al)for(n=Al.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ia(),io(co),io(so),qa();break;case 5:Ma(r);break;case 4:Ia();break;case 13:case 19:io(La);break;case 10:ea(r);break;case 23:case 24:gu()}n=n.return}Tl=e,Al=Uu(e.current,null),Nl=Rl=Ll=t,Pl=0,Ml=null,zl=Dl=Ol=0}function bu(e,t){for(;;){var n=Al;try{if(Zo(),Qa.current=Ai,Za){for(var r=Ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if(Ka=0,Ja=Xa=Ya=null,ei=!1,Cl.current=null,null===n||null===n.return){Pl=1,Ml=t,Al=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=Nl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&La.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var m=d.updateQueue;if(null===m){var g=new Set;g.add(s),d.updateQueue=g}else m.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=la(-1,1);y.tag=2,ua(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new al,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Ou.bind(null,a,s,l);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Pl&&(Pl=2),u=rl(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,il(0,a,t));break e;case 1:a=u;var S=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof S.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===ql||!ql.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,ll(d,a,t));break e}}d=d.return}while(null!==d)}Cu(n)}catch(e){t=e,Al===n&&null!==n&&(Al=n=n.return);continue}break}}function wu(){var e=_l.current;return _l.current=Ai,null===e?Ai:e}function Su(e,t){var n=xl;xl|=16;var r=wu();for(Tl===e&&Nl===t||yu(e,t);;)try{ku();break}catch(t){bu(e,t)}if(Zo(),xl=n,_l.current=r,null!==Al)throw Error(i(261));return Tl=null,Nl=0,Pl}function ku(){for(;null!==Al;)_u(Al)}function Eu(){for(;null!==Al&&!Co();)_u(Al)}function _u(e){var t=Bl(e.alternate,e,Rl);e.memoizedProps=e.pendingProps,null===t?Cu(e):Al=t,Cl.current=null}function Cu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,Rl)))return void(Al=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Rl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Al=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Al=t);Al=t=e}while(null!==t);0===Pl&&(Pl=5)}function xu(e){var t=jo();return $o(99,Tu.bind(null,e,t)),null}function Tu(e,t){do{Nu()}while(null!==Gl);if(0!=(48&xl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-$t(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==Jl&&0==(24&r)&&Jl.has(e)&&Jl.delete(e),e===Tl&&(Al=Tl=null,Nl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=xl,xl|=32,Cl.current=null,zr=Gt,pr(l=dr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,v=0,m=l,g=null;t:for(;;){for(var y;m!==u||0!==a&&3!==m.nodeType||(d=f+a),m!==s||0!==c&&3!==m.nodeType||(p=f+c),3===m.nodeType&&(f+=m.nodeValue.length),null!==(y=m.firstChild);)g=m,m=y;for(;;){if(m===l)break t;if(g===u&&++h===a&&(d=f),g===s&&++v===c&&(p=f),null!==(y=m.nextSibling))break;g=(m=g).parentNode}m=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Vr={focusedElem:l,selectionRange:u},Gt=!1,ou=null,au=!1,$l=r;do{try{Au()}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);ou=null,$l=r;do{try{for(l=e;null!==$l;){var b=$l.flags;if(16&b&&ge($l.stateNode,""),128&b){var w=$l.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&b){case 2:ml($l),$l.flags&=-3;break;case 6:ml($l),$l.flags&=-3,wl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,wl($l.alternate,$l);break;case 4:wl($l.alternate,$l);break;case 8:bl(l,u=$l);var k=u.alternate;hl(u),null!==k&&hl(k)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);if(S=Vr,w=dr(),b=S.focusedElem,l=S.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(S,b.value.length)):(S=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),u=b.textContent.length,k=Math.min(l.start,u),l=void 0===l.end?k:Math.min(l.end,u),!S.extend&&k>l&&(u=l,l=k,k=u),u=cr(b,k),a=cr(b,l),u&&a&&(1!==S.rangeCount||S.anchorNode!==u.node||S.anchorOffset!==u.offset||S.focusNode!==a.node||S.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),S.removeAllRanges(),k>l?(S.addRange(w),S.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),S.addRange(w))))),w=[];for(S=b;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(S=w[b]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Gt=!!zr,Vr=zr=null,e.current=n,$l=r;do{try{for(b=e;null!==$l;){var E=$l.flags;if(36&E&&fl(b,$l.alternate,$l),128&E){w=void 0;var _=$l.ref;if(null!==_){var C=$l.stateNode;switch($l.tag){case 5:w=C;break;default:w=C}"function"==typeof _?_(w):_.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Oo(),xl=o}else e.current=n;if(Ql)Ql=!1,Gl=e,Kl=t;else for($l=r;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((E=$l).sibling=null,E.stateNode=null),$l=t;if(0===(r=e.pendingLanes)&&(ql=null),1===r?e===eu?Zl++:(Zl=0,eu=e):Zl=0,n=n.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,Uo()),Wl)throw Wl=!1,e=Hl,Hl=null,e;return 0!=(8&xl)||Ho(),null}function Au(){for(;null!==$l;){var e=$l.alternate;au||null===ou||(0!=(8&$l.flags)?Ze($l,ou)&&(au=!0):13===$l.tag&&kl(e,$l)&&Ze($l,ou)&&(au=!0));var t=$l.flags;0!=(256&t)&&cl(e,$l),0==(512&t)||Ql||(Ql=!0,Wo(97,(function(){return Nu(),null}))),$l=$l.nextEffect}}function Nu(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,$o(e,Pu)}return!1}function Ru(e,t){Yl.push(t,e),Ql||(Ql=!0,Wo(97,(function(){return Nu(),null})))}function Iu(e,t){Xl.push(t,e),Ql||(Ql=!0,Wo(97,(function(){return Nu(),null})))}function Pu(){if(null===Gl)return!1;var e=Gl;if(Gl=null,0!=(48&xl))throw Error(i(331));var t=xl;xl|=32;var n=Xl;Xl=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Lu(a,e)}}for(n=Yl,Yl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Lu(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return xl=t,Ho(),!0}function Mu(e,t,n){ua(e,t=il(0,t=rl(n,t),1)),t=iu(),null!==(e=su(e,1))&&(Bt(e,1,t),cu(e,t))}function Lu(e,t){if(3===e.tag)Mu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Mu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r))){var o=ll(n,e=rl(t,e),1);if(ua(n,o),o=iu(),null!==(n=su(n,1)))Bt(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ou(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=iu(),e.pingedLanes|=e.suspendedLanes&n,Tl===e&&(Nl&n)===n&&(4===Pl||3===Pl&&(62914560&Nl)===Nl&&500>Uo()-Fl?yu(e,0):zl|=n),cu(e,t)}function Du(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===jo()?1:2:(0===nu&&(nu=Ll),0===(t=Ut(62914560&~nu))&&(t=4194304))),n=iu(),null!==(e=su(e,t))&&(Bt(e,t,n),cu(e,n))}function zu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Vu(e,t,n,r){return new zu(e,t,n,r)}function Fu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Uu(e,t){var n=e.alternate;return null===n?((n=Vu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function ju(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Fu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case _:return Bu(n.children,o,a,t);case D:l=8,o|=16;break;case C:l=8,o|=1;break;case x:return(e=Vu(12,n,t,8|o)).elementType=x,e.type=x,e.lanes=a,e;case R:return(e=Vu(13,n,t,o)).type=R,e.elementType=R,e.lanes=a,e;case I:return(e=Vu(19,n,t,o)).elementType=I,e.lanes=a,e;case z:return $u(n,o,a,t);case V:return(e=Vu(24,n,t,o)).elementType=V,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:l=10;break e;case A:l=9;break e;case N:l=11;break e;case P:l=14;break e;case M:l=16,r=null;break e;case L:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Vu(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Bu(e,t,n,r){return(e=Vu(7,e,r,t)).lanes=n,e}function $u(e,t,n,r){return(e=Vu(23,e,r,t)).elementType=z,e.lanes=n,e}function Wu(e,t,n){return(e=Vu(6,e,null,t)).lanes=n,e}function Hu(e,t,n){return(t=Vu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=jt(0),this.expirationTimes=jt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=jt(0),this.mutableSourceEagerHydrationData=null}function Qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gu(e,t,n,r){var o=t.current,a=iu(),l=lu(o);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(ho(s)){n=go(n,s,u);break e}}n=u}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=la(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),uu(o,l,a),l}function Ku(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xu(e,t){Yu(e,t),(e=e.alternate)&&Yu(e,t)}function Ju(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new qu(e,t,null!=n&&!0===n.hydrate),t=Vu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,aa(t),e[Yr]=n.current,Ar(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ku(i);l.call(e)}}Gu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ju(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Ku(i);u.call(e)}}vu((function(){Gu(t,i,e,o)}))}return Ku(i)}function ts(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zu(t))throw Error(i(200));return Qu(e,t,null,n)}Bl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Mi=!0;else{if(0==(n&r)){switch(Mi=!1,t.tag){case 3:$i(t),Wa();break;case 5:Pa(t);break;case 1:ho(t.type)&&yo(t);break;case 4:Ra(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;lo(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Gi(e,t,n):(lo(La,1&La.current),null!==(t=Zi(e,t,n))?t.sibling:null);lo(La,1&La.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ji(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(La,La.current),r)break;return null;case 23:case 24:return t.lanes=0,Vi(e,t,n)}return Zi(e,t,n)}Mi=0!=(16384&e.flags)}else Mi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,so.current),na(t,n),o=ri(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var a=!0;yo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,aa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pa(t,r,l,e),o.updater=ha,t.stateNode=o,o._reactInternals=t,ya(t,r,e,n),t=Bi(null,t,r,!0,a,n)}else t.tag=0,Li(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Fu(e)?1:0;if(null!=e){if((e=e.$$typeof)===N)return 11;if(e===P)return 14}return 2}(o),e=Go(o,e),a){case 0:t=Ui(null,t,o,e,n);break e;case 1:t=ji(null,t,o,e,n);break e;case 11:t=Oi(null,t,o,e,n);break e;case 14:t=Di(null,t,o,Go(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,ji(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if($i(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ia(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=Zi(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(za=Wr(t.stateNode.containerInfo.firstChild),Da=t,a=Va=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(n=_a(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Li(e,t,r,n),Wa();t=t.child}return t;case 5:return Pa(t),null===e&&ja(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Ur(r,o)?l=null:null!==a&&Ur(r,a)&&(t.flags|=16),Fi(e,t),Li(e,t,l,n),t.child;case 6:return null===e&&ja(t),null;case 13:return Gi(e,t,n);case 4:return Ra(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ea(t,null,r,n):Li(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Oi(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Li(e,t,t.pendingProps,n),t.child;case 8:case 12:return Li(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(lo(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=ir(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!co.current){t=Zi(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=la(-1,n&-n)).tag=2,ua(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ta(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Li(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,na(t,n),r=r(o=ra(o,a.unstable_observedBits)),t.flags|=1,Li(e,t,r,n),t.child;case 14:return a=Go(o=t.type,t.pendingProps),Di(e,t,o,a=Go(o.type,a),r,n);case 15:return zi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,yo(t)):e=!1,na(t,n),ma(t,r,o),ya(t,r,o,n),Bi(null,t,r,!0,e,n);case 19:return Ji(e,t,n);case 23:case 24:return Vi(e,t,n)}throw Error(i(156,t.tag))},Ju.prototype.render=function(e){Gu(e,this._internalRoot,null,null)},Ju.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gu(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(uu(e,4,iu()),Xu(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,iu()),Xu(e,67108864))},nt=function(e){if(13===e.tag){var t=iu(),n=lu(e);uu(e,n,t),Xu(e,n)}},rt=function(e,t){return t()},xe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(i(90));X(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Pe=hu,Me=function(e,t,n,r,o){var a=xl;xl|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(xl=a)&&(jl(),Ho())}},Le=function(){0==(49&xl)&&(function(){if(null!==Jl){var e=Jl;Jl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Uo())}))}Ho()}(),Nu())},Oe=function(e,t){var n=xl;xl|=2;try{return e(t)}finally{0===(xl=n)&&(jl(),Ho())}};var ns={Events:[Zr,eo,to,Re,Ie,Nu,{current:!1}]},rs={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},os={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:S.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var as=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!as.isDisabled&&as.supportsFiber)try{wo=as.inject(os),So=as}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ns,t.createPortal=ts,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=xl;if(0!=(48&n))return e(t);xl|=1;try{if(e)return $o(99,e.bind(null,t))}finally{xl=n,Ho()}},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(i(200));return es(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zu(t))throw Error(i(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(i(40));return!!e._reactRootContainer&&(vu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=hu,t.unstable_createPortal=function(e,t){return ts(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return es(e,t,n,!1,r)},t.version="17.0.1"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case m:case v:case u:return e;default:return t}}case o:return t}}}function k(e){return S(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=m,t.Memo=v,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===s},t.isContextProvider=function(e){return S(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===a},t.isLazy=function(e){return S(e)===m},t.isMemo=function(e){return S(e)===v},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===i},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===v||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=S},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=m.prototype;var b=y.prototype=new g;b.constructor=y,r(b,m.prototype),b.isPureReactComponent=!0;var w={current:null},S=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,r)&&!k.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function x(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+x(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),T(i,t,n,"",(function(e){return e}))):null!=i&&(_(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+x(l=e[s],s);u+=T(l,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=T(l=l.value,t,n,c=r+x(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function A(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function N(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function I(){var e=R.current;if(null===e)throw Error(p(321));return e}var P={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:A,forEach:function(e,t,n){A(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)S.call(t,c)&&!k.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return I().useCallback(e,t)},t.useContext=function(e,t){return I().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return I().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return I().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return I().useLayoutEffect(e,t)},t.useMemo=function(e,t){return I().useMemo(e,t)},t.useReducer=function(e,t,n){return I().useReducer(e,t,n)},t.useRef=function(e){return I().useRef(e)},t.useState=function(e){return I().useState(e)},t.version="17.0.1"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,S=w.port2;w.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();b=e+y;try{m(!0,e)?S.postMessage(null):(v=!1,m=null)}catch(e){throw S.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,S.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>C(i,n))void 0!==u&&0>C(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var x=[],T=[],A=1,N=null,R=3,I=!1,P=!1,M=!1;function L(e){for(var t=E(T);null!==t;){if(null===t.callback)_(T);else{if(!(t.startTime<=e))break;_(T),t.sortIndex=t.expirationTime,k(x,t)}t=E(T)}}function O(e){if(M=!1,L(e),!P)if(null!==E(x))P=!0,n(D);else{var t=E(T);null!==t&&r(O,t.startTime-e)}}function D(e,n){P=!1,M&&(M=!1,o()),I=!0;var a=R;try{for(L(n),N=E(x);null!==N&&(!(N.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=N.callback;if("function"==typeof i){N.callback=null,R=N.priorityLevel;var l=i(N.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?N.callback=l:N===E(x)&&_(x),L(n)}else _(x);N=E(x)}if(null!==N)var u=!0;else{var s=E(T);null!==s&&r(O,s.startTime-n),u=!1}return u}finally{N=null,R=a,I=!1}}var z=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){P||I||(P=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return E(x)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:A++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,k(T,e),null===E(x)&&e===E(T)&&(M?o():M=!0,r(O,i-l))):(e.sortIndex=u,k(x,e),P||I||(P=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<a.length;u++){var s=a[u];if(!l(s))return!1;var c=e[s],f=t[s];if(!1===(o=n?n.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";var e=n(935),t=n(294);const r=new Map;function o(e){var t;return null!==(t=r.get(e))&&void 0!==t&&t}o.setPass=e=>{r.set(e,!0)},o.setFail=e=>{r.set(e,!1)};var a=o,i=function(e,t){const n=new Map;return e.forEach(((e,r)=>{n.set(r,t(e,r))})),n},l=function(e,t){if(null!=e)return e;throw new Error(null!=t?t:"Got unexpected null or undefined")},u=function(e,t,n){return n()},s=function(e){return e},c={setByAddingToSet:function(e,t){const n=new Set(e);return n.add(t),n},setByDeletingFromSet:function(e,t){const n=new Set(e);return n.delete(t),n},mapBySettingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n),r},mapByUpdatingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n(r.get(t))),r},mapByDeletingFromMap:function(e,t){const n=new Map(e);return n.delete(t),n},mapByDeletingMultipleFromMap:function(e,t){const n=new Map(e);return t.forEach((e=>n.delete(e))),n}};function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class d{constructor(e){f(this,"key",void 0),this.key=e}}class p extends d{}class h extends d{}var v={AbstractRecoilValue:d,RecoilState:p,RecoilValueReadOnly:h,isRecoilValue:function(e){return e instanceof p||e instanceof h}},m=v.AbstractRecoilValue,g=v.RecoilState,y=v.RecoilValueReadOnly,b=v.isRecoilValue,w=Object.freeze({__proto__:null,AbstractRecoilValue:m,RecoilState:g,RecoilValueReadOnly:y,isRecoilValue:b});class S{}const k=new S;class E extends Error{constructor(e){super(`Tried to set the value of Recoil selector ${e} using an updater function, but it is an async selector in a pending or error state; this is not supported.`)}}const _=new Map,C=new Map;class x extends Error{}var T={nodes:_,recoilValues:C,registerNode:function(e){if(_.has(e.key)){const t=`Duplicate atom key "${e.key}". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`;console.warn(t)}_.set(e.key,e);const t=null==e.set?new w.RecoilValueReadOnly(e.key):new w.RecoilState(e.key);return C.set(e.key,t),t},getNode:function(e){const t=_.get(e);if(null==t)throw new x(`Missing definition for RecoilValue: "${e}""`);return t},getNodeMaybe:function(e){return _.get(e)},NodeMissingError:x,DefaultValue:S,DEFAULT_VALUE:k,RecoilValueNotReady:E};const{mapByDeletingFromMap:A,mapBySettingInMap:N,setByAddingToSet:R}=c,{getNode:I,getNodeMaybe:P}=T,M=Object.freeze(new Set);class L extends Error{}var O={getNodeLoadable:function(e,t,n){return I(n).get(e,t)},peekNodeLoadable:function(e,t,n){return I(n).peek(e,t)},setNodeValue:function(e,t,n,r){const o=I(n);if(null==o.set)throw new L(`Attempt to set read-only RecoilValue: ${n}`);return o.set(e,t,r)},cleanUpNode:function(e,t){I(t).cleanUp(e)},setUnvalidatedAtomValue_DEPRECATED:function(e,t,n){var r;const o=P(t);return null==o||null===(r=o.invalidate)||void 0===r||r.call(o,e),{...e,atomValues:A(e.atomValues,t),nonvalidatedAtoms:N(e.nonvalidatedAtoms,t,n),dirtyAtoms:R(e.dirtyAtoms,t)}},getDownstreamNodes:function(e,t,n){const r=new Set,o=Array.from(n),a=e.getGraph(t.version);for(let e=o.pop();e;e=o.pop()){var i;r.add(e);const t=null!==(i=a.nodeToNodeSubscriptions.get(e))&&void 0!==i?i:M;for(const e of t)r.has(e)||o.push(e)}return r}},D=function(e,...t){const n=new Set;e:for(const r of e){for(const e of t)if(e.has(r))continue e;n.add(r)}return n};function z(e,t,n){const{nodeDeps:r,nodeToNodeSubscriptions:o}=t;e.forEach(((e,t)=>{const a=r.get(t);a&&n&&a!==n.nodeDeps.get(t)||(r.set(t,new Set(e)),(null==a?e:D(e,a)).forEach((e=>{o.has(e)||o.set(e,new Set),l(o.get(e)).add(t)})),a&&D(a,e).forEach((e=>{if(!o.has(e))return;const n=l(o.get(e));n.delete(t),0===n.size&&o.delete(e)})))}))}var V={addToDependencyMap:function(e,t,n){n.has(e)||n.set(e,new Set),l(n.get(e)).add(t)},cloneGraph:function(e){return{nodeDeps:i(e.nodeDeps,(e=>new Set(e))),nodeToNodeSubscriptions:i(e.nodeToNodeSubscriptions,(e=>new Set(e)))}},graph:function(){return{nodeDeps:new Map,nodeToNodeSubscriptions:new Map}},mergeDepsIntoDependencyMap:function(e,t){e.forEach(((e,n)=>{t.has(n)||t.set(n,new Set);const r=l(t.get(n));e.forEach((e=>r.add(e)))}))},saveDependencyMapToStore:function(e,t,n){var r,o,a,i;const l=t.getState();n!==l.currentTree.version&&n!==(null===(r=l.nextTree)||void 0===r?void 0:r.version)&&(null===(o=l.previousTree)||void 0===o||o.version);const u=t.getGraph(n);if(z(e,u),n===(null===(a=l.previousTree)||void 0===a?void 0:a.version)&&z(e,t.getGraph(l.currentTree.version),u),n===(null===(i=l.previousTree)||void 0===i?void 0:i.version)||n===l.currentTree.version){var s;const n=null===(s=l.nextTree)||void 0===s?void 0:s.version;void 0!==n&&z(e,t.getGraph(n),u)}}};const{getDownstreamNodes:F,getNodeLoadable:U,setNodeValue:j}=O,{saveDependencyMapToStore:B}=V,{getNodeMaybe:$}=T,{DefaultValue:W,RecoilValueNotReady:H}=T,{AbstractRecoilValue:q,RecoilState:Q,RecoilValueReadOnly:G,isRecoilValue:K}=w;function Y(e,t,n){if("set"===n.type){const{recoilValue:r,valueOrUpdater:o}=n,a=function(e,t,{key:n},r){if("function"==typeof r){const o=U(e,t,n)[1];if("loading"===o.state)throw new H(n);if("hasError"===o.state)throw o.contents;return r(o.contents)}return r}(e,t,r,o),[i,l]=j(e,t,r.key,a);B(i,e,t.version);for(const[e,n]of l.entries())X(t,e,n)}else if("setLoadable"===n.type){const{recoilValue:{key:e},loadable:r}=n;X(t,e,r)}else if("markModified"===n.type){const{recoilValue:{key:e}}=n;t.dirtyAtoms.add(e)}else if("setUnvalidated"===n.type){var r;const{recoilValue:{key:e},unvalidatedValue:o}=n,a=$(e);null==a||null===(r=a.invalidate)||void 0===r||r.call(a,t),t.atomValues.delete(e),t.nonvalidatedAtoms.set(e,o),t.dirtyAtoms.add(e)}else n.type}function X(e,t,n){"hasValue"===n.state&&n.contents instanceof W?e.atomValues.delete(t):e.atomValues.set(t,n),e.dirtyAtoms.add(t),e.nonvalidatedAtoms.delete(t)}function J(e,t){e.replaceState((n=>{const r=function(e){return{...e,atomValues:new Map(e.atomValues),nonvalidatedAtoms:new Map(e.nonvalidatedAtoms),dirtyAtoms:new Set(e.dirtyAtoms)}}(n);for(const n of t)Y(e,r,n);return te(e,r),r}))}function Z(e,t,n,r){if(ee.length){const n=ee[ee.length-1];let r=n.get(e);r||n.set(e,r=[]),r.push(t)}else u(r,n,(()=>J(e,[t])))}const ee=[];function te(e,t){const n=F(e,t,t.dirtyAtoms);for(const e of n){var r,o;null===(r=$(e))||void 0===r||null===(o=r.invalidate)||void 0===o||o.call(r,t)}}function ne(e,t,n){Z(e,{type:"set",recoilValue:t,valueOrUpdater:n},t.key,"set Recoil value")}let re=0;var oe={RecoilValueReadOnly:G,AbstractRecoilValue:q,RecoilState:Q,getRecoilValueAsLoadable:function(e,{key:t},n=e.getState().currentTree){var r,o;const i=e.getState();n.version!==i.currentTree.version&&n.version!==(null===(r=i.nextTree)||void 0===r?void 0:r.version)&&(n.version,null===(o=i.previousTree)||void 0===o||o.version);const[l,u]=U(e,n,t);return a("recoil_async_selector_refactor")||B(l,e,n.version),u},setRecoilValue:ne,setRecoilValueLoadable:function(e,t,n){if(n instanceof W)return ne(e,t,n);Z(e,{type:"setLoadable",recoilValue:t,loadable:n},t.key,"set Recoil value")},markRecoilValueModified:function(e,t){Z(e,{type:"markModified",recoilValue:t},t.key,"mark RecoilValue modified")},setUnvalidatedRecoilValue:function(e,t,n){Z(e,{type:"setUnvalidated",recoilValue:t,unvalidatedValue:n},t.key,"set Recoil value")},subscribeToRecoilValue:function(e,{key:t},n,r=null){const o=re++,a=e.getState();return a.nodeToComponentSubscriptions.has(t)||a.nodeToComponentSubscriptions.set(t,new Map),l(a.nodeToComponentSubscriptions.get(t)).set(o,[null!=r?r:"<not captured>",n]),{release:()=>{const n=e.getState(),r=n.nodeToComponentSubscriptions.get(t);void 0!==r&&r.has(o)&&(r.delete(o),0===r.size&&n.nodeToComponentSubscriptions.delete(t))}}},isRecoilValue:K,applyAtomValueWrites:function(e,t){const n=i(e,(e=>e));return t.forEach(((e,t)=>{"hasValue"===e.state&&e.contents instanceof W?n.delete(t):n.set(t,e)})),n},batchStart:function(){const e=new Map;return ee.push(e),()=>{for(const[t,n]of e)u("Recoil batched updates","-",(()=>J(t,n)));ee.pop()}},invalidateDownstreams_FOR_TESTING:te};const{unstable_batchedUpdates:ae}=e;var ie={unstable_batchedUpdates:ae};const{batchStart:le}=oe,{unstable_batchedUpdates:ue}=ie;let se=ue;var ce={getBatcher:()=>se,setBatcher:e=>{se=e},batchUpdates:e=>{se((()=>{let t=()=>{};try{t=le(),e()}finally{t()}}))}},fe=function(e,t){t()},de=function*(e,t){let n=0;for(const r of e)t(r,n++)&&(yield r)};const{graph:pe}=V;let he=0;const ve=()=>he++;function me(){const e=ve();return{version:e,stateID:e,transactionMetadata:{},dirtyAtoms:new Set,atomValues:new Map,nonvalidatedAtoms:new Map}}var ge={makeEmptyTreeState:me,makeEmptyStoreState:function(){const e=me();return{currentTree:e,nextTree:null,previousTree:null,knownAtoms:new Set,knownSelectors:new Set,transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(e.version,pe()),versionsUsedByComponent:new Map}},getNextTreeStateVersion:ve};const{batchUpdates:ye}=ce,{getDownstreamNodes:be,peekNodeLoadable:we}=O,{graph:Se}=V,{DEFAULT_VALUE:ke,recoilValues:Ee}=T,{getRecoilValueAsLoadable:_e,setRecoilValue:Ce}=oe,{getNextTreeStateVersion:xe,makeEmptyStoreState:Te}=ge;function Ae(e){return t=e,n=e=>l(Ee.get(e)),function*(){let e=0;for(const r of t)yield n(r,e++)}();var t,n}class Ne{constructor(e){f(this,"_store",void 0),f(this,"getLoadable",(e=>_e(this._store,e))),f(this,"getPromise",(e=>this.getLoadable(e).toPromise())),f(this,"getNodes_UNSTABLE",(e=>{if(!0===(null==e?void 0:e.isModified))return!1===(null==e?void 0:e.isInitialized)?[]:Ae(this._store.getState().currentTree.dirtyAtoms);const t=this._store.getState().knownAtoms,n=this._store.getState().knownSelectors;return null==(null==e?void 0:e.isInitialized)?Ee.values():!0===e.isInitialized?Ae(function*(e){for(const t of e)for(const e of t)yield e}([this._store.getState().knownAtoms,this._store.getState().knownSelectors])):de(Ee.values(),(({key:e})=>!t.has(e)&&!n.has(e)))})),f(this,"getDeps_UNSTABLE",(e=>{this.getLoadable(e);const t=this._store.getGraph(this._store.getState().currentTree.version).nodeDeps.get(e.key);return Ae(null!=t?t:[])})),f(this,"getSubscribers_UNSTABLE",(({key:e})=>{const t=this._store.getState().currentTree;return{nodes:Ae(de(be(this._store,t,new Set([e])),(t=>t!==e)))}})),f(this,"getInfo_UNSTABLE",(e=>{var t;const{key:n}=e,r=this._store.getState().currentTree,o=this._store.getGraph(r.version),a=this._store.getState().knownAtoms.has(n)?"atom":this._store.getState().knownSelectors.has(n)?"selector":void 0;return{loadable:we(this._store,r,n),isActive:this._store.getState().knownAtoms.has(n)||this._store.getState().knownSelectors.has(n),isSet:"selector"!==a&&r.atomValues.has(n),isModified:r.dirtyAtoms.has(n),type:a,deps:Ae(null!==(t=o.nodeDeps.get(n))&&void 0!==t?t:[]),subscribers:this.getSubscribers_UNSTABLE(e)}})),f(this,"map",(e=>{const t=new Pe(this);return e(t),Ie(t.getStore_INTERNAL())})),f(this,"asyncMap",(async e=>{const t=new Pe(this);return await e(t),Ie(t.getStore_INTERNAL())})),this._store={getState:()=>e,replaceState:t=>{e.currentTree=t(e.currentTree)},getGraph:t=>{const n=e.graphsByVersion;if(n.has(t))return l(n.get(t));const r=Se();return n.set(t,r),r},subscribeToTransactions:()=>({release:()=>{}}),addTransactionMetadata:()=>{throw new Error("Cannot subscribe to Snapshots")}}}getStore_INTERNAL(){return this._store}getID(){return this.getID_INTERNAL()}getID_INTERNAL(){return this._store.getState().currentTree.stateID}}function Re(e,t,n=!1){const r=e.getState(),o=n?xe():t.version;return{currentTree:n?{version:o,stateID:o,transactionMetadata:{...t.transactionMetadata},dirtyAtoms:new Set(t.dirtyAtoms),atomValues:new Map(t.atomValues),nonvalidatedAtoms:new Map(t.nonvalidatedAtoms)}:t,nextTree:null,previousTree:null,knownAtoms:new Set(r.knownAtoms),knownSelectors:new Set(r.knownSelectors),transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(o,e.getGraph(t.version)),versionsUsedByComponent:new Map}}function Ie(e,t="current"){const n=e.getState(),r="current"===t?n.currentTree:l(n.previousTree);return new Ne(Re(e,r))}class Pe extends Ne{constructor(e){super(Re(e.getStore_INTERNAL(),e.getStore_INTERNAL().getState().currentTree,!0)),f(this,"set",((e,t)=>{const n=this.getStore_INTERNAL();ye((()=>{Ce(n,e,t)}))})),f(this,"reset",(e=>ye((()=>Ce(this.getStore_INTERNAL(),e,ke)))))}}var Me={Snapshot:Ne,MutableSnapshot:Pe,freshSnapshot:function(e){const t=new Ne(Te());return null!=e?t.map(e):t},cloneSnapshot:Ie},Le=Me.Snapshot,Oe=Me.MutableSnapshot,De=Me.freshSnapshot,ze=Me.cloneSnapshot,Ve=Object.freeze({__proto__:null,Snapshot:Le,MutableSnapshot:Oe,freshSnapshot:De,cloneSnapshot:ze}),Fe=function(...e){const t=new Set;for(const n of e)for(const e of n)t.add(e);return t};const{useContext:Ue,useEffect:je,useMemo:Be,useRef:$e,useState:We}=t,{cleanUpNode:He,getDownstreamNodes:qe,setNodeValue:Qe,setUnvalidatedAtomValue_DEPRECATED:Ge}=O,{graph:Ke,saveDependencyMapToStore:Ye}=V,{cloneGraph:Xe}=V,{applyAtomValueWrites:Je}=oe,{freshSnapshot:Ze}=Ve,{getNextTreeStateVersion:et,makeEmptyStoreState:tt}=ge,{mapByDeletingMultipleFromMap:nt}=c;function rt(){throw new Error("This component must be used inside a <RecoilRoot> component.")}const ot=Object.freeze({getState:rt,replaceState:rt,getGraph:rt,subscribeToTransactions:rt,addTransactionMetadata:rt});let at=!1;function it(e){if(at)throw new Error("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");if(null===e.nextTree){const t=e.currentTree.version,n=et();e.nextTree={...e.currentTree,version:n,stateID:n,dirtyAtoms:new Set,transactionMetadata:{}},e.graphsByVersion.set(n,Xe(l(e.graphsByVersion.get(t))))}}const lt=t.createContext({current:ot}),ut=()=>Ue(lt),st=t.createContext(null);function ct(e){const t=e.getState(),n=t.currentTree,r=n.dirtyAtoms;if(r.size){for(const[n,o]of t.nodeTransactionSubscriptions)if(r.has(n))for(const[t,n]of o)n(e);for(const[n,r]of t.transactionSubscriptions)r(e);const o=qe(e,n,r);for(const e of o){const r=t.nodeToComponentSubscriptions.get(e);if(r)for(const[e,[t,o]]of r)o(n)}let a="[available in dev build]";t.suspendedComponentResolvers.forEach((e=>u("value became available, waking components",a,e)))}t.queuedComponentCallbacks_DEPRECATED.forEach((e=>e(n))),t.queuedComponentCallbacks_DEPRECATED.splice(0,t.queuedComponentCallbacks_DEPRECATED.length)}function ft(e){const t=ut(),[n,r]=We([]);return e.setNotifyBatcherOfChange((()=>r({}))),je((()=>{fe("Batcher",(()=>{const e=t.current.getState(),{nextTree:n}=e;if(null===n)return;e.previousTree=e.currentTree,e.currentTree=n,e.nextTree=null,ct(t.current);const r=l(e.previousTree).version;e.graphsByVersion.delete(r),e.previousTree=null}))})),null}let dt=0;var pt,ht={useStoreRef:ut,useRecoilMutableSource:()=>Ue(st),RecoilRoot:function({initializeState_DEPRECATED:e,initializeState:n,store_INTERNAL:r,children:o}){var a;let i;const u=$e(null),s=null!==(a=t.createMutableSource)&&void 0!==a?a:t.unstable_createMutableSource,c=null!=r?r:{getState:()=>i.current,replaceState:e=>{const t=f.current.getState();it(t);const n=l(t.nextTree);let r;try{at=!0,r=e(n)}finally{at=!1}r!==n&&(t.nextTree=r,l(u.current)())},getGraph:e=>{const t=i.current.graphsByVersion;if(t.has(e))return l(t.get(e));const n=Ke();return t.set(e,n),n},subscribeToTransactions:(e,t)=>{if(null==t){const{transactionSubscriptions:t}=f.current.getState(),n=dt++;return t.set(n,e),{release:()=>{t.delete(n)}}}{const{nodeTransactionSubscriptions:n}=f.current.getState();n.has(t)||n.set(t,new Map);const r=dt++;return l(n.get(t)).set(r,e),{release:()=>{const e=n.get(t);e&&(e.delete(r),0===e.size&&n.delete(t))}}}},addTransactionMetadata:e=>{it(f.current.getState());for(const t of Object.keys(e))l(f.current.getState().nextTree).transactionMetadata[t]=e[t]}},f=$e(c);i=$e(null!=e?function(e,t){const n=tt();return t({set:(t,r)=>{const o=n.currentTree,[a,i]=Qe(e,o,t.key,r),l=new Set(i.keys());Ye(a,e,o.version);const u=nt(o.nonvalidatedAtoms,l);n.currentTree={...o,dirtyAtoms:Fe(o.dirtyAtoms,l),atomValues:Je(o.atomValues,i),nonvalidatedAtoms:u}},setUnvalidatedAtomValues:e=>{e.forEach(((e,t)=>{n.currentTree=Ge(n.currentTree,t,e)}))}}),n}(c,e):null!=n?function(e){return Ze().map(e).getStore_INTERNAL().getState()}(n):tt());const d=Be((()=>s?s(i,(()=>i.current.currentTree.version)):null),[s,i]);return je((()=>()=>{for(const e of f.current.getState().knownAtoms)He(f.current,e)}),[]),t.createElement(lt.Provider,{value:f},t.createElement(st.Provider,{value:d},t.createElement(ft,{setNotifyBatcherOfChange:function(e){u.current=e}}),o))},sendEndOfBatchNotifications_FOR_TESTING:ct},vt=function(e,t){if(!e)throw new Error(t)};const mt=null!==(pt=t.useMutableSource)&&void 0!==pt?pt:t.unstable_useMutableSource;var gt={mutableSourceExists:function(){return mt&&!("undefined"!=typeof window&&window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE)},useMutableSource:mt};const{useRef:yt}=t;var bt=function(){return yt(),"<component name not available>"};const{useCallback:wt,useEffect:St,useMemo:kt,useRef:Et,useState:_t}=t,{batchUpdates:Ct}=ce,{DEFAULT_VALUE:xt,getNode:Tt,nodes:At}=T,{useRecoilMutableSource:Nt,useStoreRef:Rt}=ht,{isRecoilValue:It}=w,{AbstractRecoilValue:Pt,getRecoilValueAsLoadable:Mt,setRecoilValue:Lt,setRecoilValueLoadable:Ot,setUnvalidatedRecoilValue:Dt,subscribeToRecoilValue:zt}=oe,{Snapshot:Vt,cloneSnapshot:Ft}=Ve,{setByAddingToSet:Ut}=c,{mutableSourceExists:jt,useMutableSource:Bt}=gt;function $t(e,t,n){if("hasValue"===e.state)return e.contents;if("loading"===e.state)throw new Promise((e=>{n.current.getState().suspendedComponentResolvers.add(e)}));throw"hasError"===e.state?e.contents:new Error(`Invalid value of loadable atom "${t.key}"`)}function Wt(e){return jt()?function(e){const t=Rt(),n=wt((()=>Mt(t.current,e,t.current.getState().currentTree)),[t,e]),r=bt(),o=wt(((n,o)=>{const a=t.current,i=zt(a,e,(()=>{u("RecoilValue subscription fired",e.key,(()=>{o()}))}),r);return()=>i.release(a)}),[e,t,r]);return Bt(Nt(),n,o)}(e):function(e){const t=Rt(),[n,r]=_t([]),o=bt();return St((()=>{const n=t.current,a=zt(n,e,(t=>{u("RecoilValue subscription fired",e.key,(()=>{r([])}))}),o);return u("initial update on subscribing",e.key,(()=>{n.getState().nextTree?n.getState().queuedComponentCallbacks_DEPRECATED.push(s((()=>{r([])}))):r([])})),()=>a.release(n)}),[e,t]),Mt(t.current,e)}(e)}function Ht(e){const t=Rt();return $t(Wt(e),e,t)}function qt(e){const t=Rt();return wt((n=>{Lt(t.current,e,n)}),[t,e])}function Qt(e){const t=Rt();St((()=>t.current.subscribeToTransactions(e).release),[e,t])}function Gt(e){const t=e.atomValues,n=i(function(e,t){const n=new Map;for(const[r,o]of e)t(o,r)&&n.set(r,o);return n}(t,((e,t)=>{const n=Tt(t).persistence_UNSTABLE;return null!=n&&"none"!==n.type&&"hasValue"===e.state})),(e=>e.contents));return function(...e){const t=new Map;for(let n=0;n<e.length;n++){const r=e[n].keys();let o;for(;!(o=r.next()).done;)t.set(o.value,e[n].get(o.value))}return t}(e.nonvalidatedAtoms,n)}function Kt(){const e=Rt();return wt((t=>{var n;const r=e.current.getState(),o=null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree,a=t.getStore_INTERNAL().getState().currentTree;Ct((()=>{const n=new Set;for(const e of[o.atomValues.keys(),a.atomValues.keys()])for(const t of e){var r,i;(null===(r=o.atomValues.get(t))||void 0===r?void 0:r.contents)!==(null===(i=a.atomValues.get(t))||void 0===i?void 0:i.contents)&&Tt(t).shouldRestoreFromSnapshots&&n.add(t)}n.forEach((t=>{Ot(e.current,new Pt(t),a.atomValues.has(t)?l(a.atomValues.get(t)):xt)})),e.current.replaceState((e=>({...e,stateID:t.getID_INTERNAL()})))}))}),[e])}class Yt{}const Xt=new Yt;var Jt={recoilComponentGetRecoilValueCount_FOR_TESTING:{current:0},useGotoRecoilSnapshot:Kt,useRecoilCallback:function(e,t){const n=Rt(),r=Kt();return wt(((...t)=>{const o=Ft(n.current);function a(e,t){Lt(n.current,e,t)}function i(e){Lt(n.current,e,xt)}let l=Xt;return Ct((()=>{l=e({set:a,reset:i,snapshot:o,gotoSnapshot:r})(...t)})),l instanceof Yt&&vt(!1),l}),null!=t?[...t,n]:void 0)},useRecoilInterface:function(){const e=Rt(),[t,n]=_t([]),r=Et(new Set);r.current=new Set;const o=Et(new Set),a=Et(new Map),i=wt((t=>{const n=a.current.get(t);n&&(n.release(e.current),a.current.delete(t))}),[e,a]),l=bt();return St((()=>{const t=e.current;function c(e,t){a.current.has(t)&&n([])}D(r.current,o.current).forEach((e=>{if(a.current.has(e))return;const n=zt(t,new Pt(e),(t=>{u("RecoilValue subscription fired",e,(()=>{c(0,e)}))}),l);a.current.set(e,n),u("initial update on subscribing",e,(()=>{t.getState().nextTree?t.getState().queuedComponentCallbacks_DEPRECATED.push(s((()=>{c(t.getState(),e)}))):c(t.getState(),e)}))})),D(o.current,r.current).forEach((e=>{i(e)})),o.current=r.current})),St((()=>{const e=a.current;return()=>e.forEach(((e,t)=>i(t)))}),[i]),kt((()=>{function t(t){return n=>{Lt(e.current,t,n)}}function n(t){return r.current.has(t.key)||(r.current=Ut(r.current,t.key)),Mt(e.current,t)}function o(t){return $t(n(t),t,e)}return{getRecoilValue:o,getRecoilValueLoadable:n,getRecoilState:function(e){return[o(e),t(e)]},getRecoilStateLoadable:function(e){return[n(e),t(e)]},getSetRecoilState:t,getResetRecoilState:function(t){return()=>Lt(e.current,t,xt)}}}),[r,e])},useRecoilSnapshot:function(){const e=Rt(),[t,n]=_t((()=>Ft(e.current)));return Qt(wt((e=>n(Ft(e))),[])),t},useRecoilState:function(e){return[Ht(e),qt(e)]},useRecoilStateLoadable:function(e){return[Wt(e),qt(e)]},useRecoilTransactionObserver:function(e){Qt(wt((t=>{e({snapshot:Ft(t,"current"),previousSnapshot:Ft(t,"previous")})}),[e]))},useRecoilValue:Ht,useRecoilValueLoadable:Wt,useResetRecoilState:function(e){const t=Rt();return wt((()=>{Lt(t.current,e,xt)}),[t,e])},useSetRecoilState:qt,useSetUnvalidatedAtomValues:function(){const e=Rt();return(t,n={})=>{Ct((()=>{e.current.addTransactionMetadata(n),t.forEach(((t,n)=>Dt(e.current,new Pt(n),t)))}))}},useTransactionObservation_DEPRECATED:function(e){Qt(wt((t=>{let n=t.getState().previousTree;const r=t.getState().currentTree;n||(n=t.getState().currentTree);const o=Gt(r),a=Gt(n),l=i(At,(e=>{var t,n,r,o;return{persistence_UNSTABLE:{type:null!==(t=null===(n=e.persistence_UNSTABLE)||void 0===n?void 0:n.type)&&void 0!==t?t:"none",backButton:null!==(r=null===(o=e.persistence_UNSTABLE)||void 0===o?void 0:o.backButton)&&void 0!==r&&r}}})),u=function(e,t){const n=new Set;for(const r of e)t(r)&&n.add(r);return n}(r.dirtyAtoms,(e=>o.has(e)||a.has(e)));e({atomValues:o,previousAtomValues:a,atomInfo:l,modifiedAtoms:u,transactionMetadata:{...r.transactionMetadata}})}),[e]))},useTransactionSubscription_DEPRECATED:Qt};const{useMemo:Zt}=t,{RecoilRoot:en,useStoreRef:tn}=ht;var nn=function(e){return!!e&&"function"==typeof e.then};const rn={getValue(){if("loading"===this.state&&a("recoil_async_selector_refactor"))throw this.contents.then((({__value:e})=>e));if("hasValue"!==this.state)throw this.contents;return this.contents},toPromise(){return"hasValue"===this.state?Promise.resolve(this.contents):"hasError"===this.state?Promise.reject(this.contents):a("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents},valueMaybe(){return"hasValue"===this.state?this.contents:void 0},valueOrThrow(){if("hasValue"!==this.state)throw new Error(`Loadable expected value, but in "${this.state}" state`);return this.contents},errorMaybe(){return"hasError"===this.state?this.contents:void 0},errorOrThrow(){if("hasError"!==this.state)throw new Error(`Loadable expected error, but in "${this.state}" state`);return this.contents},promiseMaybe(){return"loading"===this.state?a("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents:void 0},promiseOrThrow(){if("loading"!==this.state)throw new Error(`Loadable expected promise, but in "${this.state}" state`);return a("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents},map(e){if("hasError"===this.state)return this;if("hasValue"===this.state)try{const t=e(this.contents);return nn(t)?ln(t):on(t)}catch(t){return nn(t)?ln(t.next((()=>e(this.contents)))):an(t)}if("loading"===this.state)return ln(this.contents.then(e).catch((t=>{if(nn(t))return t.then((()=>e(this.contents)));throw t})));throw new Error("Invalid Loadable state")}};function on(e){return Object.freeze({state:"hasValue",contents:e,...rn})}function an(e){return Object.freeze({state:"hasError",contents:e,...rn})}function ln(e){return Object.freeze({state:"loading",contents:e,...rn})}var un={loadableWithValue:on,loadableWithError:an,loadableWithPromise:ln,loadableLoading:function(){return ln(new Promise((()=>{})))},loadableAll:function(e){return e.every((e=>"hasValue"===e.state))?on(e.map((e=>e.contents))):e.some((e=>"hasError"===e.state))?an(l(e.find((e=>"hasError"===e.state)),"Invalid loadable passed to loadableAll").contents):ln(a("recoil_async_selector_refactor")?Promise.all(e.map((e=>e.contents))).then((e=>({__value:e}))):Promise.all(e.map((e=>e.contents))))}};Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,DataView,"undefined"!=typeof navigator&&navigator.product;var sn=function(){let e,t;const n={get:n=>n===e?t:void 0,set:(r,o)=>(e=r,t=o,n)};return n};const cn=Symbol("ArrayKeyedMap"),fn=new Map;class dn{constructor(e){if(f(this,"_base",new Map),e instanceof dn)for(const[t,n]of e.entries())this.set(t,n);else if(e)for(const[t,n]of e)this.set(t,n);return this}get(e){const t=Array.isArray(e)?e:[e];let n=this._base;return t.forEach((e=>{var t;n=null!==(t=n.get(e))&&void 0!==t?t:fn})),void 0===n?void 0:n.get(cn)}set(e,t){const n=Array.isArray(e)?e:[e];let r=this._base,o=r;return n.forEach((e=>{o=r.get(e),o||(o=new Map,r.set(e,o)),r=o})),o.set(cn,t),this}delete(e){const t=Array.isArray(e)?e:[e];let n=this._base,r=n;return t.forEach((e=>{r=n.get(e),r||(r=new Map,n.set(e,r)),n=r})),r.delete(cn),this}entries(){const e=[];return function t(n,r){n.forEach(((n,o)=>{o===cn?e.push([r,n]):t(n,r.concat(o))}))}(this._base,[]),e.values()}toBuiltInMap(){return new Map(this.entries())}}var pn=dn,hn=Object.freeze({__proto__:null,ArrayKeyedMap:pn});const{ArrayKeyedMap:vn}=hn;var mn=function(){return new vn};function gn(e,t,n){if("string"==typeof e&&!e.includes('"')&&!e.includes("\\"))return`"${e}"`;switch(typeof e){case"undefined":return"";case"boolean":return e?"true":"false";case"number":case"symbol":return String(e);case"string":return JSON.stringify(e);case"function":if(!0!==(null==t?void 0:t.allowFunctions))throw new Error("Attempt to serialize function in a Recoil cache key");return`__FUNCTION(${e.name})__`}if(null===e)return"null";var r;if("object"!=typeof e)return null!==(r=JSON.stringify(e))&&void 0!==r?r:"";if(nn(e))return"__PROMISE__";if(Array.isArray(e))return`[${e.map(((e,n)=>gn(e,t,n.toString())))}]`;if("function"==typeof e.toJSON)return gn(e.toJSON(n),t,n);if(e instanceof Map){const r={};for(const[n,o]of e)r["string"==typeof n?n:gn(n,t)]=o;return gn(r,t,n)}return e instanceof Set?gn(Array.from(e).sort(((e,n)=>gn(e,t).localeCompare(gn(n,t)))),t,n):null!=e[Symbol.iterator]&&"function"==typeof e[Symbol.iterator]?gn(Array.from(e),t,n):`{${Object.keys(e).filter((t=>void 0!==e[t])).sort().map((n=>`${gn(n,t)}:${gn(e[n],t,n)}`)).join(",")}}`}var yn=function(e,t={allowFunctions:!1}){return gn(e,t)},bn=function(){const e=new Map,t={get:t=>e.get(yn(t)),set:(n,r)=>(e.set(yn(n),r),t),map:e};return t},wn={setInTreeCache:function e(t,n,r){if(null==t){if(0===n.length)return{type:"result",result:r};{const[t,...o]=n,[a,i]=t;return{type:"branch",nodeKey:a,branches:new Map([[i,e(null,o,r)]])}}}if(0===n.length)return"result"!==t.type&&vt(!1),t.result&&"loading"===t.result.state?{type:"result",result:r}:(t.result!==r&&vt(!1),t);{const[o,...a]=n,[i,l]=o;return"branch"!==t.type&&vt(!1),t.nodeKey!==i&&vt(!1),t.branches.set(l,e(t.branches.get(l),a,r)),t}},getFromTreeCache:function e(t,n,r){var o;if(null==t)return;if("result"===t.type)return t.result;null==r||null===(o=r.onCacheHit)||void 0===o||o.call(r,t.nodeKey);const a=n(t.nodeKey);return e(t.branches.get(a),n,r)}};const{getFromTreeCache:Sn,setInTreeCache:kn}=wn;var En=function(){let e;return{get:(t,n)=>Sn(e,t,n),set:(t,n)=>{e=kn(e,t,n)},getRoot:()=>e}};const{getFromTreeCache:_n,setInTreeCache:Cn}=wn;var xn={startPerfBlock:function(e){return()=>null}};const{loadableWithError:Tn,loadableWithPromise:An,loadableWithValue:Nn}=un,{getNodeLoadable:Rn,peekNodeLoadable:In,setNodeValue:Pn}=O,{saveDependencyMapToStore:Mn}=V,{DEFAULT_VALUE:Ln,RecoilValueNotReady:On,registerNode:Dn}=T,{isRecoilValue:zn}=w,{AbstractRecoilValue:Vn}=w,{setRecoilValueLoadable:Fn}=oe,{startPerfBlock:Un}=xn,jn=Object.freeze(new Set),Bn=[],$n=new Map,Wn=(()=>{let e=0;return()=>e++})();const{loadableWithError:Hn,loadableWithPromise:qn,loadableWithValue:Qn}=un,{getNodeLoadable:Gn,peekNodeLoadable:Kn,setNodeValue:Yn}=O,{addToDependencyMap:Xn,mergeDepsIntoDependencyMap:Jn,saveDependencyMapToStore:Zn}=V,{DEFAULT_VALUE:er,RecoilValueNotReady:tr,registerNode:nr}=T,{AbstractRecoilValue:rr}=w,{getRecoilValueAsLoadable:or,isRecoilValue:ar,setRecoilValueLoadable:ir}=oe,{startPerfBlock:lr}=xn,ur=Object.freeze(new Set);function sr(e){const t=[];for(const n of Array.from(e.keys()).sort()){const r=l(e.get(n));t.push(n),t.push(r.state),t.push(r.contents)}return t}const cr=new Map;var fr=a("recoil_async_selector_refactor")?function(e){const{key:t,get:n,cacheImplementation_UNSTABLE:r}=e,o=null!=e.set?e.set:void 0,a=r===mn?En():r===bn?function(){let e;return{get:(t,n)=>_n(e,(e=>yn(t(e))),n),set:(t,n)=>{e=Cn(e,t.map((([e,t])=>[e,yn(t)])),n)},getRoot:()=>e}}():r===sn?function(){let e;return{get:(t,n)=>{if(void 0!==e){for(const[o,a]of e.route){var r;if(t(o)!==a)return;null==n||null===(r=n.onCacheHit)||void 0===r||r.call(n,o)}return e.value}},set:(t,n)=>{e={route:t,value:n}},getRoot:()=>e}}():En(),i={depValuesDiscoveredSoFarDuringAsyncWork:null,latestLoadable:null,latestExecutionId:null,stateVersion:null};function u(e){e.getState().knownSelectors.add(t)}function s(e,t,n){if("loading"===t.state){let t=$n.get(n);null==t&&$n.set(n,t=new Set),t.add(e)}}function c(e,t,n){if(t.atomValues.has(n))return[new Map,l(t.atomValues.get(n))];const[,r]=Rn(e,t,n),o=e.getState().knownSelectors.has(n);return"loading"!==r.state&&o&&t.atomValues.set(n,r),[new Map,r]}function f(e,n,r,o,a){return n.then((n=>{const{__key:o,__value:i}=n;null!=o&&r.atomValues.set(o,Nn(i));const[l,u]=v(e,r,a);if(S(a)&&w(u,a),k(l),"loading"!==l.state&&(_(r,m(u),l),d(l,a)),"hasError"===l.state)throw l.contents;return"hasValue"===l.state?{__value:l.contents,__key:t}:l.contents})).catch((e=>{const t=Tn(e);throw E(),_(r,m(o),Tn(e)),d(t,a),e}))}function d(e,n){S(n)&&(b(e),function(e,n){const r=$n.get(n);if(void 0!==r){for(const n of r)Fn(n,new Vn(t),e);$n.delete(n)}}(e,n))}function p(e,n,r,o){var a,i,l,u,s,c,f;(S(o)||n.version===(null===(a=e.getState())||void 0===a||null===(i=a.currentTree)||void 0===i?void 0:i.version)||n.version===(null===(l=e.getState())||void 0===l||null===(u=l.nextTree)||void 0===u?void 0:u.version))&&Mn(new Map([[t,r]]),e,null!==(s=null===(c=e.getState())||void 0===c||null===(f=c.nextTree)||void 0===f?void 0:f.version)&&void 0!==s?s:e.getState().currentTree.version)}function h(e,t,n,r,o){n.add(r),p(e,t,n,o)}function v(e,r,o){const a=Un(t);let i,l;const u=new Map,s=new Set;function v(t){const{key:n}=t;h(e,r,s,n,o);const[,a]=c(e,r,n);if(u.set(n,a),"hasValue"===a.state)return a.contents;throw a.contents}p(e,r,s,o);try{i=n({get:v}),i=zn(i)?v(i):i,nn(i)?i=function(e,n,r,o,a){return n.then((e=>{const n=Nn(e);return E(),_(r,m(o),n),d(n,a),{__value:e,__key:t}})).catch((t=>{if(S(a)&&w(o,a),nn(t))return f(e,t,r,o,a);const n=Tn(t);throw E(),_(r,m(o),n),d(n,a),t}))}(e,i,r,u,o).finally(a):a()}catch(t){i=t,nn(i)?i=f(e,i,r,u,o).finally(a):a()}return l=i instanceof Error?Tn(i):nn(i)?An(i):Nn(i),k(l),[l,u]}function m(e){return Array.from(e.entries()).map((([e,t])=>[e,t.contents]))}function g(e,n){const r=function(e,n){var r;if(n.atomValues.has(t))return n.atomValues.get(t);const o=new Set(null!==(r=e.getGraph(n.version).nodeDeps.get(t))&&void 0!==r?r:jn);return p(e,n,o,i.latestExecutionId),a.get((t=>{const[,r]=c(e,n,t);return r.contents}),{onCacheHit:r=>{r!==t&&h(e,n,o,r,i.latestExecutionId)}})}(e,n);return null!=r?(b(r),r):function(e,t){return null!=i.latestLoadable&&null!=i.latestExecutionId&&!function(e,t){var n,r;const o=null!==(n=i.depValuesDiscoveredSoFarDuringAsyncWork)&&void 0!==n?n:new Map,a=Array((null!==(r=y.get(t.version))&&void 0!==r?r:new Map).entries()),l=y.has(t.version)&&a.length===o.size&&a.every((([e,t])=>o.get(e)===t));return null!=o&&t.version!==i.stateVersion&&!l&&(y.set(t.version,new Map(o)),Array.from(o).some((([n,r])=>{const[,o]=c(e,t,n);return o.contents!==r.contents&&!("loading"===r.state&&"loading"!==o.state)})))}(e,t)}(e,n)?(s(e,l(i.latestLoadable),l(i.latestExecutionId)),l(i.latestLoadable)):function(e,t){const n=Wn(),[r,o]=v(e,t,n);return b(r,o,n,t),function(e,t,n){"loading"!==n.state&&_(e,t,n)}(t,m(o),r),s(e,r,n),r}(e,n)}const y=new Map;function b(e,t,n,r){"loading"===e.state?(i.depValuesDiscoveredSoFarDuringAsyncWork=t,i.latestExecutionId=n,i.latestLoadable=e,i.stateVersion=null==r?void 0:r.version):(i.depValuesDiscoveredSoFarDuringAsyncWork=null,i.latestExecutionId=null,i.latestLoadable=null,i.stateVersion=null)}function w(e,t){S(t)&&(i.depValuesDiscoveredSoFarDuringAsyncWork=e)}function S(e){return e===i.latestExecutionId}function k(e){"loading"!==e.state&&E(e.contents)}function E(e){}function _(e,n,r){e.atomValues.set(t,r),a.set(n,r)}function C(e){if(Bn.includes(t)){const e=`Recoil selector has circular dependencies: ${Bn.slice(Bn.indexOf(t)).join(" → ")}`;return Tn(new Error(e))}Bn.push(t);try{return e()}finally{Bn.pop()}}function x(e,t){return a.get((n=>{const r=In(e,t,n);return null==r?void 0:r.contents}))}function T(e,t){return u(e),[new Map,C((()=>g(e,t)))]}function A(e){e.atomValues.delete(t)}return Dn(null!=o?{key:t,peek:x,get:T,set:function(e,t,n){u(e);const r=new Map,a=new Map;function i({key:n}){const[,r]=c(e,t,n);if("hasValue"===r.state)return r.contents;throw"loading"===r.state?new On(n):r.contents}function l(n,r){const o="function"==typeof r?r(i(n)):r,[,l]=Pn(e,t,n.key,o);l.forEach(((e,t)=>a.set(t,e)))}return o({set:l,get:i,reset:function(e){l(e,Ln)}},n),[r,a]},cleanUp:()=>{},invalidate:A,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1}:{key:t,peek:x,get:T,cleanUp:()=>{},invalidate:A,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1})}:function(e){const{key:t,get:n,cacheImplementation_UNSTABLE:r}=e,o=null!=e.set?e.set:void 0;let a=null!=r?r:mn();function i(e){e.getState().knownSelectors.add(t)}function l(e,t){if("loading"===t.state){let n=cr.get(t);void 0===n&&cr.set(t,n=new Set),n.add(e)}}function u(e,n){const r=cr.get(e);if(void 0!==r){for(const e of r)ir(e,new rr(t),n);cr.delete(e)}}function s(e,n){var r;const o=null!==(r=e.getGraph(n.version).nodeDeps.get(t))&&void 0!==r?r:ur,i=new Map(Array.from(o).sort().map((t=>[t,Kn(e,n,t)]))),l=new Map;for(const[e,t]of i.entries()){if(null==t)return;l.set(e,t)}const u=sr(l);return a.get(u)}function c(e){e.atomValues.delete(t)}function f(e,r){i(e);const o=r.atomValues.get(t);return void 0!==o?[new Map,o]:function(e,r){var o;const i=new Map,s=null!==(o=e.getGraph(r.version).nodeDeps.get(t))&&void 0!==o?o:ur,c=sr(new Map(Array.from(s).sort().map((t=>{const[n,o]=Gn(e,r,t);return Jn(n,i),Zn(i,e,r.version),[t,o]})))),f=a.get(c);if(null!=f)return l(e,f),[i,f];const[d,p,h]=function(e,r){const o=lr(t),a=new Map,i=new Map;function l({key:n}){Xn(t,n,i);const[o,l]=Gn(e,r,n);if(a.set(n,l),Jn(o,i),Zn(i,e,r.version),"hasValue"===l.state)return l.contents;throw l.contents}try{const e=n({get:l}),t=ar(e)?l(e):e;let r;return nn(t)?r=qn(t.finally(o)):(o(),r=Qn(t)),[i,r,a]}catch(n){let r;return void 0!==n.then?r=qn(n.then((()=>{const n=or(e,new rr(t));if("hasError"===n.state)throw n.contents;return n.contents})).finally(o)):(o(),r=Hn(n)),[i,r,a]}}(e,r);Jn(d,i),Zn(i,e,r.version);const v=sr(h);return l(e,p),function(e,n,r){"loading"!==r.state||r.contents.then((e=>{const t=Qn(e);return a=a.set(n,t),u(r,t),e})).catch((e=>{if(nn(e))return e;const t=Hn(e);return a=a.set(n,t),u(r,t),e})),a=a.set(n,r),"loading"!==r.state&&e.atomValues.set(t,r)}(r,v,p),[i,p]}(e,r)}return nr(null!=o?{key:t,peek:s,get:f,set:function(e,t,n){i(e);const r=new Map,a=new Map;function l({key:n}){const[o,a]=Gn(e,t,n);if(Jn(o,r),"hasValue"===a.state)return a.contents;throw"loading"===a.state?new tr(n):a.contents}function u(n,o){const i="function"==typeof o?o(l(n)):o,[u,s]=Yn(e,t,n.key,i);Jn(u,r),s.forEach(((e,t)=>a.set(t,e)))}return o({set:u,get:l,reset:function(e){u(e,er)}},n),[r,a]},invalidate:c,cleanUp:()=>{},dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1}:{key:t,peek:s,get:f,invalidate:c,cleanUp:()=>{},dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1})};const{loadableWithError:dr,loadableWithPromise:pr,loadableWithValue:hr}=un,{DEFAULT_VALUE:vr,DefaultValue:mr,registerNode:gr}=T,{isRecoilValue:yr}=w,{markRecoilValueModified:br,setRecoilValue:wr,setRecoilValueLoadable:Sr}=oe;var kr=function e(t){const{default:n,...r}=t;return yr(n)?function(t){const n=e({...t,default:vr,persistence_UNSTABLE:void 0===t.persistence_UNSTABLE?void 0:{...t.persistence_UNSTABLE,validator:e=>e instanceof mr?e:l(t.persistence_UNSTABLE).validator(e,vr)},effects_UNSTABLE:t.effects_UNSTABLE});return fr({key:`${t.key}__withFallback`,get:({get:e})=>{const r=e(n);return r instanceof mr?t.default:r},set:({set:e},t)=>e(n,t),dangerouslyAllowMutability:t.dangerouslyAllowMutability})}({...r,default:n}):function(e){const{key:t,persistence_UNSTABLE:n}=e;let r,o=nn(e.default)?pr(e.default.then((e=>(o=hr(e),{__key:t,__value:e}))).catch((e=>{throw o=dr(e),e}))):hr(e.default);const a=new Map;function i(n,r,i){if(n.getState().knownAtoms.has(t))return;if(n.getState().knownAtoms.add(t),"loading"===o.state){function l(){var e;(null!==(e=n.getState().nextTree)&&void 0!==e?e:n.getState().currentTree).atomValues.has(t)||br(n,u)}o.contents.then(l).catch(l)}let s=vr,c=null;if(null!=e.effects_UNSTABLE){let r=!0;const l=e=>t=>{if(r){const e=s instanceof mr||nn(s)?"hasValue"===o.state?o.contents:vr:s;s="function"==typeof t?t(e):t}else{if(nn(t))throw new Error("Setting atoms to async values is not implemented.");"function"!=typeof t&&(c={effect:e,value:t}),wr(n,u,"function"==typeof t?n=>{const r=t(n);return c={effect:e,value:r},r}:t)}},d=e=>()=>l(e)(vr),p=e=>r=>{n.subscribeToTransactions((n=>{var a;let{currentTree:i,previousTree:l}=n.getState();l||(l=i);const u=i.atomValues.get(t);if(null==u||"hasValue"===u.state){var s,f,d;const n=null!=u?u.contents:vr,a=null!==(s=l.atomValues.get(t))&&void 0!==s?s:o,i="hasValue"===a.state?a.contents:vr;(null===(f=c)||void 0===f?void 0:f.effect)===e&&(null===(d=c)||void 0===d?void 0:d.value)===n||r(n,i)}(null===(a=c)||void 0===a?void 0:a.effect)===e&&(c=null)}),t)};for(const t of null!==(f=e.effects_UNSTABLE)&&void 0!==f?f:[]){var f;const e=t({node:u,trigger:i,setSelf:l(t),resetSelf:d(t),onSet:p(t)});null!=e&&a.set(n,e)}r=!1}s instanceof mr||r.atomValues.set(t,nn(s)?pr(function(e,n){const r=n.then((n=>{var o,a;return(null===(a=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===r&&wr(e,u,n),{__key:t,__value:n}})).catch((n=>{var o,a;throw(null===(a=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===r&&Sr(e,u,dr(n)),n}));return r}(n,s)):hr(s))}const u=gr({key:t,peek:function(e,n){var a,i,l;return null!==(a=null!==(i=n.atomValues.get(t))&&void 0!==i?i:null===(l=r)||void 0===l?void 0:l[1])&&void 0!==a?a:o},get:function(e,a){if(i(e,a,"get"),a.atomValues.has(t))return[new Map,l(a.atomValues.get(t))];if(a.nonvalidatedAtoms.has(t)){if(null!=r)return r;if(null==n)return[new Map,o];const e=a.nonvalidatedAtoms.get(t),i=n.validator(e,vr),l=i instanceof mr?o:hr(i);return r=[new Map,l],r}return[new Map,o]},set:function(e,n,o){if(i(e,n,"set"),n.atomValues.has(t)){const e=l(n.atomValues.get(t));if("hasValue"===e.state&&o===e.contents)return[new Map,new Map]}else if(!n.nonvalidatedAtoms.has(t)&&o instanceof mr)return[new Map,new Map];return r=void 0,[new Map,(new Map).set(t,hr(o))]},cleanUp:function(e){var t;null===(t=a.get(e))||void 0===t||t(),a.delete(e)},invalidate:function(){r=void 0},dangerouslyAllowMutability:e.dangerouslyAllowMutability,persistence_UNSTABLE:e.persistence_UNSTABLE?{type:e.persistence_UNSTABLE.type,backButton:e.persistence_UNSTABLE.backButton}:void 0,shouldRestoreFromSnapshots:!0});return u}({...r,default:n})};let Er=0;var _r=function(e){var t,n;let r=null!==(t=null===(n=e.cacheImplementationForParams_UNSTABLE)||void 0===n?void 0:n.call(e))&&void 0!==t?t:bn();return t=>{var n,o;const a=r.get(t);if(null!=a)return a;const i=`${e.key}__selectorFamily/${null!==(n=yn(t,{allowFunctions:!0}))&&void 0!==n?n:"void"}/${Er++}`,l=n=>e.get(t)(n),u=null===(o=e.cacheImplementation_UNSTABLE)||void 0===o?void 0:o.call(e);let s;if(null!=e.set){const n=e.set;s=fr({key:i,get:l,set:(e,r)=>n(t)(e,r),cacheImplementation_UNSTABLE:u,dangerouslyAllowMutability:e.dangerouslyAllowMutability})}else s=fr({key:i,get:l,cacheImplementation_UNSTABLE:u,dangerouslyAllowMutability:e.dangerouslyAllowMutability});return r=r.set(t,s),s}};const{DEFAULT_VALUE:Cr,DefaultValue:xr}=T;const Tr=_r({key:"__constant",get:e=>()=>e,cacheImplementationForParams_UNSTABLE:mn});const Ar=_r({key:"__error",get:e=>()=>{throw new Error(e)},cacheImplementationForParams_UNSTABLE:mn});const{loadableWithError:Nr,loadableWithPromise:Rr,loadableWithValue:Ir}=un;function Pr(e,t){const n=Array(t.length).fill(void 0),r=Array(t.length).fill(void 0);for(const[o,a]of t.entries())try{n[o]=e(a)}catch(e){r[o]=e}return[n,r]}function Mr(e){return null!=e&&!nn(e)}function Lr(e){return Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))}function Or(e){return null!=e&&"object"==typeof e&&e.hasOwnProperty("__value")?e.__value:e}function Dr(e,t){return Array.isArray(e)?t:Object.getOwnPropertyNames(e).reduce(((e,n,r)=>({...e,[n]:t[r]})),{})}function zr(e,t,n){return Dr(e,n.map(((e,n)=>null==e?Ir(t[n]):nn(e)?Rr(e):Nr(e))))}var Vr={waitForNone:_r({key:"__waitForNone",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Pr(t,n);return zr(e,r,o)}}),waitForAny:_r({key:"__waitForAny",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Pr(t,n);if(o.some((e=>null==e)))return zr(e,r,o);if(o.every(Mr))throw o.find(Mr);if(a("recoil_async_selector_refactor"))return new Promise(((t,n)=>{for(const[a,i]of o.entries())nn(i)&&i.then((n=>{r[a]=Or(n),o[a]=null,t(zr(e,r,o))})).catch((e=>{o[a]=e,o.every(Mr)&&n(o[0])}))}));throw new Promise(((t,n)=>{for(const[a,i]of o.entries())nn(i)&&i.then((n=>{r[a]=n,o[a]=null,t(zr(e,r,o))})).catch((e=>{o[a]=e,o.every(Mr)&&n(o[0])}))}))}}),waitForAll:_r({key:"__waitForAll",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Pr(t,n);if(o.every((e=>null==e)))return Dr(e,r);const i=o.find(Mr);if(null!=i)throw i;if(a("recoil_async_selector_refactor"))return Promise.all(o).then((t=>{return Dr(e,(n=r,o=t,o.map(((e,t)=>void 0===e?n[t]:e))).map(Or));var n,o}));throw Promise.all(o).then((t=>Dr(e,t)))}}),noWait:_r({key:"__noWait",get:e=>({get:t})=>{try{return Ir(t(e))}catch(e){return nn(e)?Rr(e):Nr(e)}}})};const{batchUpdates:Fr,setBatcher:Ur}=ce,{DefaultValue:jr}=T,{RecoilRoot:Br}=ht,{isRecoilValue:$r}=w,{freshSnapshot:Wr}=Ve,{useGotoRecoilSnapshot:Hr,useRecoilCallback:qr,useRecoilSnapshot:Qr,useRecoilState:Gr,useRecoilStateLoadable:Kr,useRecoilTransactionObserver:Yr,useRecoilValue:Xr,useRecoilValueLoadable:Jr,useResetRecoilState:Zr,useSetRecoilState:eo,useSetUnvalidatedAtomValues:to,useTransactionObservation_DEPRECATED:no}=Jt,{noWait:ro,waitForAll:oo,waitForAny:ao,waitForNone:io}=Vr;var lo={DefaultValue:jr,RecoilRoot:Br,useRecoilBridgeAcrossReactRoots_UNSTABLE:function(){const e=tn().current;return Zt((()=>function({children:n}){return t.createElement(en,{store_INTERNAL:e},n)}),[e])},atom:kr,selector:fr,atomFamily:function(e){let t=bn();const n={key:e.key,default:Cr,persistence_UNSTABLE:e.persistence_UNSTABLE};let r;r=kr(n);const o=_r({key:`${e.key}__atomFamily/Default`,get:t=>({get:n})=>{const o=n("function"==typeof r?r(t):r);return o instanceof xr?"function"==typeof e.default?e.default(t):e.default:o},dangerouslyAllowMutability:e.dangerouslyAllowMutability});return n=>{var r;const a=t.get(n);if(null!=a)return a;const i=kr({...e,key:`${e.key}__${null!==(r=yn(n))&&void 0!==r?r:"void"}`,default:o(n),effects_UNSTABLE:"function"==typeof e.effects_UNSTABLE?e.effects_UNSTABLE(n):e.effects_UNSTABLE});return t=t.set(n,i),i}},selectorFamily:_r,constSelector:function(e){return Tr(e)},errorSelector:function(e){return Ar(e)},readOnlySelector:function(e){return e},useRecoilValue:Xr,useRecoilValueLoadable:Jr,useRecoilState:Gr,useRecoilStateLoadable:Kr,useSetRecoilState:eo,useResetRecoilState:Zr,useRecoilCallback:qr,useGotoRecoilSnapshot:Hr,useRecoilSnapshot:Qr,useRecoilTransactionObserver_UNSTABLE:Yr,useTransactionObservation_UNSTABLE:no,useSetUnvalidatedAtomValues_UNSTABLE:to,noWait:ro,waitForNone:io,waitForAny:ao,waitForAll:oo,isRecoilValue:$r,batchUpdates:Fr,setBatcher:Ur,snapshot_UNSTABLE:Wr},uo=lo.RecoilRoot,so=lo.atom,co=lo.useRecoilState,fo=lo.useSetRecoilState;function po(e){return{log:function(t,...n){console.log(`[${e} 1.0.40] ${t}`,...n)},error:function(t,...n){console.error(`[${e} 1.0.40] ${t}`,...n)},warn:function(t,...n){console.warn(`[${e} 1.0.40] ${t}`,...n)},debug:function(t,...n){console.debug(`[${e} 1.0.40] ${t}`,...n)}}}const{log:ho,error:vo,warn:mo,debug:go}=po("app"),yo=so({key:"installationState",default:null});function bo({show:e}){const[n,r]=co(yo);return(n||e)&&t.createElement("button",{id:"install-button",className:"update text-white mr-4 flex flex-col items-center",onClick:async function(){if(n){n.prompt();const{outcome:e}=await n.userChoice;ho(`User response to the install prompt: ${e}`),r(null)}}},t.createElement("svg",{className:"fill-current",style:{transform:"scale(0.8)"},xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},t.createElement("path",{d:"M0 .5h24v24H0z",fill:"none"}),t.createElement("path",{d:"M12 16.5l4-4h-3v-9h-2v9H8l4 4zm9-13h-6v1.99h6v14.03H3V5.49h6V3.5H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-14c0-1.1-.9-2-2-2z"})))}function wo(){return t.createElement("div",{className:"header"},t.createElement("div",{className:"flex"},t.createElement("span",null,"Claptastic"),t.createElement("span",{id:"version",className:"version"},"V","1.0.40")),t.createElement("div",{className:"flex"},t.createElement(bo,null)))}var So=n(483),ko=n.n(So);const Eo=n.p+"c3b5cf67cb0c07a63b8658aa76312ec4.mp3",_o=new Audio,{error:Co}=po("clapButton");function xo(){return _o.play()}let To;function Ao(){null!=To&&(clearInterval(To),To=null,document.getElementById("icon").style.transform=void 0)}function No(){return t.createElement("div",{className:"wrapper"},t.createElement("div",{className:"button-wrapper"},t.createElement("button",{className:"button-icon",onClick:xo},t.createElement("div",{className:"svg-wrapper"},t.createElement("svg",{className:"icon",version:"1.1",id:"icon",x:"0px",y:"0px",viewBox:"0 0 297.221 297.221",style:{enableBackground:"new 0 0 297.221 297.221"}},t.createElement("g",null,t.createElement("path",{d:"M283.762,32.835c2.705-1.913,3.346-5.658,1.432-8.363c-1.914-2.705-5.657-3.347-8.363-1.432l-14.984,10.602 c-2.705,1.913-3.346,5.658-1.432,8.363c1.169,1.652,3.022,2.535,4.902,2.535c1.198,0,2.408-0.358,3.461-1.104L283.762,32.835z"}),t.createElement("path",{d:"M244.064,29.387c0.695,0.262,1.409,0.386,2.11,0.386c2.428,0,4.713-1.484,5.617-3.891l6.46-17.182 c1.166-3.101-0.403-6.561-3.505-7.727c-3.101-1.167-6.562,0.404-7.728,3.505l-6.46,17.182 C239.393,24.761,240.962,28.221,244.064,29.387z"}),t.createElement("path",{d:"M291.223,55.611c-0.041,0-0.082,0-0.124,0l-18.351,0.154c-3.313,0.067-5.944,2.605-5.877,5.918 c0.066,3.271,2.739,5.928,5.997,5.928c0.041,0,0.082,0,0.124,0l18.351-0.313c3.313-0.068,5.944-2.732,5.877-6.045 C297.154,57.982,294.481,55.611,291.223,55.611z"}),t.createElement("path",{d:"M254.2,147.154c-3.073-2.433-6.711-4.089-10.557-4.867c0.254-0.46,0.491-0.928,0.715-1.403l2.408-2.408 c9.274-9.275,10.248-23.874,2.264-33.961c-3.769-4.761-9.001-7.925-14.812-9.106c0.415-0.764,0.783-1.545,1.117-2.338 c6.316-9.149,6.213-21.445-0.782-30.283c-3.77-4.764-9.004-7.938-14.818-9.117c4.8-8.826,4.187-19.826-2.225-27.925 c-4.848-6.125-12.109-9.639-19.923-9.639c-6.257,0-12.16,2.236-16.792,6.33c-0.701-3.979-2.363-7.822-5.012-11.169 c-4.849-6.125-12.11-9.638-19.924-9.639l0,0c-6.79,0-13.164,2.635-17.947,7.418l-60.84,60.84l-0.232-8.12 c-0.107-13.83-11.392-25.049-25.247-25.049c-13.604,0-24.729,10.815-25.229,24.298l-12.146,88.306l-9.983,11.604 c-5.983,6.957-5.582,17.481,0.915,23.962L19.987,199.7c-4.574,6.881-3.773,16.266,2.206,22.23l69.667,69.557 c3.329,3.321,7.748,5.148,12.446,5.148c3.857,0,7.668-1.295,10.729-3.645l14.544-11.168c13.991-3.305,29.416-10.813,45.874-22.33 c14.371-10.058,29.962-23.46,46.337-39.836l34.631-34.631c5.107-5.107,7.795-12.188,7.375-19.427 C263.376,158.371,259.879,151.649,254.2,147.154z M188.124,32.009c2.603-2.602,6.032-3.903,9.462-3.903 c3.915,0,7.831,1.695,10.515,5.086c4.256,5.377,3.51,13.18-1.339,18.028l-6.177,6.176c-0.952,0.635-1.879,1.314-2.747,2.083 c-0.701-3.98-2.364-7.823-5.013-11.169c-3.257-4.114-7.604-7.043-12.475-8.527L188.124,32.009z M146.397,17.532 c2.602-2.602,6.032-3.903,9.462-3.903c3.916,0.001,7.831,1.696,10.515,5.087c4.256,5.377,3.51,13.179-1.339,18.027l-70.919,70.186 l-0.233-8.119c-0.061-7.825-3.7-14.812-9.356-19.405L146.397,17.532z M13.624,176.391c-2.082-2.078-2.209-5.41-0.291-7.64 l12.281-14.277c0.006-0.007,0.011-0.017,0.012-0.026l12.72-92.483c0-7.286,5.961-13.247,13.247-13.247 c7.286,0,13.248,5.961,13.248,13.247L65.186,74c-11.988,1.646-21.322,11.733-21.78,24.057l-12.145,88.307l-3.533,4.108 L13.624,176.391z M247.935,176.539l-34.63,34.631c-29.577,29.577-60.494,53.318-87.653,59.237 c-0.825,0.181-1.601,0.528-2.271,1.043l-15.655,12.022c-1.014,0.779-2.219,1.162-3.419,1.162c-1.443,0-2.88-0.555-3.968-1.641 l-69.671-69.56c-2.083-2.077-2.21-5.409-0.291-7.64l12.28-14.276c0.007-0.008,0.011-0.017,0.013-0.026l12.719-92.483 c0-7.286,5.962-13.248,13.248-13.248c7.286,0,13.247,5.962,13.247,13.248l0.626,21.824c0.104,3.626,3.087,5.987,6.191,5.987 c1.514,0,3.058-0.563,4.309-1.813l70.431-70.431c2.603-2.603,6.031-3.903,9.462-3.903c3.915,0,7.831,1.695,10.515,5.086 c4.256,5.377,3.509,13.18-1.34,18.028l-48.518,48.518c-2.519,2.52-2.519,6.603,0,9.121l0,0c1.275,1.275,2.946,1.913,4.617,1.913 s3.343-0.638,4.617-1.913l62.374-62.373c2.602-2.603,6.031-3.903,9.462-3.903c3.915,0.001,7.831,1.696,10.515,5.087 c4.256,5.376,3.509,13.179-1.34,18.027l-62.081,62.081c-2.553,2.554-2.553,6.692,0,9.246c1.258,1.258,2.906,1.887,4.556,1.887 c1.648,0,3.297-0.629,4.555-1.887l48.811-48.81c2.603-2.603,6.032-3.903,9.462-3.903c3.915,0,7.831,1.695,10.515,5.087 c4.256,5.376,3.509,13.179-1.34,18.027l-48.349,48.35c-2.612,2.611-2.612,6.847,0,9.458l0.078,0.079 c1.207,1.207,2.789,1.81,4.37,1.81c1.582,0,3.164-0.603,4.37-1.81l29.974-29.974c2.701-2.701,6.317-4.129,9.921-4.129 c2.867,0,5.726,0.904,8.107,2.789C253.114,161.598,253.508,170.967,247.935,176.539z"})),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null))))))}(async()=>{await async function(){const e=await async function(){try{const e=await fetch(Eo);if(!e.ok)throw e;const t=await e.blob();await ko().setItem("mp3",t)}catch(e){Co("Failed to load audio",e)}return ko().getItem("mp3")}();_o.src=URL.createObjectURL(e),_o.addEventListener("ended",(e=>{Ao()})),_o.addEventListener("play",(e=>{!function(){if(null!=To)return;const e=document.getElementById("icon");let t=!1;To=setInterval((()=>{t?(e.style.transform="scale(1)",t=!1):(e.style.transform="scale(1.2)",t=!0)}),100)}()}))}(),await async function(){var e,t;void 0!==document.hidden?(e="hidden",t="visibilitychange"):void 0!==document.msHidden?(e="msHidden",t="msvisibilitychange"):void 0!==document.webkitHidden&&(e="webkitHidden",t="webkitvisibilitychange"),document.addEventListener(t,(async function(){document[e]&&(Ao(),_o.load())}),!1)}()})();var Ro=n(864),Io=n(774),Po=n.n(Io);const Mo=function(e){function t(e,r,u,s,d){for(var p,h,v,m,w,k=0,E=0,_=0,C=0,x=0,P=0,L=v=p=0,D=0,z=0,V=0,F=0,U=u.length,j=U-1,B="",$="",W="",H="";D<U;){if(h=u.charCodeAt(D),D===j&&0!==E+C+_+k&&(0!==E&&(h=47===E?10:47),C=_=k=0,U++,j++),0===E+C+_+k){if(D===j&&(0<z&&(B=B.replace(f,"")),0<B.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:B+=u.charAt(D)}h=59}switch(h){case 123:for(p=(B=B.trim()).charCodeAt(0),v=1,F=++D;D<U;){switch(h=u.charCodeAt(D)){case 123:v++;break;case 125:v--;break;case 47:switch(h=u.charCodeAt(D+1)){case 42:case 47:e:{for(L=D+1;L<j;++L)switch(u.charCodeAt(L)){case 47:if(42===h&&42===u.charCodeAt(L-1)&&D+2!==L){D=L+1;break e}break;case 10:if(47===h){D=L+1;break e}}D=L}}break;case 91:h++;case 40:h++;case 34:case 39:for(;D++<j&&u.charCodeAt(D)!==h;);}if(0===v)break;D++}switch(v=u.substring(F,D),0===p&&(p=(B=B.replace(c,"").trim()).charCodeAt(0)),p){case 64:switch(0<z&&(B=B.replace(f,"")),h=B.charCodeAt(1)){case 100:case 109:case 115:case 45:z=r;break;default:z=I}if(F=(v=t(r,z,v,h,d+1)).length,0<M&&(w=l(3,v,z=n(I,B,V),r,A,T,F,h,d,s),B=z.join(""),void 0!==w&&0===(F=(v=w.trim()).length)&&(h=0,v="")),0<F)switch(h){case 115:B=B.replace(S,i);case 100:case 109:case 45:v=B+"{"+v+"}";break;case 107:v=(B=B.replace(g,"$1 $2"))+"{"+v+"}",v=1===R||2===R&&a("@"+v,3)?"@-webkit-"+v+"@"+v:"@"+v;break;default:v=B+v,112===s&&($+=v,v="")}else v="";break;default:v=t(r,n(r,B,V),v,s,d+1)}W+=v,v=V=z=L=p=0,B="",h=u.charCodeAt(++D);break;case 125:case 59:if(1<(F=(B=(0<z?B.replace(f,""):B).trim()).length))switch(0===L&&(p=B.charCodeAt(0),45===p||96<p&&123>p)&&(F=(B=B.replace(" ",":")).length),0<M&&void 0!==(w=l(1,B,r,e,A,T,$.length,s,d,s))&&0===(F=(B=w.trim()).length)&&(B="\0\0"),p=B.charCodeAt(0),h=B.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){H+=B+u.charAt(D);break}default:58!==B.charCodeAt(F-1)&&($+=o(B,p,h,B.charCodeAt(2)))}V=z=L=p=0,B="",h=u.charCodeAt(++D)}}switch(h){case 13:case 10:47===E?E=0:0===1+p&&107!==s&&0<B.length&&(z=1,B+="\0"),0<M*O&&l(0,B,r,e,A,T,$.length,s,d,s),T=1,A++;break;case 59:case 125:if(0===E+C+_+k){T++;break}default:switch(T++,m=u.charAt(D),h){case 9:case 32:if(0===C+k+E)switch(x){case 44:case 58:case 9:case 32:m="";break;default:32!==h&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===C+E+k&&(z=V=1,m="\f"+m);break;case 108:if(0===C+E+k+N&&0<L)switch(D-L){case 2:112===x&&58===u.charCodeAt(D-3)&&(N=x);case 8:111===P&&(N=P)}break;case 58:0===C+E+k&&(L=D);break;case 44:0===E+_+C+k&&(z=1,m+="\r");break;case 34:case 39:0===E&&(C=C===h?0:0===C?h:C);break;case 91:0===C+E+_&&k++;break;case 93:0===C+E+_&&k--;break;case 41:0===C+E+k&&_--;break;case 40:if(0===C+E+k){if(0===p)switch(2*x+3*P){case 533:break;default:p=1}_++}break;case 64:0===E+_+C+k+L+v&&(v=1);break;case 42:case 47:if(!(0<C+k+_))switch(E){case 0:switch(2*h+3*u.charCodeAt(D+1)){case 235:E=47;break;case 220:F=D,E=42}break;case 42:47===h&&42===x&&F+2!==D&&(33===u.charCodeAt(F+2)&&($+=u.substring(F,D+1)),m="",E=0)}}0===E&&(B+=m)}P=x,x=h,D++}if(0<(F=$.length)){if(z=r,0<M&&void 0!==(w=l(2,$,z,e,A,T,F,s,d,s))&&0===($=w).length)return H+$+W;if($=z.join(",")+"{"+$+"}",0!=R*N){switch(2!==R||a($,2)||(N=0),N){case 111:$=$.replace(b,":-moz-$1")+$;break;case 112:$=$.replace(y,"::-webkit-input-$1")+$.replace(y,"::-moz-$1")+$.replace(y,":-ms-input-$1")+$}N=0}}return H+$+W}function n(e,t,n){var o=t.trim().split(v);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<a;++l)t[l]=r(e,t[l],n).trim();break;default:var u=l=0;for(t=[];l<a;++l)for(var s=0;s<i;++s)t[u++]=r(e[s]+" ",o[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var u=i.substring(e,i.length-1).trim();return u=i.substring(0,e).trim()+u+";",1===R||2===R&&a(u,1)?"-webkit-"+u+u:u}if(0===R||2===R&&!a(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(x,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(u=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+u+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(u=i.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=i.replace(w,"tb");break;case 232:u=i.replace(w,"tb-rl");break;case 220:u=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+u+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(u=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:i=i.replace(u,"-webkit-"+u)+";"+i;break;case 207:case 102:i=i.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(u,"-webkit-"+u)+";"+i.replace(u,"-ms-"+u+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return u=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+u+"-ms-flex-"+u+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(E,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(E,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===C.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(u,"-webkit-"+u)+i.replace(u,"-moz-"+u.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),L(2!==t?r:r.replace(_,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,o,a,i,l,u,c){for(var f,d=0,p=t;d<M;++d)switch(f=P[d].call(s,e,p,n,r,o,a,i,l,u,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function u(e){return void 0!==(e=e.prefix)&&(L=null,e?"function"!=typeof e?R=1:(R=2,L=e):R=0),u}function s(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<M){var o=l(-1,n,r,r,A,T,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(I,r,n,0,0);return 0<M&&void 0!==(o=l(-2,a,r,r,A,T,a.length,0,0,0))&&(a=o),N=0,T=A=1,a}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,v=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,y=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,E=/-self|flex-/g,_=/[^]*?(:[rp][el]a[\w-]+)[^]*/,C=/stretch|:\s*\w+\-(?:conte|avail)/,x=/([^-])(image-set\()/,T=1,A=1,N=0,R=1,I=[],P=[],M=0,L=null,O=0;return s.use=function e(t){switch(t){case void 0:case null:M=P.length=0;break;default:if("function"==typeof t)P[M++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else O=0|!!t}return e},s.set=u,void 0!==e&&u(e),s},Lo={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Oo=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const Do=(zo={},function(e){return void 0===zo[e]&&(zo[e]=(t=e,Oo.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91)),zo[e];var t});var zo,Vo=n(679),Fo=n.n(Vo);function Uo(){return(Uo=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var jo=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},Bo=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,Ro.typeOf)(e)},$o=Object.freeze([]),Wo=Object.freeze({});function Ho(e){return"function"==typeof e}function qo(e){return e.displayName||e.name||"Component"}function Qo(e){return e&&"string"==typeof e.styledComponentId}var Go="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",Ko="undefined"!=typeof window&&"HTMLElement"in window,Yo=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY);function Xo(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var Jo=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&Xo(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),l=0,u=t.length;l<u;l++)this.tag.insertRule(i,t[l])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),Zo=new Map,ea=new Map,ta=1,na=function(e){if(Zo.has(e))return Zo.get(e);for(;ea.has(ta);)ta++;var t=ta++;return Zo.set(e,t),ea.set(t,e),t},ra=function(e){return ea.get(e)},oa=function(e,t){Zo.set(e,t),ea.set(t,e)},aa="style["+Go+'][data-styled-version="5.2.1"]',ia=new RegExp("^"+Go+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),la=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},ua=function(e,t){for(var n=t.innerHTML.split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var l=i.match(ia);if(l){var u=0|parseInt(l[1],10),s=l[2];0!==u&&(oa(s,u),la(e,s,l[3]),e.getTag().insertRules(u,r)),r.length=0}else r.push(i)}}},sa=function(){return n.nc},ca=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(Go))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(Go,"active"),r.setAttribute("data-styled-version","5.2.1");var i=sa();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},fa=function(){function e(e){var t=this.element=ca(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}Xo(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),da=function(){function e(e){var t=this.element=ca(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),pa=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),ha=Ko,va={isServer:!Ko,useCSSOMInjection:!Yo},ma=function(){function e(e,t,n){void 0===e&&(e=Wo),void 0===t&&(t={}),this.options=Uo({},va,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&Ko&&ha&&(ha=!1,function(e){for(var t=document.querySelectorAll(aa),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(Go)&&(ua(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return na(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Uo({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new pa(o):r?new fa(o):new da(o),new Jo(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(na(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(na(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(na(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=ra(o);if(void 0!==a){var i=e.names.get(a),l=t.getGroup(o);if(void 0!==i&&0!==l.length){var u=Go+".g"+o+'[id="'+a+'"]',s="";void 0!==i&&i.forEach((function(e){e.length>0&&(s+=e+",")})),r+=""+l+u+'{content:"'+s+'"}/*!sc*/\n'}}}return r}(this)},e}(),ga=/(a)(d)/gi,ya=function(e){return String.fromCharCode(e+(e>25?39:97))};function ba(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=ya(t%52)+n;return(ya(t%52)+n).replace(ga,"$1-$2")}var wa=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},Sa=function(e){return wa(5381,e)};function ka(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(Ho(n)&&!Qo(n))return!1}return!0}var Ea=Sa("5.2.1"),_a=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&ka(e),this.componentId=t,this.baseHash=wa(Ea,t),this.baseStyle=n,ma.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=ja(this.rules,e,t,n).join(""),i=ba(wa(this.baseHash,a.length)>>>0);if(!t.hasNameForId(r,i)){var l=n(a,"."+i,void 0,r);t.insertRules(r,i,l)}o.push(i),this.staticRulesId=i}else{for(var u=this.rules.length,s=wa(this.baseHash,n.hash),c="",f=0;f<u;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=ja(d,e,t,n),h=Array.isArray(p)?p.join(""):p;s=wa(s,h+f),c+=h}}if(c){var v=ba(s>>>0);if(!t.hasNameForId(r,v)){var m=n(c,"."+v,void 0,r);t.insertRules(r,v,m)}o.push(v)}}return o.join(" ")},e}(),Ca=/^\s*\/\/.*$/gm,xa=[":","[",".","#"];function Ta(e){var t,n,r,o,a=void 0===e?Wo:e,i=a.options,l=void 0===i?Wo:i,u=a.plugins,s=void 0===u?$o:u,c=new Mo(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,l,u,s,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===s)return r+"/*|*/";break;case 3:switch(s){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,a){return 0===r&&xa.includes(a[n.length])||a.match(o)?e:"."+t};function h(e,a,i,l){void 0===l&&(l="&");var u=e.replace(Ca,""),s=a&&i?i+" "+a+" { "+u+" }":u;return t=l,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),c(i||!a?"":a,s)}return c.use([].concat(s,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=s.length?s.reduce((function(e,t){return t.name||Xo(15),wa(e,t.name)}),5381).toString():"",h}var Aa=t.createContext(),Na=(Aa.Consumer,t.createContext()),Ra=(Na.Consumer,new ma),Ia=Ta();function Pa(){return(0,t.useContext)(Aa)||Ra}function Ma(e){var n=(0,t.useState)(e.stylisPlugins),r=n[0],o=n[1],a=Pa(),i=(0,t.useMemo)((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,t.useMemo)((function(){return Ta({options:{prefix:!e.disableVendorPrefixes},plugins:r})}),[e.disableVendorPrefixes,r]);return(0,t.useEffect)((function(){Po()(r,e.stylisPlugins)||o(e.stylisPlugins)}),[e.stylisPlugins]),t.createElement(Aa.Provider,{value:i},t.createElement(Na.Provider,{value:l},e.children))}var La=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Ia);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return Xo(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Ia),this.name+e.hash},e}(),Oa=/([A-Z])/,Da=/([A-Z])/g,za=/^ms-/,Va=function(e){return"-"+e.toLowerCase()};function Fa(e){return Oa.test(e)?e.replace(Da,Va).replace(za,"-ms-"):e}var Ua=function(e){return null==e||!1===e||""===e};function ja(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,l=e.length;i<l;i+=1)""!==(o=ja(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return Ua(e)?"":Qo(e)?"."+e.styledComponentId:Ho(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:ja(e(t),t,n,r):e instanceof La?n?(e.inject(n,r),e.getName(r)):e:Bo(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!Ua(t[i])&&(Bo(t[i])?a.push.apply(a,e(t[i],i)):Ho(t[i])?a.push(Fa(i)+":",t[i],";"):a.push(Fa(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in Lo?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var u}function Ba(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Ho(e)||Bo(e)?ja(jo($o,[e].concat(n))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:ja(jo(e,n))}new Set;var $a=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Wa=/(^-|-$)/g;function Ha(e){return e.replace($a,"-").replace(Wa,"")}function qa(e){return"string"==typeof e&&!0}var Qa=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Ga=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Ka(e,t,n){var r=e[n];Qa(t)&&Qa(r)?Ya(r,t):e[n]=t}function Ya(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(Qa(i))for(var l in i)Ga(l)&&Ka(e,i[l],l)}return e}var Xa=t.createContext();Xa.Consumer;var Ja={};function Za(e,n,r){var o=Qo(e),a=!qa(e),i=n.attrs,l=void 0===i?$o:i,u=n.componentId,s=void 0===u?function(e,t){var n="string"!=typeof e?"sc":Ha(e);Ja[n]=(Ja[n]||0)+1;var r=n+"-"+function(e){return ba(Sa(e)>>>0)}("5.2.1"+n+Ja[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):u,c=n.displayName,f=void 0===c?function(e){return qa(e)?"styled."+e:"Styled("+qo(e)+")"}(e):c,d=n.displayName&&n.componentId?Ha(n.displayName)+"-"+n.componentId:n.componentId||s,p=o&&e.attrs?Array.prototype.concat(e.attrs,l).filter(Boolean):l,h=n.shouldForwardProp;o&&e.shouldForwardProp&&(h=n.shouldForwardProp?function(t,r){return e.shouldForwardProp(t,r)&&n.shouldForwardProp(t,r)}:e.shouldForwardProp);var v,m=new _a(r,d,o?e.componentStyle:void 0),g=m.isStatic&&0===l.length,y=function(e,n){return function(e,n,r,o){var a=e.attrs,i=e.componentStyle,l=e.defaultProps,u=e.foldedComponentIds,s=e.shouldForwardProp,c=e.styledComponentId,f=e.target,d=function(e,t,n){void 0===e&&(e=Wo);var r=Uo({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in Ho(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(function(e,t,n){return void 0===n&&(n=Wo),e.theme!==n.theme&&e.theme||t||n.theme}(n,(0,t.useContext)(Xa),l)||Wo,n,a),p=d[0],h=d[1],v=function(e,n,r,o){var a=Pa(),i=(0,t.useContext)(Na)||Ia;return n?e.generateAndInjectStyles(Wo,a,i):e.generateAndInjectStyles(r,a,i)}(i,o,p),m=r,g=h.$as||n.$as||h.as||n.as||f,y=qa(g),b=h!==n?Uo({},n,{},h):n,w={};for(var S in b)"$"!==S[0]&&"as"!==S&&("forwardedAs"===S?w.as=b[S]:(s?s(S,Do):!y||Do(S))&&(w[S]=b[S]));return n.style&&h.style!==n.style&&(w.style=Uo({},n.style,{},h.style)),w.className=Array.prototype.concat(u,c,v!==c?v:null,n.className,h.className).filter(Boolean).join(" "),w.ref=m,(0,t.createElement)(g,w)}(v,e,n,g)};return y.displayName=f,(v=t.forwardRef(y)).attrs=p,v.componentStyle=m,v.displayName=f,v.shouldForwardProp=h,v.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):$o,v.styledComponentId=d,v.target=o?e.target:e,v.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),a=t&&t+"-"+(qa(e)?e:Ha(qo(e)));return Za(e,Uo({},o,{attrs:p,componentId:a}),r)},Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Ya({},e.defaultProps,t):t}}),v.toString=function(){return"."+v.styledComponentId},a&&Fo()(v,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),v}var ei,ti=function(e){return function e(t,n,r){if(void 0===r&&(r=Wo),!(0,Ro.isValidElementType)(n))return Xo(1,String(n));var o=function(){return t(n,r,Ba.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,Uo({},r,{},o))},o.attrs=function(o){return e(t,n,Uo({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Za,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){ti[e]=ti(e)})),(ei=function(e,t){this.rules=e,this.componentId=t,this.isStatic=ka(e),ma.registerId(this.componentId+1)}.prototype).createStyles=function(e,t,n,r){var o=r(ja(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},ei.removeStyles=function(e,t){t.clearRules(this.componentId+e)},ei.renderStyles=function(e,t,n,r){e>2&&ma.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString(),n=sa();return"<style "+[n&&'nonce="'+n+'"',Go+'="true"','data-styled-version="5.2.1"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?Xo(2):e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)return Xo(2);var r=((n={})[Go]="",n["data-styled-version"]="5.2.1",n.dangerouslySetInnerHTML={__html:e.instance.toString()},n),o=sa();return o&&(r.nonce=o),[t.createElement("style",Uo({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new ma({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?Xo(2):t.createElement(Ma,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return Xo(3)}}();const ni="dialog_shown",ri=ti.button`
  margin-left: auto;
  margin-right: auto;
`;function oi(){const[e,n]=(0,t.useState)(!1);return(0,t.useEffect)((()=>{localStorage.getItem(ni)||n(!0)}),[]),e&&t.createElement("div",{id:"dialog",className:"dialog-wrapper fixed top-0 w-full h-full flex justify-center items-center z-10"},t.createElement("div",{className:"dialog rounded m-6 p-6 text-lg md:w-2/3 z-10"},t.createElement("p",{className:"mb-6"},"You ever tried clapping while holding your phone?"),t.createElement("p",null,"Well now you can"),t.createElement(ri,{className:"rounded p-2 text-md w-full bg-green-500 mt-8 text-white",onClick:function(){n(!1),localStorage.setItem(ni,"Y")}},"Close")),t.createElement("div",{className:"dialog-bg inset-0 opacity-50 bg-white absolute"}))}function ai(){const e=fo(yo);return(0,t.useEffect)((()=>{window.addEventListener("beforeinstallprompt",(t=>{ho("Prompting install"),t.preventDefault(),e(t)}))}),[]),t.createElement(t.Fragment,null,t.createElement(oi,null),t.createElement(wo,null),t.createElement("div",{className:"page-content"},t.createElement(No,null)))}(0,e.render)(t.createElement(uo,null,t.createElement(ai,null)),document.getElementById("root")),ho("Initialising")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,