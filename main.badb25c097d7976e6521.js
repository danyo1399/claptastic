/*! For license information please see main.badb25c097d7976e6521.js.LICENSE.txt */
(()=>{var e={679:(e,t,n)=>{"use strict";var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<i.length;++v){var g=i[v];if(!(a[g]||r&&r[g]||m&&m[g]||l&&l[g])){var y=d(n,g);try{s(t,g,y)}catch(e){}}}}return t}},483:(e,t,n)=>{e.exports=function e(t,n,r){function o(i,l){if(!n[i]){if(!t[i]){if(a)return a(i,!0);var u=new Error("Cannot find module '"+i+"'");throw u.code="MODULE_NOT_FOUND",u}var s=n[i]={exports:{}};t[i][0].call(s.exports,(function(e){return o(t[i][1][e]||e)}),s,s.exports,e,t,n,r)}return n[i].exports}for(var a=void 0,i=0;i<r.length;i++)o(r[i]);return o}({1:[function(e,t,r){(function(e){"use strict";var n,r,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var a=0,i=new o(c),l=e.document.createTextNode("");i.observe(l,{characterData:!0}),n=function(){l.data=a=++a%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){c(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(c,0)};else{var u=new e.MessageChannel;u.port1.onmessage=c,n=function(){u.port2.postMessage(0)}}var s=[];function c(){var e,t;r=!0;for(var n=s.length;n;){for(t=s,s=[],e=-1;++e<n;)t[e]();n=s.length}r=!1}t.exports=function(e){1!==s.push(e)||r||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){"use strict";var r=e(1);function o(){}var a={},i=["REJECTED"],l=["FULFILLED"],u=["PENDING"];function s(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,e!==o&&p(this,e)}function c(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function f(e,t,n){r((function(){var r;try{r=t(n)}catch(t){return a.reject(e,t)}r===e?a.reject(e,new TypeError("Cannot resolve promise with itself")):a.resolve(e,r)}))}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var n=!1;function r(t){n||(n=!0,a.reject(e,t))}function o(t){n||(n=!0,a.resolve(e,t))}var i=h((function(){t(o,r)}));"error"===i.status&&r(i.value)}function h(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=s,s.prototype.catch=function(e){return this.then(null,e)},s.prototype.then=function(e,t){if("function"!=typeof e&&this.state===l||"function"!=typeof t&&this.state===i)return this;var n=new this.constructor(o);return this.state!==u?f(n,this.state===l?e:t,this.outcome):this.queue.push(new c(n,e,t)),n},c.prototype.callFulfilled=function(e){a.resolve(this.promise,e)},c.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},c.prototype.callRejected=function(e){a.reject(this.promise,e)},c.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},a.resolve=function(e,t){var n=h(d,t);if("error"===n.status)return a.reject(e,n.value);var r=n.value;if(r)p(e,r);else{e.state=l,e.outcome=t;for(var o=-1,i=e.queue.length;++o<i;)e.queue[o].callFulfilled(t)}return e},a.reject=function(e,t){e.state=i,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},s.resolve=function(e){return e instanceof this?e:a.resolve(new this(o),e)},s.reject=function(e){var t=new this(o);return a.reject(t,e)},s.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var i=new Array(n),l=0,u=-1,s=new this(o);++u<n;)c(e[u],u);return s;function c(e,o){t.resolve(e).then((function(e){i[o]=e,++l!==n||r||(r=!0,a.resolve(s,i))}),(function(e){r||(r=!0,a.reject(s,e))}))}},s.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n,r=e.length,i=!1;if(!r)return this.resolve([]);for(var l=-1,u=new this(o);++l<r;)n=e[l],t.resolve(n).then((function(e){i||(i=!0,a.resolve(u,e))}),(function(e){i||(i=!0,a.reject(u,e))}));return u}},{1:1}],3:[function(e,t,r){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var o=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function a(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var i=Promise;function l(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function u(e,t,n){"function"==typeof t&&e.then(t),"function"==typeof n&&e.catch(n)}function s(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function c(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var f="local-forage-detect-blob-support",d=void 0,p={},h=Object.prototype.toString,m="readonly",v="readwrite";function g(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),o=0;o<t;o++)r[o]=e.charCodeAt(o);return n}function y(e){return"boolean"==typeof d?i.resolve(d):function(e){return new i((function(t){var n=e.transaction(f,v),r=a([""]);n.objectStore(f).put(r,"key"),n.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},n.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)}})).catch((function(){return!1}))}(e).then((function(e){return d=e}))}function b(e){var t=p[e.name],n={};n.promise=new i((function(e,t){n.resolve=e,n.reject=t})),t.deferredOperations.push(n),t.dbReady?t.dbReady=t.dbReady.then((function(){return n.promise})):t.dbReady=n.promise}function w(e){var t=p[e.name].deferredOperations.pop();if(t)return t.resolve(),t.promise}function S(e,t){var n=p[e.name].deferredOperations.pop();if(n)return n.reject(t),n.promise}function k(e,t){return new i((function(n,r){if(p[e.name]=p[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);b(e),e.db.close()}var a=[e.name];t&&a.push(e.version);var i=o.open.apply(o,a);t&&(i.onupgradeneeded=function(t){var n=i.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore(f)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),i.onerror=function(e){e.preventDefault(),r(i.error)},i.onsuccess=function(){n(i.result),w(e)}}))}function E(e){return k(e,!1)}function _(e){return k(e,!0)}function x(e,t){if(!e.db)return!0;var n=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,o=e.version>e.db.version;if(r&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||n){if(n){var a=e.db.version+1;a>e.version&&(e.version=a)}return!0}return!1}function C(e){return a([g(atob(e.data))],{type:e.type})}function T(e){return e&&e.__local_forage_encoded_blob}function A(e){var t=this,n=t._initReady().then((function(){var e=p[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady}));return u(n,e,e),n}function N(e,t,n,r){void 0===r&&(r=1);try{var o=e.db.transaction(e.storeName,t);n(null,o)}catch(o){if(r>0&&(!e.db||"InvalidStateError"===o.name||"NotFoundError"===o.name))return i.resolve().then((function(){if(!e.db||"NotFoundError"===o.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),_(e)})).then((function(){return function(e){b(e);for(var t=p[e.name],n=t.forages,r=0;r<n.length;r++){var o=n[r];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return e.db=null,E(e).then((function(t){return e.db=t,x(e)?_(e):t})).then((function(r){e.db=t.db=r;for(var o=0;o<n.length;o++)n[o]._dbInfo.db=r})).catch((function(t){throw S(e,t),t}))}(e).then((function(){N(e,t,n,r-1)}))})).catch(n);n(o)}}var R={_driver:"asyncStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=e[r];var o=p[n.name];o||(o={forages:[],db:null,dbReady:null,deferredOperations:[]},p[n.name]=o),o.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=A);var a=[];function l(){return i.resolve()}for(var u=0;u<o.forages.length;u++){var s=o.forages[u];s!==t&&a.push(s._initReady().catch(l))}var c=o.forages.slice(0);return i.all(a).then((function(){return n.db=o.db,E(n)})).then((function(e){return n.db=e,x(n,t._defaultConfig.version)?_(n):e})).then((function(e){n.db=o.db=e,t._dbInfo=n;for(var r=0;r<c.length;r++){var a=c[r];a!==t&&(a._dbInfo.db=n.db,a._dbInfo.version=n.version)}}))},_support:function(){try{if(!o||!o.open)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){N(n._dbInfo,m,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).openCursor(),l=1;i.onsuccess=function(){var n=i.result;if(n){var r=n.value;T(r)&&(r=C(r));var o=e(r,n.key,l++);void 0!==o?t(o):n.continue()}else t()},i.onerror=function(){r(i.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},getItem:function(e,t){var n=this;e=s(e);var r=new i((function(t,r){n.ready().then((function(){N(n._dbInfo,m,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).get(e);i.onsuccess=function(){var e=i.result;void 0===e&&(e=null),T(e)&&(e=C(e)),t(e)},i.onerror=function(){r(i.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},setItem:function(e,t,n){var r=this;e=s(e);var o=new i((function(n,o){var a;r.ready().then((function(){return a=r._dbInfo,"[object Blob]"===h.call(t)?y(a.db).then((function(e){return e?t:(n=t,new i((function(e,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:r,type:n.type})},r.readAsBinaryString(n)})));var n})):t})).then((function(t){N(r._dbInfo,v,(function(a,i){if(a)return o(a);try{var l=i.objectStore(r._dbInfo.storeName);null===t&&(t=void 0);var u=l.put(t,e);i.oncomplete=function(){void 0===t&&(t=null),n(t)},i.onabort=i.onerror=function(){var e=u.error?u.error:u.transaction.error;o(e)}}catch(e){o(e)}}))})).catch(o)}));return l(o,n),o},removeItem:function(e,t){var n=this;e=s(e);var r=new i((function(t,r){n.ready().then((function(){N(n._dbInfo,v,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).delete(e);a.oncomplete=function(){t()},a.onerror=function(){r(i.error)},a.onabort=function(){var e=i.error?i.error:i.transaction.error;r(e)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},clear:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){N(t._dbInfo,v,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=a.error?a.error:a.transaction.error;n(e)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},length:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){N(t._dbInfo,m,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).count();a.onsuccess=function(){e(a.result)},a.onerror=function(){n(a.error)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},key:function(e,t){var n=this,r=new i((function(t,r){e<0?t(null):n.ready().then((function(){N(n._dbInfo,m,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName),l=!1,u=i.openKeyCursor();u.onsuccess=function(){var n=u.result;n?0===e||l?t(n.key):(l=!0,n.advance(e)):t(null)},u.onerror=function(){r(u.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},keys:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){N(t._dbInfo,m,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).openKeyCursor(),i=[];a.onsuccess=function(){var t=a.result;t?(i.push(t.key),t.continue()):e(i)},a.onerror=function(){n(a.error)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},dropInstance:function(e,t){t=c.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,a=this;if(e.name){var u=e.name===n.name&&a._dbInfo.db?i.resolve(a._dbInfo.db):E(e).then((function(t){var n=p[e.name],r=n.forages;n.db=t;for(var o=0;o<r.length;o++)r[o]._dbInfo.db=t;return t}));r=e.storeName?u.then((function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1;b(e);var r=p[e.name],a=r.forages;t.close();for(var l=0;l<a.length;l++){var u=a[l];u._dbInfo.db=null,u._dbInfo.version=n}return new i((function(t,r){var a=o.open(e.name,n);a.onerror=function(e){a.result.close(),r(e)},a.onupgradeneeded=function(){a.result.deleteObjectStore(e.storeName)},a.onsuccess=function(){var e=a.result;e.close(),t(e)}})).then((function(e){r.db=e;for(var t=0;t<a.length;t++){var n=a[t];n._dbInfo.db=e,w(n._dbInfo)}})).catch((function(t){throw(S(e,t)||i.resolve()).catch((function(){})),t}))}})):u.then((function(t){b(e);var n=p[e.name],r=n.forages;t.close();for(var a=0;a<r.length;a++)r[a]._dbInfo.db=null;return new i((function(t,n){var r=o.deleteDatabase(e.name);r.onerror=r.onblocked=function(e){var t=r.result;t&&t.close(),n(e)},r.onsuccess=function(){var e=r.result;e&&e.close(),t(e)}})).then((function(e){n.db=e;for(var t=0;t<r.length;t++)w(r[t]._dbInfo)})).catch((function(t){throw(S(e,t)||i.resolve()).catch((function(){})),t}))}))}else r=i.reject("Invalid arguments");return l(r,t),r}};var I="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",P=/^~~local_forage_type~([^~]+)~/,M="__lfsc__:",L=M.length,O="arbf",D="blob",z="si08",V="ui08",F="uic8",U="si16",j="si32",B="ur16",$="ui32",W="fl32",H="fl64",q=L+O.length,Q=Object.prototype.toString;function G(e){var t,n,r,o,a,i=.75*e.length,l=e.length,u=0;"="===e[e.length-1]&&(i--,"="===e[e.length-2]&&i--);var s=new ArrayBuffer(i),c=new Uint8Array(s);for(t=0;t<l;t+=4)n=I.indexOf(e[t]),r=I.indexOf(e[t+1]),o=I.indexOf(e[t+2]),a=I.indexOf(e[t+3]),c[u++]=n<<2|r>>4,c[u++]=(15&r)<<4|o>>2,c[u++]=(3&o)<<6|63&a;return s}function K(e){var t,n=new Uint8Array(e),r="";for(t=0;t<n.length;t+=3)r+=I[n[t]>>2],r+=I[(3&n[t])<<4|n[t+1]>>4],r+=I[(15&n[t+1])<<2|n[t+2]>>6],r+=I[63&n[t+2]];return n.length%3==2?r=r.substring(0,r.length-1)+"=":n.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var Y={serialize:function(e,t){var n="";if(e&&(n=Q.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===Q.call(e.buffer))){var r,o=M;e instanceof ArrayBuffer?(r=e,o+=O):(r=e.buffer,"[object Int8Array]"===n?o+=z:"[object Uint8Array]"===n?o+=V:"[object Uint8ClampedArray]"===n?o+=F:"[object Int16Array]"===n?o+=U:"[object Uint16Array]"===n?o+=B:"[object Int32Array]"===n?o+=j:"[object Uint32Array]"===n?o+=$:"[object Float32Array]"===n?o+=W:"[object Float64Array]"===n?o+=H:t(new Error("Failed to get type for BinaryArray"))),t(o+K(r))}else if("[object Blob]"===n){var a=new FileReader;a.onload=function(){var n="~~local_forage_type~"+e.type+"~"+K(this.result);t("__lfsc__:blob"+n)},a.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},deserialize:function(e){if(e.substring(0,L)!==M)return JSON.parse(e);var t,n=e.substring(q),r=e.substring(L,q);if(r===D&&P.test(n)){var o=n.match(P);t=o[1],n=n.substring(o[0].length)}var i=G(n);switch(r){case O:return i;case D:return a([i],{type:t});case z:return new Int8Array(i);case V:return new Uint8Array(i);case F:return new Uint8ClampedArray(i);case U:return new Int16Array(i);case B:return new Uint16Array(i);case j:return new Int32Array(i);case $:return new Uint32Array(i);case W:return new Float32Array(i);case H:return new Float64Array(i);default:throw new Error("Unkown type: "+r)}},stringToBuffer:G,bufferToString:K};function X(e,t,n,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,r)}function J(e,t,n,r,o,a){e.executeSql(n,r,o,(function(e,i){i.code===i.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],(function(e,l){l.rows.length?a(e,i):X(e,t,(function(){e.executeSql(n,r,o,a)}),a)}),a):a(e,i)}),a)}function Z(e,t,n,r){var o=this;e=s(e);var a=new i((function(a,i){o.ready().then((function(){void 0===t&&(t=null);var l=t,u=o._dbInfo;u.serializer.serialize(t,(function(t,s){s?i(s):u.db.transaction((function(n){J(n,u,"INSERT OR REPLACE INTO "+u.storeName+" (key, value) VALUES (?, ?)",[e,t],(function(){a(l)}),(function(e,t){i(t)}))}),(function(t){if(t.code===t.QUOTA_ERR){if(r>0)return void a(Z.apply(o,[e,l,n,r-1]));i(t)}}))}))})).catch(i)}));return l(a,n),a}function ee(e){return new i((function(t,n){e.transaction((function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,r){for(var o=[],a=0;a<r.rows.length;a++)o.push(r.rows.item(a).name);t({db:e,storeNames:o})}),(function(e,t){n(t)}))}),(function(e){n(e)}))}))}var te={_driver:"webSQLStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]="string"!=typeof e[r]?e[r].toString():e[r];var o=new i((function(e,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return r(e)}n.db.transaction((function(o){X(o,n,(function(){t._dbInfo=n,e()}),(function(e,t){r(t)}))}),r)}));return n.serializer=Y,o},_support:"function"==typeof openDatabase,iterate:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){J(n,o,"SELECT * FROM "+o.storeName,[],(function(n,r){for(var a=r.rows,i=a.length,l=0;l<i;l++){var u=a.item(l),s=u.value;if(s&&(s=o.serializer.deserialize(s)),void 0!==(s=e(s,u.key,l+1)))return void t(s)}t()}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},getItem:function(e,t){var n=this;e=s(e);var r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){J(n,o,"SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],(function(e,n){var r=n.rows.length?n.rows.item(0).value:null;r&&(r=o.serializer.deserialize(r)),t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},setItem:function(e,t,n){return Z.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this;e=s(e);var r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){J(n,o,"DELETE FROM "+o.storeName+" WHERE key = ?",[e],(function(){t()}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},clear:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"DELETE FROM "+r.storeName,[],(function(){e()}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},length:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],(function(t,n){var r=n.rows.item(0).c;e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},key:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){J(n,o,"SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],(function(e,n){var r=n.rows.length?n.rows.item(0).key:null;t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},keys:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){J(t,r,"SELECT key FROM "+r.storeName,[],(function(t,n){for(var r=[],o=0;o<n.rows.length;o++)r.push(n.rows.item(o).key);e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},dropInstance:function(e,t){t=c.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,o=this;return l(r=e.name?new i((function(t){var r;r=e.name===n.name?o._dbInfo.db:openDatabase(e.name,"","",0),e.storeName?t({db:r,storeNames:[e.storeName]}):t(ee(r))})).then((function(e){return new i((function(t,n){e.db.transaction((function(r){function o(e){return new i((function(t,n){r.executeSql("DROP TABLE IF EXISTS "+e,[],(function(){t()}),(function(e,t){n(t)}))}))}for(var a=[],l=0,u=e.storeNames.length;l<u;l++)a.push(o(e.storeNames[l]));i.all(a).then((function(){t()})).catch((function(e){n(e)}))}),(function(e){n(e)}))}))})):i.reject("Invalid arguments"),t),r}};function ne(e,t){var n=e.name+"/";return e.storeName!==t.storeName&&(n+=e.storeName+"/"),n}function re(){return!function(){var e="_localforage_support_test";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch(e){return!0}}()||localStorage.length>0}var oe={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=ne(e,this._defaultConfig),re()?(this._dbInfo=t,t.serializer=Y,i.resolve()):i.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=n.ready().then((function(){for(var t=n._dbInfo,r=t.keyPrefix,o=r.length,a=localStorage.length,i=1,l=0;l<a;l++){var u=localStorage.key(l);if(0===u.indexOf(r)){var s=localStorage.getItem(u);if(s&&(s=t.serializer.deserialize(s)),void 0!==(s=e(s,u.substring(o),i++)))return s}}}));return l(r,t),r},getItem:function(e,t){var n=this;e=s(e);var r=n.ready().then((function(){var t=n._dbInfo,r=localStorage.getItem(t.keyPrefix+e);return r&&(r=t.serializer.deserialize(r)),r}));return l(r,t),r},setItem:function(e,t,n){var r=this;e=s(e);var o=r.ready().then((function(){void 0===t&&(t=null);var n=t;return new i((function(o,a){var i=r._dbInfo;i.serializer.serialize(t,(function(t,r){if(r)a(r);else try{localStorage.setItem(i.keyPrefix+e,t),o(n)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||a(e),a(e)}}))}))}));return l(o,n),o},removeItem:function(e,t){var n=this;e=s(e);var r=n.ready().then((function(){var t=n._dbInfo;localStorage.removeItem(t.keyPrefix+e)}));return l(r,t),r},clear:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var r=localStorage.key(n);0===r.indexOf(e)&&localStorage.removeItem(r)}}));return l(n,e),n},length:function(e){var t=this.keys().then((function(e){return e.length}));return l(t,e),t},key:function(e,t){var n=this,r=n.ready().then((function(){var t,r=n._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(r.keyPrefix.length)),t}));return l(r,t),r},keys:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo,n=localStorage.length,r=[],o=0;o<n;o++){var a=localStorage.key(o);0===a.indexOf(e.keyPrefix)&&r.push(a.substring(e.keyPrefix.length))}return r}));return l(n,e),n},dropInstance:function(e,t){if(t=c.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var n=this.config();e.name=e.name||n.name,e.storeName=e.storeName||n.storeName}var r,o=this;return l(r=e.name?new i((function(t){e.storeName?t(ne(e,o._defaultConfig)):t(e.name+"/")})).then((function(e){for(var t=localStorage.length-1;t>=0;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}})):i.reject("Invalid arguments"),t),r}},ae=function(e,t){for(var n=e.length,r=0;r<n;){if((o=e[r])===(a=t)||"number"==typeof o&&"number"==typeof a&&isNaN(o)&&isNaN(a))return!0;r++}var o,a;return!1},ie=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},le={},ue={},se={INDEXEDDB:R,WEBSQL:te,LOCALSTORAGE:oe},ce=[se.INDEXEDDB._driver,se.WEBSQL._driver,se.LOCALSTORAGE._driver],fe=["dropInstance"],de=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(fe),pe={description:"",driver:ce.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function he(e,t){e[t]=function(){var n=arguments;return e.ready().then((function(){return e[t].apply(e,n)}))}}function me(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var n in t)t.hasOwnProperty(n)&&(ie(t[n])?arguments[0][n]=t[n].slice():arguments[0][n]=t[n])}return arguments[0]}var ve=new(function(){function e(t){for(var n in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),se)if(se.hasOwnProperty(n)){var r=se[n],o=r._driver;this[n]=o,le[o]||this.defineDriver(r)}this._defaultConfig=me({},pe),this._config=me({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":r(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e)||!e.driver||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,n){var r=new i((function(t,n){try{var r=e._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void n(o);for(var a=de.concat("_initStorage"),u=0,s=a.length;u<s;u++){var c=a[u];if((!ae(fe,c)||e[c])&&"function"!=typeof e[c])return void n(o)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),n=i.reject(t);return l(n,arguments[arguments.length-1]),n}},n=0,r=fe.length;n<r;n++){var o=fe[n];e[o]||(e[o]=t(o))}}();var f=function(n){le[r]&&console.info("Redefining LocalForage driver: "+r),le[r]=e,ue[r]=n,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(f,n):f(!!e._support):f(!0)}catch(e){n(e)}}));return u(r,t,n),r},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,n){var r=le[e]?i.resolve(le[e]):i.reject(new Error("Driver not found."));return u(r,t,n),r},e.prototype.getSerializer=function(e){var t=i.resolve(Y);return u(t,e),t},e.prototype.ready=function(e){var t=this,n=t._driverSet.then((function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready}));return u(n,e,e),n},e.prototype.setDriver=function(e,t,n){var r=this;ie(e)||(e=[e]);var o=this._getSupportedDrivers(e);function a(){r._config.driver=r.driver()}function l(e){return r._extend(e),a(),r._ready=r._initStorage(r._config),r._ready}var s=null!==this._driverSet?this._driverSet.catch((function(){return i.resolve()})):i.resolve();return this._driverSet=s.then((function(){var e=o[0];return r._dbInfo=null,r._ready=null,r.getDriver(e).then((function(e){r._driver=e._driver,a(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var o=e[t];return t++,r._dbInfo=null,r._ready=null,r.getDriver(o).then(l).catch(n)}a();var u=new Error("No available storage method found.");return r._driverSet=i.reject(u),r._driverSet}()}}(o)}))})).catch((function(){a();var e=new Error("No available storage method found.");return r._driverSet=i.reject(e),r._driverSet})),u(this._driverSet,t,n),this._driverSet},e.prototype.supports=function(e){return!!ue[e]},e.prototype._extend=function(e){me(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e[n];this.supports(o)&&t.push(o)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=de.length;e<t;e++)he(this,de[e])},e.prototype.createInstance=function(t){return new e(t)},e}());t.exports=ve},{3:3}]},{},[4])(4)},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),a=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var S=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,E=60106,_=60107,x=60108,C=60114,T=60109,A=60110,N=60112,R=60113,I=60120,P=60115,M=60116,L=60121,O=60128,D=60129,z=60130,V=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;k=F("react.element"),E=F("react.portal"),_=F("react.fragment"),x=F("react.strict_mode"),C=F("react.profiler"),T=F("react.provider"),A=F("react.context"),N=F("react.forward_ref"),R=F("react.suspense"),I=F("react.suspense_list"),P=F("react.memo"),M=F("react.lazy"),L=F("react.block"),F("react.scope"),O=F("react.opaque.id"),D=F("react.debug_trace_mode"),z=F("react.offscreen"),V=F("react.legacy_hidden")}var U,j="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=j&&e[j]||e["@@iterator"])?e:null}function $(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);U=t&&t[1]||""}return"\n"+U+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function q(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _:return"Fragment";case E:return"Portal";case C:return"Profiler";case x:return"StrictMode";case R:return"Suspense";case I:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case A:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case N:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case P:return Q(e.type);case L:return Q(e._render);case M:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function G(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function se(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function Se(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var ke=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Te=null,Ae=null;function Ne(e){if(e=Zr(e)){if("function"!=typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=to(t),Ce(e.stateNode,e.type,t))}}function Re(e){Te?Ae?Ae.push(e):Ae=[e]:Te=e}function Ie(){if(Te){var e=Te,t=Ae;if(Ae=Te=null,Ne(e),t)for(e=0;e<t.length;e++)Ne(t[e])}}function Pe(e,t){return e(t)}function Me(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var Oe=Pe,De=!1,ze=!1;function Ve(){null===Te&&null===Ae||(Le(),Ie())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ue=!1;if(f)try{var je={};Object.defineProperty(je,"passive",{get:function(){Ue=!0}}),window.addEventListener("test",je,je),window.removeEventListener("test",je,je)}catch(me){Ue=!1}function Be(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var $e=!1,We=null,He=!1,qe=null,Qe={onError:function(e){$e=!0,We=e}};function Ge(e,t,n,r,o,a,i,l,u){$e=!1,We=null,Be.apply(Qe,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Ke(e)!==e)throw Error(i(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Xe(o),e;if(a===r)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=Jr(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&gt(it)&&(it=null),null!==lt&&gt(lt)&&(lt=null),null!==ut&&gt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function St(e){function t(t){return wt(t,e)}if(0<at.length){wt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},_t={},xt={};function Ct(e){if(_t[e])return _t[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in xt)return _t[e]=n[t];return e}f&&(xt=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Tt=Ct("animationend"),At=Ct("animationiteration"),Nt=Ct("animationstart"),Rt=Ct("transitionend"),It=new Map,Pt=new Map,Mt=["abort","abort",Tt,"animationEnd",At,"animationIteration",Nt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Rt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(r,t),It.set(r,o),s(o,[r])}}(0,a.unstable_now)();var Ot=8;function Dt(e){if(0!=(1&e))return Ot=15,1;if(0!=(2&e))return Ot=14,2;if(0!=(4&e))return Ot=13,4;var t=24&e;return 0!==t?(Ot=12,t):0!=(32&e)?(Ot=11,32):0!=(t=192&e)?(Ot=10,t):0!=(256&e)?(Ot=9,256):0!=(t=3584&e)?(Ot=8,t):0!=(4096&e)?(Ot=7,4096):0!=(t=4186112&e)?(Ot=6,t):0!=(t=62914560&e)?(Ot=5,t):67108864&e?(Ot=4,67108864):0!=(134217728&e)?(Ot=3,134217728):0!=(t=805306368&e)?(Ot=2,t):0!=(1073741824&e)?(Ot=1,1073741824):(Ot=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return Ot=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=Ot=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=Dt(u),o=Ot):0!=(l&=a)&&(r=Dt(l),o=Ot)}else 0!=(a=n&~i)?(r=Dt(a),o=Ot):0!==l&&(r=Dt(l),o=Ot);if(0===r)return 0;if(r=n&((0>(r=31-$t(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Dt(t),o<=Ot)return t;Ot=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-$t(t)),r|=e[n],t&=~o;return r}function Vt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Ft(10,t):e;case 10:return 0===(e=Ut(192&~t))?Ft(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&0===(e=Ut(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ut(e){return e&-e}function jt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-$t(t)]=n}var $t=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,qt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Gt=!0;function Kt(e,t,n,r){De||Le();var o=Xt,a=De;De=!0;try{Me(o,e,t,n,r)}finally{(De=a)||Ve()}}function Yt(e,t,n,r){Qt(qt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Gt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Jt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,mt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Ir(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=xe(r);if(null!==(o=Jr(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ye(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ir(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),vn=ln(mn),gn=ln(o({},mn,{dataTransfer:0})),yn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=ln(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Sn=ln(o({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function Cn(){return xn}var Tn=ln(o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),An=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Rn=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),In=ln(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Pn=[9,13,27,32],Mn=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var On=f&&"TextEvent"in window&&!Ln,Dn=f&&(!Mn||Ln&&8<Ln&&11>=Ln),zn=String.fromCharCode(32),Vn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Wn(e,t,n,r){Re(r),0<(t=Mr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,qn=null;function Qn(e){xr(e,0)}function Gn(e){if(X(eo(e)))return e}function Kn(e,t){if("change"===e)return t}var Yn=!1;if(f){var Xn;if(f){var Jn="oninput"in document;if(!Jn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Jn="function"==typeof Zn.oninput}Xn=Jn}else Xn=!1;Yn=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Hn&&(Hn.detachEvent("onpropertychange",tr),qn=Hn=null)}function tr(e){if("value"===e.propertyName&&Gn(qn)){var t=[];if(Wn(t,qn,e,xe(e)),e=Qn,De)e(t);else{De=!0;try{Pe(e,t)}finally{De=!1,Ve()}}}}function nr(e,t,n){"focusin"===e?(er(),qn=n,(Hn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(qn)}function or(e,t){if("click"===e)return Gn(t)}function ar(e,t){if("input"===e||"change"===e)return Gn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,vr=null,gr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==mr||mr!==J(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&ur(gr,r)||(gr=r,0<(r=Mr(vr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(Mt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<wr.length;Sr++)Pt.set(wr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function _r(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Ge.apply(this,arguments),$e){if(!$e)throw Error(i(198));var c=We;$e=!1,We=null,He||(He=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function xr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;_r(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;_r(o,l,s),a=u}}}if(He)throw e=qe,He=!1,qe=null,e}function Cr(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Rr(t,e,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Ar(e){e[Tr]||(e[Tr]=!0,l.forEach((function(t){Er.has(t)||Nr(t,!1,e,null),Nr(t,!0,e,null)})))}function Nr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Er.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Rr(a,e,o,t),i.add(l))}function Rr(e,t,n,r){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Yt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!Ue||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ir(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Jr(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{Oe(e,t,n)}finally{ze=!1,Ve()}}((function(){var r=a,o=xe(n),i=[];e:{var l=It.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Tn;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Nn;break;case Tt:case At:case Nt:u=bn;break;case Rt:u=Rn;break;case"scroll":u=hn;break;case"wheel":u=In;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=An}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Fe(h,d))&&c.push(Pr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Jr(s)&&!s[Yr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Jr(s):null)&&(s!==(f=Ke(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=An,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:eo(u),p=null==s?l:eo(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,Jr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Lr(p))h++;for(p=0,m=d;m;m=Lr(m))p++;for(;0<h-p;)c=Lr(c),h--;for(;0<p-h;)d=Lr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Lr(c),d=Lr(d)}c=null}else c=null;null!==u&&Or(i,l,u,c,!1),null!==s&&null!==f&&Or(i,f,s,c,!0)}if("select"===(u=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Kn;else if($n(l))if(Yn)v=ar;else{v=rr;var g=nr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=or);switch(v&&(v=v(e,r))?Wn(i,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&oe(l,"number",l.value)),g=r?eo(r):window,e){case"focusin":($n(g)||"true"===g.contentEditable)&&(mr=g,vr=r,gr=null);break;case"focusout":gr=vr=mr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(i,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(i,n,o)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else jn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(jn||"onCompositionStart"!==b?"onCompositionEnd"===b&&jn&&(y=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,jn=!0)),0<(g=Mr(r,b)).length&&(b=new Sn(b,e,null,n,o),i.push({event:b,listeners:g}),(y||null!==(y=Un(n)))&&(b.data=y))),(y=On?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Vn=!0,zn);case"textInput":return(e=t.data)===zn&&Vn?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Mn&&Fn(e,t)?(e=nn(),tn=en=Zt=null,jn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(o=new Sn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}xr(i,t)}))}function Pr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Fe(e,n))&&r.unshift(Pr(e,a,o)),null!=(a=Fe(e,t))&&r.push(Pr(e,a,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Or(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Fe(n,a))&&i.unshift(Pr(n,u,l)):o||null!=(u=Fe(n,a))&&i.push(Pr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var zr=null,Vr=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ur(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var jr="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function $r(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0,Qr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Qr,Kr="__reactProps$"+Qr,Yr="__reactContainer$"+Qr,Xr="__reactEvents$"+Qr;function Jr(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Gr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Gr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function to(e){return e[Kr]||null}function no(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){oo++,ro[oo]=e.current,e.current=t}var uo={},so=ao(uo),co=ao(!1),fo=uo;function po(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return null!=e.childContextTypes}function mo(){io(co),io(so)}function vo(e,t,n){if(so.current!==uo)throw Error(i(168));lo(so,t),lo(co,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,Q(t)||"Unknown",a));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,fo=so.current,lo(so,e),lo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=go(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,io(co),io(so),lo(so,e)):io(co),lo(co,n)}var wo=null,So=null,ko=a.unstable_runWithPriority,Eo=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,xo=a.unstable_shouldYield,Co=a.unstable_requestPaint,To=a.unstable_now,Ao=a.unstable_getCurrentPriorityLevel,No=a.unstable_ImmediatePriority,Ro=a.unstable_UserBlockingPriority,Io=a.unstable_NormalPriority,Po=a.unstable_LowPriority,Mo=a.unstable_IdlePriority,Lo={},Oo=void 0!==Co?Co:function(){},Do=null,zo=null,Vo=!1,Fo=To(),Uo=1e4>Fo?To:function(){return To()-Fo};function jo(){switch(Ao()){case No:return 99;case Ro:return 98;case Io:return 97;case Po:return 96;case Mo:return 95;default:throw Error(i(332))}}function Bo(e){switch(e){case 99:return No;case 98:return Ro;case 97:return Io;case 96:return Po;case 95:return Mo;default:throw Error(i(332))}}function $o(e,t){return e=Bo(e),ko(e,t)}function Wo(e,t,n){return e=Bo(e),Eo(e,t,n)}function Ho(){if(null!==zo){var e=zo;zo=null,_o(e)}qo()}function qo(){if(!Vo&&null!==Do){Vo=!0;var e=0;try{var t=Do;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Eo(No,Ho),t}finally{Vo=!1}}}var Qo=S.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ko=ao(null),Yo=null,Xo=null,Jo=null;function Zo(){Jo=Xo=Yo=null}function ea(e){var t=Ko.current;io(Ko),e.type._context._currentValue=t}function ta(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function na(e,t){Yo=e,Jo=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Mi=!0),e.firstContext=null)}function ra(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(i(308));Xo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var oa=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ia(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function la(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var a=e.updateQueue;oa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==i){for(d=a.baseState,l=0,f=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:oa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Ol|=l,e.lanes=l,e.memoizedState=d}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var da=(new r.Component).refs;function pa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ha={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.payload=t,null!=n&&(a.callback=n),ua(e,a),uu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ua(e,a),uu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=iu(),r=lu(e),o=la(n,r);o.tag=2,null!=t&&(o.callback=t),ua(e,o),uu(e,r,n)}};function ma(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function va(e,t,n){var r=!1,o=uo,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(o=ho(t)?fo:so.current,a=(r=null!=(r=t.contextTypes))?po(e,o):uo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ha,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ga(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ha.enqueueReplaceState(t,t.state,null)}function ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=da,aa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ra(a):(a=ho(t)?fo:so.current,o.context=po(e,a)),ca(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(pa(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ha.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ba=Array.isArray;function wa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===da&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Sa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ka(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Uu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Wu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wa(e,t,n),r.return=e,r):((r=ju(n.type,n.key,n.props,null,e.mode,r)).ref=wa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Bu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=ju(t.type,t.key,t.props,null,e.mode,n)).ref=wa(e,null,t),n.return=e,n;case E:return(t=Hu(t,e.mode,n)).return=e,t}if(ba(t)||B(t))return(t=Bu(t,e.mode,n,null)).return=e,t;Sa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?n.type===_?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(ba(n)||B(n))return null!==o?null:f(e,t,n,r,null);Sa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===_?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ba(r)||B(r))return f(t,e=e.get(n)||null,r,o,null);Sa(t,r)}return null}function m(o,i,l,u){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,l[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),i=a(g,i,m),null===c?s=g:c.sibling=g,c=g,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=B(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var f=c=null,m=l,v=l=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=a(b,l,v),null===f?c=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,s))&&(l=a(y,l,v),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;v++,y=u.next())null!==(y=h(m,o,v,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===_&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case k:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===_){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=wa(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===_?((r=Bu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=ju(a.type,a.key,a.props,null,e.mode,u)).ref=wa(e,r,a),u.return=e,e=u)}return l(e);case E:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Wu(a,e.mode,u)).return=e,e=r),l(e);if(ba(a))return m(e,r,a,u);if(B(a))return v(e,r,a,u);if(c&&Sa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,Q(e.type)||"Component"))}return n(e,r)}}var Ea=ka(!0),_a=ka(!1),xa={},Ca=ao(xa),Ta=ao(xa),Aa=ao(xa);function Na(e){if(e===xa)throw Error(i(174));return e}function Ra(e,t){switch(lo(Aa,t),lo(Ta,e),lo(Ca,xa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(Ca),lo(Ca,t)}function Ia(){io(Ca),io(Ta),io(Aa)}function Pa(e){Na(Aa.current);var t=Na(Ca.current),n=pe(t,e.type);t!==n&&(lo(Ta,e),lo(Ca,n))}function Ma(e){Ta.current===e&&(io(Ca),io(Ta))}var La=ao(0);function Oa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,za=null,Va=!1;function Fa(e,t){var n=Vu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ja(e){if(Va){var t=za;if(t){var n=t;if(!Ua(e,t)){if(!(t=Wr(n.nextSibling))||!Ua(e,t))return e.flags=-1025&e.flags|2,Va=!1,void(Da=e);Fa(Da,n)}Da=e,za=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Va=!1,Da=e}}function Ba(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function $a(e){if(e!==Da)return!1;if(!Va)return Ba(e),Va=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ur(t,e.memoizedProps))for(t=za;t;)Fa(e,t),t=Wr(t.nextSibling);if(Ba(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){za=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}za=null}}else za=Da?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){za=Da=null,Va=!1}var Ha=[];function qa(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var Qa=S.ReactCurrentDispatcher,Ga=S.ReactCurrentBatchConfig,Ka=0,Ya=null,Xa=null,Ja=null,Za=!1,ei=!1;function ti(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ri(e,t,n,r,o,a){if(Ka=a,Ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Ni:Ri,e=n(r,o),ei){a=0;do{if(ei=!1,!(25>a))throw Error(i(301));a+=1,Ja=Xa=null,t.updateQueue=null,Qa.current=Ii,e=n(r,o)}while(ei)}if(Qa.current=Ai,t=null!==Xa&&null!==Xa.next,Ka=0,Ja=Xa=Ya=null,Za=!1,t)throw Error(i(300));return e}function oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ja?Ya.memoizedState=Ja=e:Ja=Ja.next=e,Ja}function ai(){if(null===Xa){var e=Ya.alternate;e=null!==e?e.memoizedState:null}else e=Xa.next;var t=null===Ja?Ya.memoizedState:Ja.next;if(null!==t)Ja=t,Xa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Xa=e).memoizedState,baseState:Xa.baseState,baseQueue:Xa.baseQueue,queue:Xa.queue,next:null},null===Ja?Ya.memoizedState=Ja=e:Ja=Ja.next=e}return Ja}function ii(e,t){return"function"==typeof t?t(e):t}function li(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Xa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((Ka&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,a=r):u=u.next=f,Ya.lanes|=c,Ol|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,ir(r,t.memoizedState)||(Mi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ui(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ir(a,t.memoizedState)||(Mi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function si(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=r,Ha.push(t))),e)return n(t._source);throw Ha.push(t),Error(i(350))}function ci(e,t,n,r){var o=Tl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Qa.current,s=u.useState((function(){return si(o,t,n)})),c=s[1],f=s[0];s=Ja;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ya;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ir(l,e)){e=n(t._source),ir(f,e)||(c(e),e=lu(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-$t(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=lu(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(m,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:f}).dispatch=c=Ti.bind(null,Ya,e),s.queue=e,s.baseQueue=null,f=si(o,t,n),s.memoizedState=s.baseState=f),f}function fi(e,t,n){return ci(ai(),e,t,n)}function di(e){var t=oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e}).dispatch=Ti.bind(null,Ya,e),[t.memoizedState,e]}function pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ya.updateQueue)?(t={lastEffect:null},Ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hi(e){return e={current:e},oi().memoizedState=e}function mi(){return ai().memoizedState}function vi(e,t,n,r){var o=oi();Ya.flags|=e,o.memoizedState=pi(1|t,n,void 0,void 0===r?null:r)}function gi(e,t,n,r){var o=ai();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&ni(r,i.deps))return void pi(t,n,a,r)}Ya.flags|=e,o.memoizedState=pi(1|t,n,a,r)}function yi(e,t){return vi(516,4,e,t)}function bi(e,t){return gi(516,4,e,t)}function wi(e,t){return gi(4,2,e,t)}function Si(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ki(e,t,n){return n=null!=n?n.concat([e]):null,gi(4,2,Si.bind(null,t,e),n)}function Ei(){}function _i(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function xi(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ci(e,t){var n=jo();$o(98>n?98:n,(function(){e(!0)})),$o(97<n?97:n,(function(){var n=Ga.transition;Ga.transition=1;try{e(!1),t()}finally{Ga.transition=n}}))}function Ti(e,t,n){var r=iu(),o=lu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ya||null!==i&&i===Ya)ei=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,ir(u,l))return}catch(e){}uu(e,o,r)}}var Ai={readContext:ra,useCallback:ti,useContext:ti,useEffect:ti,useImperativeHandle:ti,useLayoutEffect:ti,useMemo:ti,useReducer:ti,useRef:ti,useState:ti,useDebugValue:ti,useDeferredValue:ti,useTransition:ti,useMutableSource:ti,useOpaqueIdentifier:ti,unstable_isNewReconciler:!1},Ni={readContext:ra,useCallback:function(e,t){return oi().memoizedState=[e,void 0===t?null:t],e},useContext:ra,useEffect:yi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,Si.bind(null,t,e),n)},useLayoutEffect:function(e,t){return vi(4,2,e,t)},useMemo:function(e,t){var n=oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ti.bind(null,Ya,e),[r.memoizedState,e]},useRef:hi,useState:di,useDebugValue:Ei,useDeferredValue:function(e){var t=di(e),n=t[0],r=t[1];return yi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=di(!1),t=e[0];return hi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oi();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ci(r,e,t,n)},useOpaqueIdentifier:function(){if(Va){var e=!1,t=function(e){return{$$typeof:O,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(i(355))})),n=di(t)[1];return 0==(2&Ya.mode)&&(Ya.flags|=516,pi(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return di(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Ri={readContext:ra,useCallback:_i,useContext:ra,useEffect:bi,useImperativeHandle:ki,useLayoutEffect:wi,useMemo:xi,useReducer:li,useRef:mi,useState:function(){return li(ii)},useDebugValue:Ei,useDeferredValue:function(e){var t=li(ii),n=t[0],r=t[1];return bi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=li(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return li(ii)[0]},unstable_isNewReconciler:!1},Ii={readContext:ra,useCallback:_i,useContext:ra,useEffect:bi,useImperativeHandle:ki,useLayoutEffect:wi,useMemo:xi,useReducer:ui,useRef:mi,useState:function(){return ui(ii)},useDebugValue:Ei,useDeferredValue:function(e){var t=ui(ii),n=t[0],r=t[1];return bi((function(){var t=Ga.transition;Ga.transition=1;try{r(e)}finally{Ga.transition=t}}),[e]),n},useTransition:function(){var e=ui(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return ui(ii)[0]},unstable_isNewReconciler:!1},Pi=S.ReactCurrentOwner,Mi=!1;function Li(e,t,n,r){t.child=null===e?_a(t,null,n,r):Ea(t,e.child,n,r)}function Oi(e,t,n,r,o){n=n.render;var a=t.ref;return na(t,o),r=ri(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,Li(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Fu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=ju(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,zi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?Zi(e,t,a):(t.flags|=1,(e=Uu(i,r)).ref=t.ref,e.return=t,t.child=e)}function zi(e,t,n,r,o,a){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Mi=!1,0==(a&o))return t.lanes=e.lanes,Zi(e,t,a);0!=(16384&e.flags)&&(Mi=!0)}return Ui(e,t,n,r,a)}function Vi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},vu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},vu(0,e),null;t.memoizedState={baseLanes:0},vu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,vu(0,r);return Li(e,t,o,n),t.child}function Fi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ui(e,t,n,r,o){var a=ho(n)?fo:so.current;return a=po(t,a),na(t,o),n=ri(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,Li(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function ji(e,t,n,r,o){if(ho(n)){var a=!0;yo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),va(t,n,r),ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?ra(s):po(t,s=ho(n)?fo:so.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&ga(t,i,r,s),oa=!1;var d=t.memoizedState;i.state=d,ca(t,r,i,o),u=t.memoizedState,l!==r||d!==u||co.current||oa?("function"==typeof c&&(pa(t,n,c,r),u=t.memoizedState),(l=oa||ma(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ia(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Go(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?ra(u):po(t,u=ho(n)?fo:so.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ga(t,i,r,u),oa=!1,d=t.memoizedState,i.state=d,ca(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||co.current||oa?("function"==typeof p&&(pa(t,n,p,r),h=t.memoizedState),(s=oa||ma(t,n,s,r,d,h,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Bi(e,t,n,r,a,o)}function Bi(e,t,n,r,o,a){Fi(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&bo(t,n,!1),Zi(e,t,a);r=t.stateNode,Pi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ea(t,e.child,null,a),t.child=Ea(t,null,l,a)):Li(e,t,l,a),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function $i(e){var t=e.stateNode;t.pendingContext?vo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vo(0,t.context,!1),Ra(e,t.containerInfo)}var Wi,Hi,qi,Qi={dehydrated:null,retryLane:0};function Gi(e,t,n){var r,o=t.pendingProps,a=La.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),lo(La,1&a),null===e?(void 0!==o.fallback&&ja(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,t.lanes=33554432,e):((n=$u({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Uu(i,l),null!==e?r=Uu(e,r):(r=Bu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Qi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Uu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ki(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$u(t,o,0,null),n=Bu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Yi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ta(e.return,t)}function Xi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Ji(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Li(e,t,r.children,n),0!=(2&(r=La.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Yi(e,n);else if(19===e.tag)Yi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(La,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Oa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Oa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xi(t,!0,n,null,a,t.lastEffect);break;case"together":Xi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ol|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Uu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Uu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!Va)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&mo(),null;case 3:return Ia(),io(co),io(so),qa(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||($a(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ma(t);var a=Na(Aa.current);if(n=t.type,null!==e&&null!=t.stateNode)Hi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Na(Ca.current),$a(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Gr]=t,r[Kr]=l,n){case"dialog":Cr("cancel",r),Cr("close",r);break;case"iframe":case"object":case"embed":Cr("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Cr(kr[e],r);break;case"source":Cr("error",r);break;case"img":case"image":case"link":Cr("error",r),Cr("load",r);break;case"details":Cr("toggle",r);break;case"input":ee(r,l),Cr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Cr("invalid",r);break;case"textarea":ue(r,l),Cr("invalid",r)}for(var s in Ee(n,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Cr("scroll",r));switch(n){case"input":Y(r),re(r,l,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Gr]=t,e[Kr]=r,Wi(e,t),t.stateNode=e,s=_e(n,r),n){case"dialog":Cr("cancel",e),Cr("close",e),a=r;break;case"iframe":case"object":case"embed":Cr("load",e),a=r;break;case"video":case"audio":for(a=0;a<kr.length;a++)Cr(kr[a],e);a=r;break;case"source":Cr("error",e),a=r;break;case"img":case"image":case"link":Cr("error",e),Cr("load",e),a=r;break;case"details":Cr("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),Cr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Cr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),Cr("invalid",e);break;default:a=r}Ee(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?Se(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Cr("scroll",e):null!=f&&w(e,l,f,s))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Dr)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Na(Aa.current),Na(Ca.current),$a(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return io(La),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&$a(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&La.current)?0===Pl&&(Pl=3):(0!==Pl&&3!==Pl||(Pl=4),null===Tl||0==(134217727&Ol)&&0==(134217727&Dl)||du(Tl,Nl))),(r||n)&&(t.flags|=4),null);case 4:return Ia(),null===e&&Ar(t.stateNode.containerInfo),null;case 10:return ea(t),null;case 17:return ho(t.type)&&mo(),null;case 19:if(io(La),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)el(r,!1);else{if(0!==Pl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Oa(e))){for(t.flags|=64,el(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return lo(La,1&La.current|2),t.child}e=e.sibling}null!==r.tail&&Uo()>Ul&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Oa(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Va)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Uo()-r.renderingStartTime>Ul&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Uo(),n.sibling=null,t=La.current,lo(La,l?1&t|2:1&t),n):null;case 23:case 24:return gu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function nl(e){switch(e.tag){case 1:ho(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ia(),io(co),io(so),qa(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ma(e),null;case 13:return io(La),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(La),null;case 4:return Ia(),null;case 10:return ea(e),null;case 23:case 24:return gu(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ol(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Na(Ca.current);var i,l=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in Ee(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var s=a[f];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Cr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===O?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var al="function"==typeof WeakMap?WeakMap:Map;function il(e,t,n){(n=la(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Hl=r),ol(0,t)},n}function ll(e,t,n){(n=la(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ol(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ql?ql=new Set([this]):ql.add(this),ol(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ul="function"==typeof WeakSet?WeakSet:Set;function sl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Lu(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$r(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function fl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Iu(n,e),Ru(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&St(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function dl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Iu(t,n);else{r=t;try{o()}catch(e){Lu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(sl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Lu(t,e)}break;case 5:sl(t);break;case 4:bl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ml(e){return 5===e.tag||3===e.tag||4===e.tag}function vl(e){e:{for(var t=e.return;null!==t;){if(ml(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ml(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gl(e,n,t):yl(e,n,t)}function gl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(pl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Kr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),_e(e,o),t=_e(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Se(n,u):"dangerouslySetInnerHTML"===l?ve(n,u):"children"===l?ge(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,St(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fl=Uo(),dl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void dl(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ul),t.forEach((function(t){var r=Du.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function kl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var El=Math.ceil,_l=S.ReactCurrentDispatcher,xl=S.ReactCurrentOwner,Cl=0,Tl=null,Al=null,Nl=0,Rl=0,Il=ao(0),Pl=0,Ml=null,Ll=0,Ol=0,Dl=0,zl=0,Vl=null,Fl=0,Ul=1/0;function jl(){Ul=Uo()+500}var Bl,$l=null,Wl=!1,Hl=null,ql=null,Ql=!1,Gl=null,Kl=90,Yl=[],Xl=[],Jl=null,Zl=0,eu=null,tu=-1,nu=0,ru=0,ou=null,au=!1;function iu(){return 0!=(48&Cl)?Uo():-1!==tu?tu:tu=Uo()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===jo()?1:2;if(0===nu&&(nu=Ll),0!==Qo.transition){0!==ru&&(ru=null!==Vl?Vl.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=jo(),e=Ft(0!=(4&Cl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Zl)throw Zl=0,eu=null,Error(i(185));if(null===(e=su(e,t)))return null;Bt(e,t,n),e===Tl&&(Dl|=t,4===Pl&&du(e,Nl));var r=jo();1===t?0!=(8&Cl)&&0==(48&Cl)?pu(e):(cu(e,n),0===Cl&&(jl(),Ho())):(0==(4&Cl)||98!==r&&99!==r||(null===Jl?Jl=new Set([e]):Jl.add(e)),cu(e,n)),Vl=e}function su(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-$t(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,Dt(s);var f=Ot;a[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=zt(e,e===Tl?Nl:0),t=Ot,0===r)null!==n&&(n!==Lo&&_o(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Lo&&_o(n)}15===t?(n=pu.bind(null,e),null===Do?(Do=[n],zo=Eo(No,qo)):Do.push(n),n=Lo):n=14===t?Wo(99,pu.bind(null,e)):Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),fu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fu(e){if(tu=-1,ru=nu=0,0!=(48&Cl))throw Error(i(327));var t=e.callbackNode;if(Nu()&&e.callbackNode!==t)return null;var n=zt(e,e===Tl?Nl:0);if(0===n)return null;var r=n,o=Cl;Cl|=16;var a=wu();for(Tl===e&&Nl===r||(jl(),yu(e,r));;)try{Eu();break}catch(t){bu(e,t)}if(Zo(),_l.current=a,Cl=o,null!==Al?r=0:(Tl=null,Nl=0,r=Pl),0!=(Ll&Dl))yu(e,0);else if(0!==r){if(2===r&&(Cl|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(n=Vt(e))&&(r=Su(e,n))),1===r)throw t=Ml,yu(e,0),du(e,n),cu(e,Uo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:Cu(e);break;case 3:if(du(e,n),(62914560&n)===n&&10<(r=Fl+500-Uo())){if(0!==zt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){iu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=jr(Cu.bind(null,e),r);break}Cu(e);break;case 4:if(du(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-$t(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=Uo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*El(n/1960))-n)){e.timeoutHandle=jr(Cu.bind(null,e),n);break}Cu(e);break;case 5:Cu(e);break;default:throw Error(i(329))}}return cu(e,Uo()),e.callbackNode===t?fu.bind(null,e):null}function du(e,t){for(t&=~zl,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-$t(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&Cl))throw Error(i(327));if(Nu(),e===Tl&&0!=(e.expiredLanes&Nl)){var t=Nl,n=Su(e,t);0!=(Ll&Dl)&&(n=Su(e,t=zt(e,t)))}else n=Su(e,t=zt(e,0));if(0!==e.tag&&2===n&&(Cl|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(t=Vt(e))&&(n=Su(e,t))),1===n)throw n=Ml,yu(e,0),du(e,t),cu(e,Uo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cu(e),cu(e,Uo()),null}function hu(e,t){var n=Cl;Cl|=1;try{return e(t)}finally{0===(Cl=n)&&(jl(),Ho())}}function mu(e,t){var n=Cl;Cl&=-2,Cl|=8;try{return e(t)}finally{0===(Cl=n)&&(jl(),Ho())}}function vu(e,t){lo(Il,Rl),Rl|=t,Ll|=t}function gu(){Rl=Il.current,io(Il)}function yu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Br(n)),null!==Al)for(n=Al.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Ia(),io(co),io(so),qa();break;case 5:Ma(r);break;case 4:Ia();break;case 13:case 19:io(La);break;case 10:ea(r);break;case 23:case 24:gu()}n=n.return}Tl=e,Al=Uu(e.current,null),Nl=Rl=Ll=t,Pl=0,Ml=null,zl=Dl=Ol=0}function bu(e,t){for(;;){var n=Al;try{if(Zo(),Qa.current=Ai,Za){for(var r=Ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if(Ka=0,Ja=Xa=Ya=null,ei=!1,xl.current=null,null===n||null===n.return){Pl=1,Ml=t,Al=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=Nl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&La.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(s),d.updateQueue=g}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=la(-1,1);y.tag=2,ua(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new al,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Ou.bind(null,a,s,l);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Q(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Pl&&(Pl=2),u=rl(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,il(0,a,t));break e;case 1:a=u;var S=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof S.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===ql||!ql.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,ll(d,a,t));break e}}d=d.return}while(null!==d)}xu(n)}catch(e){t=e,Al===n&&null!==n&&(Al=n=n.return);continue}break}}function wu(){var e=_l.current;return _l.current=Ai,null===e?Ai:e}function Su(e,t){var n=Cl;Cl|=16;var r=wu();for(Tl===e&&Nl===t||yu(e,t);;)try{ku();break}catch(t){bu(e,t)}if(Zo(),Cl=n,_l.current=r,null!==Al)throw Error(i(261));return Tl=null,Nl=0,Pl}function ku(){for(;null!==Al;)_u(Al)}function Eu(){for(;null!==Al&&!xo();)_u(Al)}function _u(e){var t=Bl(e.alternate,e,Rl);e.memoizedProps=e.pendingProps,null===t?xu(e):Al=t,xl.current=null}function xu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,Rl)))return void(Al=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Rl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Al=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Al=t);Al=t=e}while(null!==t);0===Pl&&(Pl=5)}function Cu(e){var t=jo();return $o(99,Tu.bind(null,e,t)),null}function Tu(e,t){do{Nu()}while(null!==Gl);if(0!=(48&Cl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-$t(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==Jl&&0==(24&r)&&Jl.has(e)&&Jl.delete(e),e===Tl&&(Al=Tl=null,Nl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Cl,Cl|=32,xl.current=null,zr=Gt,pr(l=dr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,g=null;t:for(;;){for(var y;v!==u||0!==a&&3!==v.nodeType||(d=f+a),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===u&&++h===a&&(d=f),g===s&&++m===c&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Vr={focusedElem:l,selectionRange:u},Gt=!1,ou=null,au=!1,$l=r;do{try{Au()}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);ou=null,$l=r;do{try{for(l=e;null!==$l;){var b=$l.flags;if(16&b&&ge($l.stateNode,""),128&b){var w=$l.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&b){case 2:vl($l),$l.flags&=-3;break;case 6:vl($l),$l.flags&=-3,wl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,wl($l.alternate,$l);break;case 4:wl($l.alternate,$l);break;case 8:bl(l,u=$l);var k=u.alternate;hl(u),null!==k&&hl(k)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);if(S=Vr,w=dr(),b=S.focusedElem,l=S.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(S,b.value.length)):(S=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),u=b.textContent.length,k=Math.min(l.start,u),l=void 0===l.end?k:Math.min(l.end,u),!S.extend&&k>l&&(u=l,l=k,k=u),u=cr(b,k),a=cr(b,l),u&&a&&(1!==S.rangeCount||S.anchorNode!==u.node||S.anchorOffset!==u.offset||S.focusNode!==a.node||S.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),S.removeAllRanges(),k>l?(S.addRange(w),S.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),S.addRange(w))))),w=[];for(S=b;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(S=w[b]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Gt=!!zr,Vr=zr=null,e.current=n,$l=r;do{try{for(b=e;null!==$l;){var E=$l.flags;if(36&E&&fl(b,$l.alternate,$l),128&E){w=void 0;var _=$l.ref;if(null!==_){var x=$l.stateNode;switch($l.tag){case 5:w=x;break;default:w=x}"function"==typeof _?_(w):_.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Lu($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Oo(),Cl=o}else e.current=n;if(Ql)Ql=!1,Gl=e,Kl=t;else for($l=r;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((E=$l).sibling=null,E.stateNode=null),$l=t;if(0===(r=e.pendingLanes)&&(ql=null),1===r?e===eu?Zl++:(Zl=0,eu=e):Zl=0,n=n.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,Uo()),Wl)throw Wl=!1,e=Hl,Hl=null,e;return 0!=(8&Cl)||Ho(),null}function Au(){for(;null!==$l;){var e=$l.alternate;au||null===ou||(0!=(8&$l.flags)?Ze($l,ou)&&(au=!0):13===$l.tag&&kl(e,$l)&&Ze($l,ou)&&(au=!0));var t=$l.flags;0!=(256&t)&&cl(e,$l),0==(512&t)||Ql||(Ql=!0,Wo(97,(function(){return Nu(),null}))),$l=$l.nextEffect}}function Nu(){if(90!==Kl){var e=97<Kl?97:Kl;return Kl=90,$o(e,Pu)}return!1}function Ru(e,t){Yl.push(t,e),Ql||(Ql=!0,Wo(97,(function(){return Nu(),null})))}function Iu(e,t){Xl.push(t,e),Ql||(Ql=!0,Wo(97,(function(){return Nu(),null})))}function Pu(){if(null===Gl)return!1;var e=Gl;if(Gl=null,0!=(48&Cl))throw Error(i(331));var t=Cl;Cl|=32;var n=Xl;Xl=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Lu(a,e)}}for(n=Yl,Yl=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Lu(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Cl=t,Ho(),!0}function Mu(e,t,n){ua(e,t=il(0,t=rl(n,t),1)),t=iu(),null!==(e=su(e,1))&&(Bt(e,1,t),cu(e,t))}function Lu(e,t){if(3===e.tag)Mu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Mu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r))){var o=ll(n,e=rl(t,e),1);if(ua(n,o),o=iu(),null!==(n=su(n,1)))Bt(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ou(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=iu(),e.pingedLanes|=e.suspendedLanes&n,Tl===e&&(Nl&n)===n&&(4===Pl||3===Pl&&(62914560&Nl)===Nl&&500>Uo()-Fl?yu(e,0):zl|=n),cu(e,t)}function Du(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===jo()?1:2:(0===nu&&(nu=Ll),0===(t=Ut(62914560&~nu))&&(t=4194304))),n=iu(),null!==(e=su(e,t))&&(Bt(e,t,n),cu(e,n))}function zu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Vu(e,t,n,r){return new zu(e,t,n,r)}function Fu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Uu(e,t){var n=e.alternate;return null===n?((n=Vu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function ju(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Fu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case _:return Bu(n.children,o,a,t);case D:l=8,o|=16;break;case x:l=8,o|=1;break;case C:return(e=Vu(12,n,t,8|o)).elementType=C,e.type=C,e.lanes=a,e;case R:return(e=Vu(13,n,t,o)).type=R,e.elementType=R,e.lanes=a,e;case I:return(e=Vu(19,n,t,o)).elementType=I,e.lanes=a,e;case z:return $u(n,o,a,t);case V:return(e=Vu(24,n,t,o)).elementType=V,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:l=10;break e;case A:l=9;break e;case N:l=11;break e;case P:l=14;break e;case M:l=16,r=null;break e;case L:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Vu(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Bu(e,t,n,r){return(e=Vu(7,e,r,t)).lanes=n,e}function $u(e,t,n,r){return(e=Vu(23,e,r,t)).elementType=z,e.lanes=n,e}function Wu(e,t,n){return(e=Vu(6,e,null,t)).lanes=n,e}function Hu(e,t,n){return(t=Vu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=jt(0),this.expirationTimes=jt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=jt(0),this.mutableSourceEagerHydrationData=null}function Qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gu(e,t,n,r){var o=t.current,a=iu(),l=lu(o);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(ho(s)){n=go(n,s,u);break e}}n=u}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=la(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),uu(o,l,a),l}function Ku(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xu(e,t){Yu(e,t),(e=e.alternate)&&Yu(e,t)}function Ju(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new qu(e,t,null!=n&&!0===n.hydrate),t=Vu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,aa(t),e[Yr]=n.current,Ar(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ku(i);l.call(e)}}Gu(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ju(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Ku(i);u.call(e)}}mu((function(){Gu(t,i,e,o)}))}return Ku(i)}function ts(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zu(t))throw Error(i(200));return Qu(e,t,null,n)}Bl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Mi=!0;else{if(0==(n&r)){switch(Mi=!1,t.tag){case 3:$i(t),Wa();break;case 5:Pa(t);break;case 1:ho(t.type)&&yo(t);break;case 4:Ra(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;lo(Ko,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Gi(e,t,n):(lo(La,1&La.current),null!==(t=Zi(e,t,n))?t.sibling:null);lo(La,1&La.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ji(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(La,La.current),r)break;return null;case 23:case 24:return t.lanes=0,Vi(e,t,n)}return Zi(e,t,n)}Mi=0!=(16384&e.flags)}else Mi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,so.current),na(t,n),o=ri(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var a=!0;yo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,aa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pa(t,r,l,e),o.updater=ha,t.stateNode=o,o._reactInternals=t,ya(t,r,e,n),t=Bi(null,t,r,!0,a,n)}else t.tag=0,Li(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Fu(e)?1:0;if(null!=e){if((e=e.$$typeof)===N)return 11;if(e===P)return 14}return 2}(o),e=Go(o,e),a){case 0:t=Ui(null,t,o,e,n);break e;case 1:t=ji(null,t,o,e,n);break e;case 11:t=Oi(null,t,o,e,n);break e;case 14:t=Di(null,t,o,Go(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,ji(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if($i(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ia(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=Zi(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(za=Wr(t.stateNode.containerInfo.firstChild),Da=t,a=Va=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(n=_a(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Li(e,t,r,n),Wa();t=t.child}return t;case 5:return Pa(t),null===e&&ja(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Ur(r,o)?l=null:null!==a&&Ur(r,a)&&(t.flags|=16),Fi(e,t),Li(e,t,l,n),t.child;case 6:return null===e&&ja(t),null;case 13:return Gi(e,t,n);case 4:return Ra(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ea(t,null,r,n):Li(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Oi(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Li(e,t,t.pendingProps,n),t.child;case 8:case 12:return Li(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(lo(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=ir(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!co.current){t=Zi(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=la(-1,n&-n)).tag=2,ua(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ta(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Li(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,na(t,n),r=r(o=ra(o,a.unstable_observedBits)),t.flags|=1,Li(e,t,r,n),t.child;case 14:return a=Go(o=t.type,t.pendingProps),Di(e,t,o,a=Go(o.type,a),r,n);case 15:return zi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,yo(t)):e=!1,na(t,n),va(t,r,o),ya(t,r,o,n),Bi(null,t,r,!0,e,n);case 19:return Ji(e,t,n);case 23:case 24:return Vi(e,t,n)}throw Error(i(156,t.tag))},Ju.prototype.render=function(e){Gu(e,this._internalRoot,null,null)},Ju.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gu(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(uu(e,4,iu()),Xu(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,iu()),Xu(e,67108864))},nt=function(e){if(13===e.tag){var t=iu(),n=lu(e);uu(e,n,t),Xu(e,n)}},rt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(i(90));X(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Pe=hu,Me=function(e,t,n,r,o){var a=Cl;Cl|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(Cl=a)&&(jl(),Ho())}},Le=function(){0==(49&Cl)&&(function(){if(null!==Jl){var e=Jl;Jl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,Uo())}))}Ho()}(),Nu())},Oe=function(e,t){var n=Cl;Cl|=2;try{return e(t)}finally{0===(Cl=n)&&(jl(),Ho())}};var ns={Events:[Zr,eo,to,Re,Ie,Nu,{current:!1}]},rs={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},os={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:S.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var as=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!as.isDisabled&&as.supportsFiber)try{wo=as.inject(os),So=as}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ns,t.createPortal=ts,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Cl;if(0!=(48&n))return e(t);Cl|=1;try{if(e)return $o(99,e.bind(null,t))}finally{Cl=n,Ho()}},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(i(200));return es(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zu(t))throw Error(i(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(i(40));return!!e._reactRootContainer&&(mu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=hu,t.unstable_createPortal=function(e,t){return ts(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return es(e,t,n,!1,r)},t.version="17.0.1"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function k(e){return S(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===s},t.isContextProvider=function(e){return S(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===a},t.isLazy=function(e){return S(e)===v},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===i},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===g)},t.typeOf=S},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},S=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,r)&&!k.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+C(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(x,"$&/")+"/"),T(i,t,n,"",(function(e){return e}))):null!=i&&(_(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(x,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+C(l=e[s],s);u+=T(l,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=T(l=l.value,t,n,c=r+C(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function A(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function N(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function I(){var e=R.current;if(null===e)throw Error(p(321));return e}var P={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:A,forEach:function(e,t,n){A(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)S.call(t,c)&&!k.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return I().useCallback(e,t)},t.useContext=function(e,t){return I().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return I().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return I().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return I().useLayoutEffect(e,t)},t.useMemo=function(e,t){return I().useMemo(e,t)},t.useReducer=function(e,t,n){return I().useReducer(e,t,n)},t.useRef=function(e){return I().useRef(e)},t.useState=function(e){return I().useState(e)},t.version="17.0.1"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,S=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?S.postMessage(null):(m=!1,v=null)}catch(e){throw S.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,S.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<x(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>x(i,n))void 0!==u&&0>x(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>x(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function x(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],T=[],A=1,N=null,R=3,I=!1,P=!1,M=!1;function L(e){for(var t=E(T);null!==t;){if(null===t.callback)_(T);else{if(!(t.startTime<=e))break;_(T),t.sortIndex=t.expirationTime,k(C,t)}t=E(T)}}function O(e){if(M=!1,L(e),!P)if(null!==E(C))P=!0,n(D);else{var t=E(T);null!==t&&r(O,t.startTime-e)}}function D(e,n){P=!1,M&&(M=!1,o()),I=!0;var a=R;try{for(L(n),N=E(C);null!==N&&(!(N.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=N.callback;if("function"==typeof i){N.callback=null,R=N.priorityLevel;var l=i(N.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?N.callback=l:N===E(C)&&_(C),L(n)}else _(C);N=E(C)}if(null!==N)var u=!0;else{var s=E(T);null!==s&&r(O,s.startTime-n),u=!1}return u}finally{N=null,R=a,I=!1}}var z=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){P||I||(P=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:A++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,k(T,e),null===E(C)&&e===E(T)&&(M?o():M=!0,r(O,i-l))):(e.sortIndex=u,k(C,e),P||I||(P=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<a.length;u++){var s=a[u];if(!l(s))return!1;var c=e[s],f=t[s];if(!1===(o=n?n.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";var e=n(935),t=n(294);const r=new Map;function o(e){var t;return null!==(t=r.get(e))&&void 0!==t&&t}o.setPass=e=>{r.set(e,!0)},o.setFail=e=>{r.set(e,!1)};var a=o,i=function(e,t){const n=new Map;return e.forEach(((e,r)=>{n.set(r,t(e,r))})),n},l=function(e,t){if(null!=e)return e;throw new Error(null!=t?t:"Got unexpected null or undefined")},u=function(e,t,n){return n()},s=function(e){return e},c={setByAddingToSet:function(e,t){const n=new Set(e);return n.add(t),n},setByDeletingFromSet:function(e,t){const n=new Set(e);return n.delete(t),n},mapBySettingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n),r},mapByUpdatingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n(r.get(t))),r},mapByDeletingFromMap:function(e,t){const n=new Map(e);return n.delete(t),n},mapByDeletingMultipleFromMap:function(e,t){const n=new Map(e);return t.forEach((e=>n.delete(e))),n}};function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class d{constructor(e){f(this,"key",void 0),this.key=e}}class p extends d{}class h extends d{}var m={AbstractRecoilValue:d,RecoilState:p,RecoilValueReadOnly:h,isRecoilValue:function(e){return e instanceof p||e instanceof h}},v=m.AbstractRecoilValue,g=m.RecoilState,y=m.RecoilValueReadOnly,b=m.isRecoilValue,w=Object.freeze({__proto__:null,AbstractRecoilValue:v,RecoilState:g,RecoilValueReadOnly:y,isRecoilValue:b});class S{}const k=new S;class E extends Error{constructor(e){super(`Tried to set the value of Recoil selector ${e} using an updater function, but it is an async selector in a pending or error state; this is not supported.`)}}const _=new Map,x=new Map;class C extends Error{}var T={nodes:_,recoilValues:x,registerNode:function(e){if(_.has(e.key)){const t=`Duplicate atom key "${e.key}". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`;console.warn(t)}_.set(e.key,e);const t=null==e.set?new w.RecoilValueReadOnly(e.key):new w.RecoilState(e.key);return x.set(e.key,t),t},getNode:function(e){const t=_.get(e);if(null==t)throw new C(`Missing definition for RecoilValue: "${e}""`);return t},getNodeMaybe:function(e){return _.get(e)},NodeMissingError:C,DefaultValue:S,DEFAULT_VALUE:k,RecoilValueNotReady:E};const{mapByDeletingFromMap:A,mapBySettingInMap:N,setByAddingToSet:R}=c,{getNode:I,getNodeMaybe:P}=T,M=Object.freeze(new Set);class L extends Error{}var O={getNodeLoadable:function(e,t,n){return I(n).get(e,t)},peekNodeLoadable:function(e,t,n){return I(n).peek(e,t)},setNodeValue:function(e,t,n,r){const o=I(n);if(null==o.set)throw new L(`Attempt to set read-only RecoilValue: ${n}`);return o.set(e,t,r)},cleanUpNode:function(e,t){I(t).cleanUp(e)},setUnvalidatedAtomValue_DEPRECATED:function(e,t,n){var r;const o=P(t);return null==o||null===(r=o.invalidate)||void 0===r||r.call(o,e),{...e,atomValues:A(e.atomValues,t),nonvalidatedAtoms:N(e.nonvalidatedAtoms,t,n),dirtyAtoms:R(e.dirtyAtoms,t)}},getDownstreamNodes:function(e,t,n){const r=new Set,o=Array.from(n),a=e.getGraph(t.version);for(let e=o.pop();e;e=o.pop()){var i;r.add(e);const t=null!==(i=a.nodeToNodeSubscriptions.get(e))&&void 0!==i?i:M;for(const e of t)r.has(e)||o.push(e)}return r}},D=function(e,...t){const n=new Set;e:for(const r of e){for(const e of t)if(e.has(r))continue e;n.add(r)}return n};function z(e,t,n){const{nodeDeps:r,nodeToNodeSubscriptions:o}=t;e.forEach(((e,t)=>{const a=r.get(t);a&&n&&a!==n.nodeDeps.get(t)||(r.set(t,new Set(e)),(null==a?e:D(e,a)).forEach((e=>{o.has(e)||o.set(e,new Set),l(o.get(e)).add(t)})),a&&D(a,e).forEach((e=>{if(!o.has(e))return;const n=l(o.get(e));n.delete(t),0===n.size&&o.delete(e)})))}))}var V={addToDependencyMap:function(e,t,n){n.has(e)||n.set(e,new Set),l(n.get(e)).add(t)},cloneGraph:function(e){return{nodeDeps:i(e.nodeDeps,(e=>new Set(e))),nodeToNodeSubscriptions:i(e.nodeToNodeSubscriptions,(e=>new Set(e)))}},graph:function(){return{nodeDeps:new Map,nodeToNodeSubscriptions:new Map}},mergeDepsIntoDependencyMap:function(e,t){e.forEach(((e,n)=>{t.has(n)||t.set(n,new Set);const r=l(t.get(n));e.forEach((e=>r.add(e)))}))},saveDependencyMapToStore:function(e,t,n){var r,o,a,i;const l=t.getState();n!==l.currentTree.version&&n!==(null===(r=l.nextTree)||void 0===r?void 0:r.version)&&(null===(o=l.previousTree)||void 0===o||o.version);const u=t.getGraph(n);if(z(e,u),n===(null===(a=l.previousTree)||void 0===a?void 0:a.version)&&z(e,t.getGraph(l.currentTree.version),u),n===(null===(i=l.previousTree)||void 0===i?void 0:i.version)||n===l.currentTree.version){var s;const n=null===(s=l.nextTree)||void 0===s?void 0:s.version;void 0!==n&&z(e,t.getGraph(n),u)}}};const{getDownstreamNodes:F,getNodeLoadable:U,setNodeValue:j}=O,{saveDependencyMapToStore:B}=V,{getNodeMaybe:$}=T,{DefaultValue:W,RecoilValueNotReady:H}=T,{AbstractRecoilValue:q,RecoilState:Q,RecoilValueReadOnly:G,isRecoilValue:K}=w;function Y(e,t,n){if("set"===n.type){const{recoilValue:r,valueOrUpdater:o}=n,a=function(e,t,{key:n},r){if("function"==typeof r){const o=U(e,t,n)[1];if("loading"===o.state)throw new H(n);if("hasError"===o.state)throw o.contents;return r(o.contents)}return r}(e,t,r,o),[i,l]=j(e,t,r.key,a);B(i,e,t.version);for(const[e,n]of l.entries())X(t,e,n)}else if("setLoadable"===n.type){const{recoilValue:{key:e},loadable:r}=n;X(t,e,r)}else if("markModified"===n.type){const{recoilValue:{key:e}}=n;t.dirtyAtoms.add(e)}else if("setUnvalidated"===n.type){var r;const{recoilValue:{key:e},unvalidatedValue:o}=n,a=$(e);null==a||null===(r=a.invalidate)||void 0===r||r.call(a,t),t.atomValues.delete(e),t.nonvalidatedAtoms.set(e,o),t.dirtyAtoms.add(e)}else n.type}function X(e,t,n){"hasValue"===n.state&&n.contents instanceof W?e.atomValues.delete(t):e.atomValues.set(t,n),e.dirtyAtoms.add(t),e.nonvalidatedAtoms.delete(t)}function J(e,t){e.replaceState((n=>{const r=function(e){return{...e,atomValues:new Map(e.atomValues),nonvalidatedAtoms:new Map(e.nonvalidatedAtoms),dirtyAtoms:new Set(e.dirtyAtoms)}}(n);for(const n of t)Y(e,r,n);return te(e,r),r}))}function Z(e,t,n,r){if(ee.length){const n=ee[ee.length-1];let r=n.get(e);r||n.set(e,r=[]),r.push(t)}else u(r,n,(()=>J(e,[t])))}const ee=[];function te(e,t){const n=F(e,t,t.dirtyAtoms);for(const e of n){var r,o;null===(r=$(e))||void 0===r||null===(o=r.invalidate)||void 0===o||o.call(r,t)}}function ne(e,t,n){Z(e,{type:"set",recoilValue:t,valueOrUpdater:n},t.key,"set Recoil value")}let re=0;var oe={RecoilValueReadOnly:G,AbstractRecoilValue:q,RecoilState:Q,getRecoilValueAsLoadable:function(e,{key:t},n=e.getState().currentTree){var r,o;const i=e.getState();n.version!==i.currentTree.version&&n.version!==(null===(r=i.nextTree)||void 0===r?void 0:r.version)&&(n.version,null===(o=i.previousTree)||void 0===o||o.version);const[l,u]=U(e,n,t);return a("recoil_async_selector_refactor")||B(l,e,n.version),u},setRecoilValue:ne,setRecoilValueLoadable:function(e,t,n){if(n instanceof W)return ne(e,t,n);Z(e,{type:"setLoadable",recoilValue:t,loadable:n},t.key,"set Recoil value")},markRecoilValueModified:function(e,t){Z(e,{type:"markModified",recoilValue:t},t.key,"mark RecoilValue modified")},setUnvalidatedRecoilValue:function(e,t,n){Z(e,{type:"setUnvalidated",recoilValue:t,unvalidatedValue:n},t.key,"set Recoil value")},subscribeToRecoilValue:function(e,{key:t},n,r=null){const o=re++,a=e.getState();return a.nodeToComponentSubscriptions.has(t)||a.nodeToComponentSubscriptions.set(t,new Map),l(a.nodeToComponentSubscriptions.get(t)).set(o,[null!=r?r:"<not captured>",n]),{release:()=>{const n=e.getState(),r=n.nodeToComponentSubscriptions.get(t);void 0!==r&&r.has(o)&&(r.delete(o),0===r.size&&n.nodeToComponentSubscriptions.delete(t))}}},isRecoilValue:K,applyAtomValueWrites:function(e,t){const n=i(e,(e=>e));return t.forEach(((e,t)=>{"hasValue"===e.state&&e.contents instanceof W?n.delete(t):n.set(t,e)})),n},batchStart:function(){const e=new Map;return ee.push(e),()=>{for(const[t,n]of e)u("Recoil batched updates","-",(()=>J(t,n)));ee.pop()}},invalidateDownstreams_FOR_TESTING:te};const{unstable_batchedUpdates:ae}=e;var ie={unstable_batchedUpdates:ae};const{batchStart:le}=oe,{unstable_batchedUpdates:ue}=ie;let se=ue;var ce={getBatcher:()=>se,setBatcher:e=>{se=e},batchUpdates:e=>{se((()=>{let t=()=>{};try{t=le(),e()}finally{t()}}))}},fe=function(e,t){t()},de=function*(e,t){let n=0;for(const r of e)t(r,n++)&&(yield r)};const{graph:pe}=V;let he=0;const me=()=>he++;function ve(){const e=me();return{version:e,stateID:e,transactionMetadata:{},dirtyAtoms:new Set,atomValues:new Map,nonvalidatedAtoms:new Map}}var ge={makeEmptyTreeState:ve,makeEmptyStoreState:function(){const e=ve();return{currentTree:e,nextTree:null,previousTree:null,knownAtoms:new Set,knownSelectors:new Set,transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(e.version,pe()),versionsUsedByComponent:new Map}},getNextTreeStateVersion:me};const{batchUpdates:ye}=ce,{getDownstreamNodes:be,peekNodeLoadable:we}=O,{graph:Se}=V,{DEFAULT_VALUE:ke,recoilValues:Ee}=T,{getRecoilValueAsLoadable:_e,setRecoilValue:xe}=oe,{getNextTreeStateVersion:Ce,makeEmptyStoreState:Te}=ge;function Ae(e){return t=e,n=e=>l(Ee.get(e)),function*(){let e=0;for(const r of t)yield n(r,e++)}();var t,n}class Ne{constructor(e){f(this,"_store",void 0),f(this,"getLoadable",(e=>_e(this._store,e))),f(this,"getPromise",(e=>this.getLoadable(e).toPromise())),f(this,"getNodes_UNSTABLE",(e=>{if(!0===(null==e?void 0:e.isModified))return!1===(null==e?void 0:e.isInitialized)?[]:Ae(this._store.getState().currentTree.dirtyAtoms);const t=this._store.getState().knownAtoms,n=this._store.getState().knownSelectors;return null==(null==e?void 0:e.isInitialized)?Ee.values():!0===e.isInitialized?Ae(function*(e){for(const t of e)for(const e of t)yield e}([this._store.getState().knownAtoms,this._store.getState().knownSelectors])):de(Ee.values(),(({key:e})=>!t.has(e)&&!n.has(e)))})),f(this,"getDeps_UNSTABLE",(e=>{this.getLoadable(e);const t=this._store.getGraph(this._store.getState().currentTree.version).nodeDeps.get(e.key);return Ae(null!=t?t:[])})),f(this,"getSubscribers_UNSTABLE",(({key:e})=>{const t=this._store.getState().currentTree;return{nodes:Ae(de(be(this._store,t,new Set([e])),(t=>t!==e)))}})),f(this,"getInfo_UNSTABLE",(e=>{var t;const{key:n}=e,r=this._store.getState().currentTree,o=this._store.getGraph(r.version),a=this._store.getState().knownAtoms.has(n)?"atom":this._store.getState().knownSelectors.has(n)?"selector":void 0;return{loadable:we(this._store,r,n),isActive:this._store.getState().knownAtoms.has(n)||this._store.getState().knownSelectors.has(n),isSet:"selector"!==a&&r.atomValues.has(n),isModified:r.dirtyAtoms.has(n),type:a,deps:Ae(null!==(t=o.nodeDeps.get(n))&&void 0!==t?t:[]),subscribers:this.getSubscribers_UNSTABLE(e)}})),f(this,"map",(e=>{const t=new Pe(this);return e(t),Ie(t.getStore_INTERNAL())})),f(this,"asyncMap",(async e=>{const t=new Pe(this);return await e(t),Ie(t.getStore_INTERNAL())})),this._store={getState:()=>e,replaceState:t=>{e.currentTree=t(e.currentTree)},getGraph:t=>{const n=e.graphsByVersion;if(n.has(t))return l(n.get(t));const r=Se();return n.set(t,r),r},subscribeToTransactions:()=>({release:()=>{}}),addTransactionMetadata:()=>{throw new Error("Cannot subscribe to Snapshots")}}}getStore_INTERNAL(){return this._store}getID(){return this.getID_INTERNAL()}getID_INTERNAL(){return this._store.getState().currentTree.stateID}}function Re(e,t,n=!1){const r=e.getState(),o=n?Ce():t.version;return{currentTree:n?{version:o,stateID:o,transactionMetadata:{...t.transactionMetadata},dirtyAtoms:new Set(t.dirtyAtoms),atomValues:new Map(t.atomValues),nonvalidatedAtoms:new Map(t.nonvalidatedAtoms)}:t,nextTree:null,previousTree:null,knownAtoms:new Set(r.knownAtoms),knownSelectors:new Set(r.knownSelectors),transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(o,e.getGraph(t.version)),versionsUsedByComponent:new Map}}function Ie(e,t="current"){const n=e.getState(),r="current"===t?n.currentTree:l(n.previousTree);return new Ne(Re(e,r))}class Pe extends Ne{constructor(e){super(Re(e.getStore_INTERNAL(),e.getStore_INTERNAL().getState().currentTree,!0)),f(this,"set",((e,t)=>{const n=this.getStore_INTERNAL();ye((()=>{xe(n,e,t)}))})),f(this,"reset",(e=>ye((()=>xe(this.getStore_INTERNAL(),e,ke)))))}}var Me={Snapshot:Ne,MutableSnapshot:Pe,freshSnapshot:function(e){const t=new Ne(Te());return null!=e?t.map(e):t},cloneSnapshot:Ie},Le=Me.Snapshot,Oe=Me.MutableSnapshot,De=Me.freshSnapshot,ze=Me.cloneSnapshot,Ve=Object.freeze({__proto__:null,Snapshot:Le,MutableSnapshot:Oe,freshSnapshot:De,cloneSnapshot:ze}),Fe=function(...e){const t=new Set;for(const n of e)for(const e of n)t.add(e);return t};const{useContext:Ue,useEffect:je,useMemo:Be,useRef:$e,useState:We}=t,{cleanUpNode:He,getDownstreamNodes:qe,setNodeValue:Qe,setUnvalidatedAtomValue_DEPRECATED:Ge}=O,{graph:Ke,saveDependencyMapToStore:Ye}=V,{cloneGraph:Xe}=V,{applyAtomValueWrites:Je}=oe,{freshSnapshot:Ze}=Ve,{getNextTreeStateVersion:et,makeEmptyStoreState:tt}=ge,{mapByDeletingMultipleFromMap:nt}=c;function rt(){throw new Error("This component must be used inside a <RecoilRoot> component.")}const ot=Object.freeze({getState:rt,replaceState:rt,getGraph:rt,subscribeToTransactions:rt,addTransactionMetadata:rt});let at=!1;function it(e){if(at)throw new Error("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");if(null===e.nextTree){const t=e.currentTree.version,n=et();e.nextTree={...e.currentTree,version:n,stateID:n,dirtyAtoms:new Set,transactionMetadata:{}},e.graphsByVersion.set(n,Xe(l(e.graphsByVersion.get(t))))}}const lt=t.createContext({current:ot}),ut=()=>Ue(lt),st=t.createContext(null);function ct(e){const t=e.getState(),n=t.currentTree,r=n.dirtyAtoms;if(r.size){for(const[n,o]of t.nodeTransactionSubscriptions)if(r.has(n))for(const[t,n]of o)n(e);for(const[n,r]of t.transactionSubscriptions)r(e);const o=qe(e,n,r);for(const e of o){const r=t.nodeToComponentSubscriptions.get(e);if(r)for(const[e,[t,o]]of r)o(n)}let a="[available in dev build]";t.suspendedComponentResolvers.forEach((e=>u("value became available, waking components",a,e)))}t.queuedComponentCallbacks_DEPRECATED.forEach((e=>e(n))),t.queuedComponentCallbacks_DEPRECATED.splice(0,t.queuedComponentCallbacks_DEPRECATED.length)}function ft(e){const t=ut(),[n,r]=We([]);return e.setNotifyBatcherOfChange((()=>r({}))),je((()=>{fe("Batcher",(()=>{const e=t.current.getState(),{nextTree:n}=e;if(null===n)return;e.previousTree=e.currentTree,e.currentTree=n,e.nextTree=null,ct(t.current);const r=l(e.previousTree).version;e.graphsByVersion.delete(r),e.previousTree=null}))})),null}let dt=0;var pt,ht={useStoreRef:ut,useRecoilMutableSource:()=>Ue(st),RecoilRoot:function({initializeState_DEPRECATED:e,initializeState:n,store_INTERNAL:r,children:o}){var a;let i;const u=$e(null),s=null!==(a=t.createMutableSource)&&void 0!==a?a:t.unstable_createMutableSource,c=null!=r?r:{getState:()=>i.current,replaceState:e=>{const t=f.current.getState();it(t);const n=l(t.nextTree);let r;try{at=!0,r=e(n)}finally{at=!1}r!==n&&(t.nextTree=r,l(u.current)())},getGraph:e=>{const t=i.current.graphsByVersion;if(t.has(e))return l(t.get(e));const n=Ke();return t.set(e,n),n},subscribeToTransactions:(e,t)=>{if(null==t){const{transactionSubscriptions:t}=f.current.getState(),n=dt++;return t.set(n,e),{release:()=>{t.delete(n)}}}{const{nodeTransactionSubscriptions:n}=f.current.getState();n.has(t)||n.set(t,new Map);const r=dt++;return l(n.get(t)).set(r,e),{release:()=>{const e=n.get(t);e&&(e.delete(r),0===e.size&&n.delete(t))}}}},addTransactionMetadata:e=>{it(f.current.getState());for(const t of Object.keys(e))l(f.current.getState().nextTree).transactionMetadata[t]=e[t]}},f=$e(c);i=$e(null!=e?function(e,t){const n=tt();return t({set:(t,r)=>{const o=n.currentTree,[a,i]=Qe(e,o,t.key,r),l=new Set(i.keys());Ye(a,e,o.version);const u=nt(o.nonvalidatedAtoms,l);n.currentTree={...o,dirtyAtoms:Fe(o.dirtyAtoms,l),atomValues:Je(o.atomValues,i),nonvalidatedAtoms:u}},setUnvalidatedAtomValues:e=>{e.forEach(((e,t)=>{n.currentTree=Ge(n.currentTree,t,e)}))}}),n}(c,e):null!=n?function(e){return Ze().map(e).getStore_INTERNAL().getState()}(n):tt());const d=Be((()=>s?s(i,(()=>i.current.currentTree.version)):null),[s,i]);return je((()=>()=>{for(const e of f.current.getState().knownAtoms)He(f.current,e)}),[]),t.createElement(lt.Provider,{value:f},t.createElement(st.Provider,{value:d},t.createElement(ft,{setNotifyBatcherOfChange:function(e){u.current=e}}),o))},sendEndOfBatchNotifications_FOR_TESTING:ct},mt=function(e,t){if(!e)throw new Error(t)};const vt=null!==(pt=t.useMutableSource)&&void 0!==pt?pt:t.unstable_useMutableSource;var gt={mutableSourceExists:function(){return vt&&!("undefined"!=typeof window&&window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE)},useMutableSource:vt};const{useRef:yt}=t;var bt=function(){return yt(),"<component name not available>"};const{useCallback:wt,useEffect:St,useMemo:kt,useRef:Et,useState:_t}=t,{batchUpdates:xt}=ce,{DEFAULT_VALUE:Ct,getNode:Tt,nodes:At}=T,{useRecoilMutableSource:Nt,useStoreRef:Rt}=ht,{isRecoilValue:It}=w,{AbstractRecoilValue:Pt,getRecoilValueAsLoadable:Mt,setRecoilValue:Lt,setRecoilValueLoadable:Ot,setUnvalidatedRecoilValue:Dt,subscribeToRecoilValue:zt}=oe,{Snapshot:Vt,cloneSnapshot:Ft}=Ve,{setByAddingToSet:Ut}=c,{mutableSourceExists:jt,useMutableSource:Bt}=gt;function $t(e,t,n){if("hasValue"===e.state)return e.contents;if("loading"===e.state)throw new Promise((e=>{n.current.getState().suspendedComponentResolvers.add(e)}));throw"hasError"===e.state?e.contents:new Error(`Invalid value of loadable atom "${t.key}"`)}function Wt(e){return jt()?function(e){const t=Rt(),n=wt((()=>Mt(t.current,e,t.current.getState().currentTree)),[t,e]),r=bt(),o=wt(((n,o)=>{const a=t.current,i=zt(a,e,(()=>{u("RecoilValue subscription fired",e.key,(()=>{o()}))}),r);return()=>i.release(a)}),[e,t,r]);return Bt(Nt(),n,o)}(e):function(e){const t=Rt(),[n,r]=_t([]),o=bt();return St((()=>{const n=t.current,a=zt(n,e,(t=>{u("RecoilValue subscription fired",e.key,(()=>{r([])}))}),o);return u("initial update on subscribing",e.key,(()=>{n.getState().nextTree?n.getState().queuedComponentCallbacks_DEPRECATED.push(s((()=>{r([])}))):r([])})),()=>a.release(n)}),[e,t]),Mt(t.current,e)}(e)}function Ht(e){const t=Rt();return $t(Wt(e),e,t)}function qt(e){const t=Rt();return wt((n=>{Lt(t.current,e,n)}),[t,e])}function Qt(e){const t=Rt();St((()=>t.current.subscribeToTransactions(e).release),[e,t])}function Gt(e){const t=e.atomValues,n=i(function(e,t){const n=new Map;for(const[r,o]of e)t(o,r)&&n.set(r,o);return n}(t,((e,t)=>{const n=Tt(t).persistence_UNSTABLE;return null!=n&&"none"!==n.type&&"hasValue"===e.state})),(e=>e.contents));return function(...e){const t=new Map;for(let n=0;n<e.length;n++){const r=e[n].keys();let o;for(;!(o=r.next()).done;)t.set(o.value,e[n].get(o.value))}return t}(e.nonvalidatedAtoms,n)}function Kt(){const e=Rt();return wt((t=>{var n;const r=e.current.getState(),o=null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree,a=t.getStore_INTERNAL().getState().currentTree;xt((()=>{const n=new Set;for(const e of[o.atomValues.keys(),a.atomValues.keys()])for(const t of e){var r,i;(null===(r=o.atomValues.get(t))||void 0===r?void 0:r.contents)!==(null===(i=a.atomValues.get(t))||void 0===i?void 0:i.contents)&&Tt(t).shouldRestoreFromSnapshots&&n.add(t)}n.forEach((t=>{Ot(e.current,new Pt(t),a.atomValues.has(t)?l(a.atomValues.get(t)):Ct)})),e.current.replaceState((e=>({...e,stateID:t.getID_INTERNAL()})))}))}),[e])}class Yt{}const Xt=new Yt;var Jt={recoilComponentGetRecoilValueCount_FOR_TESTING:{current:0},useGotoRecoilSnapshot:Kt,useRecoilCallback:function(e,t){const n=Rt(),r=Kt();return wt(((...t)=>{const o=Ft(n.current);function a(e,t){Lt(n.current,e,t)}function i(e){Lt(n.current,e,Ct)}let l=Xt;return xt((()=>{l=e({set:a,reset:i,snapshot:o,gotoSnapshot:r})(...t)})),l instanceof Yt&&mt(!1),l}),null!=t?[...t,n]:void 0)},useRecoilInterface:function(){const e=Rt(),[t,n]=_t([]),r=Et(new Set);r.current=new Set;const o=Et(new Set),a=Et(new Map),i=wt((t=>{const n=a.current.get(t);n&&(n.release(e.current),a.current.delete(t))}),[e,a]),l=bt();return St((()=>{const t=e.current;function c(e,t){a.current.has(t)&&n([])}D(r.current,o.current).forEach((e=>{if(a.current.has(e))return;const n=zt(t,new Pt(e),(t=>{u("RecoilValue subscription fired",e,(()=>{c(0,e)}))}),l);a.current.set(e,n),u("initial update on subscribing",e,(()=>{t.getState().nextTree?t.getState().queuedComponentCallbacks_DEPRECATED.push(s((()=>{c(t.getState(),e)}))):c(t.getState(),e)}))})),D(o.current,r.current).forEach((e=>{i(e)})),o.current=r.current})),St((()=>{const e=a.current;return()=>e.forEach(((e,t)=>i(t)))}),[i]),kt((()=>{function t(t){return n=>{Lt(e.current,t,n)}}function n(t){return r.current.has(t.key)||(r.current=Ut(r.current,t.key)),Mt(e.current,t)}function o(t){return $t(n(t),t,e)}return{getRecoilValue:o,getRecoilValueLoadable:n,getRecoilState:function(e){return[o(e),t(e)]},getRecoilStateLoadable:function(e){return[n(e),t(e)]},getSetRecoilState:t,getResetRecoilState:function(t){return()=>Lt(e.current,t,Ct)}}}),[r,e])},useRecoilSnapshot:function(){const e=Rt(),[t,n]=_t((()=>Ft(e.current)));return Qt(wt((e=>n(Ft(e))),[])),t},useRecoilState:function(e){return[Ht(e),qt(e)]},useRecoilStateLoadable:function(e){return[Wt(e),qt(e)]},useRecoilTransactionObserver:function(e){Qt(wt((t=>{e({snapshot:Ft(t,"current"),previousSnapshot:Ft(t,"previous")})}),[e]))},useRecoilValue:Ht,useRecoilValueLoadable:Wt,useResetRecoilState:function(e){const t=Rt();return wt((()=>{Lt(t.current,e,Ct)}),[t,e])},useSetRecoilState:qt,useSetUnvalidatedAtomValues:function(){const e=Rt();return(t,n={})=>{xt((()=>{e.current.addTransactionMetadata(n),t.forEach(((t,n)=>Dt(e.current,new Pt(n),t)))}))}},useTransactionObservation_DEPRECATED:function(e){Qt(wt((t=>{let n=t.getState().previousTree;const r=t.getState().currentTree;n||(n=t.getState().currentTree);const o=Gt(r),a=Gt(n),l=i(At,(e=>{var t,n,r,o;return{persistence_UNSTABLE:{type:null!==(t=null===(n=e.persistence_UNSTABLE)||void 0===n?void 0:n.type)&&void 0!==t?t:"none",backButton:null!==(r=null===(o=e.persistence_UNSTABLE)||void 0===o?void 0:o.backButton)&&void 0!==r&&r}}})),u=function(e,t){const n=new Set;for(const r of e)t(r)&&n.add(r);return n}(r.dirtyAtoms,(e=>o.has(e)||a.has(e)));e({atomValues:o,previousAtomValues:a,atomInfo:l,modifiedAtoms:u,transactionMetadata:{...r.transactionMetadata}})}),[e]))},useTransactionSubscription_DEPRECATED:Qt};const{useMemo:Zt}=t,{RecoilRoot:en,useStoreRef:tn}=ht;var nn=function(e){return!!e&&"function"==typeof e.then};const rn={getValue(){if("loading"===this.state&&a("recoil_async_selector_refactor"))throw this.contents.then((({__value:e})=>e));if("hasValue"!==this.state)throw this.contents;return this.contents},toPromise(){return"hasValue"===this.state?Promise.resolve(this.contents):"hasError"===this.state?Promise.reject(this.contents):a("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents},valueMaybe(){return"hasValue"===this.state?this.contents:void 0},valueOrThrow(){if("hasValue"!==this.state)throw new Error(`Loadable expected value, but in "${this.state}" state`);return this.contents},errorMaybe(){return"hasError"===this.state?this.contents:void 0},errorOrThrow(){if("hasError"!==this.state)throw new Error(`Loadable expected error, but in "${this.state}" state`);return this.contents},promiseMaybe(){return"loading"===this.state?a("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents:void 0},promiseOrThrow(){if("loading"!==this.state)throw new Error(`Loadable expected promise, but in "${this.state}" state`);return a("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents},map(e){if("hasError"===this.state)return this;if("hasValue"===this.state)try{const t=e(this.contents);return nn(t)?ln(t):on(t)}catch(t){return nn(t)?ln(t.next((()=>e(this.contents)))):an(t)}if("loading"===this.state)return ln(this.contents.then(e).catch((t=>{if(nn(t))return t.then((()=>e(this.contents)));throw t})));throw new Error("Invalid Loadable state")}};function on(e){return Object.freeze({state:"hasValue",contents:e,...rn})}function an(e){return Object.freeze({state:"hasError",contents:e,...rn})}function ln(e){return Object.freeze({state:"loading",contents:e,...rn})}var un={loadableWithValue:on,loadableWithError:an,loadableWithPromise:ln,loadableLoading:function(){return ln(new Promise((()=>{})))},loadableAll:function(e){return e.every((e=>"hasValue"===e.state))?on(e.map((e=>e.contents))):e.some((e=>"hasError"===e.state))?an(l(e.find((e=>"hasError"===e.state)),"Invalid loadable passed to loadableAll").contents):ln(a("recoil_async_selector_refactor")?Promise.all(e.map((e=>e.contents))).then((e=>({__value:e}))):Promise.all(e.map((e=>e.contents))))}};Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,DataView,"undefined"!=typeof navigator&&navigator.product;var sn=function(){let e,t;const n={get:n=>n===e?t:void 0,set:(r,o)=>(e=r,t=o,n)};return n};const cn=Symbol("ArrayKeyedMap"),fn=new Map;class dn{constructor(e){if(f(this,"_base",new Map),e instanceof dn)for(const[t,n]of e.entries())this.set(t,n);else if(e)for(const[t,n]of e)this.set(t,n);return this}get(e){const t=Array.isArray(e)?e:[e];let n=this._base;return t.forEach((e=>{var t;n=null!==(t=n.get(e))&&void 0!==t?t:fn})),void 0===n?void 0:n.get(cn)}set(e,t){const n=Array.isArray(e)?e:[e];let r=this._base,o=r;return n.forEach((e=>{o=r.get(e),o||(o=new Map,r.set(e,o)),r=o})),o.set(cn,t),this}delete(e){const t=Array.isArray(e)?e:[e];let n=this._base,r=n;return t.forEach((e=>{r=n.get(e),r||(r=new Map,n.set(e,r)),n=r})),r.delete(cn),this}entries(){const e=[];return function t(n,r){n.forEach(((n,o)=>{o===cn?e.push([r,n]):t(n,r.concat(o))}))}(this._base,[]),e.values()}toBuiltInMap(){return new Map(this.entries())}}var pn=dn,hn=Object.freeze({__proto__:null,ArrayKeyedMap:pn});const{ArrayKeyedMap:mn}=hn;var vn=function(){return new mn};function gn(e,t,n){if("string"==typeof e&&!e.includes('"')&&!e.includes("\\"))return`"${e}"`;switch(typeof e){case"undefined":return"";case"boolean":return e?"true":"false";case"number":case"symbol":return String(e);case"string":return JSON.stringify(e);case"function":if(!0!==(null==t?void 0:t.allowFunctions))throw new Error("Attempt to serialize function in a Recoil cache key");return`__FUNCTION(${e.name})__`}if(null===e)return"null";var r;if("object"!=typeof e)return null!==(r=JSON.stringify(e))&&void 0!==r?r:"";if(nn(e))return"__PROMISE__";if(Array.isArray(e))return`[${e.map(((e,n)=>gn(e,t,n.toString())))}]`;if("function"==typeof e.toJSON)return gn(e.toJSON(n),t,n);if(e instanceof Map){const r={};for(const[n,o]of e)r["string"==typeof n?n:gn(n,t)]=o;return gn(r,t,n)}return e instanceof Set?gn(Array.from(e).sort(((e,n)=>gn(e,t).localeCompare(gn(n,t)))),t,n):null!=e[Symbol.iterator]&&"function"==typeof e[Symbol.iterator]?gn(Array.from(e),t,n):`{${Object.keys(e).filter((t=>void 0!==e[t])).sort().map((n=>`${gn(n,t)}:${gn(e[n],t,n)}`)).join(",")}}`}var yn=function(e,t={allowFunctions:!1}){return gn(e,t)},bn=function(){const e=new Map,t={get:t=>e.get(yn(t)),set:(n,r)=>(e.set(yn(n),r),t),map:e};return t},wn={setInTreeCache:function e(t,n,r){if(null==t){if(0===n.length)return{type:"result",result:r};{const[t,...o]=n,[a,i]=t;return{type:"branch",nodeKey:a,branches:new Map([[i,e(null,o,r)]])}}}if(0===n.length)return"result"!==t.type&&mt(!1),t.result&&"loading"===t.result.state?{type:"result",result:r}:(t.result!==r&&mt(!1),t);{const[o,...a]=n,[i,l]=o;return"branch"!==t.type&&mt(!1),t.nodeKey!==i&&mt(!1),t.branches.set(l,e(t.branches.get(l),a,r)),t}},getFromTreeCache:function e(t,n,r){var o;if(null==t)return;if("result"===t.type)return t.result;null==r||null===(o=r.onCacheHit)||void 0===o||o.call(r,t.nodeKey);const a=n(t.nodeKey);return e(t.branches.get(a),n,r)}};const{getFromTreeCache:Sn,setInTreeCache:kn}=wn;var En=function(){let e;return{get:(t,n)=>Sn(e,t,n),set:(t,n)=>{e=kn(e,t,n)},getRoot:()=>e}};const{getFromTreeCache:_n,setInTreeCache:xn}=wn;var Cn={startPerfBlock:function(e){return()=>null}};const{loadableWithError:Tn,loadableWithPromise:An,loadableWithValue:Nn}=un,{getNodeLoadable:Rn,peekNodeLoadable:In,setNodeValue:Pn}=O,{saveDependencyMapToStore:Mn}=V,{DEFAULT_VALUE:Ln,RecoilValueNotReady:On,registerNode:Dn}=T,{isRecoilValue:zn}=w,{AbstractRecoilValue:Vn}=w,{setRecoilValueLoadable:Fn}=oe,{startPerfBlock:Un}=Cn,jn=Object.freeze(new Set),Bn=[],$n=new Map,Wn=(()=>{let e=0;return()=>e++})();const{loadableWithError:Hn,loadableWithPromise:qn,loadableWithValue:Qn}=un,{getNodeLoadable:Gn,peekNodeLoadable:Kn,setNodeValue:Yn}=O,{addToDependencyMap:Xn,mergeDepsIntoDependencyMap:Jn,saveDependencyMapToStore:Zn}=V,{DEFAULT_VALUE:er,RecoilValueNotReady:tr,registerNode:nr}=T,{AbstractRecoilValue:rr}=w,{getRecoilValueAsLoadable:or,isRecoilValue:ar,setRecoilValueLoadable:ir}=oe,{startPerfBlock:lr}=Cn,ur=Object.freeze(new Set);function sr(e){const t=[];for(const n of Array.from(e.keys()).sort()){const r=l(e.get(n));t.push(n),t.push(r.state),t.push(r.contents)}return t}const cr=new Map;var fr=a("recoil_async_selector_refactor")?function(e){const{key:t,get:n,cacheImplementation_UNSTABLE:r}=e,o=null!=e.set?e.set:void 0,a=r===vn?En():r===bn?function(){let e;return{get:(t,n)=>_n(e,(e=>yn(t(e))),n),set:(t,n)=>{e=xn(e,t.map((([e,t])=>[e,yn(t)])),n)},getRoot:()=>e}}():r===sn?function(){let e;return{get:(t,n)=>{if(void 0!==e){for(const[o,a]of e.route){var r;if(t(o)!==a)return;null==n||null===(r=n.onCacheHit)||void 0===r||r.call(n,o)}return e.value}},set:(t,n)=>{e={route:t,value:n}},getRoot:()=>e}}():En(),i={depValuesDiscoveredSoFarDuringAsyncWork:null,latestLoadable:null,latestExecutionId:null,stateVersion:null};function u(e){e.getState().knownSelectors.add(t)}function s(e,t,n){if("loading"===t.state){let t=$n.get(n);null==t&&$n.set(n,t=new Set),t.add(e)}}function c(e,t,n){if(t.atomValues.has(n))return[new Map,l(t.atomValues.get(n))];const[,r]=Rn(e,t,n),o=e.getState().knownSelectors.has(n);return"loading"!==r.state&&o&&t.atomValues.set(n,r),[new Map,r]}function f(e,n,r,o,a){return n.then((n=>{const{__key:o,__value:i}=n;null!=o&&r.atomValues.set(o,Nn(i));const[l,u]=m(e,r,a);if(S(a)&&w(u,a),k(l),"loading"!==l.state&&(_(r,v(u),l),d(l,a)),"hasError"===l.state)throw l.contents;return"hasValue"===l.state?{__value:l.contents,__key:t}:l.contents})).catch((e=>{const t=Tn(e);throw E(),_(r,v(o),Tn(e)),d(t,a),e}))}function d(e,n){S(n)&&(b(e),function(e,n){const r=$n.get(n);if(void 0!==r){for(const n of r)Fn(n,new Vn(t),e);$n.delete(n)}}(e,n))}function p(e,n,r,o){var a,i,l,u,s,c,f;(S(o)||n.version===(null===(a=e.getState())||void 0===a||null===(i=a.currentTree)||void 0===i?void 0:i.version)||n.version===(null===(l=e.getState())||void 0===l||null===(u=l.nextTree)||void 0===u?void 0:u.version))&&Mn(new Map([[t,r]]),e,null!==(s=null===(c=e.getState())||void 0===c||null===(f=c.nextTree)||void 0===f?void 0:f.version)&&void 0!==s?s:e.getState().currentTree.version)}function h(e,t,n,r,o){n.add(r),p(e,t,n,o)}function m(e,r,o){const a=Un(t);let i,l;const u=new Map,s=new Set;function m(t){const{key:n}=t;h(e,r,s,n,o);const[,a]=c(e,r,n);if(u.set(n,a),"hasValue"===a.state)return a.contents;throw a.contents}p(e,r,s,o);try{i=n({get:m}),i=zn(i)?m(i):i,nn(i)?i=function(e,n,r,o,a){return n.then((e=>{const n=Nn(e);return E(),_(r,v(o),n),d(n,a),{__value:e,__key:t}})).catch((t=>{if(S(a)&&w(o,a),nn(t))return f(e,t,r,o,a);const n=Tn(t);throw E(),_(r,v(o),n),d(n,a),t}))}(e,i,r,u,o).finally(a):a()}catch(t){i=t,nn(i)?i=f(e,i,r,u,o).finally(a):a()}return l=i instanceof Error?Tn(i):nn(i)?An(i):Nn(i),k(l),[l,u]}function v(e){return Array.from(e.entries()).map((([e,t])=>[e,t.contents]))}function g(e,n){const r=function(e,n){var r;if(n.atomValues.has(t))return n.atomValues.get(t);const o=new Set(null!==(r=e.getGraph(n.version).nodeDeps.get(t))&&void 0!==r?r:jn);return p(e,n,o,i.latestExecutionId),a.get((t=>{const[,r]=c(e,n,t);return r.contents}),{onCacheHit:r=>{r!==t&&h(e,n,o,r,i.latestExecutionId)}})}(e,n);return null!=r?(b(r),r):function(e,t){return null!=i.latestLoadable&&null!=i.latestExecutionId&&!function(e,t){var n,r;const o=null!==(n=i.depValuesDiscoveredSoFarDuringAsyncWork)&&void 0!==n?n:new Map,a=Array((null!==(r=y.get(t.version))&&void 0!==r?r:new Map).entries()),l=y.has(t.version)&&a.length===o.size&&a.every((([e,t])=>o.get(e)===t));return null!=o&&t.version!==i.stateVersion&&!l&&(y.set(t.version,new Map(o)),Array.from(o).some((([n,r])=>{const[,o]=c(e,t,n);return o.contents!==r.contents&&!("loading"===r.state&&"loading"!==o.state)})))}(e,t)}(e,n)?(s(e,l(i.latestLoadable),l(i.latestExecutionId)),l(i.latestLoadable)):function(e,t){const n=Wn(),[r,o]=m(e,t,n);return b(r,o,n,t),function(e,t,n){"loading"!==n.state&&_(e,t,n)}(t,v(o),r),s(e,r,n),r}(e,n)}const y=new Map;function b(e,t,n,r){"loading"===e.state?(i.depValuesDiscoveredSoFarDuringAsyncWork=t,i.latestExecutionId=n,i.latestLoadable=e,i.stateVersion=null==r?void 0:r.version):(i.depValuesDiscoveredSoFarDuringAsyncWork=null,i.latestExecutionId=null,i.latestLoadable=null,i.stateVersion=null)}function w(e,t){S(t)&&(i.depValuesDiscoveredSoFarDuringAsyncWork=e)}function S(e){return e===i.latestExecutionId}function k(e){"loading"!==e.state&&E(e.contents)}function E(e){}function _(e,n,r){e.atomValues.set(t,r),a.set(n,r)}function x(e){if(Bn.includes(t)){const e=`Recoil selector has circular dependencies: ${Bn.slice(Bn.indexOf(t)).join(" → ")}`;return Tn(new Error(e))}Bn.push(t);try{return e()}finally{Bn.pop()}}function C(e,t){return a.get((n=>{const r=In(e,t,n);return null==r?void 0:r.contents}))}function T(e,t){return u(e),[new Map,x((()=>g(e,t)))]}function A(e){e.atomValues.delete(t)}return Dn(null!=o?{key:t,peek:C,get:T,set:function(e,t,n){u(e);const r=new Map,a=new Map;function i({key:n}){const[,r]=c(e,t,n);if("hasValue"===r.state)return r.contents;throw"loading"===r.state?new On(n):r.contents}function l(n,r){const o="function"==typeof r?r(i(n)):r,[,l]=Pn(e,t,n.key,o);l.forEach(((e,t)=>a.set(t,e)))}return o({set:l,get:i,reset:function(e){l(e,Ln)}},n),[r,a]},cleanUp:()=>{},invalidate:A,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1}:{key:t,peek:C,get:T,cleanUp:()=>{},invalidate:A,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1})}:function(e){const{key:t,get:n,cacheImplementation_UNSTABLE:r}=e,o=null!=e.set?e.set:void 0;let a=null!=r?r:vn();function i(e){e.getState().knownSelectors.add(t)}function l(e,t){if("loading"===t.state){let n=cr.get(t);void 0===n&&cr.set(t,n=new Set),n.add(e)}}function u(e,n){const r=cr.get(e);if(void 0!==r){for(const e of r)ir(e,new rr(t),n);cr.delete(e)}}function s(e,n){var r;const o=null!==(r=e.getGraph(n.version).nodeDeps.get(t))&&void 0!==r?r:ur,i=new Map(Array.from(o).sort().map((t=>[t,Kn(e,n,t)]))),l=new Map;for(const[e,t]of i.entries()){if(null==t)return;l.set(e,t)}const u=sr(l);return a.get(u)}function c(e){e.atomValues.delete(t)}function f(e,r){i(e);const o=r.atomValues.get(t);return void 0!==o?[new Map,o]:function(e,r){var o;const i=new Map,s=null!==(o=e.getGraph(r.version).nodeDeps.get(t))&&void 0!==o?o:ur,c=sr(new Map(Array.from(s).sort().map((t=>{const[n,o]=Gn(e,r,t);return Jn(n,i),Zn(i,e,r.version),[t,o]})))),f=a.get(c);if(null!=f)return l(e,f),[i,f];const[d,p,h]=function(e,r){const o=lr(t),a=new Map,i=new Map;function l({key:n}){Xn(t,n,i);const[o,l]=Gn(e,r,n);if(a.set(n,l),Jn(o,i),Zn(i,e,r.version),"hasValue"===l.state)return l.contents;throw l.contents}try{const e=n({get:l}),t=ar(e)?l(e):e;let r;return nn(t)?r=qn(t.finally(o)):(o(),r=Qn(t)),[i,r,a]}catch(n){let r;return void 0!==n.then?r=qn(n.then((()=>{const n=or(e,new rr(t));if("hasError"===n.state)throw n.contents;return n.contents})).finally(o)):(o(),r=Hn(n)),[i,r,a]}}(e,r);Jn(d,i),Zn(i,e,r.version);const m=sr(h);return l(e,p),function(e,n,r){"loading"!==r.state||r.contents.then((e=>{const t=Qn(e);return a=a.set(n,t),u(r,t),e})).catch((e=>{if(nn(e))return e;const t=Hn(e);return a=a.set(n,t),u(r,t),e})),a=a.set(n,r),"loading"!==r.state&&e.atomValues.set(t,r)}(r,m,p),[i,p]}(e,r)}return nr(null!=o?{key:t,peek:s,get:f,set:function(e,t,n){i(e);const r=new Map,a=new Map;function l({key:n}){const[o,a]=Gn(e,t,n);if(Jn(o,r),"hasValue"===a.state)return a.contents;throw"loading"===a.state?new tr(n):a.contents}function u(n,o){const i="function"==typeof o?o(l(n)):o,[u,s]=Yn(e,t,n.key,i);Jn(u,r),s.forEach(((e,t)=>a.set(t,e)))}return o({set:u,get:l,reset:function(e){u(e,er)}},n),[r,a]},invalidate:c,cleanUp:()=>{},dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1}:{key:t,peek:s,get:f,invalidate:c,cleanUp:()=>{},dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1})};const{loadableWithError:dr,loadableWithPromise:pr,loadableWithValue:hr}=un,{DEFAULT_VALUE:mr,DefaultValue:vr,registerNode:gr}=T,{isRecoilValue:yr}=w,{markRecoilValueModified:br,setRecoilValue:wr,setRecoilValueLoadable:Sr}=oe;var kr=function e(t){const{default:n,...r}=t;return yr(n)?function(t){const n=e({...t,default:mr,persistence_UNSTABLE:void 0===t.persistence_UNSTABLE?void 0:{...t.persistence_UNSTABLE,validator:e=>e instanceof vr?e:l(t.persistence_UNSTABLE).validator(e,mr)},effects_UNSTABLE:t.effects_UNSTABLE});return fr({key:`${t.key}__withFallback`,get:({get:e})=>{const r=e(n);return r instanceof vr?t.default:r},set:({set:e},t)=>e(n,t),dangerouslyAllowMutability:t.dangerouslyAllowMutability})}({...r,default:n}):function(e){const{key:t,persistence_UNSTABLE:n}=e;let r,o=nn(e.default)?pr(e.default.then((e=>(o=hr(e),{__key:t,__value:e}))).catch((e=>{throw o=dr(e),e}))):hr(e.default);const a=new Map;function i(n,r,i){if(n.getState().knownAtoms.has(t))return;if(n.getState().knownAtoms.add(t),"loading"===o.state){function l(){var e;(null!==(e=n.getState().nextTree)&&void 0!==e?e:n.getState().currentTree).atomValues.has(t)||br(n,u)}o.contents.then(l).catch(l)}let s=mr,c=null;if(null!=e.effects_UNSTABLE){let r=!0;const l=e=>t=>{if(r){const e=s instanceof vr||nn(s)?"hasValue"===o.state?o.contents:mr:s;s="function"==typeof t?t(e):t}else{if(nn(t))throw new Error("Setting atoms to async values is not implemented.");"function"!=typeof t&&(c={effect:e,value:t}),wr(n,u,"function"==typeof t?n=>{const r=t(n);return c={effect:e,value:r},r}:t)}},d=e=>()=>l(e)(mr),p=e=>r=>{n.subscribeToTransactions((n=>{var a;let{currentTree:i,previousTree:l}=n.getState();l||(l=i);const u=i.atomValues.get(t);if(null==u||"hasValue"===u.state){var s,f,d;const n=null!=u?u.contents:mr,a=null!==(s=l.atomValues.get(t))&&void 0!==s?s:o,i="hasValue"===a.state?a.contents:mr;(null===(f=c)||void 0===f?void 0:f.effect)===e&&(null===(d=c)||void 0===d?void 0:d.value)===n||r(n,i)}(null===(a=c)||void 0===a?void 0:a.effect)===e&&(c=null)}),t)};for(const t of null!==(f=e.effects_UNSTABLE)&&void 0!==f?f:[]){var f;const e=t({node:u,trigger:i,setSelf:l(t),resetSelf:d(t),onSet:p(t)});null!=e&&a.set(n,e)}r=!1}s instanceof vr||r.atomValues.set(t,nn(s)?pr(function(e,n){const r=n.then((n=>{var o,a;return(null===(a=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===r&&wr(e,u,n),{__key:t,__value:n}})).catch((n=>{var o,a;throw(null===(a=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===r&&Sr(e,u,dr(n)),n}));return r}(n,s)):hr(s))}const u=gr({key:t,peek:function(e,n){var a,i,l;return null!==(a=null!==(i=n.atomValues.get(t))&&void 0!==i?i:null===(l=r)||void 0===l?void 0:l[1])&&void 0!==a?a:o},get:function(e,a){if(i(e,a,"get"),a.atomValues.has(t))return[new Map,l(a.atomValues.get(t))];if(a.nonvalidatedAtoms.has(t)){if(null!=r)return r;if(null==n)return[new Map,o];const e=a.nonvalidatedAtoms.get(t),i=n.validator(e,mr),l=i instanceof vr?o:hr(i);return r=[new Map,l],r}return[new Map,o]},set:function(e,n,o){if(i(e,n,"set"),n.atomValues.has(t)){const e=l(n.atomValues.get(t));if("hasValue"===e.state&&o===e.contents)return[new Map,new Map]}else if(!n.nonvalidatedAtoms.has(t)&&o instanceof vr)return[new Map,new Map];return r=void 0,[new Map,(new Map).set(t,hr(o))]},cleanUp:function(e){var t;null===(t=a.get(e))||void 0===t||t(),a.delete(e)},invalidate:function(){r=void 0},dangerouslyAllowMutability:e.dangerouslyAllowMutability,persistence_UNSTABLE:e.persistence_UNSTABLE?{type:e.persistence_UNSTABLE.type,backButton:e.persistence_UNSTABLE.backButton}:void 0,shouldRestoreFromSnapshots:!0});return u}({...r,default:n})};let Er=0;var _r=function(e){var t,n;let r=null!==(t=null===(n=e.cacheImplementationForParams_UNSTABLE)||void 0===n?void 0:n.call(e))&&void 0!==t?t:bn();return t=>{var n,o;const a=r.get(t);if(null!=a)return a;const i=`${e.key}__selectorFamily/${null!==(n=yn(t,{allowFunctions:!0}))&&void 0!==n?n:"void"}/${Er++}`,l=n=>e.get(t)(n),u=null===(o=e.cacheImplementation_UNSTABLE)||void 0===o?void 0:o.call(e);let s;if(null!=e.set){const n=e.set;s=fr({key:i,get:l,set:(e,r)=>n(t)(e,r),cacheImplementation_UNSTABLE:u,dangerouslyAllowMutability:e.dangerouslyAllowMutability})}else s=fr({key:i,get:l,cacheImplementation_UNSTABLE:u,dangerouslyAllowMutability:e.dangerouslyAllowMutability});return r=r.set(t,s),s}};const{DEFAULT_VALUE:xr,DefaultValue:Cr}=T;const Tr=_r({key:"__constant",get:e=>()=>e,cacheImplementationForParams_UNSTABLE:vn});const Ar=_r({key:"__error",get:e=>()=>{throw new Error(e)},cacheImplementationForParams_UNSTABLE:vn});const{loadableWithError:Nr,loadableWithPromise:Rr,loadableWithValue:Ir}=un;function Pr(e,t){const n=Array(t.length).fill(void 0),r=Array(t.length).fill(void 0);for(const[o,a]of t.entries())try{n[o]=e(a)}catch(e){r[o]=e}return[n,r]}function Mr(e){return null!=e&&!nn(e)}function Lr(e){return Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))}function Or(e){return null!=e&&"object"==typeof e&&e.hasOwnProperty("__value")?e.__value:e}function Dr(e,t){return Array.isArray(e)?t:Object.getOwnPropertyNames(e).reduce(((e,n,r)=>({...e,[n]:t[r]})),{})}function zr(e,t,n){return Dr(e,n.map(((e,n)=>null==e?Ir(t[n]):nn(e)?Rr(e):Nr(e))))}var Vr={waitForNone:_r({key:"__waitForNone",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Pr(t,n);return zr(e,r,o)}}),waitForAny:_r({key:"__waitForAny",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Pr(t,n);if(o.some((e=>null==e)))return zr(e,r,o);if(o.every(Mr))throw o.find(Mr);if(a("recoil_async_selector_refactor"))return new Promise(((t,n)=>{for(const[a,i]of o.entries())nn(i)&&i.then((n=>{r[a]=Or(n),o[a]=null,t(zr(e,r,o))})).catch((e=>{o[a]=e,o.every(Mr)&&n(o[0])}))}));throw new Promise(((t,n)=>{for(const[a,i]of o.entries())nn(i)&&i.then((n=>{r[a]=n,o[a]=null,t(zr(e,r,o))})).catch((e=>{o[a]=e,o.every(Mr)&&n(o[0])}))}))}}),waitForAll:_r({key:"__waitForAll",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Pr(t,n);if(o.every((e=>null==e)))return Dr(e,r);const i=o.find(Mr);if(null!=i)throw i;if(a("recoil_async_selector_refactor"))return Promise.all(o).then((t=>{return Dr(e,(n=r,o=t,o.map(((e,t)=>void 0===e?n[t]:e))).map(Or));var n,o}));throw Promise.all(o).then((t=>Dr(e,t)))}}),noWait:_r({key:"__noWait",get:e=>({get:t})=>{try{return Ir(t(e))}catch(e){return nn(e)?Rr(e):Nr(e)}}})};const{batchUpdates:Fr,setBatcher:Ur}=ce,{DefaultValue:jr}=T,{RecoilRoot:Br}=ht,{isRecoilValue:$r}=w,{freshSnapshot:Wr}=Ve,{useGotoRecoilSnapshot:Hr,useRecoilCallback:qr,useRecoilSnapshot:Qr,useRecoilState:Gr,useRecoilStateLoadable:Kr,useRecoilTransactionObserver:Yr,useRecoilValue:Xr,useRecoilValueLoadable:Jr,useResetRecoilState:Zr,useSetRecoilState:eo,useSetUnvalidatedAtomValues:to,useTransactionObservation_DEPRECATED:no}=Jt,{noWait:ro,waitForAll:oo,waitForAny:ao,waitForNone:io}=Vr;var lo={DefaultValue:jr,RecoilRoot:Br,useRecoilBridgeAcrossReactRoots_UNSTABLE:function(){const e=tn().current;return Zt((()=>function({children:n}){return t.createElement(en,{store_INTERNAL:e},n)}),[e])},atom:kr,selector:fr,atomFamily:function(e){let t=bn();const n={key:e.key,default:xr,persistence_UNSTABLE:e.persistence_UNSTABLE};let r;r=kr(n);const o=_r({key:`${e.key}__atomFamily/Default`,get:t=>({get:n})=>{const o=n("function"==typeof r?r(t):r);return o instanceof Cr?"function"==typeof e.default?e.default(t):e.default:o},dangerouslyAllowMutability:e.dangerouslyAllowMutability});return n=>{var r;const a=t.get(n);if(null!=a)return a;const i=kr({...e,key:`${e.key}__${null!==(r=yn(n))&&void 0!==r?r:"void"}`,default:o(n),effects_UNSTABLE:"function"==typeof e.effects_UNSTABLE?e.effects_UNSTABLE(n):e.effects_UNSTABLE});return t=t.set(n,i),i}},selectorFamily:_r,constSelector:function(e){return Tr(e)},errorSelector:function(e){return Ar(e)},readOnlySelector:function(e){return e},useRecoilValue:Xr,useRecoilValueLoadable:Jr,useRecoilState:Gr,useRecoilStateLoadable:Kr,useSetRecoilState:eo,useResetRecoilState:Zr,useRecoilCallback:qr,useGotoRecoilSnapshot:Hr,useRecoilSnapshot:Qr,useRecoilTransactionObserver_UNSTABLE:Yr,useTransactionObservation_UNSTABLE:no,useSetUnvalidatedAtomValues_UNSTABLE:to,noWait:ro,waitForNone:io,waitForAny:ao,waitForAll:oo,isRecoilValue:$r,batchUpdates:Fr,setBatcher:Ur,snapshot_UNSTABLE:Wr},uo=lo.RecoilRoot,so=lo.atom,co=lo.useRecoilState,fo=lo.useSetRecoilState;function po(e){const t="1.0.40-87700";return{log:function(n,...r){console.log(`[${e} ${t}] ${n}`,...r)},error:function(n,...r){console.error(`[${e} ${t}] ${n}`,...r)},warn:function(n,...r){console.warn(`[${e} ${t}] ${n}`,...r)},debug:function(n,...r){console.debug(`[${e} ${t}] ${n}`,...r)}}}const{log:ho,error:mo,warn:vo,debug:go}=po("app");var yo=n(864),bo=n(774),wo=n.n(bo);const So=function(e){function t(e,r,u,s,d){for(var p,h,m,v,w,k=0,E=0,_=0,x=0,C=0,P=0,L=m=p=0,D=0,z=0,V=0,F=0,U=u.length,j=U-1,B="",$="",W="",H="";D<U;){if(h=u.charCodeAt(D),D===j&&0!==E+x+_+k&&(0!==E&&(h=47===E?10:47),x=_=k=0,U++,j++),0===E+x+_+k){if(D===j&&(0<z&&(B=B.replace(f,"")),0<B.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:B+=u.charAt(D)}h=59}switch(h){case 123:for(p=(B=B.trim()).charCodeAt(0),m=1,F=++D;D<U;){switch(h=u.charCodeAt(D)){case 123:m++;break;case 125:m--;break;case 47:switch(h=u.charCodeAt(D+1)){case 42:case 47:e:{for(L=D+1;L<j;++L)switch(u.charCodeAt(L)){case 47:if(42===h&&42===u.charCodeAt(L-1)&&D+2!==L){D=L+1;break e}break;case 10:if(47===h){D=L+1;break e}}D=L}}break;case 91:h++;case 40:h++;case 34:case 39:for(;D++<j&&u.charCodeAt(D)!==h;);}if(0===m)break;D++}switch(m=u.substring(F,D),0===p&&(p=(B=B.replace(c,"").trim()).charCodeAt(0)),p){case 64:switch(0<z&&(B=B.replace(f,"")),h=B.charCodeAt(1)){case 100:case 109:case 115:case 45:z=r;break;default:z=I}if(F=(m=t(r,z,m,h,d+1)).length,0<M&&(w=l(3,m,z=n(I,B,V),r,A,T,F,h,d,s),B=z.join(""),void 0!==w&&0===(F=(m=w.trim()).length)&&(h=0,m="")),0<F)switch(h){case 115:B=B.replace(S,i);case 100:case 109:case 45:m=B+"{"+m+"}";break;case 107:m=(B=B.replace(g,"$1 $2"))+"{"+m+"}",m=1===R||2===R&&a("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=B+m,112===s&&($+=m,m="")}else m="";break;default:m=t(r,n(r,B,V),m,s,d+1)}W+=m,m=V=z=L=p=0,B="",h=u.charCodeAt(++D);break;case 125:case 59:if(1<(F=(B=(0<z?B.replace(f,""):B).trim()).length))switch(0===L&&(p=B.charCodeAt(0),45===p||96<p&&123>p)&&(F=(B=B.replace(" ",":")).length),0<M&&void 0!==(w=l(1,B,r,e,A,T,$.length,s,d,s))&&0===(F=(B=w.trim()).length)&&(B="\0\0"),p=B.charCodeAt(0),h=B.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){H+=B+u.charAt(D);break}default:58!==B.charCodeAt(F-1)&&($+=o(B,p,h,B.charCodeAt(2)))}V=z=L=p=0,B="",h=u.charCodeAt(++D)}}switch(h){case 13:case 10:47===E?E=0:0===1+p&&107!==s&&0<B.length&&(z=1,B+="\0"),0<M*O&&l(0,B,r,e,A,T,$.length,s,d,s),T=1,A++;break;case 59:case 125:if(0===E+x+_+k){T++;break}default:switch(T++,v=u.charAt(D),h){case 9:case 32:if(0===x+k+E)switch(C){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===x+E+k&&(z=V=1,v="\f"+v);break;case 108:if(0===x+E+k+N&&0<L)switch(D-L){case 2:112===C&&58===u.charCodeAt(D-3)&&(N=C);case 8:111===P&&(N=P)}break;case 58:0===x+E+k&&(L=D);break;case 44:0===E+_+x+k&&(z=1,v+="\r");break;case 34:case 39:0===E&&(x=x===h?0:0===x?h:x);break;case 91:0===x+E+_&&k++;break;case 93:0===x+E+_&&k--;break;case 41:0===x+E+k&&_--;break;case 40:if(0===x+E+k){if(0===p)switch(2*C+3*P){case 533:break;default:p=1}_++}break;case 64:0===E+_+x+k+L+m&&(m=1);break;case 42:case 47:if(!(0<x+k+_))switch(E){case 0:switch(2*h+3*u.charCodeAt(D+1)){case 235:E=47;break;case 220:F=D,E=42}break;case 42:47===h&&42===C&&F+2!==D&&(33===u.charCodeAt(F+2)&&($+=u.substring(F,D+1)),v="",E=0)}}0===E&&(B+=v)}P=C,C=h,D++}if(0<(F=$.length)){if(z=r,0<M&&void 0!==(w=l(2,$,z,e,A,T,F,s,d,s))&&0===($=w).length)return H+$+W;if($=z.join(",")+"{"+$+"}",0!=R*N){switch(2!==R||a($,2)||(N=0),N){case 111:$=$.replace(b,":-moz-$1")+$;break;case 112:$=$.replace(y,"::-webkit-input-$1")+$.replace(y,"::-moz-$1")+$.replace(y,":-ms-input-$1")+$}N=0}}return H+$+W}function n(e,t,n){var o=t.trim().split(m);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var l=0;for(e=0===i?"":e[0]+" ";l<a;++l)t[l]=r(e,t[l],n).trim();break;default:var u=l=0;for(t=[];l<a;++l)for(var s=0;s<i;++s)t[u++]=r(e[s]+" ",o[l],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var i=e+";",l=2*t+3*n+4*r;if(944===l){e=i.indexOf(":",9)+1;var u=i.substring(e,i.length-1).trim();return u=i.substring(0,e).trim()+u+";",1===R||2===R&&a(u,1)?"-webkit-"+u+u:u}if(0===R||2===R&&!a(i,1))return i;switch(l){case 1015:return 97===i.charCodeAt(10)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:if(45===i.charCodeAt(8))return"-webkit-"+i+i;if(0<i.indexOf("image-set(",11))return i.replace(C,"$1-webkit-$2")+i;break;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(u=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+u+i;case 1005:return p.test(i)?i.replace(d,":-webkit-")+i.replace(d,":-moz-")+i:i;case 1e3:switch(t=(u=i.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=i.replace(w,"tb");break;case 232:u=i.replace(w,"tb-rl");break;case 220:u=i.replace(w,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+u+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(t=(i=e).length-10,l=(u=(33===i.charCodeAt(t)?i.substring(0,t):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:i=i.replace(u,"-webkit-"+u)+";"+i;break;case 207:case 102:i=i.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+i.replace(u,"-webkit-"+u)+";"+i.replace(u,"-ms-"+u+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return u=i.replace("-items",""),"-webkit-"+i+"-webkit-box-"+u+"-ms-flex-"+u+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(E,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","").replace(E,"")+i}break;case 973:case 989:if(45!==i.charCodeAt(3)||122===i.charCodeAt(4))break;case 931:case 953:if(!0===x.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):i.replace(u,"-webkit-"+u)+i.replace(u,"-moz-"+u.replace("fill-",""))+i;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),L(2!==t?r:r.replace(_,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function l(e,t,n,r,o,a,i,l,u,c){for(var f,d=0,p=t;d<M;++d)switch(f=P[d].call(s,e,p,n,r,o,a,i,l,u,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function u(e){return void 0!==(e=e.prefix)&&(L=null,e?"function"!=typeof e?R=1:(R=2,L=e):R=0),u}function s(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<M){var o=l(-1,n,r,r,A,T,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var a=t(I,r,n,0,0);return 0<M&&void 0!==(o=l(-2,a,r,r,A,T,a.length,0,0,0))&&(a=o),N=0,T=A=1,a}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,y=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,E=/-self|flex-/g,_=/[^]*?(:[rp][el]a[\w-]+)[^]*/,x=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,T=1,A=1,N=0,R=1,I=[],P=[],M=0,L=null,O=0;return s.use=function e(t){switch(t){case void 0:case null:M=P.length=0;break;default:if("function"==typeof t)P[M++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else O=0|!!t}return e},s.set=u,void 0!==e&&u(e),s},ko={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Eo=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const _o=(xo={},function(e){return void 0===xo[e]&&(xo[e]=(t=e,Eo.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91)),xo[e];var t});var xo,Co=n(679),To=n.n(Co);function Ao(){return(Ao=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var No=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},Ro=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,yo.typeOf)(e)},Io=Object.freeze([]),Po=Object.freeze({});function Mo(e){return"function"==typeof e}function Lo(e){return e.displayName||e.name||"Component"}function Oo(e){return e&&"string"==typeof e.styledComponentId}var Do="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",zo="undefined"!=typeof window&&"HTMLElement"in window,Vo=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY);function Fo(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var Uo=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&Fo(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var a=r;a<o;a++)this.groupSizes[a]=0}for(var i=this.indexOfGroup(e+1),l=0,u=t.length;l<u;l++)this.tag.insertRule(i,t[l])&&(this.groupSizes[e]++,i++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,a=r;a<o;a++)t+=this.tag.getRule(a)+"/*!sc*/\n";return t},e}(),jo=new Map,Bo=new Map,$o=1,Wo=function(e){if(jo.has(e))return jo.get(e);for(;Bo.has($o);)$o++;var t=$o++;return jo.set(e,t),Bo.set(t,e),t},Ho=function(e){return Bo.get(e)},qo=function(e,t){jo.set(e,t),Bo.set(t,e)},Qo="style["+Do+'][data-styled-version="5.2.1"]',Go=new RegExp("^"+Do+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),Ko=function(e,t,n){for(var r,o=n.split(","),a=0,i=o.length;a<i;a++)(r=o[a])&&e.registerName(t,r)},Yo=function(e,t){for(var n=t.innerHTML.split("/*!sc*/\n"),r=[],o=0,a=n.length;o<a;o++){var i=n[o].trim();if(i){var l=i.match(Go);if(l){var u=0|parseInt(l[1],10),s=l[2];0!==u&&(qo(s,u),Ko(e,s,l[3]),e.getTag().insertRules(u,r)),r.length=0}else r.push(i)}}},Xo=function(){return n.nc},Jo=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(Do))return r}}(n),a=void 0!==o?o.nextSibling:null;r.setAttribute(Do,"active"),r.setAttribute("data-styled-version","5.2.1");var i=Xo();return i&&r.setAttribute("nonce",i),n.insertBefore(r,a),r},Zo=function(){function e(e){var t=this.element=Jo(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}Fo(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),ea=function(){function e(e){var t=this.element=Jo(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ta=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),na=zo,ra={isServer:!zo,useCSSOMInjection:!Vo},oa=function(){function e(e,t,n){void 0===e&&(e=Po),void 0===t&&(t={}),this.options=Ao({},ra,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&zo&&na&&(na=!1,function(e){for(var t=document.querySelectorAll(Qo),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(Do)&&(Yo(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return Wo(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(Ao({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new ta(o):r?new Zo(o):new ea(o),new Uo(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(Wo(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(Wo(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(Wo(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var a=Ho(o);if(void 0!==a){var i=e.names.get(a),l=t.getGroup(o);if(void 0!==i&&0!==l.length){var u=Do+".g"+o+'[id="'+a+'"]',s="";void 0!==i&&i.forEach((function(e){e.length>0&&(s+=e+",")})),r+=""+l+u+'{content:"'+s+'"}/*!sc*/\n'}}}return r}(this)},e}(),aa=/(a)(d)/gi,ia=function(e){return String.fromCharCode(e+(e>25?39:97))};function la(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=ia(t%52)+n;return(ia(t%52)+n).replace(aa,"$1-$2")}var ua=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},sa=function(e){return ua(5381,e)};function ca(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(Mo(n)&&!Oo(n))return!1}return!0}var fa=sa("5.2.1"),da=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&ca(e),this.componentId=t,this.baseHash=ua(fa,t),this.baseStyle=n,oa.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var a=Na(this.rules,e,t,n).join(""),i=la(ua(this.baseHash,a.length)>>>0);if(!t.hasNameForId(r,i)){var l=n(a,"."+i,void 0,r);t.insertRules(r,i,l)}o.push(i),this.staticRulesId=i}else{for(var u=this.rules.length,s=ua(this.baseHash,n.hash),c="",f=0;f<u;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=Na(d,e,t,n),h=Array.isArray(p)?p.join(""):p;s=ua(s,h+f),c+=h}}if(c){var m=la(s>>>0);if(!t.hasNameForId(r,m)){var v=n(c,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),pa=/^\s*\/\/.*$/gm,ha=[":","[",".","#"];function ma(e){var t,n,r,o,a=void 0===e?Po:e,i=a.options,l=void 0===i?Po:i,u=a.plugins,s=void 0===u?Io:u,c=new So(l),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,l,u,s,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===s)return r+"/*|*/";break;case 3:switch(s){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,a){return 0===r&&ha.includes(a[n.length])||a.match(o)?e:"."+t};function h(e,a,i,l){void 0===l&&(l="&");var u=e.replace(pa,""),s=a&&i?i+" "+a+" { "+u+" }":u;return t=l,n=a,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),c(i||!a?"":a,s)}return c.use([].concat(s,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=s.length?s.reduce((function(e,t){return t.name||Fo(15),ua(e,t.name)}),5381).toString():"",h}var va=t.createContext(),ga=(va.Consumer,t.createContext()),ya=(ga.Consumer,new oa),ba=ma();function wa(){return(0,t.useContext)(va)||ya}function Sa(e){var n=(0,t.useState)(e.stylisPlugins),r=n[0],o=n[1],a=wa(),i=(0,t.useMemo)((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),l=(0,t.useMemo)((function(){return ma({options:{prefix:!e.disableVendorPrefixes},plugins:r})}),[e.disableVendorPrefixes,r]);return(0,t.useEffect)((function(){wo()(r,e.stylisPlugins)||o(e.stylisPlugins)}),[e.stylisPlugins]),t.createElement(va.Provider,{value:i},t.createElement(ga.Provider,{value:l},e.children))}var ka=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=ba);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return Fo(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=ba),this.name+e.hash},e}(),Ea=/([A-Z])/,_a=/([A-Z])/g,xa=/^ms-/,Ca=function(e){return"-"+e.toLowerCase()};function Ta(e){return Ea.test(e)?e.replace(_a,Ca).replace(xa,"-ms-"):e}var Aa=function(e){return null==e||!1===e||""===e};function Na(e,t,n,r){if(Array.isArray(e)){for(var o,a=[],i=0,l=e.length;i<l;i+=1)""!==(o=Na(e[i],t,n,r))&&(Array.isArray(o)?a.push.apply(a,o):a.push(o));return a}return Aa(e)?"":Oo(e)?"."+e.styledComponentId:Mo(e)?"function"!=typeof(u=e)||u.prototype&&u.prototype.isReactComponent||!t?e:Na(e(t),t,n,r):e instanceof ka?n?(e.inject(n,r),e.getName(r)):e:Ro(e)?function e(t,n){var r,o,a=[];for(var i in t)t.hasOwnProperty(i)&&!Aa(t[i])&&(Ro(t[i])?a.push.apply(a,e(t[i],i)):Mo(t[i])?a.push(Ta(i)+":",t[i],";"):a.push(Ta(i)+": "+(r=i,(null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in ko?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(a,["}"]):a}(e):e.toString();var u}function Ra(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Mo(e)||Ro(e)?Na(No(Io,[e].concat(n))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Na(No(e,n))}new Set;var Ia=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Pa=/(^-|-$)/g;function Ma(e){return e.replace(Ia,"-").replace(Pa,"")}var La=function(e){return la(sa(e)>>>0)};function Oa(e){return"string"==typeof e&&!0}var Da=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},za=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Va(e,t,n){var r=e[n];Da(t)&&Da(r)?Fa(r,t):e[n]=t}function Fa(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i=a[o];if(Da(i))for(var l in i)za(l)&&Va(e,i[l],l)}return e}var Ua=t.createContext();Ua.Consumer;var ja={};function Ba(e,n,r){var o=Oo(e),a=!Oa(e),i=n.attrs,l=void 0===i?Io:i,u=n.componentId,s=void 0===u?function(e,t){var n="string"!=typeof e?"sc":Ma(e);ja[n]=(ja[n]||0)+1;var r=n+"-"+La("5.2.1"+n+ja[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):u,c=n.displayName,f=void 0===c?function(e){return Oa(e)?"styled."+e:"Styled("+Lo(e)+")"}(e):c,d=n.displayName&&n.componentId?Ma(n.displayName)+"-"+n.componentId:n.componentId||s,p=o&&e.attrs?Array.prototype.concat(e.attrs,l).filter(Boolean):l,h=n.shouldForwardProp;o&&e.shouldForwardProp&&(h=n.shouldForwardProp?function(t,r){return e.shouldForwardProp(t,r)&&n.shouldForwardProp(t,r)}:e.shouldForwardProp);var m,v=new da(r,d,o?e.componentStyle:void 0),g=v.isStatic&&0===l.length,y=function(e,n){return function(e,n,r,o){var a=e.attrs,i=e.componentStyle,l=e.defaultProps,u=e.foldedComponentIds,s=e.shouldForwardProp,c=e.styledComponentId,f=e.target,d=function(e,t,n){void 0===e&&(e=Po);var r=Ao({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,a,i=e;for(t in Mo(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],a=i[t],n&&a?n+" "+a:n||a):i[t]})),[r,o]}(function(e,t,n){return void 0===n&&(n=Po),e.theme!==n.theme&&e.theme||t||n.theme}(n,(0,t.useContext)(Ua),l)||Po,n,a),p=d[0],h=d[1],m=function(e,n,r,o){var a=wa(),i=(0,t.useContext)(ga)||ba;return n?e.generateAndInjectStyles(Po,a,i):e.generateAndInjectStyles(r,a,i)}(i,o,p),v=r,g=h.$as||n.$as||h.as||n.as||f,y=Oa(g),b=h!==n?Ao({},n,{},h):n,w={};for(var S in b)"$"!==S[0]&&"as"!==S&&("forwardedAs"===S?w.as=b[S]:(s?s(S,_o):!y||_o(S))&&(w[S]=b[S]));return n.style&&h.style!==n.style&&(w.style=Ao({},n.style,{},h.style)),w.className=Array.prototype.concat(u,c,m!==c?m:null,n.className,h.className).filter(Boolean).join(" "),w.ref=v,(0,t.createElement)(g,w)}(m,e,n,g)};return y.displayName=f,(m=t.forwardRef(y)).attrs=p,m.componentStyle=v,m.displayName=f,m.shouldForwardProp=h,m.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):Io,m.styledComponentId=d,m.target=o?e.target:e,m.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),a=t&&t+"-"+(Oa(e)?e:Ma(Lo(e)));return Ba(e,Ao({},o,{attrs:p,componentId:a}),r)},Object.defineProperty(m,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Fa({},e.defaultProps,t):t}}),m.toString=function(){return"."+m.styledComponentId},a&&To()(m,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),m}var $a,Wa=function(e){return function e(t,n,r){if(void 0===r&&(r=Po),!(0,yo.isValidElementType)(n))return Fo(1,String(n));var o=function(){return t(n,r,Ra.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,Ao({},r,{},o))},o.attrs=function(o){return e(t,n,Ao({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Ba,e)};function Ha(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ra.apply(void 0,[e].concat(n)).join(""),a=La(o);return new ka(a,o)}["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Wa[e]=Wa(e)})),($a=function(e,t){this.rules=e,this.componentId=t,this.isStatic=ca(e),oa.registerId(this.componentId+1)}.prototype).createStyles=function(e,t,n,r){var o=r(Na(this.rules,t,n,r).join(""),""),a=this.componentId+e;n.insertRules(a,a,o)},$a.removeStyles=function(e,t){t.clearRules(this.componentId+e)},$a.renderStyles=function(e,t,n,r){e>2&&oa.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString(),n=Xo();return"<style "+[n&&'nonce="'+n+'"',Do+'="true"','data-styled-version="5.2.1"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?Fo(2):e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)return Fo(2);var r=((n={})[Do]="",n["data-styled-version"]="5.2.1",n.dangerouslySetInnerHTML={__html:e.instance.toString()},n),o=Xo();return o&&(r.nonce=o),[t.createElement("style",Ao({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new oa({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?Fo(2):t.createElement(Sa,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return Fo(3)}}();const qa=Wa,Qa=so({key:"installationState",default:null}),Ga=(Ha`
  from {
    margin-right: -50px;
  }

  100% {
    margin-right: 0px;
  }

`,Ha`
  from {
    margin-right: -50px;
  }

  100% {
    margin-right: 0px;
  }

`),Ka=qa.div`
  color: black;
  margin: -50px;
  display: flex;
  fill: black;
  //background-color: rgba(255, 255, 255, 0.1);
  align-items: center;
  padding: 5px 50px 5px 10px;
  height: 32px;
  button {
    position: fixed;
    bottom: 10px;
    right: 5px;
    margin-right: -50px;
    animation-name: ${Ga};
    animation-duration: 500ms;
    animation-delay: 2s;
    animation-fill-mode: forwards;
    animation-timing-function: cubic-bezier(0.22, 0.61, 0.36, 1);
  }
`;function Ya({show:e}){const[n,r]=co(Qa),[o,a]=(0,t.useState)(!1);return!n||o?null:t.createElement(Ka,null,t.createElement("button",{id:"install-button",className:"update text-black border-0 bg-yellow-500 rounded ml-2 flex flex-col items-center p-1",onClick:async function(){if(n){n.prompt();const{outcome:e}=await n.userChoice;ho(`User response to the install prompt: ${e}`),r(null),a(!0)}}},t.createElement("svg",{className:"fill-current",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},t.createElement("path",{d:"M0 .5h24v24H0z",fill:"none"}),t.createElement("path",{d:"M12 16.5l4-4h-3v-9h-2v9H8l4 4zm9-13h-6v1.99h6v14.03H3V5.49h6V3.5H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-14c0-1.1-.9-2-2-2z"}))))}function Xa(){return t.createElement("div",{className:"header"},t.createElement("div",{className:"flex"},t.createElement("span",null,"Claptastic"),t.createElement("span",{id:"version",className:"version"},"V","1.0.40-87700")),t.createElement("div",{className:"flex"},t.createElement(Ya,null)))}var Ja=n(483),Za=n.n(Ja);const ei=n.p+"c3b5cf67cb0c07a63b8658aa76312ec4.mp3",ti=new Audio,{error:ni}=po("clapButton");function ri(){return ti.play()}let oi;function ai(){null!=oi&&(clearInterval(oi),oi=null,document.getElementById("icon").style.transform=void 0)}function ii(){return t.createElement("div",{className:"wrapper"},t.createElement("div",{className:"button-wrapper"},t.createElement("button",{className:"button-icon",onClick:ri},t.createElement("div",{className:"svg-wrapper"},t.createElement("svg",{className:"icon",version:"1.1",id:"icon",x:"0px",y:"0px",viewBox:"0 0 297.221 297.221",style:{enableBackground:"new 0 0 297.221 297.221"}},t.createElement("g",null,t.createElement("path",{d:"M283.762,32.835c2.705-1.913,3.346-5.658,1.432-8.363c-1.914-2.705-5.657-3.347-8.363-1.432l-14.984,10.602 c-2.705,1.913-3.346,5.658-1.432,8.363c1.169,1.652,3.022,2.535,4.902,2.535c1.198,0,2.408-0.358,3.461-1.104L283.762,32.835z"}),t.createElement("path",{d:"M244.064,29.387c0.695,0.262,1.409,0.386,2.11,0.386c2.428,0,4.713-1.484,5.617-3.891l6.46-17.182 c1.166-3.101-0.403-6.561-3.505-7.727c-3.101-1.167-6.562,0.404-7.728,3.505l-6.46,17.182 C239.393,24.761,240.962,28.221,244.064,29.387z"}),t.createElement("path",{d:"M291.223,55.611c-0.041,0-0.082,0-0.124,0l-18.351,0.154c-3.313,0.067-5.944,2.605-5.877,5.918 c0.066,3.271,2.739,5.928,5.997,5.928c0.041,0,0.082,0,0.124,0l18.351-0.313c3.313-0.068,5.944-2.732,5.877-6.045 C297.154,57.982,294.481,55.611,291.223,55.611z"}),t.createElement("path",{d:"M254.2,147.154c-3.073-2.433-6.711-4.089-10.557-4.867c0.254-0.46,0.491-0.928,0.715-1.403l2.408-2.408 c9.274-9.275,10.248-23.874,2.264-33.961c-3.769-4.761-9.001-7.925-14.812-9.106c0.415-0.764,0.783-1.545,1.117-2.338 c6.316-9.149,6.213-21.445-0.782-30.283c-3.77-4.764-9.004-7.938-14.818-9.117c4.8-8.826,4.187-19.826-2.225-27.925 c-4.848-6.125-12.109-9.639-19.923-9.639c-6.257,0-12.16,2.236-16.792,6.33c-0.701-3.979-2.363-7.822-5.012-11.169 c-4.849-6.125-12.11-9.638-19.924-9.639l0,0c-6.79,0-13.164,2.635-17.947,7.418l-60.84,60.84l-0.232-8.12 c-0.107-13.83-11.392-25.049-25.247-25.049c-13.604,0-24.729,10.815-25.229,24.298l-12.146,88.306l-9.983,11.604 c-5.983,6.957-5.582,17.481,0.915,23.962L19.987,199.7c-4.574,6.881-3.773,16.266,2.206,22.23l69.667,69.557 c3.329,3.321,7.748,5.148,12.446,5.148c3.857,0,7.668-1.295,10.729-3.645l14.544-11.168c13.991-3.305,29.416-10.813,45.874-22.33 c14.371-10.058,29.962-23.46,46.337-39.836l34.631-34.631c5.107-5.107,7.795-12.188,7.375-19.427 C263.376,158.371,259.879,151.649,254.2,147.154z M188.124,32.009c2.603-2.602,6.032-3.903,9.462-3.903 c3.915,0,7.831,1.695,10.515,5.086c4.256,5.377,3.51,13.18-1.339,18.028l-6.177,6.176c-0.952,0.635-1.879,1.314-2.747,2.083 c-0.701-3.98-2.364-7.823-5.013-11.169c-3.257-4.114-7.604-7.043-12.475-8.527L188.124,32.009z M146.397,17.532 c2.602-2.602,6.032-3.903,9.462-3.903c3.916,0.001,7.831,1.696,10.515,5.087c4.256,5.377,3.51,13.179-1.339,18.027l-70.919,70.186 l-0.233-8.119c-0.061-7.825-3.7-14.812-9.356-19.405L146.397,17.532z M13.624,176.391c-2.082-2.078-2.209-5.41-0.291-7.64 l12.281-14.277c0.006-0.007,0.011-0.017,0.012-0.026l12.72-92.483c0-7.286,5.961-13.247,13.247-13.247 c7.286,0,13.248,5.961,13.248,13.247L65.186,74c-11.988,1.646-21.322,11.733-21.78,24.057l-12.145,88.307l-3.533,4.108 L13.624,176.391z M247.935,176.539l-34.63,34.631c-29.577,29.577-60.494,53.318-87.653,59.237 c-0.825,0.181-1.601,0.528-2.271,1.043l-15.655,12.022c-1.014,0.779-2.219,1.162-3.419,1.162c-1.443,0-2.88-0.555-3.968-1.641 l-69.671-69.56c-2.083-2.077-2.21-5.409-0.291-7.64l12.28-14.276c0.007-0.008,0.011-0.017,0.013-0.026l12.719-92.483 c0-7.286,5.962-13.248,13.248-13.248c7.286,0,13.247,5.962,13.247,13.248l0.626,21.824c0.104,3.626,3.087,5.987,6.191,5.987 c1.514,0,3.058-0.563,4.309-1.813l70.431-70.431c2.603-2.603,6.031-3.903,9.462-3.903c3.915,0,7.831,1.695,10.515,5.086 c4.256,5.377,3.509,13.18-1.34,18.028l-48.518,48.518c-2.519,2.52-2.519,6.603,0,9.121l0,0c1.275,1.275,2.946,1.913,4.617,1.913 s3.343-0.638,4.617-1.913l62.374-62.373c2.602-2.603,6.031-3.903,9.462-3.903c3.915,0.001,7.831,1.696,10.515,5.087 c4.256,5.376,3.509,13.179-1.34,18.027l-62.081,62.081c-2.553,2.554-2.553,6.692,0,9.246c1.258,1.258,2.906,1.887,4.556,1.887 c1.648,0,3.297-0.629,4.555-1.887l48.811-48.81c2.603-2.603,6.032-3.903,9.462-3.903c3.915,0,7.831,1.695,10.515,5.087 c4.256,5.376,3.509,13.179-1.34,18.027l-48.349,48.35c-2.612,2.611-2.612,6.847,0,9.458l0.078,0.079 c1.207,1.207,2.789,1.81,4.37,1.81c1.582,0,3.164-0.603,4.37-1.81l29.974-29.974c2.701-2.701,6.317-4.129,9.921-4.129 c2.867,0,5.726,0.904,8.107,2.789C253.114,161.598,253.508,170.967,247.935,176.539z"})),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null))))))}(async()=>{await async function(){const e=await async function(){try{const e=await fetch(ei);if(!e.ok)throw e;const t=await e.blob();await Za().setItem("mp3",t)}catch(e){ni("Failed to load audio",e)}return Za().getItem("mp3")}();ti.src=URL.createObjectURL(e),ti.addEventListener("ended",(e=>{ai()})),ti.addEventListener("play",(e=>{!function(){if(null!=oi)return;const e=document.getElementById("icon");let t=!1;oi=setInterval((()=>{t?(e.style.transform="scale(1)",t=!1):(e.style.transform="scale(1.2)",t=!0)}),100)}()}))}(),await async function(){var e,t;void 0!==document.hidden?(e="hidden",t="visibilitychange"):void 0!==document.msHidden?(e="msHidden",t="msvisibilitychange"):void 0!==document.webkitHidden&&(e="webkitHidden",t="webkitvisibilitychange"),document.addEventListener(t,(async function(){document[e]&&(ai(),ti.load())}),!1)}()})();const li="dialog_shown",ui=qa.button`
  margin-left: auto;
  margin-right: auto;
`;function si(){const[e,n]=(0,t.useState)(!1);return(0,t.useEffect)((()=>{localStorage.getItem(li)||n(!0)}),[]),e&&t.createElement("div",{id:"dialog",className:"dialog-wrapper fixed top-0 w-full h-full flex justify-center items-center z-10"},t.createElement("div",{className:"dialog rounded m-6 p-6 text-lg md:w-2/3 z-10"},t.createElement("p",{className:"mb-6"},"You ever tried clapping while holding your phone?"),t.createElement("p",null,"Well now you can"),t.createElement(ui,{className:"rounded p-2 text-md w-full bg-green-500 mt-8 text-white",onClick:function(){n(!1),localStorage.setItem(li,"Y")}},"Close")),t.createElement("div",{className:"dialog-bg inset-0 opacity-50 bg-white absolute"}))}function ci(){const e=fo(Qa);return(0,t.useEffect)((()=>{window.addEventListener("beforeinstallprompt",(t=>{ho("Prompting install"),t.preventDefault(),e(t)}))}),[]),t.createElement(t.Fragment,null,t.createElement(si,null),t.createElement(Xa,null),t.createElement("div",{className:"page-content"},t.createElement(ii,null)))}(0,e.render)(t.createElement(uo,null,t.createElement(ci,null)),document.getElementById("root")),ho("Initialising")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9ub2RlX21vZHVsZXMvbG9jYWxmb3JhZ2UvZGlzdC9sb2NhbGZvcmFnZS5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xhcHRhc3RpYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xhcHRhc3RpYy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NsYXB0YXN0aWMvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vY2xhcHRhc3RpYy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2xhcHRhc3RpYy93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2NsYXB0YXN0aWMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jbGFwdGFzdGljL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9ub2RlX21vZHVsZXMvcmVjb2lsL2VzL3JlY29pbC5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vc3JjL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxpcy9kaXN0L3N0eWxpcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vY2xhcHRhc3RpYy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvaXMtcHJvcC12YWxpZC5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9tZW1vaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vc3JjL3N0YXRlL2luc3RhbGxQcm9tcHRTdGF0ZS5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vc3JjL2NvbXBvbmVudHMvSW5zdGFsbFByb21wdC5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyLmpzIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9zcmMvbWVkaWEvYXVkaW8ubXAzIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9zcmMvY29tcG9uZW50cy9DbGFwQnV0dG9uLmpzIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9zcmMvY29tcG9uZW50cy9TdGFydERpYWxvZy5qcyIsIndlYnBhY2s6Ly9jbGFwdGFzdGljLy4vc3JjL2NvbXBvbmVudHMvQXBwLmpzIiwid2VicGFjazovL2NsYXB0YXN0aWMvLi9zcmMvbWFpbi5qcyJdLCJuYW1lcyI6WyJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwibmFtZSIsImxlbmd0aCIsInByb3RvdHlwZSIsImNhbGxlciIsImNhbGxlZSIsImFyZ3VtZW50cyIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImRlZmluZVByb3BlcnR5IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiaSIsImtleSIsImRlc2NyaXB0b3IiLCJlIiwidCIsIm4iLCJyIiwicyIsIm8iLCJ1IiwiZiIsIkVycm9yIiwiY29kZSIsImwiLCJjYWxsIiwiMSIsIl9kZXJlcV8iLCJnbG9iYWwiLCJzY2hlZHVsZURyYWluIiwiZHJhaW5pbmciLCJNdXRhdGlvbiIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiY2FsbGVkIiwib2JzZXJ2ZXIiLCJuZXh0VGljayIsImVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJkYXRhIiwic2V0SW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJjcmVhdGVFbGVtZW50Iiwic2NyaXB0RWwiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInNldFRpbWVvdXQiLCJjaGFubmVsIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwicXVldWUiLCJvbGRRdWV1ZSIsImxlbiIsInRhc2siLCJwdXNoIiwidGhpcyIsImciLCJzZWxmIiwid2luZG93IiwiMiIsImltbWVkaWF0ZSIsIklOVEVSTkFMIiwiaGFuZGxlcnMiLCJSRUpFQ1RFRCIsIkZVTEZJTExFRCIsIlBFTkRJTkciLCJQcm9taXNlIiwicmVzb2x2ZXIiLCJUeXBlRXJyb3IiLCJzdGF0ZSIsIm91dGNvbWUiLCJzYWZlbHlSZXNvbHZlVGhlbmFibGUiLCJRdWV1ZUl0ZW0iLCJwcm9taXNlIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FsbEZ1bGZpbGxlZCIsIm90aGVyQ2FsbEZ1bGZpbGxlZCIsImNhbGxSZWplY3RlZCIsIm90aGVyQ2FsbFJlamVjdGVkIiwidW53cmFwIiwiZnVuYyIsInZhbHVlIiwicmV0dXJuVmFsdWUiLCJyZWplY3QiLCJyZXNvbHZlIiwiZ2V0VGhlbiIsIm9iaiIsInRoZW4iLCJhcHBseSIsInRoZW5hYmxlIiwib25FcnJvciIsIm9uU3VjY2VzcyIsInJlc3VsdCIsInRyeUNhdGNoIiwic3RhdHVzIiwib3V0IiwiY29uc3RydWN0b3IiLCJlcnJvciIsInJlYXNvbiIsImFsbCIsIml0ZXJhYmxlIiwidG9TdHJpbmciLCJ2YWx1ZXMiLCJBcnJheSIsInJlc29sdmVkIiwiYWxsUmVzb2x2ZXIiLCJvdXRWYWx1ZSIsInJhY2UiLCJyZXNwb25zZSIsIjMiLCI0IiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiaWRiIiwiaW5kZXhlZERCIiwid2Via2l0SW5kZXhlZERCIiwibW96SW5kZXhlZERCIiwiT0luZGV4ZWREQiIsIm1zSW5kZXhlZERCIiwiZ2V0SURCIiwiY3JlYXRlQmxvYiIsInBhcnRzIiwicHJvcGVydGllcyIsIkJsb2IiLCJidWlsZGVyIiwiQmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsImFwcGVuZCIsImdldEJsb2IiLCJQcm9taXNlJDEiLCJleGVjdXRlQ2FsbGJhY2siLCJjYWxsYmFjayIsImV4ZWN1dGVUd29DYWxsYmFja3MiLCJlcnJvckNhbGxiYWNrIiwibm9ybWFsaXplS2V5IiwiY29uc29sZSIsIndhcm4iLCJTdHJpbmciLCJnZXRDYWxsYmFjayIsIkRFVEVDVF9CTE9CX1NVUFBPUlRfU1RPUkUiLCJzdXBwb3J0c0Jsb2JzIiwiZGJDb250ZXh0cyIsIlJFQURfT05MWSIsIlJFQURfV1JJVEUiLCJfYmluU3RyaW5nVG9BcnJheUJ1ZmZlciIsImJpbiIsImJ1ZiIsIkFycmF5QnVmZmVyIiwiYXJyIiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJfY2hlY2tCbG9iU3VwcG9ydCIsInR4biIsInRyYW5zYWN0aW9uIiwiYmxvYiIsIm9iamVjdFN0b3JlIiwicHV0Iiwib25hYm9ydCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwib25jb21wbGV0ZSIsIm1hdGNoZWRDaHJvbWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsIm1hdGNoZWRFZGdlIiwicGFyc2VJbnQiLCJfY2hlY2tCbG9iU3VwcG9ydFdpdGhvdXRDYWNoaW5nIiwiX2RlZmVyUmVhZGluZXNzIiwiZGJJbmZvIiwiZGJDb250ZXh0IiwiZGVmZXJyZWRPcGVyYXRpb24iLCJkZWZlcnJlZE9wZXJhdGlvbnMiLCJkYlJlYWR5IiwiX2FkdmFuY2VSZWFkaW5lc3MiLCJwb3AiLCJfcmVqZWN0UmVhZGluZXNzIiwiZXJyIiwiX2dldENvbm5lY3Rpb24iLCJ1cGdyYWRlTmVlZGVkIiwiZm9yYWdlcyIsImRiIiwiY2xvc2UiLCJkYkFyZ3MiLCJ2ZXJzaW9uIiwib3BlbnJlcSIsIm9wZW4iLCJvbnVwZ3JhZGVuZWVkZWQiLCJjcmVhdGVPYmplY3RTdG9yZSIsInN0b3JlTmFtZSIsIm9sZFZlcnNpb24iLCJleCIsIm5ld1ZlcnNpb24iLCJvbmVycm9yIiwib25zdWNjZXNzIiwiX2dldE9yaWdpbmFsQ29ubmVjdGlvbiIsIl9nZXRVcGdyYWRlZENvbm5lY3Rpb24iLCJfaXNVcGdyYWRlTmVlZGVkIiwiZGVmYXVsdFZlcnNpb24iLCJpc05ld1N0b3JlIiwib2JqZWN0U3RvcmVOYW1lcyIsImNvbnRhaW5zIiwiaXNEb3duZ3JhZGUiLCJpc1VwZ3JhZGUiLCJpbmNWZXJzaW9uIiwiX2RlY29kZUJsb2IiLCJlbmNvZGVkQmxvYiIsImF0b2IiLCJfaXNFbmNvZGVkQmxvYiIsIl9fbG9jYWxfZm9yYWdlX2VuY29kZWRfYmxvYiIsIl9mdWxseVJlYWR5IiwiX2luaXRSZWFkeSIsIl9kYkluZm8iLCJjcmVhdGVUcmFuc2FjdGlvbiIsIm1vZGUiLCJyZXRyaWVzIiwidW5kZWZpbmVkIiwidHgiLCJmb3JhZ2UiLCJfdHJ5UmVjb25uZWN0IiwiYXN5bmNTdG9yYWdlIiwiX2RyaXZlciIsIl9pbml0U3RvcmFnZSIsIm9wdGlvbnMiLCJyZWFkeSIsImluaXRQcm9taXNlcyIsImlnbm9yZUVycm9ycyIsImoiLCJzbGljZSIsIl9kZWZhdWx0Q29uZmlnIiwiayIsIl9zdXBwb3J0IiwiaXNTYWZhcmkiLCJvcGVuRGF0YWJhc2UiLCJ0ZXN0IiwicGxhdGZvcm0iLCJoYXNGZXRjaCIsImZldGNoIiwiaW5kZXhPZiIsIklEQktleVJhbmdlIiwiaXNJbmRleGVkREJWYWxpZCIsIml0ZXJhdGUiLCJyZXEiLCJvcGVuQ3Vyc29yIiwiaXRlcmF0aW9uTnVtYmVyIiwiY3Vyc29yIiwiZ2V0SXRlbSIsImdldCIsInNldEl0ZW0iLCJibG9iU3VwcG9ydCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWRlbmQiLCJiYXNlNjQiLCJidG9hIiwidGFyZ2V0IiwicmVhZEFzQmluYXJ5U3RyaW5nIiwic3RvcmUiLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJjb3VudCIsImFkdmFuY2VkIiwib3BlbktleUN1cnNvciIsImFkdmFuY2UiLCJkcm9wSW5zdGFuY2UiLCJjdXJyZW50Q29uZmlnIiwiY29uZmlnIiwiZGJQcm9taXNlIiwiZGVsZXRlT2JqZWN0U3RvcmUiLCJfZm9yYWdlMiIsImRlbGV0ZURhdGFiYXNlIiwib25ibG9ja2VkIiwiQkFTRV9DSEFSUyIsIkJMT0JfVFlQRV9QUkVGSVhfUkVHRVgiLCJTRVJJQUxJWkVEX01BUktFUiIsIlNFUklBTElaRURfTUFSS0VSX0xFTkdUSCIsIlRZUEVfQVJSQVlCVUZGRVIiLCJUWVBFX0JMT0IiLCJUWVBFX0lOVDhBUlJBWSIsIlRZUEVfVUlOVDhBUlJBWSIsIlRZUEVfVUlOVDhDTEFNUEVEQVJSQVkiLCJUWVBFX0lOVDE2QVJSQVkiLCJUWVBFX0lOVDMyQVJSQVkiLCJUWVBFX1VJTlQxNkFSUkFZIiwiVFlQRV9VSU5UMzJBUlJBWSIsIlRZUEVfRkxPQVQzMkFSUkFZIiwiVFlQRV9GTE9BVDY0QVJSQVkiLCJUWVBFX1NFUklBTElaRURfTUFSS0VSX0xFTkdUSCIsInRvU3RyaW5nJDEiLCJzdHJpbmdUb0J1ZmZlciIsInNlcmlhbGl6ZWRTdHJpbmciLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsInAiLCJidWZmZXIiLCJieXRlcyIsImJ1ZmZlclRvU3RyaW5nIiwiYmFzZTY0U3RyaW5nIiwic3Vic3RyaW5nIiwibG9jYWxmb3JhZ2VTZXJpYWxpemVyIiwic2VyaWFsaXplIiwidmFsdWVUeXBlIiwibWFya2VyIiwiZmlsZVJlYWRlciIsIm9ubG9hZCIsInN0ciIsInJlYWRBc0FycmF5QnVmZmVyIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlc2VyaWFsaXplIiwicGFyc2UiLCJibG9iVHlwZSIsIm1hdGNoZXIiLCJJbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImNyZWF0ZURiVGFibGUiLCJleGVjdXRlU3FsIiwidHJ5RXhlY3V0ZVNxbCIsInNxbFN0YXRlbWVudCIsImFyZ3MiLCJTWU5UQVhfRVJSIiwicmVzdWx0cyIsInJvd3MiLCJfc2V0SXRlbSIsInJldHJpZXNMZWZ0Iiwib3JpZ2luYWxWYWx1ZSIsInNlcmlhbGl6ZXIiLCJzcWxFcnJvciIsIlFVT1RBX0VSUiIsImdldEFsbFN0b3JlTmFtZXMiLCJzdG9yZU5hbWVzIiwiaXRlbSIsIndlYlNRTFN0b3JhZ2UiLCJkYkluZm9Qcm9taXNlIiwiZGVzY3JpcHRpb24iLCJzaXplIiwiYyIsIm9wZXJhdGlvbkluZm8iLCJkcm9wVGFibGUiLCJvcGVyYXRpb25zIiwiX2dldEtleVByZWZpeCIsImRlZmF1bHRDb25maWciLCJrZXlQcmVmaXgiLCJfaXNMb2NhbFN0b3JhZ2VVc2FibGUiLCJsb2NhbFN0b3JhZ2VUZXN0S2V5IiwibG9jYWxTdG9yYWdlIiwiY2hlY2tJZkxvY2FsU3RvcmFnZVRocm93cyIsImxvY2FsU3RvcmFnZVdyYXBwZXIiLCJpc0xvY2FsU3RvcmFnZVZhbGlkIiwia2V5UHJlZml4TGVuZ3RoIiwiaXRlbUtleSIsImluY2x1ZGVzIiwiYXJyYXkiLCJzZWFyY2hFbGVtZW50IiwieCIsInkiLCJpc05hTiIsImlzQXJyYXkiLCJhcmciLCJEZWZpbmVkRHJpdmVycyIsIkRyaXZlclN1cHBvcnQiLCJEZWZhdWx0RHJpdmVycyIsIklOREVYRUREQiIsIldFQlNRTCIsIkxPQ0FMU1RPUkFHRSIsIkRlZmF1bHREcml2ZXJPcmRlciIsIk9wdGlvbmFsRHJpdmVyTWV0aG9kcyIsIkxpYnJhcnlNZXRob2RzIiwiRGVmYXVsdENvbmZpZyIsImRyaXZlciIsImNhbGxXaGVuUmVhZHkiLCJsb2NhbEZvcmFnZUluc3RhbmNlIiwibGlicmFyeU1ldGhvZCIsIl9hcmdzIiwiZXh0ZW5kIiwiX2tleSIsImhhc093blByb3BlcnR5IiwibG9jYWxmb3JhZ2VfanMiLCJMb2NhbEZvcmFnZSIsImRyaXZlclR5cGVLZXkiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiZHJpdmVyTmFtZSIsImRlZmluZURyaXZlciIsIl9jb25maWciLCJfZHJpdmVyU2V0IiwiX2luaXREcml2ZXIiLCJfcmVhZHkiLCJfd3JhcExpYnJhcnlNZXRob2RzV2l0aFJlYWR5Iiwic2V0RHJpdmVyIiwicmVwbGFjZSIsImRyaXZlck9iamVjdCIsImNvbXBsaWFuY2VFcnJvciIsImRyaXZlck1ldGhvZHMiLCJkcml2ZXJNZXRob2ROYW1lIiwibWV0aG9kTm90SW1wbGVtZW50ZWRGYWN0b3J5IiwibWV0aG9kTmFtZSIsIl9pIiwiX2xlbiIsIm9wdGlvbmFsRHJpdmVyTWV0aG9kIiwiY29uZmlndXJlTWlzc2luZ01ldGhvZHMiLCJzZXREcml2ZXJTdXBwb3J0Iiwic3VwcG9ydCIsImluZm8iLCJnZXREcml2ZXIiLCJnZXREcml2ZXJQcm9taXNlIiwiZ2V0U2VyaWFsaXplciIsInNlcmlhbGl6ZXJQcm9taXNlIiwiZHJpdmVycyIsInN1cHBvcnRlZERyaXZlcnMiLCJfZ2V0U3VwcG9ydGVkRHJpdmVycyIsInNldERyaXZlclRvQ29uZmlnIiwiZXh0ZW5kU2VsZldpdGhEcml2ZXIiLCJfZXh0ZW5kIiwib2xkRHJpdmVyU2V0RG9uZSIsImN1cnJlbnREcml2ZXJJbmRleCIsImRyaXZlclByb21pc2VMb29wIiwiaW5pdERyaXZlciIsInN1cHBvcnRzIiwibGlicmFyeU1ldGhvZHNBbmRQcm9wZXJ0aWVzIiwiY3JlYXRlSW5zdGFuY2UiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsImFzc2lnbiIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJtYXAiLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzb3VyY2UiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiYWEiLCJtIiwiYSIsImIiLCJlbmNvZGVVUklDb21wb25lbnQiLCJiYSIsIlNldCIsImNhIiwiZGEiLCJlYSIsImFkZCIsImZhIiwiaGEiLCJpYSIsImphIiwia2EiLCJCIiwiZCIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwiRCIsInRvTG93ZXJDYXNlIiwib2EiLCJwYSIsInRvVXBwZXJDYXNlIiwicWEiLCJtYSIsIm5hIiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiZm9yIiwiRSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwic3RhY2siLCJ0cmltIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImgiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJvd25lckRvY3VtZW50IiwiZWIiLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsInBiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIlJiIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiWmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIiRiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJhYyIsImNjIiwiY2hpbGQiLCJzaWJsaW5nIiwiY3VycmVudCIsImJjIiwiZGMiLCJlYyIsImZjIiwiZ2MiLCJoYyIsImljIiwiamMiLCJrYyIsImxjIiwibWMiLCJuYyIsIk1hcCIsIm9jIiwicGMiLCJxYyIsInJjIiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJzaGlmdCIsInpjIiwiQWMiLCJCYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkNjIiwiRGMiLCJFYyIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIkZjIiwiR2MiLCJIYyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiTWF0aCIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImlkIiwiYmluZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSmQiLCJjbGlwYm9hcmREYXRhIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlJkIiwibG9jYXRpb24iLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJub2RlIiwib2Zmc2V0IiwibmV4dFNpYmxpbmciLCJNZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJsaXN0ZW5lciIsIkciLCIkZSIsImhhcyIsImFmIiwiYmYiLCJyYW5kb20iLCJjZiIsImRmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJOYiIsInciLCJ6IiwicSIsInYiLCJlZiIsImZmIiwicGFyZW50V2luZG93IiwiZ2YiLCJoZiIsIkoiLCJLIiwiUSIsIkwiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJwZiIsImNsZWFyVGltZW91dCIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsIk8iLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJfY3VycmVudFZhbHVlIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJjb250ZXh0Iiwib2JzZXJ2ZWRCaXRzIiwibmV4dCIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiQWciLCJCZyIsIkNnIiwiQSIsIkMiLCJEZyIsIkVnIiwiRmciLCJDb21wb25lbnQiLCJyZWZzIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTWciLCJ1cGRhdGVyIiwiTmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJPZyIsInByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiaW5kZXgiLCJUZyIsIlVnIiwiZWxlbWVudFR5cGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsImRvbmUiLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImVoIiwidGFnTmFtZSIsImZoIiwiZ2giLCJoaCIsIlAiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwidmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwid2giLCJ4aCIsIlIiLCJTIiwiVCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiYmFzZVF1ZXVlIiwiSWgiLCJKaCIsIktoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiTGgiLCJNaCIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsIm11dGFibGVSZWFkTGFuZXMiLCJOaCIsIlUiLCJ1c2VTdGF0ZSIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwidXNlRWZmZWN0Iiwic2V0U25hcHNob3QiLCJPaCIsIlBoIiwiUWgiLCJSaCIsImNyZWF0ZSIsImRlc3Ryb3kiLCJkZXBzIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwidWYiLCJlaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiZmkiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwibGkiLCJtaSIsImJhc2VMYW5lcyIsIm5pIiwib2kiLCJwaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInFpIiwicmkiLCJwZW5kaW5nQ29udGV4dCIsIkJpIiwiRGkiLCJFaSIsInNpIiwicmV0cnlMYW5lIiwidGkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwidWkiLCJ1bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsIkFpIiwiRmkiLCJHaSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsIlYiLCJIaSIsIklpIiwiVyIsIkppIiwiS2kiLCJMaSIsIk1pIiwibWVzc2FnZSIsIk5pIiwiT2kiLCJXZWFrTWFwIiwiUGkiLCJRaSIsIlJpIiwiU2kiLCJjb21wb25lbnREaWRDYXRjaCIsIlRpIiwiY29tcG9uZW50U3RhY2siLCJVaSIsIldlYWtTZXQiLCJWaSIsIldpIiwiWGkiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIllpIiwiWmkiLCIkaSIsImZvY3VzIiwiYWoiLCJkaXNwbGF5IiwiYmoiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2oiLCJkaiIsImVqIiwiZmoiLCJnaiIsImhqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsImNlaWwiLCJvaiIsInBqIiwiWCIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJJbmZpbml0eSIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImNhbGxiYWNrUHJpb3JpdHkiLCJUYyIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlVqIiwidGltZW91dEhhbmRsZSIsIldqIiwiWGoiLCJwaW5nQ2FjaGUiLCJZaiIsIlpqIiwidmEiLCJhayIsImJrIiwiZGsiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJvbkNvbW1pdEZpYmVyUm9vdCIsImZrIiwiZ2siLCJpayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJqayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJrayIsImxrIiwibWsiLCJuayIsIm9rIiwicWsiLCJoeWRyYXRpb25PcHRpb25zIiwibXV0YWJsZVNvdXJjZXMiLCJfaW50ZXJuYWxSb290IiwicmsiLCJ0ayIsImhhc0F0dHJpYnV0ZSIsInNrIiwidWsiLCJoayIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIlZqIiwidmsiLCJFdmVudHMiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIlBvcnRhbCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJ0b0FycmF5Iiwib25seSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwicGVyZm9ybWFuY2UiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJvYmpBIiwib2JqQiIsImNvbXBhcmVDb250ZXh0IiwicmV0Iiwia2V5c0EiLCJrZXlzQiIsImJIYXNPd25Qcm9wZXJ0eSIsImlkeCIsInZhbHVlQSIsInZhbHVlQiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdrcyIsIlJlY29pbF9na3giLCJfZ2tzJGdldCIsInNldFBhc3MiLCJzZXRGYWlsIiwiUmVjb2lsX2dreF8xIiwiUmVjb2lsX21hcE1hcCIsIlJlY29pbF9udWxsdGhyb3dzIiwiUmVjb2lsX1RyYWNpbmciLCJmbiIsIlJlY29pbF9Db3B5T25Xcml0ZSIsInNldEJ5QWRkaW5nVG9TZXQiLCJzZXRCeURlbGV0aW5nRnJvbVNldCIsIm1hcEJ5U2V0dGluZ0luTWFwIiwibWFwQnlVcGRhdGluZ0luTWFwIiwibWFwQnlEZWxldGluZ0Zyb21NYXAiLCJtYXBCeURlbGV0aW5nTXVsdGlwbGVGcm9tTWFwIiwia3MiLCJfZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsIkFic3RyYWN0UmVjb2lsVmFsdWUiLCJuZXdLZXkiLCJSZWNvaWxTdGF0ZSIsIlJlY29pbFZhbHVlUmVhZE9ubHkiLCJSZWNvaWxfUmVjb2lsVmFsdWUiLCJpc1JlY29pbFZhbHVlIiwiUmVjb2lsX1JlY29pbFZhbHVlXzEiLCJSZWNvaWxfUmVjb2lsVmFsdWVfMiIsIlJlY29pbF9SZWNvaWxWYWx1ZV8zIiwiUmVjb2lsX1JlY29pbFZhbHVlXzQiLCJSZWNvaWxfUmVjb2lsVmFsdWUkMSIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsIkRlZmF1bHRWYWx1ZSIsIkRFRkFVTFRfVkFMVUUiLCJSZWNvaWxWYWx1ZU5vdFJlYWR5Iiwic3VwZXIiLCJub2RlcyIsInJlY29pbFZhbHVlcyIsIk5vZGVNaXNzaW5nRXJyb3IiLCJSZWNvaWxfTm9kZSIsInJlZ2lzdGVyTm9kZSIsInJlY29pbFZhbHVlIiwiZ2V0Tm9kZSIsImdldE5vZGVNYXliZSIsIm1hcEJ5RGVsZXRpbmdGcm9tTWFwJDEiLCJtYXBCeVNldHRpbmdJbk1hcCQxIiwic2V0QnlBZGRpbmdUb1NldCQxIiwiZ2V0Tm9kZSQxIiwiZ2V0Tm9kZU1heWJlJDEiLCJlbXB0eVNldCIsIlJlYWRPbmx5UmVjb2lsVmFsdWVFcnJvciIsIlJlY29pbF9GdW5jdGlvbmFsQ29yZSIsImdldE5vZGVMb2FkYWJsZSIsInBlZWtOb2RlTG9hZGFibGUiLCJwZWVrIiwic2V0Tm9kZVZhbHVlIiwibmV3VmFsdWUiLCJjbGVhblVwTm9kZSIsImNsZWFuVXAiLCJzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZV9ERVBSRUNBVEVEIiwiX25vZGUkaW52YWxpZGF0ZSIsImludmFsaWRhdGUiLCJhdG9tVmFsdWVzIiwibm9udmFsaWRhdGVkQXRvbXMiLCJkaXJ0eUF0b21zIiwiZ2V0RG93bnN0cmVhbU5vZGVzIiwidmlzaXRlZE5vZGVzIiwidmlzaXRpbmdOb2RlcyIsImdyYXBoIiwiZ2V0R3JhcGgiLCJfZ3JhcGgkbm9kZVRvTm9kZVN1YnMiLCJzdWJzY3JpYmVkTm9kZXMiLCJub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucyIsImRvd25zdHJlYW1Ob2RlIiwiUmVjb2lsX2RpZmZlcmVuY2VTZXRzIiwic2V0c1dpdGhWYWx1ZXNUb1JlbW92ZSIsIkZJUlNUIiwib3RoZXJTZXQiLCJtZXJnZURlcGVuZGVuY3lNYXBJbnRvR3JhcGgiLCJvbGRlckdyYXBoIiwibm9kZURlcHMiLCJ1cHN0cmVhbXMiLCJkb3duc3RyZWFtIiwiZXhpc3RpbmdVcHN0cmVhbXMiLCJ1cHN0cmVhbSIsImV4aXN0aW5nIiwiUmVjb2lsX0dyYXBoIiwiYWRkVG9EZXBlbmRlbmN5TWFwIiwiZGVwZW5kZW5jeU1hcCIsImNsb25lR3JhcGgiLCJtZXJnZURlcHNJbnRvRGVwZW5kZW5jeU1hcCIsImludG8iLCJ1cHN0cmVhbURlcHMiLCJkZXAiLCJzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUiLCJfc3RvcmVTdGF0ZSRuZXh0VHJlZSIsIl9zdG9yZVN0YXRlJHByZXZpb3VzVCIsIl9zdG9yZVN0YXRlJHByZXZpb3VzVDIiLCJfc3RvcmVTdGF0ZSRwcmV2aW91c1QzIiwic3RvcmVTdGF0ZSIsImdldFN0YXRlIiwiY3VycmVudFRyZWUiLCJuZXh0VHJlZSIsInByZXZpb3VzVHJlZSIsIl9zdG9yZVN0YXRlJG5leHRUcmVlMiIsIm5leHRWZXJzaW9uIiwiZ2V0RG93bnN0cmVhbU5vZGVzJDEiLCJnZXROb2RlTG9hZGFibGUkMSIsInNldE5vZGVWYWx1ZSQxIiwic2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlJDEiLCJnZXROb2RlTWF5YmUkMiIsIkRlZmF1bHRWYWx1ZSQxIiwiUmVjb2lsVmFsdWVOb3RSZWFkeSQxIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSQxIiwiUmVjb2lsU3RhdGUkMSIsIlJlY29pbFZhbHVlUmVhZE9ubHkkMSIsImlzUmVjb2lsVmFsdWUkMSIsImFwcGx5QWN0aW9uIiwidmFsdWVPclVwZGF0ZXIiLCJjb250ZW50cyIsInZhbHVlRnJvbVZhbHVlT3JVcGRhdGVyIiwiZGVwTWFwIiwid3JpdGVzIiwibG9hZGFibGUiLCJlbnRyaWVzIiwid3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlIiwidW52YWxpZGF0ZWRWYWx1ZSIsImFwcGx5QWN0aW9uc1RvU3RvcmUiLCJhY3Rpb25zIiwicmVwbGFjZVN0YXRlIiwibmV3U3RhdGUiLCJjb3B5VHJlZVN0YXRlIiwiaW52YWxpZGF0ZURvd25zdHJlYW1zIiwicXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZSIsImJhdGNoU3RhY2siLCJhY3Rpb25zQnlTdG9yZSIsImRvd25zdHJlYW1zIiwiX2dldE5vZGVNYXliZSIsIl9nZXROb2RlTWF5YmUkaW52YWxpZCIsInNldFJlY29pbFZhbHVlIiwic3Vic2NyaXB0aW9uSUQiLCJSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2UiLCJnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUiLCJ0cmVlU3RhdGUiLCJzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlIiwibWFya1JlY29pbFZhbHVlTW9kaWZpZWQiLCJzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlIiwic3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSIsImNvbXBvbmVudERlYnVnTmFtZSIsInN1YklEIiwibm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucyIsInJlbGVhc2UiLCJzdWJzIiwiYXBwbHlBdG9tVmFsdWVXcml0ZXMiLCJiYXRjaFN0YXJ0IiwiaW52YWxpZGF0ZURvd25zdHJlYW1zX0ZPUl9URVNUSU5HIiwiUmVjb2lsX1JlYWN0QmF0Y2hlZFVwZGF0ZXMiLCJiYXRjaFN0YXJ0JDEiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyQxIiwiYmF0Y2hlciIsIlJlY29pbF9CYXRjaGluZyIsImdldEJhdGNoZXIiLCJzZXRCYXRjaGVyIiwibmV3QmF0Y2hlciIsImJhdGNoVXBkYXRlcyIsImJhdGNoRW5kIiwiUmVjb2lsX1F1ZXVlIiwiUmVjb2lsX2ZpbHRlckl0ZXJhYmxlIiwicHJlZGljYXRlIiwiZ3JhcGgkMSIsIm5leHRUcmVlU3RhdGVWZXJzaW9uIiwiZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24iLCJtYWtlRW1wdHlUcmVlU3RhdGUiLCJzdGF0ZUlEIiwidHJhbnNhY3Rpb25NZXRhZGF0YSIsIlJlY29pbF9TdGF0ZSIsIm1ha2VFbXB0eVN0b3JlU3RhdGUiLCJrbm93bkF0b21zIiwia25vd25TZWxlY3RvcnMiLCJ0cmFuc2FjdGlvblN1YnNjcmlwdGlvbnMiLCJub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zIiwicXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQiLCJzdXNwZW5kZWRDb21wb25lbnRSZXNvbHZlcnMiLCJncmFwaHNCeVZlcnNpb24iLCJ2ZXJzaW9uc1VzZWRCeUNvbXBvbmVudCIsImJhdGNoVXBkYXRlcyQxIiwiZ2V0RG93bnN0cmVhbU5vZGVzJDIiLCJwZWVrTm9kZUxvYWRhYmxlJDEiLCJncmFwaCQyIiwiREVGQVVMVF9WQUxVRSQxIiwicmVjb2lsVmFsdWVzJDEiLCJnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMSIsInNldFJlY29pbFZhbHVlJDEiLCJnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQxIiwibWFrZUVtcHR5U3RvcmVTdGF0ZSQxIiwicmVjb2lsVmFsdWVzRm9yS2V5cyIsIlNuYXBzaG90IiwiX3N0b3JlIiwiZ2V0TG9hZGFibGUiLCJ0b1Byb21pc2UiLCJvcHQiLCJpc01vZGlmaWVkIiwiaXNJbml0aWFsaXplZCIsIml0ZXJzIiwiaXRlciIsIlJlY29pbF9jb25jYXRJdGVyYWJsZXMiLCJub2RlS2V5IiwiX2dyYXBoJG5vZGVEZXBzJGdldCIsImlzQWN0aXZlIiwiaXNTZXQiLCJzdWJzY3JpYmVycyIsImdldFN1YnNjcmliZXJzX1VOU1RBQkxFIiwibWFwcGVyIiwibXV0YWJsZVNuYXBzaG90IiwiTXV0YWJsZVNuYXBzaG90IiwiY2xvbmVTbmFwc2hvdCIsImdldFN0b3JlX0lOVEVSTkFMIiwiYXN5bmMiLCJyZXBsYWNlciIsImdyYXBocyIsIm5ld0dyYXBoIiwic3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMiLCJhZGRUcmFuc2FjdGlvbk1ldGFkYXRhIiwiZ2V0SURfSU5URVJOQUwiLCJjbG9uZVN0b3JlU3RhdGUiLCJidW1wVmVyc2lvbiIsInNuYXBzaG90IiwicmVjb2lsU3RhdGUiLCJuZXdWYWx1ZU9yVXBkYXRlciIsIlJlY29pbF9TbmFwc2hvdCIsImZyZXNoU25hcHNob3QiLCJpbml0aWFsaXplU3RhdGUiLCJSZWNvaWxfU25hcHNob3RfMSIsIlJlY29pbF9TbmFwc2hvdF8yIiwiUmVjb2lsX1NuYXBzaG90XzMiLCJSZWNvaWxfU25hcHNob3RfNCIsIlJlY29pbF9TbmFwc2hvdCQxIiwiUmVjb2lsX3VuaW9uU2V0cyIsInNldHMiLCJyZWFjdCIsImNsZWFuVXBOb2RlJDEiLCJnZXREb3duc3RyZWFtTm9kZXMkMyIsInNldE5vZGVWYWx1ZSQyIiwic2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCQxIiwiZ3JhcGgkMyIsInNhdmVEZXBlbmRlbmN5TWFwVG9TdG9yZSQyIiwiY2xvbmVHcmFwaCQxIiwiYXBwbHlBdG9tVmFsdWVXcml0ZXMkMSIsImZyZXNoU25hcHNob3QkMSIsImdldE5leHRUcmVlU3RhdGVWZXJzaW9uJDIiLCJtYWtlRW1wdHlTdG9yZVN0YXRlJDIiLCJtYXBCeURlbGV0aW5nTXVsdGlwbGVGcm9tTWFwJDEiLCJub3RJbkFDb250ZXh0IiwiZGVmYXVsdFN0b3JlIiwic3RhdGVSZXBsYWNlcklzQmVpbmdFeGVjdXRlZCIsInN0YXJ0TmV4dFRyZWVJZk5lZWRlZCIsIkFwcENvbnRleHQiLCJ1c2VTdG9yZVJlZiIsIk11dGFibGVTb3VyY2VDb250ZXh0Iiwic2VuZEVuZE9mQmF0Y2hOb3RpZmljYXRpb25zIiwic3Vic2NyaXB0aW9ucyIsIl8iLCJzdWJzY3JpcHRpb24iLCJkZXBlbmRlbnROb2RlcyIsImNvbXBzIiwiX3N1YklEIiwiX2RlYnVnTmFtZSIsIm5vZGVOYW1lcyIsInNwbGljZSIsIkJhdGNoZXIiLCJzdG9yZVJlZiIsInNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZSIsImRpc2NhcmRlZFZlcnNpb24iLCJuZXh0SUQiLCJfdXNlTXV0YWJsZVNvdXJjZSIsIlJlY29pbF9SZWNvaWxSb290X3JlYWN0IiwidXNlUmVjb2lsTXV0YWJsZVNvdXJjZSIsIlJlY29pbFJvb3QiLCJpbml0aWFsaXplU3RhdGVfREVQUkVDQVRFRCIsInN0b3JlX0lOVEVSTkFMIiwic3RvcmVQcm9wIiwiX2NyZWF0ZU11dGFibGVTb3VyY2UiLCJub3RpZnlCYXRjaGVyT2ZDaGFuZ2UiLCJjcmVhdGVNdXRhYmxlU291cmNlIiwidW5zdGFibGVfY3JlYXRlTXV0YWJsZVNvdXJjZSIsInJlcGxhY2VkIiwibWV0YWRhdGEiLCJpbml0aWFsIiwiYXRvbSIsIndyaXR0ZW5Ob2RlcyIsInNldFVudmFsaWRhdGVkQXRvbVZhbHVlcyIsImluaXRpYWxTdG9yZVN0YXRlX0RFUFJFQ0FURUQiLCJpbml0aWFsU3RvcmVTdGF0ZSIsIm11dGFibGVTb3VyY2UiLCJhdG9tS2V5Iiwic2VuZEVuZE9mQmF0Y2hOb3RpZmljYXRpb25zX0ZPUl9URVNUSU5HIiwiUmVjb2lsX2ludmFyaWFudCIsImNvbmRpdGlvbiIsInVuc3RhYmxlX3VzZU11dGFibGVTb3VyY2UiLCJSZWNvaWxfbXV0YWJsZVNvdXJjZSIsIm11dGFibGVTb3VyY2VFeGlzdHMiLCIkZGlzYWJsZVJlY29pbFZhbHVlTXV0YWJsZVNvdXJjZV9URU1QX0hBQ0tfRE9fTk9UX1VTRSIsInVzZVJlZiQxIiwiUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUiLCJ1c2VFZmZlY3QkMSIsInVzZU1lbW8kMSIsInVzZVJlZiQyIiwidXNlU3RhdGUkMSIsImJhdGNoVXBkYXRlcyQyIiwiREVGQVVMVF9WQUxVRSQyIiwiZ2V0Tm9kZSQyIiwibm9kZXMkMSIsInVzZVJlY29pbE11dGFibGVTb3VyY2UkMSIsInVzZVN0b3JlUmVmJDEiLCJpc1JlY29pbFZhbHVlJDIiLCJBYnN0cmFjdFJlY29pbFZhbHVlJDIiLCJnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMiIsInNldFJlY29pbFZhbHVlJDIiLCJzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDEiLCJzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlJDEiLCJzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEiLCJTbmFwc2hvdCQxIiwiY2xvbmVTbmFwc2hvdCQxIiwic2V0QnlBZGRpbmdUb1NldCQyIiwibXV0YWJsZVNvdXJjZUV4aXN0cyQxIiwidXNlTXV0YWJsZVNvdXJjZSQxIiwiaGFuZGxlTG9hZGFibGUiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlIiwiY29tcG9uZW50TmFtZSIsIl9zb21ldGhpbmciLCJzdWIiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX01VVEFCTEVTT1VSQ0UiLCJfc3RhdGUiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX0xFR0FDWSIsInVzZVJlY29pbFZhbHVlIiwidXNlU2V0UmVjb2lsU3RhdGUiLCJ1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbiIsImV4dGVybmFsbHlWaXNpYmxlQXRvbVZhbHVlc0luU3RhdGUiLCJwZXJzaXN0ZWRBdG9tQ29udGVudHNWYWx1ZXMiLCJSZWNvaWxfZmlsdGVyTWFwIiwicGVyc2lzdGVuY2UiLCJwZXJzaXN0ZW5jZV9VTlNUQUJMRSIsIm1hcHMiLCJuZXh0S2V5IiwiUmVjb2lsX21lcmdlTWFwcyIsInVzZUdvdG9SZWNvaWxTbmFwc2hvdCIsInByZXYiLCJrZXlzVG9VcGRhdGUiLCJfcHJldiRhdG9tVmFsdWVzJGdldCIsIl9uZXh0JGF0b21WYWx1ZXMkZ2V0Iiwic2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHMiLCJTZW50aW5lbCIsIlNFTlRJTkVMIiwiUmVjb2lsX0hvb2tzIiwicmVjb2lsQ29tcG9uZW50R2V0UmVjb2lsVmFsdWVDb3VudF9GT1JfVEVTVElORyIsInVzZVJlY29pbENhbGxiYWNrIiwiZ290b1NuYXBzaG90IiwicmVzZXQiLCJ1c2VSZWNvaWxJbnRlcmZhY2UiLCJyZWNvaWxWYWx1ZXNVc2VkIiwicHJldmlvdXNTdWJzY3JpcHRpb25zIiwidW5zdWJzY3JpYmVGcm9tIiwidXBkYXRlU3RhdGUiLCJnZXRSZWNvaWxWYWx1ZSIsImdldFJlY29pbFZhbHVlTG9hZGFibGUiLCJnZXRSZWNvaWxTdGF0ZSIsImdldFJlY29pbFN0YXRlTG9hZGFibGUiLCJnZXRTZXRSZWNvaWxTdGF0ZSIsImdldFJlc2V0UmVjb2lsU3RhdGUiLCJ1c2VSZWNvaWxTbmFwc2hvdCIsInVzZVJlY29pbFN0YXRlIiwidXNlUmVjb2lsU3RhdGVMb2FkYWJsZSIsInVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXIiLCJwcmV2aW91c1NuYXBzaG90IiwidXNlUmVzZXRSZWNvaWxTdGF0ZSIsInVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlcyIsInVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRCIsInByZXZpb3VzQXRvbVZhbHVlcyIsImF0b21JbmZvIiwiX25vZGUkcGVyc2lzdGVuY2VfVU5TIiwiX25vZGUkcGVyc2lzdGVuY2VfVU5TMiIsIl9ub2RlJHBlcnNpc3RlbmNlX1VOUzMiLCJfbm9kZSRwZXJzaXN0ZW5jZV9VTlM0IiwiYmFja0J1dHRvbiIsIm1vZGlmaWVkQXRvbXMiLCJSZWNvaWxfZmlsdGVyU2V0IiwidXNlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25fREVQUkVDQVRFRCIsInVzZU1lbW8kMiIsIlJlY29pbFJvb3QkMSIsInVzZVN0b3JlUmVmJDIiLCJSZWNvaWxfaXNQcm9taXNlIiwibG9hZGFibGVBY2Nlc3NvcnMiLCJfX3ZhbHVlIiwibG9hZGFibGVXaXRoUHJvbWlzZSIsImxvYWRhYmxlV2l0aFZhbHVlIiwibG9hZGFibGVXaXRoRXJyb3IiLCJjYXRjaCIsIlJlY29pbF9Mb2FkYWJsZSIsImxvYWRhYmxlTG9hZGluZyIsImxvYWRhYmxlQWxsIiwiaW5wdXRzIiwiZXZlcnkiLCJzb21lIiwiZmluZCIsIkRhdGFWaWV3IiwicHJvZHVjdCIsIlJlY29pbF9jYWNoZU1vc3RSZWNlbnQiLCJtb3N0UmVjZW50S2V5IiwibW9zdFJlY2VudFZhbHVlIiwiY2FjaGUiLCJMRUFGIiwiZW1wdHlNYXAiLCJBcnJheUtleWVkTWFwIiwiX2Jhc2UiLCJfbWFwJGdldCIsImFuc3dlciIsInJlY3Vyc2UiLCJsZXZlbCIsInByZWZpeCIsIlJlY29pbF9BcnJheUtleWVkTWFwXzEiLCJSZWNvaWxfQXJyYXlLZXllZE1hcCQxIiwiQXJyYXlLZXllZE1hcCQxIiwiUmVjb2lsX2NhY2hlV2l0aFJlZmVyZW5jZUVxdWFsaXR5IiwiYWxsb3dGdW5jdGlvbnMiLCJfSlNPTiRzdHJpbmdpZnkiLCJ0b0pTT04iLCJzb3J0IiwibG9jYWxlQ29tcGFyZSIsImZpbHRlciIsIlJlY29pbF9zdGFibGVTdHJpbmdpZnkiLCJSZWNvaWxfY2FjaGVXaXRoVmFsdWVFcXVhbGl0eSIsIlJlY29pbF9UcmVlTm9kZUNhY2hlIiwic2V0SW5UcmVlQ2FjaGUiLCJyb290Iiwicm91dGUiLCJwYXRoIiwicmVzdCIsImJyYW5jaGVzIiwiZ2V0RnJvbVRyZWVDYWNoZSIsImdldE5vZGVWYWx1ZSIsIl9oYW5kbGVycyRvbkNhY2hlSGl0Iiwib25DYWNoZUhpdCIsImdldEZyb21UcmVlQ2FjaGUkMSIsInNldEluVHJlZUNhY2hlJDEiLCJSZWNvaWxfdHJlZUNhY2hlUmVmZXJlbmNlRXF1YWxpdHkiLCJ0cmVlUm9vdCIsImdldFJvb3QiLCJnZXRGcm9tVHJlZUNhY2hlJDIiLCJzZXRJblRyZWVDYWNoZSQyIiwiUmVjb2lsX1BlcmZvcm1hbmNlVGltaW5ncyIsInN0YXJ0UGVyZkJsb2NrIiwiX2lkIiwibG9hZGFibGVXaXRoRXJyb3IkMSIsImxvYWRhYmxlV2l0aFByb21pc2UkMSIsImxvYWRhYmxlV2l0aFZhbHVlJDEiLCJnZXROb2RlTG9hZGFibGUkMiIsInBlZWtOb2RlTG9hZGFibGUkMiIsInNldE5vZGVWYWx1ZSQzIiwic2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlJDMiLCJERUZBVUxUX1ZBTFVFJDMiLCJSZWNvaWxWYWx1ZU5vdFJlYWR5JDIiLCJyZWdpc3Rlck5vZGUkMSIsImlzUmVjb2lsVmFsdWUkMyIsIkFic3RyYWN0UmVjb2lsVmFsdWUkMyIsInNldFJlY29pbFZhbHVlTG9hZGFibGUkMiIsInN0YXJ0UGVyZkJsb2NrJDEiLCJlbXB0eVNldCQxIiwiZGVwZW5kZW5jeVN0YWNrIiwid2FpdGluZ1N0b3JlcyIsImdldE5ld0V4ZWN1dGlvbklkIiwiZXhlY3V0aW9uSWQiLCJsb2FkYWJsZVdpdGhFcnJvciQyIiwibG9hZGFibGVXaXRoUHJvbWlzZSQyIiwibG9hZGFibGVXaXRoVmFsdWUkMiIsImdldE5vZGVMb2FkYWJsZSQzIiwicGVla05vZGVMb2FkYWJsZSQzIiwic2V0Tm9kZVZhbHVlJDQiLCJhZGRUb0RlcGVuZGVuY3lNYXAkMSIsIm1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwJDEiLCJzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUkNCIsIkRFRkFVTFRfVkFMVUUkNCIsIlJlY29pbFZhbHVlTm90UmVhZHkkMyIsInJlZ2lzdGVyTm9kZSQyIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSQ0IiwiZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDMiLCJpc1JlY29pbFZhbHVlJDQiLCJzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDMiLCJzdGFydFBlcmZCbG9jayQyIiwiZW1wdHlTZXQkMiIsImNhY2hlS2V5RnJvbURlcFZhbHVlcyIsImRlcFZhbHVlcyIsIndhaXRpbmdTdG9yZXMkMSIsIlJlY29pbF9zZWxlY3RvciIsImNhY2hlSW1wbGVtZW50YXRpb25fVU5TVEFCTEUiLCJjYWNoZUltcGxlbWVudGF0aW9uIiwiUmVjb2lsX3RyZWVDYWNoZVZhbHVlRXF1YWxpdHkiLCJtb3N0UmVjZW50IiwiUmVjb2lsX25vZGVDYWNoZU1vc3RSZWNlbnQiLCJleGVjdXRpb25JbmZvIiwiZGVwVmFsdWVzRGlzY292ZXJlZFNvRmFyRHVyaW5nQXN5bmNXb3JrIiwibGF0ZXN0TG9hZGFibGUiLCJsYXRlc3RFeGVjdXRpb25JZCIsInN0YXRlVmVyc2lvbiIsImluaXRTZWxlY3RvciIsIm5vdGlmeVN0b3JlV2hlbkFzeW5jU2V0dGxlcyIsInN0b3JlcyIsImdldENhY2hlZE5vZGVMb2FkYWJsZSIsImlzS2V5UG9pbnRpbmdUb1NlbGVjdG9yIiwid3JhcFBlbmRpbmdEZXBlbmRlbmN5UHJvbWlzZSIsImV4aXN0aW5nRGVwcyIsInJlc29sdmVkRGVwIiwiX19rZXkiLCJyZXNvbHZlZERlcEtleSIsImRlcFZhbHVlIiwiZXZhbHVhdGVTZWxlY3RvckdldHRlciIsImlzTGF0ZXN0RXhlY3V0aW9uIiwidXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyIsIm1heWJlRnJlZXplTG9hZGFibGVDb250ZW50cyIsInNldENhY2hlIiwiZGVwVmFsdWVzVG9EZXBSb3V0ZSIsInNldExvYWRhYmxlSW5TdG9yZVRvTm90aWZ5RGVwcyIsIm1heWJlRnJlZXplVmFsdWUiLCJzZXRFeGVjdXRpb25JbmZvIiwibmV3TG9hZGFibGUiLCJub3RpZnlTdG9yZXNPZlNldHRsZWRBc3luYyIsInNldERlcHNJblN0b3JlIiwiX3N0b3JlJGdldFN0YXRlIiwiX3N0b3JlJGdldFN0YXRlJGN1cnJlIiwiX3N0b3JlJGdldFN0YXRlMiIsIl9zdG9yZSRnZXRTdGF0ZTIkbmV4dCIsIl9zdG9yZSRnZXRTdGF0ZSRuZXh0VCIsIl9zdG9yZSRnZXRTdGF0ZTMiLCJfc3RvcmUkZ2V0U3RhdGUzJG5leHQiLCJzZXROZXdEZXBJblN0b3JlIiwibmV3RGVwS2V5IiwiZW5kUGVyZkJsb2NrIiwiZGVwS2V5IiwiZGVwTG9hZGFibGUiLCJlcnJvck9yUHJvbWlzZSIsIndyYXBQZW5kaW5nUHJvbWlzZSIsImZpbmFsbHkiLCJlcnJvck9yRGVwUHJvbWlzZSIsInZhbExvYWRhYmxlIiwiZ2V0U2VsZWN0b3JWYWxBbmRVcGRhdGVkRGVwcyIsImNhY2hlZFZhbCIsIl9zdG9yZSRnZXRHcmFwaCRub2RlRCIsImdldFZhbEZyb21DYWNoZUFuZFVwZGF0ZWREb3duc3RyZWFtRGVwcyIsIl9leGVjdXRpb25JbmZvJGRlcFZhbCIsIl9tYXBPZkNoZWNrZWRWZXJzaW9ucyIsIm9sZERlcFZhbHVlcyIsImNhY2hlZERlcFZhbHVlc0NoZWNrZWRGb3JUaGlzVmVyc2lvbiIsIm1hcE9mQ2hlY2tlZFZlcnNpb25zIiwiaXNDYWNoZWRWZXJzaW9uU2FtZSIsIm5vZGVWYWwiLCJvbGRWYWwiLCJoYXZlQXN5bmNEZXBzQ2hhbmdlZCIsImFzeW5jV29ya0lzSW5Qcm9ncmVzc0FuZERlcHNEaXNjb3ZlcmVkSGF2ZU5vdENoYW5nZWQiLCJuZXdFeGVjdXRpb25JZCIsIm5ld0RlcFZhbHVlcyIsImRlcFJvdXRlIiwibWF5YmVTZXRDYWNoZVdpdGhMb2FkYWJsZSIsImdldFZhbEZyb21SdW5uaW5nTmV3RXhlY3V0aW9uQW5kVXBkYXRlZERlcHMiLCJjYWNoZVJvdXRlIiwiZGV0ZWN0Q2lyY3VsYXJEZXBlbmRlbmNpZXMiLCJteVBlZWsiLCJteUdldCIsInNldFJlY29pbFN0YXRlIiwidXBzdHJlYW1Xcml0ZXMiLCJkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSIsImxldFN0b3JlQmVOb3RpZmllZFdoZW5Bc3luY1NldHRsZXMiLCJvcmlnaW5hbExvYWRhYmxlIiwiX3N0b3JlJGdldEdyYXBoJG5vZGVEMiIsImN1cnJlbnREZXBzIiwiY2FjaGVEZXBWYWx1ZXMiLCJjYWNoZUtleSIsImNhY2hlZCIsIm91dHB1dCIsImV2YWx1YXRlU2VsZWN0b3JGdW5jdGlvbiIsIm5ld0NhY2hlS2V5IiwicHV0SW50b0NhY2hlIiwiZ2V0RnJvbUNhY2hlT3JFdmFsdWF0ZSIsImxvYWRhYmxlV2l0aEVycm9yJDMiLCJsb2FkYWJsZVdpdGhQcm9taXNlJDMiLCJsb2FkYWJsZVdpdGhWYWx1ZSQzIiwiREVGQVVMVF9WQUxVRSQ1IiwiRGVmYXVsdFZhbHVlJDIiLCJyZWdpc3Rlck5vZGUkMyIsImlzUmVjb2lsVmFsdWUkNSIsIm1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkJDEiLCJzZXRSZWNvaWxWYWx1ZSQzIiwic2V0UmVjb2lsVmFsdWVMb2FkYWJsZSQ0IiwiUmVjb2lsX2F0b20iLCJvcHRpb25zRGVmYXVsdCIsInJlc3RPcHRpb25zIiwidmFsaWRhdG9yIiwic3RvcmVkVmFsdWUiLCJlZmZlY3RzX1VOU1RBQkxFIiwiYmFzZVZhbHVlIiwiYXRvbVdpdGhGYWxsYmFjayIsImNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUiLCJkZWZhdWx0TG9hZGFibGUiLCJjbGVhbnVwRWZmZWN0c0J5U3RvcmUiLCJpbml0QXRvbSIsImluaXRTdGF0ZSIsInRyaWdnZXIiLCJub3RpZnlEZWZhdWx0U3Vic2NyaWJlcnMiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzIiwiaW5pdFZhbHVlIiwicGVuZGluZ1NldFNlbGYiLCJkdXJpbmdJbml0Iiwic2V0U2VsZiIsImVmZmVjdCIsImN1cnJlbnRWYWx1ZSIsInJlc2V0U2VsZiIsIm9uU2V0IiwiaGFuZGxlciIsImN1cnJlbnRTdG9yZSIsIl9wZW5kaW5nU2V0U2VsZjMiLCJfcHJldmlvdXNUcmVlJGF0b21WYWwiLCJfcGVuZGluZ1NldFNlbGYiLCJfcGVuZGluZ1NldFNlbGYyIiwib2xkTG9hZGFibGUiLCJvbGRWYWx1ZSIsIl9vcHRpb25zJGVmZmVjdHNfVU5TVCIsImNsZWFudXAiLCJ3cmFwcGVkUHJvbWlzZSIsIl9zdGF0ZSRhdG9tVmFsdWVzJGdldCIsIl9zdG9yZSRnZXRTdGF0ZSRuZXh0VDIiLCJfc3RhdGUkYXRvbVZhbHVlcyRnZXQyIiwiX3JlZiIsIl9zdGF0ZSRhdG9tVmFsdWVzJGdldDMiLCJfY2FjaGVkQW5zd2VyRm9yVW52YWwiLCJub252YWxpZGF0ZWRWYWx1ZSIsInZhbGlkYXRvclJlc3VsdCIsInZhbGlkYXRlZFZhbHVlTG9hZGFibGUiLCJfY2xlYW51cEVmZmVjdHNCeVN0b3IiLCJiYXNlQXRvbSIsIm5leHRJbmRleCIsIlJlY29pbF9zZWxlY3RvckZhbWlseSIsIl9vcHRpb25zJGNhY2hlSW1wbGVtZSIsIl9vcHRpb25zJGNhY2hlSW1wbGVtZTIiLCJzZWxlY3RvckNhY2hlIiwiY2FjaGVJbXBsZW1lbnRhdGlvbkZvclBhcmFtc19VTlNUQUJMRSIsInBhcmFtcyIsIl9zdGFibGVTdHJpbmdpZnkiLCJfb3B0aW9ucyRjYWNoZUltcGxlbWUzIiwiY2FjaGVkU2VsZWN0b3IiLCJteUtleSIsImNhbGxiYWNrcyIsIm15Q2FjaGVJbXBsZW1lbnRhdGlvbiIsIm5ld1NlbGVjdG9yIiwiREVGQVVMVF9WQUxVRSQ2IiwiRGVmYXVsdFZhbHVlJDMiLCJjb25zdGFudFNlbGVjdG9yIiwiY29uc3RhbnQiLCJ0aHJvd2luZ1NlbGVjdG9yIiwibG9hZGFibGVXaXRoRXJyb3IkNCIsImxvYWRhYmxlV2l0aFByb21pc2UkNCIsImxvYWRhYmxlV2l0aFZhbHVlJDQiLCJjb25jdXJyZW50UmVxdWVzdHMiLCJmaWxsIiwiZXhjZXB0aW9ucyIsImlzRXJyb3IiLCJleHAiLCJ1bndyYXBEZXBlbmRlbmNpZXMiLCJnZXRWYWx1ZUZyb21Mb2FkYWJsZVByb21pc2VSZXN1bHQiLCJ3cmFwUmVzdWx0cyIsInJlZHVjZSIsIndyYXBMb2FkYWJsZXMiLCJleGNlcHRpb24iLCJSZWNvaWxfV2FpdEZvciIsIndhaXRGb3JOb25lIiwid2FpdEZvckFueSIsIndhaXRGb3JBbGwiLCJleGNlcHRpb25SZXN1bHRzIiwic3luY1Jlc3VsdHMiLCJhc3luY1Jlc3VsdHMiLCJub1dhaXQiLCJkZXBlbmRlbmN5IiwiYmF0Y2hVcGRhdGVzJDMiLCJzZXRCYXRjaGVyJDEiLCJEZWZhdWx0VmFsdWUkNCIsIlJlY29pbFJvb3QkMiIsImlzUmVjb2lsVmFsdWUkNiIsImZyZXNoU25hcHNob3QkMiIsInVzZUdvdG9SZWNvaWxTbmFwc2hvdCQxIiwidXNlUmVjb2lsQ2FsbGJhY2skMSIsInVzZVJlY29pbFNuYXBzaG90JDEiLCJ1c2VSZWNvaWxTdGF0ZSQxIiwidXNlUmVjb2lsU3RhdGVMb2FkYWJsZSQxIiwidXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlciQxIiwidXNlUmVjb2lsVmFsdWUkMSIsInVzZVJlY29pbFZhbHVlTG9hZGFibGUkMSIsInVzZVJlc2V0UmVjb2lsU3RhdGUkMSIsInVzZVNldFJlY29pbFN0YXRlJDEiLCJ1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMkMSIsInVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRCQxIiwibm9XYWl0JDEiLCJ3YWl0Rm9yQWxsJDEiLCJ3YWl0Rm9yQW55JDEiLCJ3YWl0Rm9yTm9uZSQxIiwiUmVjb2lsX2luZGV4IiwidXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290c19VTlNUQUJMRSIsInNlbGVjdG9yIiwiYXRvbUZhbWlseSIsImF0b21DYWNoZSIsImxlZ2FjeUF0b21PcHRpb25zIiwibGVnYWN5QXRvbSIsImF0b21GYW1pbHlEZWZhdWx0IiwibGVnYWN5VmFsdWUiLCJjYWNoZWRBdG9tIiwibmV3QXRvbSIsInNlbGVjdG9yRmFtaWx5IiwiY29uc3RTZWxlY3RvciIsImVycm9yU2VsZWN0b3IiLCJyZWFkT25seVNlbGVjdG9yIiwidXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlcl9VTlNUQUJMRSIsInVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fVU5TVEFCTEUiLCJ1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXNfVU5TVEFCTEUiLCJzbmFwc2hvdF9VTlNUQUJMRSIsIlJlY29pbF9pbmRleF8yIiwiUmVjb2lsX2luZGV4XzQiLCJSZWNvaWxfaW5kZXhfMTMiLCJSZWNvaWxfaW5kZXhfMTUiLCJjcmVhdGVMb2dnZXIiLCJXRUJQQUNLX1ZFUlNJT04iLCJtc2ciLCJkZWJ1ZyIsInVzZSIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiV2Via2l0TGluZUNsYW1wIiwicmVhY3RQcm9wc1JlZ2V4Iiwic3R5bGVkQ29tcG9uZW50SWQiLCJwcm9jZXNzIiwiZW52IiwiUkVBQ1RfQVBQX1NDX0FUVFIiLCJTQ19BVFRSIiwiQm9vbGVhbiIsIlNDX0RJU0FCTEVfU1BFRURZIiwiUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZIiwiZ3JvdXBTaXplcyIsImluZGV4T2ZHcm91cCIsImluc2VydFJ1bGVzIiwiaW5zZXJ0UnVsZSIsImNsZWFyR3JvdXAiLCJkZWxldGVSdWxlIiwiZ2V0R3JvdXAiLCJnZXRSdWxlIiwiUmVnRXhwIiwicmVnaXN0ZXJOYW1lIiwiZ2V0VGFnIiwiaGVhZCIsImNoaWxkTm9kZXMiLCIkIiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsImNzc1J1bGVzIiwiY3NzVGV4dCIsInJ1bGVzIiwiaXNTZXJ2ZXIiLCJ1c2VDU1NPTUluamVjdGlvbiIsImdzIiwibmFtZXMiLCJnZXRBdHRyaWJ1dGUiLCJyZWdpc3RlcklkIiwicmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyIsImFsbG9jYXRlR1NJbnN0YW5jZSIsImhhc05hbWVGb3JJZCIsImNsZWFyTmFtZXMiLCJjbGVhclJ1bGVzIiwiY2xlYXJUYWciLCJhYnMiLCJzdGF0aWNSdWxlc0lkIiwiaXNTdGF0aWMiLCJjb21wb25lbnRJZCIsImJhc2VIYXNoIiwiYmFzZVN0eWxlIiwiZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMiLCJoYXNoIiwicGx1Z2lucyIsImxhc3RJbmRleE9mIiwic3R5bGlzUGx1Z2lucyIsImRpc2FibGVDU1NPTUluamVjdGlvbiIsImRpc2FibGVWZW5kb3JQcmVmaXhlcyIsImdldE5hbWUiLCJfZSIsImF0dHJzIiwicGFyZW50Q29tcG9uZW50SWQiLCJzaG91bGRGb3J3YXJkUHJvcCIsImNvbXBvbmVudFN0eWxlIiwiZm9sZGVkQ29tcG9uZW50SWRzIiwidGhlbWUiLCIkYXMiLCJhcyIsImNsYXNzTmFtZSIsIndpdGhDb21wb25lbnQiLCJfZm9sZGVkRGVmYXVsdFByb3BzIiwid2l0aENvbmZpZyIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsIl9lbWl0U2hlZXRDU1MiLCJnZXRTdHlsZVRhZ3MiLCJzZWFsZWQiLCJnZXRTdHlsZUVsZW1lbnQiLCJub25jZSIsInNlYWwiLCJjb2xsZWN0U3R5bGVzIiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwia2YyIiwia2V5ZnJhbWVzIiwiQ29udGFpbmVyIiwic3R5bGVkIiwiSW5zdGFsbFByb21wdCIsInNob3ciLCJpbnN0YWxsU3RhdGUiLCJzZXRJbnN0YWxsU3RhdGUiLCJpbnN0YWxsUHJvbXB0U3RhdGUiLCJkaXNtaXNzZWQiLCJzZXREaXNtaXNzZWQiLCJwcm9tcHQiLCJ1c2VyQ2hvaWNlIiwieG1sbnMiLCJ2aWV3Qm94IiwiSGVhZGVyIiwiYXVkaW8iLCJBdWRpbyIsImxvZ2dlciIsInBsYXkiLCJpbnRlcnZhbCIsInN0b3BBbmltIiwiY2xlYXJJbnRlcnZhbCIsImdldEVsZW1lbnRCeUlkIiwidHJhbnNmb3JtIiwiQ2xhcEJ1dHRvbiIsImVuYWJsZUJhY2tncm91bmQiLCJhdWRpb0ZpbGVVcmwiLCJsb2NhbEZvcmFnZSIsImxvYWRNcDMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJlbGUiLCJ0b2dnbGUiLCJzZXRJbnRlcnZhbCIsInN0YXJ0QW5pbSIsInNldHVwQXVkaW8iLCJoaWRkZW4iLCJ2aXNpYmlsaXR5Q2hhbmdlIiwibXNIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJsb2FkIiwic2V0dXBTdG9wQXV0b1doZW5IaWRkZW4iLCJkaWFsb2dTaG93bktleSIsIkJ1dHRvbiIsIlN0YXJ0RGlhbG9nIiwic2hvd0RpYWxvZyIsInNldFNob3dEaWFsb2ciLCJBcHAiXSwibWFwcGluZ3MiOiI7d0NBRUEsSUFBSUEsRUFBVSxFQUFRLEtBTWxCQyxFQUFnQixDQUNsQkMsbUJBQW1CLEVBQ25CQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZEMsY0FBYyxFQUNkQyxhQUFhLEVBQ2JDLGlCQUFpQixFQUNqQkMsMEJBQTBCLEVBQzFCQywwQkFBMEIsRUFDMUJDLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxNQUFNLEdBRUpDLEVBQWdCLENBQ2xCQyxNQUFNLEVBQ05DLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxRQUFRLEVBQ1JDLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxPQUFPLEdBU0xDLEVBQWUsQ0FDakIsVUFBWSxFQUNaQyxTQUFTLEVBQ1RqQixjQUFjLEVBQ2RDLGFBQWEsRUFDYkssV0FBVyxFQUNYQyxNQUFNLEdBRUpXLEVBQWUsR0FJbkIsU0FBU0MsRUFBV0MsR0FFbEIsT0FBSXpCLEVBQVEwQixPQUFPRCxHQUNWSixFQUlGRSxFQUFhRSxFQUFvQixXQUFNeEIsRUFWaERzQixFQUFhdkIsRUFBUTJCLFlBaEJLLENBQ3hCLFVBQVksRUFDWkMsUUFBUSxFQUNSdkIsY0FBYyxFQUNkQyxhQUFhLEVBQ2JLLFdBQVcsR0FZYlksRUFBYXZCLEVBQVE2QixNQUFRUixFQVk3QixJQUFJUyxFQUFpQkMsT0FBT0QsZUFDeEJFLEVBQXNCRCxPQUFPQyxvQkFDN0JDLEVBQXdCRixPQUFPRSxzQkFDL0JDLEVBQTJCSCxPQUFPRyx5QkFDbENDLEVBQWlCSixPQUFPSSxlQUN4QkMsRUFBa0JMLE9BQU9mLFVBc0M3QnFCLEVBQU9DLFFBckNQLFNBQVNDLEVBQXFCQyxFQUFpQkMsRUFBaUJDLEdBQzlELEdBQStCLGlCQUFwQkQs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VUFBVSxRQUFiLHFEQUdBLDZDQUNBLGdCQUFDMkQsR0FBRCxDQUNFM0QsVUFBVSwwREFDVnBqQyxRQXpCVixXQUNFa25DLEdBQWMsR0FDZDdtRSxhQUFhMUcsUUFBUW10RSxHQUFnQixPQXFCL0IsVUFPRix1QkFBSzFELFVBQVUsb0RDcENSLFNBQVMrRCxLQUN0QixNQUFNekMsRUFBa0JyZSxHQUFrQnNlLElBWTFDLE9BWEE5cEMsZ0JBQVUsS0FDUnB0QyxPQUFPK21CLGlCQUFpQix1QkFBd0JucUIsSUFDOUMyd0IsR0FBSSxxQkFFSjN3QixFQUFFNEosaUJBR0Z5d0UsRUFBZ0JyNkUsUUFHakIsSUFFRCxnQ0FDRSxnQkFBQzI4RSxHQUFELE1BQ0EsZ0JBQUM5QixHQUFELE1BRUEsdUJBQUs5QixVQUFVLGdCQUNiLGdCQUFDd0MsR0FBRCxTQ2ZSOThFLFlBQ0UsZ0JBQUMsR0FBRCxLQUNFLGdCQUFDcStFLEdBQUQsT0FFRnQ3RSxTQUFTNjVFLGVBQWUsU0FFMUIxcUQsR0FBSSxpQiIsImZpbGUiOiJtYWluLmJhZGIyNWMwOTdkNzk3NmU2NTIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiFcbiAgICBsb2NhbEZvcmFnZSAtLSBPZmZsaW5lIFN0b3JhZ2UsIEltcHJvdmVkXG4gICAgVmVyc2lvbiAxLjkuMFxuICAgIGh0dHBzOi8vbG9jYWxmb3JhZ2UuZ2l0aHViLmlvL2xvY2FsRm9yYWdlXG4gICAgKGMpIDIwMTMtMjAxNyBNb3ppbGxhLCBBcGFjaGUgTGljZW5zZSAyLjBcbiovXG4oZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5sb2NhbGZvcmFnZSA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyAoZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLCBmKX12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcbnZhciBNdXRhdGlvbiA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuXG52YXIgc2NoZWR1bGVEcmFpbjtcblxue1xuICBpZiAoTXV0YXRpb24pIHtcbiAgICB2YXIgY2FsbGVkID0gMDtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb24obmV4dFRpY2spO1xuICAgIHZhciBlbGVtZW50ID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHtcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICB9KTtcbiAgICBzY2hlZHVsZURyYWluID0gZnVuY3Rpb24gKCkge1xuICAgICAgZWxlbWVudC5kYXRhID0gKGNhbGxlZCA9ICsrY2FsbGVkICUgMik7XG4gICAgfTtcbiAgfSBlbHNlIGlmICghZ2xvYmFsLnNldEltbWVkaWF0ZSAmJiB0eXBlb2YgZ2xvYmFsLk1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBjaGFubmVsID0gbmV3IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCgpO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbmV4dFRpY2s7XG4gICAgc2NoZWR1bGVEcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gICAgfTtcbiAgfSBlbHNlIGlmICgnZG9jdW1lbnQnIGluIGdsb2JhbCAmJiAnb25yZWFkeXN0YXRlY2hhbmdlJyBpbiBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBzY2hlZHVsZURyYWluID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICB2YXIgc2NyaXB0RWwgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHRFbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG5leHRUaWNrKCk7XG5cbiAgICAgICAgc2NyaXB0RWwub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgc2NyaXB0RWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHRFbCk7XG4gICAgICAgIHNjcmlwdEVsID0gbnVsbDtcbiAgICAgIH07XG4gICAgICBnbG9iYWwuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHNjcmlwdEVsKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHNjaGVkdWxlRHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRUaW1lb3V0KG5leHRUaWNrLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbnZhciBkcmFpbmluZztcbnZhciBxdWV1ZSA9IFtdO1xuLy9uYW1lZCBuZXh0VGljayBmb3IgbGVzcyBjb25mdXNpbmcgc3RhY2sgdHJhY2VzXG5mdW5jdGlvbiBuZXh0VGljaygpIHtcbiAgZHJhaW5pbmcgPSB0cnVlO1xuICB2YXIgaSwgb2xkUXVldWU7XG4gIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChsZW4pIHtcbiAgICBvbGRRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG4gICAgaSA9IC0xO1xuICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICAgIG9sZFF1ZXVlW2ldKCk7XG4gICAgfVxuICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgfVxuICBkcmFpbmluZyA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGltbWVkaWF0ZTtcbmZ1bmN0aW9uIGltbWVkaWF0ZSh0YXNrKSB7XG4gIGlmIChxdWV1ZS5wdXNoKHRhc2spID09PSAxICYmICFkcmFpbmluZykge1xuICAgIHNjaGVkdWxlRHJhaW4oKTtcbiAgfVxufVxuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcbn0se31dLDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xudmFyIGltbWVkaWF0ZSA9IF9kZXJlcV8oMSk7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBJTlRFUk5BTCgpIHt9XG5cbnZhciBoYW5kbGVycyA9IHt9O1xuXG52YXIgUkVKRUNURUQgPSBbJ1JFSkVDVEVEJ107XG52YXIgRlVMRklMTEVEID0gWydGVUxGSUxMRUQnXTtcbnZhciBQRU5ESU5HID0gWydQRU5ESU5HJ107XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcblxuZnVuY3Rpb24gUHJvbWlzZShyZXNvbHZlcikge1xuICBpZiAodHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVzb2x2ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdGhpcy5zdGF0ZSA9IFBFTkRJTkc7XG4gIHRoaXMucXVldWUgPSBbXTtcbiAgdGhpcy5vdXRjb21lID0gdm9pZCAwO1xuICBpZiAocmVzb2x2ZXIgIT09IElOVEVSTkFMKSB7XG4gICAgc2FmZWx5UmVzb2x2ZVRoZW5hYmxlKHRoaXMsIHJlc29sdmVyKTtcbiAgfVxufVxuXG5Qcm9taXNlLnByb3RvdHlwZVtcImNhdGNoXCJdID0gZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTtcbn07XG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIGlmICh0eXBlb2Ygb25GdWxmaWxsZWQgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5zdGF0ZSA9PT0gRlVMRklMTEVEIHx8XG4gICAgdHlwZW9mIG9uUmVqZWN0ZWQgIT09ICdmdW5jdGlvbicgJiYgdGhpcy5zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKElOVEVSTkFMKTtcbiAgaWYgKHRoaXMuc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICB2YXIgcmVzb2x2ZXIgPSB0aGlzLnN0YXRlID09PSBGVUxGSUxMRUQgPyBvbkZ1bGZpbGxlZCA6IG9uUmVqZWN0ZWQ7XG4gICAgdW53cmFwKHByb21pc2UsIHJlc29sdmVyLCB0aGlzLm91dGNvbWUpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucXVldWUucHVzaChuZXcgUXVldWVJdGVtKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5mdW5jdGlvbiBRdWV1ZUl0ZW0ocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgaWYgKHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMub25GdWxmaWxsZWQgPSBvbkZ1bGZpbGxlZDtcbiAgICB0aGlzLmNhbGxGdWxmaWxsZWQgPSB0aGlzLm90aGVyQ2FsbEZ1bGZpbGxlZDtcbiAgfVxuICBpZiAodHlwZW9mIG9uUmVqZWN0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLm9uUmVqZWN0ZWQgPSBvblJlamVjdGVkO1xuICAgIHRoaXMuY2FsbFJlamVjdGVkID0gdGhpcy5vdGhlckNhbGxSZWplY3RlZDtcbiAgfVxufVxuUXVldWVJdGVtLnByb3RvdHlwZS5jYWxsRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGhhbmRsZXJzLnJlc29sdmUodGhpcy5wcm9taXNlLCB2YWx1ZSk7XG59O1xuUXVldWVJdGVtLnByb3RvdHlwZS5vdGhlckNhbGxGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdW53cmFwKHRoaXMucHJvbWlzZSwgdGhpcy5vbkZ1bGZpbGxlZCwgdmFsdWUpO1xufTtcblF1ZXVlSXRlbS5wcm90b3R5cGUuY2FsbFJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGhhbmRsZXJzLnJlamVjdCh0aGlzLnByb21pc2UsIHZhbHVlKTtcbn07XG5RdWV1ZUl0ZW0ucHJvdG90eXBlLm90aGVyQ2FsbFJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHVud3JhcCh0aGlzLnByb21pc2UsIHRoaXMub25SZWplY3RlZCwgdmFsdWUpO1xufTtcblxuZnVuY3Rpb24gdW53cmFwKHByb21pc2UsIGZ1bmMsIHZhbHVlKSB7XG4gIGltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJldHVyblZhbHVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm5WYWx1ZSA9IGZ1bmModmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBoYW5kbGVycy5yZWplY3QocHJvbWlzZSwgZSk7XG4gICAgfVxuICAgIGlmIChyZXR1cm5WYWx1ZSA9PT0gcHJvbWlzZSkge1xuICAgICAgaGFuZGxlcnMucmVqZWN0KHByb21pc2UsIG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCByZXNvbHZlIHByb21pc2Ugd2l0aCBpdHNlbGYnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXJzLnJlc29sdmUocHJvbWlzZSwgcmV0dXJuVmFsdWUpO1xuICAgIH1cbiAgfSk7XG59XG5cbmhhbmRsZXJzLnJlc29sdmUgPSBmdW5jdGlvbiAoc2VsZiwgdmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoKGdldFRoZW4sIHZhbHVlKTtcbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICByZXR1cm4gaGFuZGxlcnMucmVqZWN0KHNlbGYsIHJlc3VsdC52YWx1ZSk7XG4gIH1cbiAgdmFyIHRoZW5hYmxlID0gcmVzdWx0LnZhbHVlO1xuXG4gIGlmICh0aGVuYWJsZSkge1xuICAgIHNhZmVseVJlc29sdmVUaGVuYWJsZShzZWxmLCB0aGVuYWJsZSk7XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5zdGF0ZSA9IEZVTEZJTExFRDtcbiAgICBzZWxmLm91dGNvbWUgPSB2YWx1ZTtcbiAgICB2YXIgaSA9IC0xO1xuICAgIHZhciBsZW4gPSBzZWxmLnF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgICBzZWxmLnF1ZXVlW2ldLmNhbGxGdWxmaWxsZWQodmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VsZjtcbn07XG5oYW5kbGVycy5yZWplY3QgPSBmdW5jdGlvbiAoc2VsZiwgZXJyb3IpIHtcbiAgc2VsZi5zdGF0ZSA9IFJFSkVDVEVEO1xuICBzZWxmLm91dGNvbWUgPSBlcnJvcjtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGxlbiA9IHNlbGYucXVldWUubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgc2VsZi5xdWV1ZVtpXS5jYWxsUmVqZWN0ZWQoZXJyb3IpO1xuICB9XG4gIHJldHVybiBzZWxmO1xufTtcblxuZnVuY3Rpb24gZ2V0VGhlbihvYmopIHtcbiAgLy8gTWFrZSBzdXJlIHdlIG9ubHkgYWNjZXNzIHRoZSBhY2Nlc3NvciBvbmNlIGFzIHJlcXVpcmVkIGJ5IHRoZSBzcGVjXG4gIHZhciB0aGVuID0gb2JqICYmIG9iai50aGVuO1xuICBpZiAob2JqICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSAmJiB0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiBhcHB5VGhlbigpIHtcbiAgICAgIHRoZW4uYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gc2FmZWx5UmVzb2x2ZVRoZW5hYmxlKHNlbGYsIHRoZW5hYmxlKSB7XG4gIC8vIEVpdGhlciBmdWxmaWxsLCByZWplY3Qgb3IgcmVqZWN0IHdpdGggZXJyb3JcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBvbkVycm9yKHZhbHVlKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIGhhbmRsZXJzLnJlamVjdChzZWxmLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblN1Y2Nlc3ModmFsdWUpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgaGFuZGxlcnMucmVzb2x2ZShzZWxmLCB2YWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlUb1Vud3JhcCgpIHtcbiAgICB0aGVuYWJsZShvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoKHRyeVRvVW53cmFwKTtcbiAgaWYgKHJlc3VsdC5zdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICBvbkVycm9yKHJlc3VsdC52YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5Q2F0Y2goZnVuYywgdmFsdWUpIHtcbiAgdmFyIG91dCA9IHt9O1xuICB0cnkge1xuICAgIG91dC52YWx1ZSA9IGZ1bmModmFsdWUpO1xuICAgIG91dC5zdGF0dXMgPSAnc3VjY2Vzcyc7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvdXQuc3RhdHVzID0gJ2Vycm9yJztcbiAgICBvdXQudmFsdWUgPSBlO1xuICB9XG4gIHJldHVybiBvdXQ7XG59XG5cblByb21pc2UucmVzb2x2ZSA9IHJlc29sdmU7XG5mdW5jdGlvbiByZXNvbHZlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHRoaXMpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGhhbmRsZXJzLnJlc29sdmUobmV3IHRoaXMoSU5URVJOQUwpLCB2YWx1ZSk7XG59XG5cblByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICB2YXIgcHJvbWlzZSA9IG5ldyB0aGlzKElOVEVSTkFMKTtcbiAgcmV0dXJuIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCByZWFzb24pO1xufVxuXG5Qcm9taXNlLmFsbCA9IGFsbDtcbmZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcmFibGUpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgcmV0dXJuIHRoaXMucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ211c3QgYmUgYW4gYXJyYXknKSk7XG4gIH1cblxuICB2YXIgbGVuID0gaXRlcmFibGUubGVuZ3RoO1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIGlmICghbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7XG4gIH1cblxuICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGxlbik7XG4gIHZhciByZXNvbHZlZCA9IDA7XG4gIHZhciBpID0gLTE7XG4gIHZhciBwcm9taXNlID0gbmV3IHRoaXMoSU5URVJOQUwpO1xuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBhbGxSZXNvbHZlcihpdGVyYWJsZVtpXSwgaSk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2U7XG4gIGZ1bmN0aW9uIGFsbFJlc29sdmVyKHZhbHVlLCBpKSB7XG4gICAgc2VsZi5yZXNvbHZlKHZhbHVlKS50aGVuKHJlc29sdmVGcm9tQWxsLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gcmVzb2x2ZUZyb21BbGwob3V0VmFsdWUpIHtcbiAgICAgIHZhbHVlc1tpXSA9IG91dFZhbHVlO1xuICAgICAgaWYgKCsrcmVzb2x2ZWQgPT09IGxlbiAmJiAhY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGhhbmRsZXJzLnJlc29sdmUocHJvbWlzZSwgdmFsdWVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUHJvbWlzZS5yYWNlID0gcmFjZTtcbmZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXJhYmxlKSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgIHJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKCdtdXN0IGJlIGFuIGFycmF5JykpO1xuICB9XG5cbiAgdmFyIGxlbiA9IGl0ZXJhYmxlLmxlbmd0aDtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICBpZiAoIWxlbikge1xuICAgIHJldHVybiB0aGlzLnJlc29sdmUoW10pO1xuICB9XG5cbiAgdmFyIGkgPSAtMTtcbiAgdmFyIHByb21pc2UgPSBuZXcgdGhpcyhJTlRFUk5BTCk7XG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHJlc29sdmVyKGl0ZXJhYmxlW2ldKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZTtcbiAgZnVuY3Rpb24gcmVzb2x2ZXIodmFsdWUpIHtcbiAgICBzZWxmLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICBoYW5kbGVycy5yZXNvbHZlKHByb21pc2UsIHJlc3BvbnNlKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGhhbmRsZXJzLnJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxufSx7XCIxXCI6MX1dLDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuaWYgKHR5cGVvZiBnbG9iYWwuUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykge1xuICBnbG9iYWwuUHJvbWlzZSA9IF9kZXJlcV8oMik7XG59XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxufSx7XCIyXCI6Mn1dLDQ6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIGdldElEQigpIHtcbiAgICAvKiBnbG9iYWwgaW5kZXhlZERCLHdlYmtpdEluZGV4ZWREQixtb3pJbmRleGVkREIsT0luZGV4ZWREQixtc0luZGV4ZWREQiAqL1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5kZXhlZERCICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4ZWREQjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHdlYmtpdEluZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWJraXRJbmRleGVkREI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBtb3pJbmRleGVkREIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbW96SW5kZXhlZERCO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgT0luZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBPSW5kZXhlZERCO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbXNJbmRleGVkREIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbXNJbmRleGVkREI7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG5cbnZhciBpZGIgPSBnZXRJREIoKTtcblxuZnVuY3Rpb24gaXNJbmRleGVkREJWYWxpZCgpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBJbml0aWFsaXplIEluZGV4ZWREQjsgZmFsbCBiYWNrIHRvIHZlbmRvci1wcmVmaXhlZCB2ZXJzaW9uc1xuICAgICAgICAvLyBpZiBuZWVkZWQuXG4gICAgICAgIGlmICghaWRiIHx8ICFpZGIub3Blbikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIG1pbWljIFBvdWNoREIgaGVyZTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gV2UgdGVzdCBmb3Igb3BlbkRhdGFiYXNlIGJlY2F1c2UgSUUgTW9iaWxlIGlkZW50aWZpZXMgaXRzZWxmXG4gICAgICAgIC8vIGFzIFNhZmFyaS4gT2ggdGhlIGx1bHouLi5cbiAgICAgICAgdmFyIGlzU2FmYXJpID0gdHlwZW9mIG9wZW5EYXRhYmFzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgLyhTYWZhcml8aVBob25lfGlQYWR8aVBvZCkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIS9DaHJvbWUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIS9CbGFja0JlcnJ5Ly50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSk7XG5cbiAgICAgICAgdmFyIGhhc0ZldGNoID0gdHlwZW9mIGZldGNoID09PSAnZnVuY3Rpb24nICYmIGZldGNoLnRvU3RyaW5nKCkuaW5kZXhPZignW25hdGl2ZSBjb2RlJykgIT09IC0xO1xuXG4gICAgICAgIC8vIFNhZmFyaSA8MTAuMSBkb2VzIG5vdCBtZWV0IG91ciByZXF1aXJlbWVudHMgZm9yIElEQiBzdXBwb3J0XG4gICAgICAgIC8vIChzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wb3VjaGRiL3BvdWNoZGIvaXNzdWVzLzU1NzIpLlxuICAgICAgICAvLyBTYWZhcmkgMTAuMSBzaGlwcGVkIHdpdGggZmV0Y2gsIHdlIGNhbiB1c2UgdGhhdCB0byBkZXRlY3QgaXQuXG4gICAgICAgIC8vIE5vdGU6IHRoaXMgY3JlYXRlcyBpc3N1ZXMgd2l0aCBgd2luZG93LmZldGNoYCBwb2x5ZmlsbHMgYW5kXG4gICAgICAgIC8vIG92ZXJyaWRlczsgc2VlOlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbG9jYWxGb3JhZ2UvbG9jYWxGb3JhZ2UvaXNzdWVzLzg1NlxuICAgICAgICByZXR1cm4gKCFpc1NhZmFyaSB8fCBoYXNGZXRjaCkgJiYgdHlwZW9mIGluZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgLy8gc29tZSBvdXRkYXRlZCBpbXBsZW1lbnRhdGlvbnMgb2YgSURCIHRoYXQgYXBwZWFyIG9uIFNhbXN1bmdcbiAgICAgICAgLy8gYW5kIEhUQyBBbmRyb2lkIGRldmljZXMgPDQuNCBhcmUgbWlzc2luZyBJREJLZXlSYW5nZVxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2xvY2FsRm9yYWdlL2lzc3Vlcy8xMjhcbiAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9sb2NhbEZvcmFnZS9pc3N1ZXMvMjcyXG4gICAgICAgIHR5cGVvZiBJREJLZXlSYW5nZSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBBYnN0cmFjdHMgY29uc3RydWN0aW5nIGEgQmxvYiBvYmplY3QsIHNvIGl0IGFsc28gd29ya3MgaW4gb2xkZXJcbi8vIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCB0aGUgbmF0aXZlIEJsb2IgY29uc3RydWN0b3IuIChpLmUuXG4vLyBvbGQgUXRXZWJLaXQgdmVyc2lvbnMsIGF0IGxlYXN0KS5cbi8vIEFic3RyYWN0cyBjb25zdHJ1Y3RpbmcgYSBCbG9iIG9iamVjdCwgc28gaXQgYWxzbyB3b3JrcyBpbiBvbGRlclxuLy8gYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHRoZSBuYXRpdmUgQmxvYiBjb25zdHJ1Y3Rvci4gKGkuZS5cbi8vIG9sZCBRdFdlYktpdCB2ZXJzaW9ucywgYXQgbGVhc3QpLlxuZnVuY3Rpb24gY3JlYXRlQmxvYihwYXJ0cywgcHJvcGVydGllcykge1xuICAgIC8qIGdsb2JhbCBCbG9iQnVpbGRlcixNU0Jsb2JCdWlsZGVyLE1vekJsb2JCdWlsZGVyLFdlYktpdEJsb2JCdWlsZGVyICovXG4gICAgcGFydHMgPSBwYXJ0cyB8fCBbXTtcbiAgICBwcm9wZXJ0aWVzID0gcHJvcGVydGllcyB8fCB7fTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gbmV3IEJsb2IocGFydHMsIHByb3BlcnRpZXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUubmFtZSAhPT0gJ1R5cGVFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEJ1aWxkZXIgPSB0eXBlb2YgQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gQmxvYkJ1aWxkZXIgOiB0eXBlb2YgTVNCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNU0Jsb2JCdWlsZGVyIDogdHlwZW9mIE1vekJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1vekJsb2JCdWlsZGVyIDogV2ViS2l0QmxvYkJ1aWxkZXI7XG4gICAgICAgIHZhciBidWlsZGVyID0gbmV3IEJ1aWxkZXIoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgYnVpbGRlci5hcHBlbmQocGFydHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWlsZGVyLmdldEJsb2IocHJvcGVydGllcy50eXBlKTtcbiAgICB9XG59XG5cbi8vIFRoaXMgaXMgQ29tbW9uSlMgYmVjYXVzZSBsaWUgaXMgYW4gZXh0ZXJuYWwgZGVwZW5kZW5jeSwgc28gUm9sbHVwXG4vLyBjYW4ganVzdCBpZ25vcmUgaXQuXG5pZiAodHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gSW4gdGhlIFwibm9wcm9taXNlc1wiIGJ1aWxkIHRoaXMgd2lsbCBqdXN0IHRocm93IGlmIHlvdSBkb24ndCBoYXZlXG4gICAgLy8gYSBnbG9iYWwgcHJvbWlzZSBvYmplY3QsIGJ1dCBpdCB3b3VsZCB0aHJvdyBhbnl3YXkgbGF0ZXIuXG4gICAgX2RlcmVxXygzKTtcbn1cbnZhciBQcm9taXNlJDEgPSBQcm9taXNlO1xuXG5mdW5jdGlvbiBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVUd29DYWxsYmFja3MocHJvbWlzZSwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb21pc2UudGhlbihjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBlcnJvckNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb21pc2VbXCJjYXRjaFwiXShlcnJvckNhbGxiYWNrKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUtleShrZXkpIHtcbiAgICAvLyBDYXN0IHRoZSBrZXkgdG8gYSBzdHJpbmcsIGFzIHRoYXQncyBhbGwgd2UgY2FuIHNldCBhcyBhIGtleS5cbiAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGtleSArICcgdXNlZCBhcyBhIGtleSwgYnV0IGl0IGlzIG5vdCBhIHN0cmluZy4nKTtcbiAgICAgICAga2V5ID0gU3RyaW5nKGtleSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FsbGJhY2soKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgdHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgfVxufVxuXG4vLyBTb21lIGNvZGUgb3JpZ2luYWxseSBmcm9tIGFzeW5jX3N0b3JhZ2UuanMgaW5cbi8vIFtHYWlhXShodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS1iMmcvZ2FpYSkuXG5cbnZhciBERVRFQ1RfQkxPQl9TVVBQT1JUX1NUT1JFID0gJ2xvY2FsLWZvcmFnZS1kZXRlY3QtYmxvYi1zdXBwb3J0JztcbnZhciBzdXBwb3J0c0Jsb2JzID0gdm9pZCAwO1xudmFyIGRiQ29udGV4dHMgPSB7fTtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIFRyYW5zYWN0aW9uIE1vZGVzXG52YXIgUkVBRF9PTkxZID0gJ3JlYWRvbmx5JztcbnZhciBSRUFEX1dSSVRFID0gJ3JlYWR3cml0ZSc7XG5cbi8vIFRyYW5zZm9ybSBhIGJpbmFyeSBzdHJpbmcgdG8gYW4gYXJyYXkgYnVmZmVyLCBiZWNhdXNlIG90aGVyd2lzZVxuLy8gd2VpcmQgc3R1ZmYgaGFwcGVucyB3aGVuIHlvdSB0cnkgdG8gd29yayB3aXRoIHRoZSBiaW5hcnkgc3RyaW5nIGRpcmVjdGx5LlxuLy8gSXQgaXMga25vd24uXG4vLyBGcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQ5Njc2NDcvIChjb250aW51ZXMgb24gbmV4dCBsaW5lKVxuLy8gZW5jb2RlLWRlY29kZS1pbWFnZS13aXRoLWJhc2U2NC1icmVha3MtaW1hZ2UgKDIwMTMtMDQtMjEpXG5mdW5jdGlvbiBfYmluU3RyaW5nVG9BcnJheUJ1ZmZlcihiaW4pIHtcbiAgICB2YXIgbGVuZ3RoID0gYmluLmxlbmd0aDtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKGxlbmd0aCk7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJbaV0gPSBiaW4uY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1Zjtcbn1cblxuLy9cbi8vIEJsb2JzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGFsbCB2ZXJzaW9ucyBvZiBJbmRleGVkREIsIG5vdGFibHlcbi8vIENocm9tZSA8MzcgYW5kIEFuZHJvaWQgPDUuIEluIHRob3NlIHZlcnNpb25zLCBzdG9yaW5nIGEgYmxvYiB3aWxsIHRocm93LlxuLy9cbi8vIFZhcmlvdXMgb3RoZXIgYmxvYiBidWdzIGV4aXN0IGluIENocm9tZSB2MzctNDIgKGluY2x1c2l2ZSkuXG4vLyBEZXRlY3RpbmcgdGhlbSBpcyBleHBlbnNpdmUgYW5kIGNvbmZ1c2luZyB0byB1c2VycywgYW5kIENocm9tZSAzNy00MlxuLy8gaXMgYXQgdmVyeSBsb3cgdXNhZ2Ugd29ybGR3aWRlLCBzbyB3ZSBkbyBhIGhhY2t5IHVzZXJBZ2VudCBjaGVjayBpbnN0ZWFkLlxuLy9cbi8vIGNvbnRlbnQtdHlwZSBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00MDgxMjBcbi8vIDQwNCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDc5MTZcbi8vIEZpbGVSZWFkZXIgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ3ODM2XG4vL1xuLy8gQ29kZSBib3Jyb3dlZCBmcm9tIFBvdWNoREIuIFNlZTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3VjaGRiL3BvdWNoZGIvYmxvYi9tYXN0ZXIvcGFja2FnZXMvbm9kZV9tb2R1bGVzL3BvdWNoZGItYWRhcHRlci1pZGIvc3JjL2Jsb2JTdXBwb3J0LmpzXG4vL1xuZnVuY3Rpb24gX2NoZWNrQmxvYlN1cHBvcnRXaXRob3V0Q2FjaGluZyhpZGIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICB2YXIgdHhuID0gaWRiLnRyYW5zYWN0aW9uKERFVEVDVF9CTE9CX1NVUFBPUlRfU1RPUkUsIFJFQURfV1JJVEUpO1xuICAgICAgICB2YXIgYmxvYiA9IGNyZWF0ZUJsb2IoWycnXSk7XG4gICAgICAgIHR4bi5vYmplY3RTdG9yZShERVRFQ1RfQkxPQl9TVVBQT1JUX1NUT1JFKS5wdXQoYmxvYiwgJ2tleScpO1xuXG4gICAgICAgIHR4bi5vbmFib3J0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB0cmFuc2FjdGlvbiBhYm9ydHMgbm93IGl0cyBkdWUgdG8gbm90IGJlaW5nIGFibGUgdG9cbiAgICAgICAgICAgIC8vIHdyaXRlIHRvIHRoZSBkYXRhYmFzZSwgbGlrZWx5IGR1ZSB0byB0aGUgZGlzayBiZWluZyBmdWxsXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdHhuLm9uY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlZENocm9tZSA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgICAgICAgICAgdmFyIG1hdGNoZWRFZGdlID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLy8pO1xuICAgICAgICAgICAgLy8gTVMgRWRnZSBwcmV0ZW5kcyB0byBiZSBDaHJvbWUgNDI6XG4gICAgICAgICAgICAvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2hoODY5MzAxJTI4dj12cy44NSUyOS5hc3B4XG4gICAgICAgICAgICByZXNvbHZlKG1hdGNoZWRFZGdlIHx8ICFtYXRjaGVkQ2hyb21lIHx8IHBhcnNlSW50KG1hdGNoZWRDaHJvbWVbMV0sIDEwKSA+PSA0Myk7XG4gICAgICAgIH07XG4gICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gZXJyb3IsIHNvIGFzc3VtZSB1bnN1cHBvcnRlZFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBfY2hlY2tCbG9iU3VwcG9ydChpZGIpIHtcbiAgICBpZiAodHlwZW9mIHN1cHBvcnRzQmxvYnMgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZSQxLnJlc29sdmUoc3VwcG9ydHNCbG9icyk7XG4gICAgfVxuICAgIHJldHVybiBfY2hlY2tCbG9iU3VwcG9ydFdpdGhvdXRDYWNoaW5nKGlkYikudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc3VwcG9ydHNCbG9icyA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gc3VwcG9ydHNCbG9icztcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX2RlZmVyUmVhZGluZXNzKGRiSW5mbykge1xuICAgIHZhciBkYkNvbnRleHQgPSBkYkNvbnRleHRzW2RiSW5mby5uYW1lXTtcblxuICAgIC8vIENyZWF0ZSBhIGRlZmVycmVkIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgZGF0YWJhc2Ugb3BlcmF0aW9uLlxuICAgIHZhciBkZWZlcnJlZE9wZXJhdGlvbiA9IHt9O1xuXG4gICAgZGVmZXJyZWRPcGVyYXRpb24ucHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBkZWZlcnJlZE9wZXJhdGlvbi5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgZGVmZXJyZWRPcGVyYXRpb24ucmVqZWN0ID0gcmVqZWN0O1xuICAgIH0pO1xuXG4gICAgLy8gRW5xdWV1ZSB0aGUgZGVmZXJyZWQgb3BlcmF0aW9uLlxuICAgIGRiQ29udGV4dC5kZWZlcnJlZE9wZXJhdGlvbnMucHVzaChkZWZlcnJlZE9wZXJhdGlvbik7XG5cbiAgICAvLyBDaGFpbiBpdHMgcHJvbWlzZSB0byB0aGUgZGF0YWJhc2UgcmVhZGluZXNzLlxuICAgIGlmICghZGJDb250ZXh0LmRiUmVhZHkpIHtcbiAgICAgICAgZGJDb250ZXh0LmRiUmVhZHkgPSBkZWZlcnJlZE9wZXJhdGlvbi5wcm9taXNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRiQ29udGV4dC5kYlJlYWR5ID0gZGJDb250ZXh0LmRiUmVhZHkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmZXJyZWRPcGVyYXRpb24ucHJvbWlzZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfYWR2YW5jZVJlYWRpbmVzcyhkYkluZm8pIHtcbiAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tkYkluZm8ubmFtZV07XG5cbiAgICAvLyBEZXF1ZXVlIGEgZGVmZXJyZWQgb3BlcmF0aW9uLlxuICAgIHZhciBkZWZlcnJlZE9wZXJhdGlvbiA9IGRiQ29udGV4dC5kZWZlcnJlZE9wZXJhdGlvbnMucG9wKCk7XG5cbiAgICAvLyBSZXNvbHZlIGl0cyBwcm9taXNlICh3aGljaCBpcyBwYXJ0IG9mIHRoZSBkYXRhYmFzZSByZWFkaW5lc3NcbiAgICAvLyBjaGFpbiBvZiBwcm9taXNlcykuXG4gICAgaWYgKGRlZmVycmVkT3BlcmF0aW9uKSB7XG4gICAgICAgIGRlZmVycmVkT3BlcmF0aW9uLnJlc29sdmUoKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkT3BlcmF0aW9uLnByb21pc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBfcmVqZWN0UmVhZGluZXNzKGRiSW5mbywgZXJyKSB7XG4gICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbZGJJbmZvLm5hbWVdO1xuXG4gICAgLy8gRGVxdWV1ZSBhIGRlZmVycmVkIG9wZXJhdGlvbi5cbiAgICB2YXIgZGVmZXJyZWRPcGVyYXRpb24gPSBkYkNvbnRleHQuZGVmZXJyZWRPcGVyYXRpb25zLnBvcCgpO1xuXG4gICAgLy8gUmVqZWN0IGl0cyBwcm9taXNlICh3aGljaCBpcyBwYXJ0IG9mIHRoZSBkYXRhYmFzZSByZWFkaW5lc3NcbiAgICAvLyBjaGFpbiBvZiBwcm9taXNlcykuXG4gICAgaWYgKGRlZmVycmVkT3BlcmF0aW9uKSB7XG4gICAgICAgIGRlZmVycmVkT3BlcmF0aW9uLnJlamVjdChlcnIpO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWRPcGVyYXRpb24ucHJvbWlzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRDb25uZWN0aW9uKGRiSW5mbywgdXBncmFkZU5lZWRlZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZGJDb250ZXh0c1tkYkluZm8ubmFtZV0gPSBkYkNvbnRleHRzW2RiSW5mby5uYW1lXSB8fCBjcmVhdGVEYkNvbnRleHQoKTtcblxuICAgICAgICBpZiAoZGJJbmZvLmRiKSB7XG4gICAgICAgICAgICBpZiAodXBncmFkZU5lZWRlZCkge1xuICAgICAgICAgICAgICAgIF9kZWZlclJlYWRpbmVzcyhkYkluZm8pO1xuICAgICAgICAgICAgICAgIGRiSW5mby5kYi5jbG9zZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShkYkluZm8uZGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRiQXJncyA9IFtkYkluZm8ubmFtZV07XG5cbiAgICAgICAgaWYgKHVwZ3JhZGVOZWVkZWQpIHtcbiAgICAgICAgICAgIGRiQXJncy5wdXNoKGRiSW5mby52ZXJzaW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcGVucmVxID0gaWRiLm9wZW4uYXBwbHkoaWRiLCBkYkFyZ3MpO1xuXG4gICAgICAgIGlmICh1cGdyYWRlTmVlZGVkKSB7XG4gICAgICAgICAgICBvcGVucmVxLm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRiID0gb3BlbnJlcS5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoZGJJbmZvLnN0b3JlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm9sZFZlcnNpb24gPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkZWQgd2hlbiBzdXBwb3J0IGZvciBibG9iIHNoaW1zIHdhcyBhZGRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoREVURUNUX0JMT0JfU1VQUE9SVF9TVE9SRSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXgubmFtZSA9PT0gJ0NvbnN0cmFpbnRFcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVGhlIGRhdGFiYXNlIFwiJyArIGRiSW5mby5uYW1lICsgJ1wiJyArICcgaGFzIGJlZW4gdXBncmFkZWQgZnJvbSB2ZXJzaW9uICcgKyBlLm9sZFZlcnNpb24gKyAnIHRvIHZlcnNpb24gJyArIGUubmV3VmVyc2lvbiArICcsIGJ1dCB0aGUgc3RvcmFnZSBcIicgKyBkYkluZm8uc3RvcmVOYW1lICsgJ1wiIGFscmVhZHkgZXhpc3RzLicpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgb3BlbnJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJlamVjdChvcGVucmVxLmVycm9yKTtcbiAgICAgICAgfTtcblxuICAgICAgICBvcGVucmVxLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUob3BlbnJlcS5yZXN1bHQpO1xuICAgICAgICAgICAgX2FkdmFuY2VSZWFkaW5lc3MoZGJJbmZvKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX2dldE9yaWdpbmFsQ29ubmVjdGlvbihkYkluZm8pIHtcbiAgICByZXR1cm4gX2dldENvbm5lY3Rpb24oZGJJbmZvLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIF9nZXRVcGdyYWRlZENvbm5lY3Rpb24oZGJJbmZvKSB7XG4gICAgcmV0dXJuIF9nZXRDb25uZWN0aW9uKGRiSW5mbywgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIF9pc1VwZ3JhZGVOZWVkZWQoZGJJbmZvLCBkZWZhdWx0VmVyc2lvbikge1xuICAgIGlmICghZGJJbmZvLmRiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc05ld1N0b3JlID0gIWRiSW5mby5kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKGRiSW5mby5zdG9yZU5hbWUpO1xuICAgIHZhciBpc0Rvd25ncmFkZSA9IGRiSW5mby52ZXJzaW9uIDwgZGJJbmZvLmRiLnZlcnNpb247XG4gICAgdmFyIGlzVXBncmFkZSA9IGRiSW5mby52ZXJzaW9uID4gZGJJbmZvLmRiLnZlcnNpb247XG5cbiAgICBpZiAoaXNEb3duZ3JhZGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZlcnNpb24gaXMgbm90IHRoZSBkZWZhdWx0IG9uZVxuICAgICAgICAvLyB0aGVuIHdhcm4gZm9yIGltcG9zc2libGUgZG93bmdyYWRlLlxuICAgICAgICBpZiAoZGJJbmZvLnZlcnNpb24gIT09IGRlZmF1bHRWZXJzaW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBkYXRhYmFzZSBcIicgKyBkYkluZm8ubmFtZSArICdcIicgKyBcIiBjYW4ndCBiZSBkb3duZ3JhZGVkIGZyb20gdmVyc2lvbiBcIiArIGRiSW5mby5kYi52ZXJzaW9uICsgJyB0byB2ZXJzaW9uICcgKyBkYkluZm8udmVyc2lvbiArICcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxpZ24gdGhlIHZlcnNpb25zIHRvIHByZXZlbnQgZXJyb3JzLlxuICAgICAgICBkYkluZm8udmVyc2lvbiA9IGRiSW5mby5kYi52ZXJzaW9uO1xuICAgIH1cblxuICAgIGlmIChpc1VwZ3JhZGUgfHwgaXNOZXdTdG9yZSkge1xuICAgICAgICAvLyBJZiB0aGUgc3RvcmUgaXMgbmV3IHRoZW4gaW5jcmVtZW50IHRoZSB2ZXJzaW9uIChpZiBuZWVkZWQpLlxuICAgICAgICAvLyBUaGlzIHdpbGwgdHJpZ2dlciBhbiBcInVwZ3JhZGVuZWVkZWRcIiBldmVudCB3aGljaCBpcyByZXF1aXJlZFxuICAgICAgICAvLyBmb3IgY3JlYXRpbmcgYSBzdG9yZS5cbiAgICAgICAgaWYgKGlzTmV3U3RvcmUpIHtcbiAgICAgICAgICAgIHZhciBpbmNWZXJzaW9uID0gZGJJbmZvLmRiLnZlcnNpb24gKyAxO1xuICAgICAgICAgICAgaWYgKGluY1ZlcnNpb24gPiBkYkluZm8udmVyc2lvbikge1xuICAgICAgICAgICAgICAgIGRiSW5mby52ZXJzaW9uID0gaW5jVmVyc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gZW5jb2RlIGEgYmxvYiBmb3IgaW5kZXhlZGRiIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0IGJsb2JzXG5mdW5jdGlvbiBfZW5jb2RlQmxvYihibG9iKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGJhc2U2NCA9IGJ0b2EoZS50YXJnZXQucmVzdWx0IHx8ICcnKTtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIF9fbG9jYWxfZm9yYWdlX2VuY29kZWRfYmxvYjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBiYXNlNjQsXG4gICAgICAgICAgICAgICAgdHlwZTogYmxvYi50eXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhibG9iKTtcbiAgICB9KTtcbn1cblxuLy8gZGVjb2RlIGFuIGVuY29kZWQgYmxvYlxuZnVuY3Rpb24gX2RlY29kZUJsb2IoZW5jb2RlZEJsb2IpIHtcbiAgICB2YXIgYXJyYXlCdWZmID0gX2JpblN0cmluZ1RvQXJyYXlCdWZmZXIoYXRvYihlbmNvZGVkQmxvYi5kYXRhKSk7XG4gICAgcmV0dXJuIGNyZWF0ZUJsb2IoW2FycmF5QnVmZl0sIHsgdHlwZTogZW5jb2RlZEJsb2IudHlwZSB9KTtcbn1cblxuLy8gaXMgdGhpcyBvbmUgb2Ygb3VyIGZhbmN5IGVuY29kZWQgYmxvYnM/XG5mdW5jdGlvbiBfaXNFbmNvZGVkQmxvYih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5fX2xvY2FsX2ZvcmFnZV9lbmNvZGVkX2Jsb2I7XG59XG5cbi8vIFNwZWNpYWxpemUgdGhlIGRlZmF1bHQgYHJlYWR5KClgIGZ1bmN0aW9uIGJ5IG1ha2luZyBpdCBkZXBlbmRlbnRcbi8vIG9uIHRoZSBjdXJyZW50IGRhdGFiYXNlIG9wZXJhdGlvbnMuIFRodXMsIHRoZSBkcml2ZXIgd2lsbCBiZSBhY3R1YWxseVxuLy8gcmVhZHkgd2hlbiBpdCdzIGJlZW4gaW5pdGlhbGl6ZWQgKGRlZmF1bHQpICphbmQqIHRoZXJlIGFyZSBubyBwZW5kaW5nXG4vLyBvcGVyYXRpb25zIG9uIHRoZSBkYXRhYmFzZSAoaW5pdGlhdGVkIGJ5IHNvbWUgb3RoZXIgaW5zdGFuY2VzKS5cbmZ1bmN0aW9uIF9mdWxseVJlYWR5KGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBzZWxmLl9pbml0UmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbc2VsZi5fZGJJbmZvLm5hbWVdO1xuXG4gICAgICAgIGlmIChkYkNvbnRleHQgJiYgZGJDb250ZXh0LmRiUmVhZHkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYkNvbnRleHQuZGJSZWFkeTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgZXhlY3V0ZVR3b0NhbGxiYWNrcyhwcm9taXNlLCBjYWxsYmFjaywgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBUcnkgdG8gZXN0YWJsaXNoIGEgbmV3IGRiIGNvbm5lY3Rpb24gdG8gcmVwbGFjZSB0aGVcbi8vIGN1cnJlbnQgb25lIHdoaWNoIGlzIGJyb2tlbiAoaS5lLiBleHBlcmllbmNpbmdcbi8vIEludmFsaWRTdGF0ZUVycm9yIHdoaWxlIGNyZWF0aW5nIGEgdHJhbnNhY3Rpb24pLlxuZnVuY3Rpb24gX3RyeVJlY29ubmVjdChkYkluZm8pIHtcbiAgICBfZGVmZXJSZWFkaW5lc3MoZGJJbmZvKTtcblxuICAgIHZhciBkYkNvbnRleHQgPSBkYkNvbnRleHRzW2RiSW5mby5uYW1lXTtcbiAgICB2YXIgZm9yYWdlcyA9IGRiQ29udGV4dC5mb3JhZ2VzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBmb3JhZ2UgPSBmb3JhZ2VzW2ldO1xuICAgICAgICBpZiAoZm9yYWdlLl9kYkluZm8uZGIpIHtcbiAgICAgICAgICAgIGZvcmFnZS5fZGJJbmZvLmRiLmNsb3NlKCk7XG4gICAgICAgICAgICBmb3JhZ2UuX2RiSW5mby5kYiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGJJbmZvLmRiID0gbnVsbDtcblxuICAgIHJldHVybiBfZ2V0T3JpZ2luYWxDb25uZWN0aW9uKGRiSW5mbykudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgZGJJbmZvLmRiID0gZGI7XG4gICAgICAgIGlmIChfaXNVcGdyYWRlTmVlZGVkKGRiSW5mbykpIHtcbiAgICAgICAgICAgIC8vIFJlb3BlbiB0aGUgZGF0YWJhc2UgZm9yIHVwZ3JhZGluZy5cbiAgICAgICAgICAgIHJldHVybiBfZ2V0VXBncmFkZWRDb25uZWN0aW9uKGRiSW5mbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRiO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgIC8vIHN0b3JlIHRoZSBsYXRlc3QgZGIgcmVmZXJlbmNlXG4gICAgICAgIC8vIGluIGNhc2UgdGhlIGRiIHdhcyB1cGdyYWRlZFxuICAgICAgICBkYkluZm8uZGIgPSBkYkNvbnRleHQuZGIgPSBkYjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBmb3JhZ2VzW2ldLl9kYkluZm8uZGIgPSBkYjtcbiAgICAgICAgfVxuICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICBfcmVqZWN0UmVhZGluZXNzKGRiSW5mbywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xufVxuXG4vLyBGRiBkb2Vzbid0IGxpa2UgUHJvbWlzZXMgKG1pY3JvLXRhc2tzKSBhbmQgSUREQiBzdG9yZSBvcGVyYXRpb25zLFxuLy8gc28gd2UgaGF2ZSB0byBkbyBpdCB3aXRoIGNhbGxiYWNrc1xuZnVuY3Rpb24gY3JlYXRlVHJhbnNhY3Rpb24oZGJJbmZvLCBtb2RlLCBjYWxsYmFjaywgcmV0cmllcykge1xuICAgIGlmIChyZXRyaWVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0cmllcyA9IDE7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHR4ID0gZGJJbmZvLmRiLnRyYW5zYWN0aW9uKGRiSW5mby5zdG9yZU5hbWUsIG1vZGUpO1xuICAgICAgICBjYWxsYmFjayhudWxsLCB0eCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChyZXRyaWVzID4gMCAmJiAoIWRiSW5mby5kYiB8fCBlcnIubmFtZSA9PT0gJ0ludmFsaWRTdGF0ZUVycm9yJyB8fCBlcnIubmFtZSA9PT0gJ05vdEZvdW5kRXJyb3InKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkYkluZm8uZGIgfHwgZXJyLm5hbWUgPT09ICdOb3RGb3VuZEVycm9yJyAmJiAhZGJJbmZvLmRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoZGJJbmZvLnN0b3JlTmFtZSkgJiYgZGJJbmZvLnZlcnNpb24gPD0gZGJJbmZvLmRiLnZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGRiIHZlcnNpb24sIHRvIGNyZWF0ZSB0aGUgbmV3IE9iamVjdFN0b3JlXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYkluZm8uZGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiSW5mby52ZXJzaW9uID0gZGJJbmZvLmRiLnZlcnNpb24gKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlb3BlbiB0aGUgZGF0YWJhc2UgZm9yIHVwZ3JhZGluZy5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9nZXRVcGdyYWRlZENvbm5lY3Rpb24oZGJJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RyeVJlY29ubmVjdChkYkluZm8pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihkYkluZm8sIG1vZGUsIGNhbGxiYWNrLCByZXRyaWVzIC0gMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVtcImNhdGNoXCJdKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEYkNvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gUnVubmluZyBsb2NhbEZvcmFnZXMgc2hhcmluZyBhIGRhdGFiYXNlLlxuICAgICAgICBmb3JhZ2VzOiBbXSxcbiAgICAgICAgLy8gU2hhcmVkIGRhdGFiYXNlLlxuICAgICAgICBkYjogbnVsbCxcbiAgICAgICAgLy8gRGF0YWJhc2UgcmVhZGluZXNzIChwcm9taXNlKS5cbiAgICAgICAgZGJSZWFkeTogbnVsbCxcbiAgICAgICAgLy8gRGVmZXJyZWQgb3BlcmF0aW9ucyBvbiB0aGUgZGF0YWJhc2UuXG4gICAgICAgIGRlZmVycmVkT3BlcmF0aW9uczogW11cbiAgICB9O1xufVxuXG4vLyBPcGVuIHRoZSBJbmRleGVkREIgZGF0YWJhc2UgKGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBvbmUgaWYgb25lIGRpZG4ndFxuLy8gcHJldmlvdXNseSBleGlzdCksIHVzaW5nIGFueSBvcHRpb25zIHNldCBpbiB0aGUgY29uZmlnLlxuZnVuY3Rpb24gX2luaXRTdG9yYWdlKG9wdGlvbnMpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGRiSW5mbyA9IHtcbiAgICAgICAgZGI6IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkYkluZm9baV0gPSBvcHRpb25zW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIGRhdGFiYXNlO1xuICAgIHZhciBkYkNvbnRleHQgPSBkYkNvbnRleHRzW2RiSW5mby5uYW1lXTtcblxuICAgIC8vIC4uLm9yIGNyZWF0ZSBhIG5ldyBjb250ZXh0LlxuICAgIGlmICghZGJDb250ZXh0KSB7XG4gICAgICAgIGRiQ29udGV4dCA9IGNyZWF0ZURiQ29udGV4dCgpO1xuICAgICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGNvbnRleHQgaW4gdGhlIGdsb2JhbCBjb250YWluZXIuXG4gICAgICAgIGRiQ29udGV4dHNbZGJJbmZvLm5hbWVdID0gZGJDb250ZXh0O1xuICAgIH1cblxuICAgIC8vIFJlZ2lzdGVyIGl0c2VsZiBhcyBhIHJ1bm5pbmcgbG9jYWxGb3JhZ2UgaW4gdGhlIGN1cnJlbnQgY29udGV4dC5cbiAgICBkYkNvbnRleHQuZm9yYWdlcy5wdXNoKHNlbGYpO1xuXG4gICAgLy8gUmVwbGFjZSB0aGUgZGVmYXVsdCBgcmVhZHkoKWAgZnVuY3Rpb24gd2l0aCB0aGUgc3BlY2lhbGl6ZWQgb25lLlxuICAgIGlmICghc2VsZi5faW5pdFJlYWR5KSB7XG4gICAgICAgIHNlbGYuX2luaXRSZWFkeSA9IHNlbGYucmVhZHk7XG4gICAgICAgIHNlbGYucmVhZHkgPSBfZnVsbHlSZWFkeTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYW4gYXJyYXkgb2YgaW5pdGlhbGl6YXRpb24gc3RhdGVzIG9mIHRoZSByZWxhdGVkIGxvY2FsRm9yYWdlcy5cbiAgICB2YXIgaW5pdFByb21pc2VzID0gW107XG5cbiAgICBmdW5jdGlvbiBpZ25vcmVFcnJvcnMoKSB7XG4gICAgICAgIC8vIERvbid0IGhhbmRsZSBlcnJvcnMgaGVyZSxcbiAgICAgICAgLy8ganVzdCBtYWtlcyBzdXJlIHJlbGF0ZWQgbG9jYWxGb3JhZ2VzIGFyZW4ndCBwZW5kaW5nLlxuICAgICAgICByZXR1cm4gUHJvbWlzZSQxLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRiQ29udGV4dC5mb3JhZ2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBmb3JhZ2UgPSBkYkNvbnRleHQuZm9yYWdlc1tqXTtcbiAgICAgICAgaWYgKGZvcmFnZSAhPT0gc2VsZikge1xuICAgICAgICAgICAgLy8gRG9uJ3Qgd2FpdCBmb3IgaXRzZWxmLi4uXG4gICAgICAgICAgICBpbml0UHJvbWlzZXMucHVzaChmb3JhZ2UuX2luaXRSZWFkeSgpW1wiY2F0Y2hcIl0oaWdub3JlRXJyb3JzKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUYWtlIGEgc25hcHNob3Qgb2YgdGhlIHJlbGF0ZWQgbG9jYWxGb3JhZ2VzLlxuICAgIHZhciBmb3JhZ2VzID0gZGJDb250ZXh0LmZvcmFnZXMuc2xpY2UoMCk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBjb25uZWN0aW9uIHByb2Nlc3Mgb25seSB3aGVuXG4gICAgLy8gYWxsIHRoZSByZWxhdGVkIGxvY2FsRm9yYWdlcyBhcmVuJ3QgcGVuZGluZy5cbiAgICByZXR1cm4gUHJvbWlzZSQxLmFsbChpbml0UHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBkYkluZm8uZGIgPSBkYkNvbnRleHQuZGI7XG4gICAgICAgIC8vIEdldCB0aGUgY29ubmVjdGlvbiBvciBvcGVuIGEgbmV3IG9uZSB3aXRob3V0IHVwZ3JhZGUuXG4gICAgICAgIHJldHVybiBfZ2V0T3JpZ2luYWxDb25uZWN0aW9uKGRiSW5mbyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgZGJJbmZvLmRiID0gZGI7XG4gICAgICAgIGlmIChfaXNVcGdyYWRlTmVlZGVkKGRiSW5mbywgc2VsZi5fZGVmYXVsdENvbmZpZy52ZXJzaW9uKSkge1xuICAgICAgICAgICAgLy8gUmVvcGVuIHRoZSBkYXRhYmFzZSBmb3IgdXBncmFkaW5nLlxuICAgICAgICAgICAgcmV0dXJuIF9nZXRVcGdyYWRlZENvbm5lY3Rpb24oZGJJbmZvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGI7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgZGJJbmZvLmRiID0gZGJDb250ZXh0LmRiID0gZGI7XG4gICAgICAgIHNlbGYuX2RiSW5mbyA9IGRiSW5mbztcbiAgICAgICAgLy8gU2hhcmUgdGhlIGZpbmFsIGNvbm5lY3Rpb24gYW1vbmdzdCByZWxhdGVkIGxvY2FsRm9yYWdlcy5cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBmb3JhZ2VzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICB2YXIgZm9yYWdlID0gZm9yYWdlc1trXTtcbiAgICAgICAgICAgIGlmIChmb3JhZ2UgIT09IHNlbGYpIHtcbiAgICAgICAgICAgICAgICAvLyBTZWxmIGlzIGFscmVhZHkgdXAtdG8tZGF0ZS5cbiAgICAgICAgICAgICAgICBmb3JhZ2UuX2RiSW5mby5kYiA9IGRiSW5mby5kYjtcbiAgICAgICAgICAgICAgICBmb3JhZ2UuX2RiSW5mby52ZXJzaW9uID0gZGJJbmZvLnZlcnNpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SXRlbShrZXksIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfT05MWSwgZnVuY3Rpb24gKGVyciwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzZWxmLl9kYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlLmdldChrZXkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzRW5jb2RlZEJsb2IodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBfZGVjb2RlQmxvYih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXEuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBJdGVyYXRlIG92ZXIgYWxsIGl0ZW1zIHN0b3JlZCBpbiBkYXRhYmFzZS5cbmZ1bmN0aW9uIGl0ZXJhdGUoaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX09OTFksIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBzdG9yZS5vcGVuQ3Vyc29yKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVyYXRpb25OdW1iZXIgPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gcmVxLnJlc3VsdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnNvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGN1cnNvci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2lzRW5jb2RlZEJsb2IodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gX2RlY29kZUJsb2IodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IodmFsdWUsIGN1cnNvci5rZXksIGl0ZXJhdGlvbk51bWJlcisrKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGl0ZXJhdG9yIGNhbGxiYWNrIHJldHVybnMgYW55XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKG5vbi1gdW5kZWZpbmVkYCkgdmFsdWUsIHRoZW4gd2Ugc3RvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBpdGVyYXRpb24gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcltcImNvbnRpbnVlXCJdKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVxLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcblxuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBzZXRJdGVtKGtleSwgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgZGJJbmZvO1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBpZiAodG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEJsb2JdJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBfY2hlY2tCbG9iU3VwcG9ydChkYkluZm8uZGIpLnRoZW4oZnVuY3Rpb24gKGJsb2JTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChibG9iU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfZW5jb2RlQmxvYih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfV1JJVEUsIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlYXNvbiB3ZSBkb24ndCBfc2F2ZV8gbnVsbCBpcyBiZWNhdXNlIElFIDEwIGRvZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IHN1cHBvcnQgc2F2aW5nIHRoZSBgbnVsbGAgdHlwZSBpbiBJbmRleGVkREIuIEhvd1xuICAgICAgICAgICAgICAgICAgICAvLyBpcm9uaWMsIGdpdmVuIHRoZSBidWcgYmVsb3chXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvbG9jYWxGb3JhZ2UvaXNzdWVzLzE2MVxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlLnB1dCh2YWx1ZSwga2V5KTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FzdCB0byB1bmRlZmluZWQgc28gdGhlIHZhbHVlIHBhc3NlZCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGJhY2svcHJvbWlzZSBpcyB0aGUgc2FtZSBhcyB3aGF0IG9uZSB3b3VsZCBnZXQgb3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvZiBgZ2V0SXRlbSgpYCBsYXRlci4gVGhpcyBsZWFkcyB0byBzb21lIHdlaXJkbmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gKHNldEl0ZW0oJ2ZvbycsIHVuZGVmaW5lZCkgd2lsbCByZXR1cm4gYG51bGxgKSwgYnV0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIG5vdCBteSBmYXVsdCBsb2NhbFN0b3JhZ2UgaXMgb3VyIGJhc2VsaW5lIGFuZCB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHdlaXJkLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmFib3J0ID0gdHJhbnNhY3Rpb24ub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnIgPSByZXEuZXJyb3IgPyByZXEuZXJyb3IgOiByZXEudHJhbnNhY3Rpb24uZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSXRlbShrZXksIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfV1JJVEUsIGZ1bmN0aW9uIChlcnIsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc2VsZi5fZGJJbmZvLnN0b3JlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHVzZSBhIEdydW50IHRhc2sgdG8gbWFrZSB0aGlzIHNhZmUgZm9yIElFIGFuZCBzb21lXG4gICAgICAgICAgICAgICAgICAgIC8vIHZlcnNpb25zIG9mIEFuZHJvaWQgKGluY2x1ZGluZyB0aG9zZSB1c2VkIGJ5IENvcmRvdmEpLlxuICAgICAgICAgICAgICAgICAgICAvLyBOb3JtYWxseSBJRSB3b24ndCBsaWtlIGAuZGVsZXRlKClgIGFuZCB3aWxsIGluc2lzdCBvblxuICAgICAgICAgICAgICAgICAgICAvLyB1c2luZyBgWydkZWxldGUnXSgpYCwgYnV0IHdlIGhhdmUgYSBidWlsZCBzdGVwIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgLy8gZml4ZXMgdGhpcyBmb3IgdXMgbm93LlxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gc3RvcmVbXCJkZWxldGVcIl0oa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlcS5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3Qgd2lsbCBiZSBhbHNvIGJlIGFib3J0ZWQgaWYgd2UndmUgZXhjZWVkZWQgb3VyIHN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgICAgLy8gc3BhY2UuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gcmVxLmVycm9yID8gcmVxLmVycm9yIDogcmVxLnRyYW5zYWN0aW9uLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGNsZWFyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3JlYXRlVHJhbnNhY3Rpb24oc2VsZi5fZGJJbmZvLCBSRUFEX1dSSVRFLCBmdW5jdGlvbiAoZXJyLCB0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHNlbGYuX2RiSW5mby5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gc3RvcmUuY2xlYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLm9uYWJvcnQgPSB0cmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVyciA9IHJlcS5lcnJvciA/IHJlcS5lcnJvciA6IHJlcS50cmFuc2FjdGlvbi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBsZW5ndGgoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfT05MWSwgZnVuY3Rpb24gKGVyciwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzZWxmLl9kYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcSA9IHN0b3JlLmNvdW50KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVxLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVxLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24ga2V5KG4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKG4gPCAwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjcmVhdGVUcmFuc2FjdGlvbihzZWxmLl9kYkluZm8sIFJFQURfT05MWSwgZnVuY3Rpb24gKGVyciwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RvcmUgPSB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShzZWxmLl9kYkluZm8uc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkdmFuY2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBzdG9yZS5vcGVuS2V5Q3Vyc29yKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJzb3IgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIG1lYW5zIHRoZXJlIHdlcmVuJ3QgZW5vdWdoIGtleXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdGhlIGZpcnN0IGtleSwgcmV0dXJuIGl0IGlmIHRoYXQncyB3aGF0IHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3YW50ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjdXJzb3Iua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhZHZhbmNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGFzayB0aGUgY3Vyc29yIHRvIHNraXAgYWhlYWQgblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZWNvcmRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvci5hZHZhbmNlKG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gd2UgZ2V0IGhlcmUsIHdlJ3ZlIGdvdCB0aGUgbnRoIGtleS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjdXJzb3Iua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QocmVxLmVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24ga2V5cyhjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNyZWF0ZVRyYW5zYWN0aW9uKHNlbGYuX2RiSW5mbywgUkVBRF9PTkxZLCBmdW5jdGlvbiAoZXJyLCB0cmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdG9yZSA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHNlbGYuX2RiSW5mby5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxID0gc3RvcmUub3BlbktleUN1cnNvcigpO1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vyc29yID0gcmVxLnJlc3VsdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGtleXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGN1cnNvci5rZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yW1wiY29udGludWVcIl0oKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXEuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBkcm9wSW5zdGFuY2Uob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGdldENhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB2YXIgY3VycmVudENvbmZpZyA9IHRoaXMuY29uZmlnKCk7XG4gICAgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zICE9PSAnZnVuY3Rpb24nICYmIG9wdGlvbnMgfHwge307XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5uYW1lID0gb3B0aW9ucy5uYW1lIHx8IGN1cnJlbnRDb25maWcubmFtZTtcbiAgICAgICAgb3B0aW9ucy5zdG9yZU5hbWUgPSBvcHRpb25zLnN0b3JlTmFtZSB8fCBjdXJyZW50Q29uZmlnLnN0b3JlTmFtZTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2U7XG4gICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgcHJvbWlzZSA9IFByb21pc2UkMS5yZWplY3QoJ0ludmFsaWQgYXJndW1lbnRzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlzQ3VycmVudERiID0gb3B0aW9ucy5uYW1lID09PSBjdXJyZW50Q29uZmlnLm5hbWUgJiYgc2VsZi5fZGJJbmZvLmRiO1xuXG4gICAgICAgIHZhciBkYlByb21pc2UgPSBpc0N1cnJlbnREYiA/IFByb21pc2UkMS5yZXNvbHZlKHNlbGYuX2RiSW5mby5kYikgOiBfZ2V0T3JpZ2luYWxDb25uZWN0aW9uKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgICAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tvcHRpb25zLm5hbWVdO1xuICAgICAgICAgICAgdmFyIGZvcmFnZXMgPSBkYkNvbnRleHQuZm9yYWdlcztcbiAgICAgICAgICAgIGRiQ29udGV4dC5kYiA9IGRiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb3JhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZm9yYWdlc1tpXS5fZGJJbmZvLmRiID0gZGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy5zdG9yZU5hbWUpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSBkYlByb21pc2UudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgICAgICAgICBfZGVmZXJSZWFkaW5lc3Mob3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGJDb250ZXh0ID0gZGJDb250ZXh0c1tvcHRpb25zLm5hbWVdO1xuICAgICAgICAgICAgICAgIHZhciBmb3JhZ2VzID0gZGJDb250ZXh0LmZvcmFnZXM7XG5cbiAgICAgICAgICAgICAgICBkYi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9yYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm9yYWdlID0gZm9yYWdlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yYWdlLl9kYkluZm8uZGIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBkcm9wREJQcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBpZGIuZGVsZXRlRGF0YWJhc2Uob3B0aW9ucy5uYW1lKTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25lcnJvciA9IHJlcS5vbmJsb2NrZWQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGIgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGIgPSByZXEucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGIpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyb3BEQlByb21pc2UudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGJDb250ZXh0LmRiID0gZGI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9yYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9mb3JhZ2UgPSBmb3JhZ2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2FkdmFuY2VSZWFkaW5lc3MoX2ZvcmFnZS5fZGJJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAoX3JlamVjdFJlYWRpbmVzcyhvcHRpb25zLCBlcnIpIHx8IFByb21pc2UkMS5yZXNvbHZlKCkpW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge30pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UgPSBkYlByb21pc2UudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMob3B0aW9ucy5zdG9yZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3VmVyc2lvbiA9IGRiLnZlcnNpb24gKyAxO1xuXG4gICAgICAgICAgICAgICAgX2RlZmVyUmVhZGluZXNzKG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGRiQ29udGV4dCA9IGRiQ29udGV4dHNbb3B0aW9ucy5uYW1lXTtcbiAgICAgICAgICAgICAgICB2YXIgZm9yYWdlcyA9IGRiQ29udGV4dC5mb3JhZ2VzO1xuXG4gICAgICAgICAgICAgICAgZGIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcmFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcmFnZSA9IGZvcmFnZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGZvcmFnZS5fZGJJbmZvLmRiID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZm9yYWdlLl9kYkluZm8udmVyc2lvbiA9IG5ld1ZlcnNpb247XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGRyb3BPYmplY3RQcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXEgPSBpZGIub3BlbihvcHRpb25zLm5hbWUsIG5ld1ZlcnNpb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRiID0gcmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRiID0gcmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmRlbGV0ZU9iamVjdFN0b3JlKG9wdGlvbnMuc3RvcmVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICByZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRiID0gcmVxLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRiKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBkcm9wT2JqZWN0UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAgICAgICAgICAgICBkYkNvbnRleHQuZGIgPSBkYjtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmb3JhZ2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2ZvcmFnZTIgPSBmb3JhZ2VzW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2ZvcmFnZTIuX2RiSW5mby5kYiA9IGRiO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2FkdmFuY2VSZWFkaW5lc3MoX2ZvcmFnZTIuX2RiSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVtcImNhdGNoXCJdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgKF9yZWplY3RSZWFkaW5lc3Mob3B0aW9ucywgZXJyKSB8fCBQcm9taXNlJDEucmVzb2x2ZSgpKVtcImNhdGNoXCJdKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgYXN5bmNTdG9yYWdlID0ge1xuICAgIF9kcml2ZXI6ICdhc3luY1N0b3JhZ2UnLFxuICAgIF9pbml0U3RvcmFnZTogX2luaXRTdG9yYWdlLFxuICAgIF9zdXBwb3J0OiBpc0luZGV4ZWREQlZhbGlkKCksXG4gICAgaXRlcmF0ZTogaXRlcmF0ZSxcbiAgICBnZXRJdGVtOiBnZXRJdGVtLFxuICAgIHNldEl0ZW06IHNldEl0ZW0sXG4gICAgcmVtb3ZlSXRlbTogcmVtb3ZlSXRlbSxcbiAgICBjbGVhcjogY2xlYXIsXG4gICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAga2V5OiBrZXksXG4gICAga2V5czoga2V5cyxcbiAgICBkcm9wSW5zdGFuY2U6IGRyb3BJbnN0YW5jZVxufTtcblxuZnVuY3Rpb24gaXNXZWJTUUxWYWxpZCgpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9wZW5EYXRhYmFzZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLy8gU2FkbHksIHRoZSBiZXN0IHdheSB0byBzYXZlIGJpbmFyeSBkYXRhIGluIFdlYlNRTC9sb2NhbFN0b3JhZ2UgaXMgc2VyaWFsaXppbmdcbi8vIGl0IHRvIEJhc2U2NCwgc28gdGhpcyBpcyBob3cgd2Ugc3RvcmUgaXQgdG8gcHJldmVudCB2ZXJ5IHN0cmFuZ2UgZXJyb3JzIHdpdGggbGVzc1xuLy8gdmVyYm9zZSB3YXlzIG9mIGJpbmFyeSA8LT4gc3RyaW5nIGRhdGEgc3RvcmFnZS5cbnZhciBCQVNFX0NIQVJTID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nO1xuXG52YXIgQkxPQl9UWVBFX1BSRUZJWCA9ICd+fmxvY2FsX2ZvcmFnZV90eXBlfic7XG52YXIgQkxPQl9UWVBFX1BSRUZJWF9SRUdFWCA9IC9efn5sb2NhbF9mb3JhZ2VfdHlwZX4oW15+XSspfi87XG5cbnZhciBTRVJJQUxJWkVEX01BUktFUiA9ICdfX2xmc2NfXzonO1xudmFyIFNFUklBTElaRURfTUFSS0VSX0xFTkdUSCA9IFNFUklBTElaRURfTUFSS0VSLmxlbmd0aDtcblxuLy8gT01HIHRoZSBzZXJpYWxpemF0aW9ucyFcbnZhciBUWVBFX0FSUkFZQlVGRkVSID0gJ2FyYmYnO1xudmFyIFRZUEVfQkxPQiA9ICdibG9iJztcbnZhciBUWVBFX0lOVDhBUlJBWSA9ICdzaTA4JztcbnZhciBUWVBFX1VJTlQ4QVJSQVkgPSAndWkwOCc7XG52YXIgVFlQRV9VSU5UOENMQU1QRURBUlJBWSA9ICd1aWM4JztcbnZhciBUWVBFX0lOVDE2QVJSQVkgPSAnc2kxNic7XG52YXIgVFlQRV9JTlQzMkFSUkFZID0gJ3NpMzInO1xudmFyIFRZUEVfVUlOVDE2QVJSQVkgPSAndXIxNic7XG52YXIgVFlQRV9VSU5UMzJBUlJBWSA9ICd1aTMyJztcbnZhciBUWVBFX0ZMT0FUMzJBUlJBWSA9ICdmbDMyJztcbnZhciBUWVBFX0ZMT0FUNjRBUlJBWSA9ICdmbDY0JztcbnZhciBUWVBFX1NFUklBTElaRURfTUFSS0VSX0xFTkdUSCA9IFNFUklBTElaRURfTUFSS0VSX0xFTkdUSCArIFRZUEVfQVJSQVlCVUZGRVIubGVuZ3RoO1xuXG52YXIgdG9TdHJpbmckMSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnVmZmVyKHNlcmlhbGl6ZWRTdHJpbmcpIHtcbiAgICAvLyBGaWxsIHRoZSBzdHJpbmcgaW50byBhIEFycmF5QnVmZmVyLlxuICAgIHZhciBidWZmZXJMZW5ndGggPSBzZXJpYWxpemVkU3RyaW5nLmxlbmd0aCAqIDAuNzU7XG4gICAgdmFyIGxlbiA9IHNlcmlhbGl6ZWRTdHJpbmcubGVuZ3RoO1xuICAgIHZhciBpO1xuICAgIHZhciBwID0gMDtcbiAgICB2YXIgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoc2VyaWFsaXplZFN0cmluZ1tzZXJpYWxpemVkU3RyaW5nLmxlbmd0aCAtIDFdID09PSAnPScpIHtcbiAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICAgIGlmIChzZXJpYWxpemVkU3RyaW5nW3NlcmlhbGl6ZWRTdHJpbmcubGVuZ3RoIC0gMl0gPT09ICc9Jykge1xuICAgICAgICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCk7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICBlbmNvZGVkMSA9IEJBU0VfQ0hBUlMuaW5kZXhPZihzZXJpYWxpemVkU3RyaW5nW2ldKTtcbiAgICAgICAgZW5jb2RlZDIgPSBCQVNFX0NIQVJTLmluZGV4T2Yoc2VyaWFsaXplZFN0cmluZ1tpICsgMV0pO1xuICAgICAgICBlbmNvZGVkMyA9IEJBU0VfQ0hBUlMuaW5kZXhPZihzZXJpYWxpemVkU3RyaW5nW2kgKyAyXSk7XG4gICAgICAgIGVuY29kZWQ0ID0gQkFTRV9DSEFSUy5pbmRleE9mKHNlcmlhbGl6ZWRTdHJpbmdbaSArIDNdKTtcblxuICAgICAgICAvKmpzbGludCBiaXR3aXNlOiB0cnVlICovXG4gICAgICAgIGJ5dGVzW3ArK10gPSBlbmNvZGVkMSA8PCAyIHwgZW5jb2RlZDIgPj4gNDtcbiAgICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMiAmIDE1KSA8PCA0IHwgZW5jb2RlZDMgPj4gMjtcbiAgICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMyAmIDMpIDw8IDYgfCBlbmNvZGVkNCAmIDYzO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyO1xufVxuXG4vLyBDb252ZXJ0cyBhIGJ1ZmZlciB0byBhIHN0cmluZyB0byBzdG9yZSwgc2VyaWFsaXplZCwgaW4gdGhlIGJhY2tlbmRcbi8vIHN0b3JhZ2UgbGlicmFyeS5cbmZ1bmN0aW9uIGJ1ZmZlclRvU3RyaW5nKGJ1ZmZlcikge1xuICAgIC8vIGJhc2U2NC1hcnJheWJ1ZmZlclxuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgdmFyIGJhc2U2NFN0cmluZyA9ICcnO1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIC8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cbiAgICAgICAgYmFzZTY0U3RyaW5nICs9IEJBU0VfQ0hBUlNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICAgIGJhc2U2NFN0cmluZyArPSBCQVNFX0NIQVJTWyhieXRlc1tpXSAmIDMpIDw8IDQgfCBieXRlc1tpICsgMV0gPj4gNF07XG4gICAgICAgIGJhc2U2NFN0cmluZyArPSBCQVNFX0NIQVJTWyhieXRlc1tpICsgMV0gJiAxNSkgPDwgMiB8IGJ5dGVzW2kgKyAyXSA+PiA2XTtcbiAgICAgICAgYmFzZTY0U3RyaW5nICs9IEJBU0VfQ0hBUlNbYnl0ZXNbaSArIDJdICYgNjNdO1xuICAgIH1cblxuICAgIGlmIChieXRlcy5sZW5ndGggJSAzID09PSAyKSB7XG4gICAgICAgIGJhc2U2NFN0cmluZyA9IGJhc2U2NFN0cmluZy5zdWJzdHJpbmcoMCwgYmFzZTY0U3RyaW5nLmxlbmd0aCAtIDEpICsgJz0nO1xuICAgIH0gZWxzZSBpZiAoYnl0ZXMubGVuZ3RoICUgMyA9PT0gMSkge1xuICAgICAgICBiYXNlNjRTdHJpbmcgPSBiYXNlNjRTdHJpbmcuc3Vic3RyaW5nKDAsIGJhc2U2NFN0cmluZy5sZW5ndGggLSAyKSArICc9PSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NFN0cmluZztcbn1cblxuLy8gU2VyaWFsaXplIGEgdmFsdWUsIGFmdGVyd2FyZHMgZXhlY3V0aW5nIGEgY2FsbGJhY2sgKHdoaWNoIHVzdWFsbHlcbi8vIGluc3RydWN0cyB0aGUgYHNldEl0ZW0oKWAgY2FsbGJhY2svcHJvbWlzZSB0byBiZSBleGVjdXRlZCkuIFRoaXMgaXMgaG93XG4vLyB3ZSBzdG9yZSBiaW5hcnkgZGF0YSB3aXRoIGxvY2FsU3RvcmFnZS5cbmZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgdmFsdWVUeXBlID0gJyc7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlVHlwZSA9IHRvU3RyaW5nJDEuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQ2Fubm90IHVzZSBgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcmAgb3Igc3VjaCBoZXJlLCBhcyB0aGVzZVxuICAgIC8vIGNoZWNrcyBmYWlsIHdoZW4gcnVubmluZyB0aGUgdGVzdHMgdXNpbmcgY2FzcGVyLmpzLi4uXG4gICAgLy9cbiAgICAvLyBUT0RPOiBTZWUgd2h5IHRob3NlIHRlc3RzIGZhaWwgYW5kIHVzZSBhIGJldHRlciBzb2x1dGlvbi5cbiAgICBpZiAodmFsdWUgJiYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyB8fCB2YWx1ZS5idWZmZXIgJiYgdG9TdHJpbmckMS5jYWxsKHZhbHVlLmJ1ZmZlcikgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpKSB7XG4gICAgICAgIC8vIENvbnZlcnQgYmluYXJ5IGFycmF5cyB0byBhIHN0cmluZyBhbmQgcHJlZml4IHRoZSBzdHJpbmcgd2l0aFxuICAgICAgICAvLyBhIHNwZWNpYWwgbWFya2VyLlxuICAgICAgICB2YXIgYnVmZmVyO1xuICAgICAgICB2YXIgbWFya2VyID0gU0VSSUFMSVpFRF9NQVJLRVI7XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IHZhbHVlO1xuICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfQVJSQVlCVUZGRVI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIgPSB2YWx1ZS5idWZmZXI7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEludDhBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfSU5UOEFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IFVpbnQ4QXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX1VJTlQ4QVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX1VJTlQ4Q0xBTVBFREFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEludDE2QXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX0lOVDE2QVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgVWludDE2QXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX1VJTlQxNkFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEludDMyQXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX0lOVDMyQVJSQVk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgVWludDMyQXJyYXldJykge1xuICAgICAgICAgICAgICAgIG1hcmtlciArPSBUWVBFX1VJTlQzMkFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfRkxPQVQzMkFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyICs9IFRZUEVfRkxPQVQ2NEFSUkFZO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgdHlwZSBmb3IgQmluYXJ5QXJyYXknKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhtYXJrZXIgKyBidWZmZXJUb1N0cmluZyhidWZmZXIpKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgQmxvYl0nKSB7XG4gICAgICAgIC8vIENvbnZlciB0aGUgYmxvYiB0byBhIGJpbmFyeUFycmF5IGFuZCB0aGVuIHRvIGEgc3RyaW5nLlxuICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBCYWNrd2FyZHMtY29tcGF0aWJsZSBwcmVmaXggZm9yIHRoZSBibG9iIHR5cGUuXG4gICAgICAgICAgICB2YXIgc3RyID0gQkxPQl9UWVBFX1BSRUZJWCArIHZhbHVlLnR5cGUgKyAnficgKyBidWZmZXJUb1N0cmluZyh0aGlzLnJlc3VsdCk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKFNFUklBTElaRURfTUFSS0VSICsgVFlQRV9CTE9CICsgc3RyKTtcbiAgICAgICAgfTtcblxuICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2soSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkbid0IGNvbnZlcnQgdmFsdWUgaW50byBhIEpTT04gc3RyaW5nOiBcIiwgdmFsdWUpO1xuXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gRGVzZXJpYWxpemUgZGF0YSB3ZSd2ZSBpbnNlcnRlZCBpbnRvIGEgdmFsdWUgY29sdW1uL2ZpZWxkLiBXZSBwbGFjZVxuLy8gc3BlY2lhbCBtYXJrZXJzIGludG8gb3VyIHN0cmluZ3MgdG8gbWFyayB0aGVtIGFzIGVuY29kZWQ7IHRoaXMgaXNuJ3Rcbi8vIGFzIG5pY2UgYXMgYSBtZXRhIGZpZWxkLCBidXQgaXQncyB0aGUgb25seSBzYW5lIHRoaW5nIHdlIGNhbiBkbyB3aGlsc3Rcbi8vIGtlZXBpbmcgbG9jYWxTdG9yYWdlIHN1cHBvcnQgaW50YWN0LlxuLy9cbi8vIE9mdGVudGltZXMgdGhpcyB3aWxsIGp1c3QgZGVzZXJpYWxpemUgSlNPTiBjb250ZW50LCBidXQgaWYgd2UgaGF2ZSBhXG4vLyBzcGVjaWFsIG1hcmtlciAoU0VSSUFMSVpFRF9NQVJLRVIsIGRlZmluZWQgYWJvdmUpLCB3ZSB3aWxsIGV4dHJhY3Rcbi8vIHNvbWUga2luZCBvZiBhcnJheWJ1ZmZlci9iaW5hcnkgZGF0YS90eXBlZCBhcnJheSBvdXQgb2YgdGhlIHN0cmluZy5cbmZ1bmN0aW9uIGRlc2VyaWFsaXplKHZhbHVlKSB7XG4gICAgLy8gSWYgd2UgaGF2ZW4ndCBtYXJrZWQgdGhpcyBzdHJpbmcgYXMgYmVpbmcgc3BlY2lhbGx5IHNlcmlhbGl6ZWQgKGkuZS5cbiAgICAvLyBzb21ldGhpbmcgb3RoZXIgdGhhbiBzZXJpYWxpemVkIEpTT04pLCB3ZSBjYW4ganVzdCByZXR1cm4gaXQgYW5kIGJlXG4gICAgLy8gZG9uZSB3aXRoIGl0LlxuICAgIGlmICh2YWx1ZS5zdWJzdHJpbmcoMCwgU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RIKSAhPT0gU0VSSUFMSVpFRF9NQVJLRVIpIHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBkZWFscyB3aXRoIGRlc2VyaWFsaXppbmcgc29tZSBraW5kIG9mIEJsb2Igb3JcbiAgICAvLyBUeXBlZEFycmF5LiBGaXJzdCB3ZSBzZXBhcmF0ZSBvdXQgdGhlIHR5cGUgb2YgZGF0YSB3ZSdyZSBkZWFsaW5nXG4gICAgLy8gd2l0aCBmcm9tIHRoZSBkYXRhIGl0c2VsZi5cbiAgICB2YXIgc2VyaWFsaXplZFN0cmluZyA9IHZhbHVlLnN1YnN0cmluZyhUWVBFX1NFUklBTElaRURfTUFSS0VSX0xFTkdUSCk7XG4gICAgdmFyIHR5cGUgPSB2YWx1ZS5zdWJzdHJpbmcoU0VSSUFMSVpFRF9NQVJLRVJfTEVOR1RILCBUWVBFX1NFUklBTElaRURfTUFSS0VSX0xFTkdUSCk7XG5cbiAgICB2YXIgYmxvYlR5cGU7XG4gICAgLy8gQmFja3dhcmRzLWNvbXBhdGlibGUgYmxvYiB0eXBlIHNlcmlhbGl6YXRpb24gc3RyYXRlZ3kuXG4gICAgLy8gREJzIGNyZWF0ZWQgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBsb2NhbEZvcmFnZSB3aWxsIHNpbXBseSBub3QgaGF2ZSB0aGUgYmxvYiB0eXBlLlxuICAgIGlmICh0eXBlID09PSBUWVBFX0JMT0IgJiYgQkxPQl9UWVBFX1BSRUZJWF9SRUdFWC50ZXN0KHNlcmlhbGl6ZWRTdHJpbmcpKSB7XG4gICAgICAgIHZhciBtYXRjaGVyID0gc2VyaWFsaXplZFN0cmluZy5tYXRjaChCTE9CX1RZUEVfUFJFRklYX1JFR0VYKTtcbiAgICAgICAgYmxvYlR5cGUgPSBtYXRjaGVyWzFdO1xuICAgICAgICBzZXJpYWxpemVkU3RyaW5nID0gc2VyaWFsaXplZFN0cmluZy5zdWJzdHJpbmcobWF0Y2hlclswXS5sZW5ndGgpO1xuICAgIH1cbiAgICB2YXIgYnVmZmVyID0gc3RyaW5nVG9CdWZmZXIoc2VyaWFsaXplZFN0cmluZyk7XG5cbiAgICAvLyBSZXR1cm4gdGhlIHJpZ2h0IHR5cGUgYmFzZWQgb24gdGhlIGNvZGUvdHlwZSBzZXQgZHVyaW5nXG4gICAgLy8gc2VyaWFsaXphdGlvbi5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBUWVBFX0FSUkFZQlVGRkVSOlxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgY2FzZSBUWVBFX0JMT0I6XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlQmxvYihbYnVmZmVyXSwgeyB0eXBlOiBibG9iVHlwZSB9KTtcbiAgICAgICAgY2FzZSBUWVBFX0lOVDhBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9VSU5UOEFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9VSU5UOENMQU1QRURBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhDbGFtcGVkQXJyYXkoYnVmZmVyKTtcbiAgICAgICAgY2FzZSBUWVBFX0lOVDE2QVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludDE2QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgY2FzZSBUWVBFX1VJTlQxNkFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50MTZBcnJheShidWZmZXIpO1xuICAgICAgICBjYXNlIFRZUEVfSU5UMzJBUlJBWTpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSW50MzJBcnJheShidWZmZXIpO1xuICAgICAgICBjYXNlIFRZUEVfVUlOVDMyQVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlcik7XG4gICAgICAgIGNhc2UgVFlQRV9GTE9BVDMyQVJSQVk6XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShidWZmZXIpO1xuICAgICAgICBjYXNlIFRZUEVfRkxPQVQ2NEFSUkFZOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDY0QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rb3duIHR5cGU6ICcgKyB0eXBlKTtcbiAgICB9XG59XG5cbnZhciBsb2NhbGZvcmFnZVNlcmlhbGl6ZXIgPSB7XG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemUsXG4gICAgZGVzZXJpYWxpemU6IGRlc2VyaWFsaXplLFxuICAgIHN0cmluZ1RvQnVmZmVyOiBzdHJpbmdUb0J1ZmZlcixcbiAgICBidWZmZXJUb1N0cmluZzogYnVmZmVyVG9TdHJpbmdcbn07XG5cbi8qXG4gKiBJbmNsdWRlcyBjb2RlIGZyb206XG4gKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURiVGFibGUodCwgZGJJbmZvLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgIHQuZXhlY3V0ZVNxbCgnQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJyArIGRiSW5mby5zdG9yZU5hbWUgKyAnICcgKyAnKGlkIElOVEVHRVIgUFJJTUFSWSBLRVksIGtleSB1bmlxdWUsIHZhbHVlKScsIFtdLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG59XG5cbi8vIE9wZW4gdGhlIFdlYlNRTCBkYXRhYmFzZSAoYXV0b21hdGljYWxseSBjcmVhdGVzIG9uZSBpZiBvbmUgZGlkbid0XG4vLyBwcmV2aW91c2x5IGV4aXN0KSwgdXNpbmcgYW55IG9wdGlvbnMgc2V0IGluIHRoZSBjb25maWcuXG5mdW5jdGlvbiBfaW5pdFN0b3JhZ2UkMShvcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkYkluZm8gPSB7XG4gICAgICAgIGRiOiBudWxsXG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgZGJJbmZvW2ldID0gdHlwZW9mIG9wdGlvbnNbaV0gIT09ICdzdHJpbmcnID8gb3B0aW9uc1tpXS50b1N0cmluZygpIDogb3B0aW9uc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkYkluZm9Qcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIE9wZW4gdGhlIGRhdGFiYXNlOyB0aGUgb3BlbkRhdGFiYXNlIEFQSSB3aWxsIGF1dG9tYXRpY2FsbHlcbiAgICAgICAgLy8gY3JlYXRlIGl0IGZvciB1cyBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGJJbmZvLmRiID0gb3BlbkRhdGFiYXNlKGRiSW5mby5uYW1lLCBTdHJpbmcoZGJJbmZvLnZlcnNpb24pLCBkYkluZm8uZGVzY3JpcHRpb24sIGRiSW5mby5zaXplKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBvdXIga2V5L3ZhbHVlIHRhYmxlIGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgY3JlYXRlRGJUYWJsZSh0LCBkYkluZm8sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9kYkluZm8gPSBkYkluZm87XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZGJJbmZvLnNlcmlhbGl6ZXIgPSBsb2NhbGZvcmFnZVNlcmlhbGl6ZXI7XG4gICAgcmV0dXJuIGRiSW5mb1Byb21pc2U7XG59XG5cbmZ1bmN0aW9uIHRyeUV4ZWN1dGVTcWwodCwgZGJJbmZvLCBzcWxTdGF0ZW1lbnQsIGFyZ3MsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdC5leGVjdXRlU3FsKHNxbFN0YXRlbWVudCwgYXJncywgY2FsbGJhY2ssIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gZXJyb3IuU1lOVEFYX0VSUikge1xuICAgICAgICAgICAgdC5leGVjdXRlU3FsKCdTRUxFQ1QgbmFtZSBGUk9NIHNxbGl0ZV9tYXN0ZXIgJyArIFwiV0hFUkUgdHlwZT0ndGFibGUnIEFORCBuYW1lID0gP1wiLCBbZGJJbmZvLnN0b3JlTmFtZV0sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRzLnJvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB0YWJsZSBpcyBtaXNzaW5nICh3YXMgZGVsZXRlZClcbiAgICAgICAgICAgICAgICAgICAgLy8gcmUtY3JlYXRlIGl0IHRhYmxlIGFuZCByZXRyeVxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVEYlRhYmxlKHQsIGRiSW5mbywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlU3FsKHNxbFN0YXRlbWVudCwgYXJncywgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKHQsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2sodCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSwgZXJyb3JDYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIGdldEl0ZW0kMShrZXksIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICAgICAgZGJJbmZvLmRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAgICAgdHJ5RXhlY3V0ZVNxbCh0LCBkYkluZm8sICdTRUxFQ1QgKiBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lICsgJyBXSEVSRSBrZXkgPSA/IExJTUlUIDEnLCBba2V5XSwgZnVuY3Rpb24gKHQsIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3VsdHMucm93cy5sZW5ndGggPyByZXN1bHRzLnJvd3MuaXRlbSgwKS52YWx1ZSA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgc2VyaWFsaXplZCBjb250ZW50IHdlIG5lZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gdW5wYWNrLlxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBkYkluZm8uc2VyaWFsaXplci5kZXNlcmlhbGl6ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGl0ZXJhdGUkMShpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuXG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ1NFTEVDVCAqIEZST00gJyArIGRiSW5mby5zdG9yZU5hbWUsIFtdLCBmdW5jdGlvbiAodCwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcm93cyA9IHJlc3VsdHMucm93cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHJvd3MubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gcm93cy5pdGVtKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZW0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGlzIGlzIHNlcmlhbGl6ZWQgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byB1bnBhY2suXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZGJJbmZvLnNlcmlhbGl6ZXIuZGVzZXJpYWxpemUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IocmVzdWx0LCBpdGVtLmtleSwgaSArIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2b2lkKDApIHByZXZlbnRzIHByb2JsZW1zIHdpdGggcmVkZWZpbml0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvZiBgdW5kZWZpbmVkYC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gX3NldEl0ZW0oa2V5LCB2YWx1ZSwgY2FsbGJhY2ssIHJldHJpZXNMZWZ0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAga2V5ID0gbm9ybWFsaXplS2V5KGtleSk7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBUaGUgbG9jYWxTdG9yYWdlIEFQSSBkb2Vzbid0IHJldHVybiB1bmRlZmluZWQgdmFsdWVzIGluIGFuXG4gICAgICAgICAgICAvLyBcImV4cGVjdGVkXCIgd2F5LCBzbyB1bmRlZmluZWQgaXMgYWx3YXlzIGNhc3QgdG8gbnVsbCBpbiBhbGxcbiAgICAgICAgICAgIC8vIGRyaXZlcnMuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvbG9jYWxGb3JhZ2UvcHVsbC80MlxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIG9yaWdpbmFsIHZhbHVlIHRvIHBhc3MgdG8gdGhlIGNhbGxiYWNrLlxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5zZXJpYWxpemVyLnNlcmlhbGl6ZSh2YWx1ZSwgZnVuY3Rpb24gKHZhbHVlLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5RXhlY3V0ZVNxbCh0LCBkYkluZm8sICdJTlNFUlQgT1IgUkVQTEFDRSBJTlRPICcgKyBkYkluZm8uc3RvcmVOYW1lICsgJyAnICsgJyhrZXksIHZhbHVlKSBWQUxVRVMgKD8sID8pJywgW2tleSwgdmFsdWVdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShvcmlnaW5hbFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHNxbEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgdHJhbnNhY3Rpb24gZmFpbGVkOyBjaGVja1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gc2VlIGlmIGl0J3MgYSBxdW90YSBlcnJvci5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcWxFcnJvci5jb2RlID09PSBzcWxFcnJvci5RVU9UQV9FUlIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSByZWplY3QgdGhlIGNhbGxiYWNrIG91dHJpZ2h0IGZvciBub3csIGJ1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3Mgd29ydGggdHJ5aW5nIHRvIHJlLXJ1biB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXZlbiBpZiB0aGUgdXNlciBhY2NlcHRzIHRoZSBwcm9tcHQgdG8gdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW9yZSBzdG9yYWdlIG9uIFNhZmFyaSwgdGhpcyBlcnJvciB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmUgY2FsbGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJ5IHRvIHJlLXJ1biB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHJpZXNMZWZ0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF9zZXRJdGVtLmFwcGx5KHNlbGYsIFtrZXksIG9yaWdpbmFsVmFsdWUsIGNhbGxiYWNrLCByZXRyaWVzTGVmdCAtIDFdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHNxbEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIHNldEl0ZW0kMShrZXksIHZhbHVlLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBfc2V0SXRlbS5hcHBseSh0aGlzLCBba2V5LCB2YWx1ZSwgY2FsbGJhY2ssIDFdKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSXRlbSQxKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ0RFTEVURSBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lICsgJyBXSEVSRSBrZXkgPSA/JywgW2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIERlbGV0ZXMgZXZlcnkgaXRlbSBpbiB0aGUgdGFibGUuXG4vLyBUT0RPOiBGaW5kIG91dCBpZiB0aGlzIHJlc2V0cyB0aGUgQVVUT19JTkNSRU1FTlQgbnVtYmVyLlxuZnVuY3Rpb24gY2xlYXIkMShjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ0RFTEVURSBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lLCBbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShyZWplY3QpO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gRG9lcyBhIHNpbXBsZSBgQ09VTlQoa2V5KWAgdG8gZ2V0IHRoZSBudW1iZXIgb2YgaXRlbXMgc3RvcmVkIGluXG4vLyBsb2NhbEZvcmFnZS5cbmZ1bmN0aW9uIGxlbmd0aCQxKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIC8vIEFoaGgsIFNRTCBtYWtlcyB0aGlzIG9uZSBzb29vb29vIGVhc3kuXG4gICAgICAgICAgICAgICAgdHJ5RXhlY3V0ZVNxbCh0LCBkYkluZm8sICdTRUxFQ1QgQ09VTlQoa2V5KSBhcyBjIEZST00gJyArIGRiSW5mby5zdG9yZU5hbWUsIFtdLCBmdW5jdGlvbiAodCwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzdWx0cy5yb3dzLml0ZW0oMCkuYztcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFJldHVybiB0aGUga2V5IGxvY2F0ZWQgYXQga2V5IGluZGV4IFg7IGVzc2VudGlhbGx5IGdldHMgdGhlIGtleSBmcm9tIGFcbi8vIGBXSEVSRSBpZCA9ID9gLiBUaGlzIGlzIHRoZSBtb3N0IGVmZmljaWVudCB3YXkgSSBjYW4gdGhpbmsgdG8gaW1wbGVtZW50XG4vLyB0aGlzIHJhcmVseS11c2VkIChpbiBteSBleHBlcmllbmNlKSBwYXJ0IG9mIHRoZSBBUEksIGJ1dCBpdCBjYW4gc2VlbVxuLy8gaW5jb25zaXN0ZW50LCBiZWNhdXNlIHdlIGRvIGBJTlNFUlQgT1IgUkVQTEFDRSBJTlRPYCBvbiBgc2V0SXRlbSgpYCwgc29cbi8vIHRoZSBJRCBvZiBlYWNoIGtleSB3aWxsIGNoYW5nZSBldmVyeSB0aW1lIGl0J3MgdXBkYXRlZC4gUGVyaGFwcyBhIHN0b3JlZFxuLy8gcHJvY2VkdXJlIGZvciB0aGUgYHNldEl0ZW0oKWAgU1FMIHdvdWxkIHNvbHZlIHRoaXMgcHJvYmxlbT9cbi8vIFRPRE86IERvbid0IGNoYW5nZSBJRCBvbiBgc2V0SXRlbSgpYC5cbmZ1bmN0aW9uIGtleSQxKG4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRiSW5mbyA9IHNlbGYuX2RiSW5mbztcbiAgICAgICAgICAgIGRiSW5mby5kYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgICAgIHRyeUV4ZWN1dGVTcWwodCwgZGJJbmZvLCAnU0VMRUNUIGtleSBGUk9NICcgKyBkYkluZm8uc3RvcmVOYW1lICsgJyBXSEVSRSBpZCA9ID8gTElNSVQgMScsIFtuICsgMV0sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZXN1bHRzLnJvd3MubGVuZ3RoID8gcmVzdWx0cy5yb3dzLml0ZW0oMCkua2V5IDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pW1wiY2F0Y2hcIl0ocmVqZWN0KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGtleXMkMShjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHNlbGYucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgICAgICBkYkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICB0cnlFeGVjdXRlU3FsKHQsIGRiSW5mbywgJ1NFTEVDVCBrZXkgRlJPTSAnICsgZGJJbmZvLnN0b3JlTmFtZSwgW10sIGZ1bmN0aW9uICh0LCByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLnJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChyZXN1bHRzLnJvd3MuaXRlbShpKS5rZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShrZXlzKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAodCwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVtcImNhdGNoXCJdKHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvd2ViZGF0YWJhc2UvI2RhdGFiYXNlc1xuLy8gPiBUaGVyZSBpcyBubyB3YXkgdG8gZW51bWVyYXRlIG9yIGRlbGV0ZSB0aGUgZGF0YWJhc2VzIGF2YWlsYWJsZSBmb3IgYW4gb3JpZ2luIGZyb20gdGhpcyBBUEkuXG5mdW5jdGlvbiBnZXRBbGxTdG9yZU5hbWVzKGRiKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBkYi50cmFuc2FjdGlvbihmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgdC5leGVjdXRlU3FsKCdTRUxFQ1QgbmFtZSBGUk9NIHNxbGl0ZV9tYXN0ZXIgJyArIFwiV0hFUkUgdHlwZT0ndGFibGUnIEFORCBuYW1lIDw+ICdfX1dlYktpdERhdGFiYXNlSW5mb1RhYmxlX18nXCIsIFtdLCBmdW5jdGlvbiAodCwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIHZhciBzdG9yZU5hbWVzID0gW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMucm93cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBzdG9yZU5hbWVzLnB1c2gocmVzdWx0cy5yb3dzLml0ZW0oaSkubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRiOiBkYixcbiAgICAgICAgICAgICAgICAgICAgc3RvcmVOYW1lczogc3RvcmVOYW1lc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoc3FsRXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChzcWxFcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBkcm9wSW5zdGFuY2UkMShvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHZhciBjdXJyZW50Q29uZmlnID0gdGhpcy5jb25maWcoKTtcbiAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgIT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgY3VycmVudENvbmZpZy5uYW1lO1xuICAgICAgICBvcHRpb25zLnN0b3JlTmFtZSA9IG9wdGlvbnMuc3RvcmVOYW1lIHx8IGN1cnJlbnRDb25maWcuc3RvcmVOYW1lO1xuICAgIH1cblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcHJvbWlzZTtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZSQxLnJlamVjdCgnSW52YWxpZCBhcmd1bWVudHMnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlID0gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgdmFyIGRiO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubmFtZSA9PT0gY3VycmVudENvbmZpZy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBkYiByZWZlcmVuY2Ugb2YgdGhlIGN1cnJlbnQgaW5zdGFuY2VcbiAgICAgICAgICAgICAgICBkYiA9IHNlbGYuX2RiSW5mby5kYjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGIgPSBvcGVuRGF0YWJhc2Uob3B0aW9ucy5uYW1lLCAnJywgJycsIDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc3RvcmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gZHJvcCBhbGwgZGF0YWJhc2UgdGFibGVzXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShnZXRBbGxTdG9yZU5hbWVzKGRiKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgICAgICBkYjogZGIsXG4gICAgICAgICAgICAgICAgICAgIHN0b3JlTmFtZXM6IFtvcHRpb25zLnN0b3JlTmFtZV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAob3BlcmF0aW9uSW5mbykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIG9wZXJhdGlvbkluZm8uZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJvcFRhYmxlKHN0b3JlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZVNxbCgnRFJPUCBUQUJMRSBJRiBFWElTVFMgJyArIHN0b3JlTmFtZSwgW10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICh0LCBlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb3BlcmF0aW9uSW5mby5zdG9yZU5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25zLnB1c2goZHJvcFRhYmxlKG9wZXJhdGlvbkluZm8uc3RvcmVOYW1lc1tpXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZSQxLmFsbChvcGVyYXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoc3FsRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHNxbEVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgd2ViU1FMU3RvcmFnZSA9IHtcbiAgICBfZHJpdmVyOiAnd2ViU1FMU3RvcmFnZScsXG4gICAgX2luaXRTdG9yYWdlOiBfaW5pdFN0b3JhZ2UkMSxcbiAgICBfc3VwcG9ydDogaXNXZWJTUUxWYWxpZCgpLFxuICAgIGl0ZXJhdGU6IGl0ZXJhdGUkMSxcbiAgICBnZXRJdGVtOiBnZXRJdGVtJDEsXG4gICAgc2V0SXRlbTogc2V0SXRlbSQxLFxuICAgIHJlbW92ZUl0ZW06IHJlbW92ZUl0ZW0kMSxcbiAgICBjbGVhcjogY2xlYXIkMSxcbiAgICBsZW5ndGg6IGxlbmd0aCQxLFxuICAgIGtleToga2V5JDEsXG4gICAga2V5czoga2V5cyQxLFxuICAgIGRyb3BJbnN0YW5jZTogZHJvcEluc3RhbmNlJDFcbn07XG5cbmZ1bmN0aW9uIGlzTG9jYWxTdG9yYWdlVmFsaWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnICYmICdzZXRJdGVtJyBpbiBsb2NhbFN0b3JhZ2UgJiZcbiAgICAgICAgLy8gaW4gSUU4IHR5cGVvZiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSA9PT0gJ29iamVjdCdcbiAgICAgICAgISFsb2NhbFN0b3JhZ2Uuc2V0SXRlbTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRLZXlQcmVmaXgob3B0aW9ucywgZGVmYXVsdENvbmZpZykge1xuICAgIHZhciBrZXlQcmVmaXggPSBvcHRpb25zLm5hbWUgKyAnLyc7XG5cbiAgICBpZiAob3B0aW9ucy5zdG9yZU5hbWUgIT09IGRlZmF1bHRDb25maWcuc3RvcmVOYW1lKSB7XG4gICAgICAgIGtleVByZWZpeCArPSBvcHRpb25zLnN0b3JlTmFtZSArICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGtleVByZWZpeDtcbn1cblxuLy8gQ2hlY2sgaWYgbG9jYWxTdG9yYWdlIHRocm93cyB3aGVuIHNhdmluZyBhbiBpdGVtXG5mdW5jdGlvbiBjaGVja0lmTG9jYWxTdG9yYWdlVGhyb3dzKCkge1xuICAgIHZhciBsb2NhbFN0b3JhZ2VUZXN0S2V5ID0gJ19sb2NhbGZvcmFnZV9zdXBwb3J0X3Rlc3QnO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0obG9jYWxTdG9yYWdlVGVzdEtleSwgdHJ1ZSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGxvY2FsU3RvcmFnZVRlc3RLZXkpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cblxuLy8gQ2hlY2sgaWYgbG9jYWxTdG9yYWdlIGlzIHVzYWJsZSBhbmQgYWxsb3dzIHRvIHNhdmUgYW4gaXRlbVxuLy8gVGhpcyBtZXRob2QgY2hlY2tzIGlmIGxvY2FsU3RvcmFnZSBpcyB1c2FibGUgaW4gU2FmYXJpIFByaXZhdGUgQnJvd3Npbmdcbi8vIG1vZGUsIG9yIGluIGFueSBvdGhlciBjYXNlIHdoZXJlIHRoZSBhdmFpbGFibGUgcXVvdGEgZm9yIGxvY2FsU3RvcmFnZVxuLy8gaXMgMCBhbmQgdGhlcmUgd2Fzbid0IGFueSBzYXZlZCBpdGVtcyB5ZXQuXG5mdW5jdGlvbiBfaXNMb2NhbFN0b3JhZ2VVc2FibGUoKSB7XG4gICAgcmV0dXJuICFjaGVja0lmTG9jYWxTdG9yYWdlVGhyb3dzKCkgfHwgbG9jYWxTdG9yYWdlLmxlbmd0aCA+IDA7XG59XG5cbi8vIENvbmZpZyB0aGUgbG9jYWxTdG9yYWdlIGJhY2tlbmQsIHVzaW5nIG9wdGlvbnMgc2V0IGluIHRoZSBjb25maWcuXG5mdW5jdGlvbiBfaW5pdFN0b3JhZ2UkMihvcHRpb25zKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkYkluZm8gPSB7fTtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGRiSW5mb1tpXSA9IG9wdGlvbnNbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYkluZm8ua2V5UHJlZml4ID0gX2dldEtleVByZWZpeChvcHRpb25zLCBzZWxmLl9kZWZhdWx0Q29uZmlnKTtcblxuICAgIGlmICghX2lzTG9jYWxTdG9yYWdlVXNhYmxlKCkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZWplY3QoKTtcbiAgICB9XG5cbiAgICBzZWxmLl9kYkluZm8gPSBkYkluZm87XG4gICAgZGJJbmZvLnNlcmlhbGl6ZXIgPSBsb2NhbGZvcmFnZVNlcmlhbGl6ZXI7XG5cbiAgICByZXR1cm4gUHJvbWlzZSQxLnJlc29sdmUoKTtcbn1cblxuLy8gUmVtb3ZlIGFsbCBrZXlzIGZyb20gdGhlIGRhdGFzdG9yZSwgZWZmZWN0aXZlbHkgZGVzdHJveWluZyBhbGwgZGF0YSBpblxuLy8gdGhlIGFwcCdzIGtleS92YWx1ZSBzdG9yZSFcbmZ1bmN0aW9uIGNsZWFyJDIoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBrZXlQcmVmaXggPSBzZWxmLl9kYkluZm8ua2V5UHJlZml4O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSBsb2NhbFN0b3JhZ2UubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xuXG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2Yoa2V5UHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFJldHJpZXZlIGFuIGl0ZW0gZnJvbSB0aGUgc3RvcmUuIFVubGlrZSB0aGUgb3JpZ2luYWwgYXN5bmNfc3RvcmFnZVxuLy8gbGlicmFyeSBpbiBHYWlhLCB3ZSBkb24ndCBtb2RpZnkgcmV0dXJuIHZhbHVlcyBhdCBhbGwuIElmIGEga2V5J3MgdmFsdWVcbi8vIGlzIGB1bmRlZmluZWRgLCB3ZSBwYXNzIHRoYXQgdmFsdWUgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuZnVuY3Rpb24gZ2V0SXRlbSQyKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcblxuICAgIHZhciBwcm9taXNlID0gc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oZGJJbmZvLmtleVByZWZpeCArIGtleSk7XG5cbiAgICAgICAgLy8gSWYgYSByZXN1bHQgd2FzIGZvdW5kLCBwYXJzZSBpdCBmcm9tIHRoZSBzZXJpYWxpemVkXG4gICAgICAgIC8vIHN0cmluZyBpbnRvIGEgSlMgb2JqZWN0LiBJZiByZXN1bHQgaXNuJ3QgdHJ1dGh5LCB0aGUga2V5XG4gICAgICAgIC8vIGlzIGxpa2VseSB1bmRlZmluZWQgYW5kIHdlJ2xsIHBhc3MgaXQgc3RyYWlnaHQgdG8gdGhlXG4gICAgICAgIC8vIGNhbGxiYWNrLlxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBkYkluZm8uc2VyaWFsaXplci5kZXNlcmlhbGl6ZShyZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIEl0ZXJhdGUgb3ZlciBhbGwgaXRlbXMgaW4gdGhlIHN0b3JlLlxuZnVuY3Rpb24gaXRlcmF0ZSQyKGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlID0gc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICB2YXIga2V5UHJlZml4ID0gZGJJbmZvLmtleVByZWZpeDtcbiAgICAgICAgdmFyIGtleVByZWZpeExlbmd0aCA9IGtleVByZWZpeC5sZW5ndGg7XG4gICAgICAgIHZhciBsZW5ndGggPSBsb2NhbFN0b3JhZ2UubGVuZ3RoO1xuXG4gICAgICAgIC8vIFdlIHVzZSBhIGRlZGljYXRlZCBpdGVyYXRvciBpbnN0ZWFkIG9mIHRoZSBgaWAgdmFyaWFibGUgYmVsb3dcbiAgICAgICAgLy8gc28gb3RoZXIga2V5cyB3ZSBmZXRjaCBpbiBsb2NhbFN0b3JhZ2UgYXJlbid0IGNvdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIGBpdGVyYXRpb25OdW1iZXJgIGFyZ3VtZW50IHBhc3NlZCB0byB0aGUgYGl0ZXJhdGUoKWBcbiAgICAgICAgLy8gY2FsbGJhY2suXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZTogZ2l0aHViLmNvbS9tb3ppbGxhL2xvY2FsRm9yYWdlL3B1bGwvNDM1I2Rpc2N1c3Npb25fcjM4MDYxNTMwXG4gICAgICAgIHZhciBpdGVyYXRpb25OdW1iZXIgPSAxO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpO1xuICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKGtleVByZWZpeCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG5cbiAgICAgICAgICAgIC8vIElmIGEgcmVzdWx0IHdhcyBmb3VuZCwgcGFyc2UgaXQgZnJvbSB0aGUgc2VyaWFsaXplZFxuICAgICAgICAgICAgLy8gc3RyaW5nIGludG8gYSBKUyBvYmplY3QuIElmIHJlc3VsdCBpc24ndCB0cnV0aHksIHRoZVxuICAgICAgICAgICAgLy8ga2V5IGlzIGxpa2VseSB1bmRlZmluZWQgYW5kIHdlJ2xsIHBhc3MgaXQgc3RyYWlnaHRcbiAgICAgICAgICAgIC8vIHRvIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZGJJbmZvLnNlcmlhbGl6ZXIuZGVzZXJpYWxpemUodmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IGl0ZXJhdG9yKHZhbHVlLCBrZXkuc3Vic3RyaW5nKGtleVByZWZpeExlbmd0aCksIGl0ZXJhdGlvbk51bWJlcisrKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFNhbWUgYXMgbG9jYWxTdG9yYWdlJ3Mga2V5KCkgbWV0aG9kLCBleGNlcHQgdGFrZXMgYSBjYWxsYmFjay5cbmZ1bmN0aW9uIGtleSQyKG4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlID0gc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbG9jYWxTdG9yYWdlLmtleShuKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgdGhlIHByZWZpeCBmcm9tIHRoZSBrZXksIGlmIGEga2V5IGlzIGZvdW5kLlxuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyaW5nKGRiSW5mby5rZXlQcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBrZXlzJDIoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYkluZm8gPSBzZWxmLl9kYkluZm87XG4gICAgICAgIHZhciBsZW5ndGggPSBsb2NhbFN0b3JhZ2UubGVuZ3RoO1xuICAgICAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtS2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTtcbiAgICAgICAgICAgIGlmIChpdGVtS2V5LmluZGV4T2YoZGJJbmZvLmtleVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goaXRlbUtleS5zdWJzdHJpbmcoZGJJbmZvLmtleVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuLy8gU3VwcGx5IHRoZSBudW1iZXIgb2Yga2V5cyBpbiB0aGUgZGF0YXN0b3JlIHRvIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbmZ1bmN0aW9uIGxlbmd0aCQyKGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlID0gc2VsZi5rZXlzKCkudGhlbihmdW5jdGlvbiAoa2V5cykge1xuICAgICAgICByZXR1cm4ga2V5cy5sZW5ndGg7XG4gICAgfSk7XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG4vLyBSZW1vdmUgYW4gaXRlbSBmcm9tIHRoZSBzdG9yZSwgbmljZSBhbmQgc2ltcGxlLlxuZnVuY3Rpb24gcmVtb3ZlSXRlbSQyKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5KTtcblxuICAgIHZhciBwcm9taXNlID0gc2VsZi5yZWFkeSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShkYkluZm8ua2V5UHJlZml4ICsga2V5KTtcbiAgICB9KTtcblxuICAgIGV4ZWN1dGVDYWxsYmFjayhwcm9taXNlLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cbi8vIFNldCBhIGtleSdzIHZhbHVlIGFuZCBydW4gYW4gb3B0aW9uYWwgY2FsbGJhY2sgb25jZSB0aGUgdmFsdWUgaXMgc2V0LlxuLy8gVW5saWtlIEdhaWEncyBpbXBsZW1lbnRhdGlvbiwgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHBhc3NlZCB0aGUgdmFsdWUsXG4vLyBpbiBjYXNlIHlvdSB3YW50IHRvIG9wZXJhdGUgb24gdGhhdCB2YWx1ZSBvbmx5IGFmdGVyIHlvdSdyZSBzdXJlIGl0XG4vLyBzYXZlZCwgb3Igc29tZXRoaW5nIGxpa2UgdGhhdC5cbmZ1bmN0aW9uIHNldEl0ZW0kMihrZXksIHZhbHVlLCBjYWxsYmFjaykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGtleSA9IG5vcm1hbGl6ZUtleShrZXkpO1xuXG4gICAgdmFyIHByb21pc2UgPSBzZWxmLnJlYWR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIENvbnZlcnQgdW5kZWZpbmVkIHZhbHVlcyB0byBudWxsLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9sb2NhbEZvcmFnZS9wdWxsLzQyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTYXZlIHRoZSBvcmlnaW5hbCB2YWx1ZSB0byBwYXNzIHRvIHRoZSBjYWxsYmFjay5cbiAgICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UkMShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgZGJJbmZvID0gc2VsZi5fZGJJbmZvO1xuICAgICAgICAgICAgZGJJbmZvLnNlcmlhbGl6ZXIuc2VyaWFsaXplKHZhbHVlLCBmdW5jdGlvbiAodmFsdWUsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGRiSW5mby5rZXlQcmVmaXggKyBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob3JpZ2luYWxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvY2FsU3RvcmFnZSBjYXBhY2l0eSBleGNlZWRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IE1ha2UgdGhpcyBhIHNwZWNpZmljIGVycm9yL2V2ZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1F1b3RhRXhjZWVkZWRFcnJvcicgfHwgZS5uYW1lID09PSAnTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRUQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGNhbGxiYWNrKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gZHJvcEluc3RhbmNlJDIob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IGdldENhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICBvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgIT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucyB8fCB7fTtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgICB2YXIgY3VycmVudENvbmZpZyA9IHRoaXMuY29uZmlnKCk7XG4gICAgICAgIG9wdGlvbnMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBjdXJyZW50Q29uZmlnLm5hbWU7XG4gICAgICAgIG9wdGlvbnMuc3RvcmVOYW1lID0gb3B0aW9ucy5zdG9yZU5hbWUgfHwgY3VycmVudENvbmZpZy5zdG9yZU5hbWU7XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlO1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlJDEucmVqZWN0KCdJbnZhbGlkIGFyZ3VtZW50cycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZSQxKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuc3RvcmVOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShvcHRpb25zLm5hbWUgKyAnLycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKF9nZXRLZXlQcmVmaXgob3B0aW9ucywgc2VsZi5fZGVmYXVsdENvbmZpZykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlQcmVmaXgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBsb2NhbFN0b3JhZ2UubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gbG9jYWxTdG9yYWdlLmtleShpKTtcblxuICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihrZXlQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBleGVjdXRlQ2FsbGJhY2socHJvbWlzZSwgY2FsbGJhY2spO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG52YXIgbG9jYWxTdG9yYWdlV3JhcHBlciA9IHtcbiAgICBfZHJpdmVyOiAnbG9jYWxTdG9yYWdlV3JhcHBlcicsXG4gICAgX2luaXRTdG9yYWdlOiBfaW5pdFN0b3JhZ2UkMixcbiAgICBfc3VwcG9ydDogaXNMb2NhbFN0b3JhZ2VWYWxpZCgpLFxuICAgIGl0ZXJhdGU6IGl0ZXJhdGUkMixcbiAgICBnZXRJdGVtOiBnZXRJdGVtJDIsXG4gICAgc2V0SXRlbTogc2V0SXRlbSQyLFxuICAgIHJlbW92ZUl0ZW06IHJlbW92ZUl0ZW0kMixcbiAgICBjbGVhcjogY2xlYXIkMixcbiAgICBsZW5ndGg6IGxlbmd0aCQyLFxuICAgIGtleToga2V5JDIsXG4gICAga2V5czoga2V5cyQyLFxuICAgIGRyb3BJbnN0YW5jZTogZHJvcEluc3RhbmNlJDJcbn07XG5cbnZhciBzYW1lVmFsdWUgPSBmdW5jdGlvbiBzYW1lVmFsdWUoeCwgeSkge1xuICAgIHJldHVybiB4ID09PSB5IHx8IHR5cGVvZiB4ID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeSA9PT0gJ251bWJlcicgJiYgaXNOYU4oeCkgJiYgaXNOYU4oeSk7XG59O1xuXG52YXIgaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyhhcnJheSwgc2VhcmNoRWxlbWVudCkge1xuICAgIHZhciBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmIChzYW1lVmFsdWUoYXJyYXlbaV0sIHNlYXJjaEVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vLyBEcml2ZXJzIGFyZSBzdG9yZWQgaGVyZSB3aGVuIGBkZWZpbmVEcml2ZXIoKWAgaXMgY2FsbGVkLlxuLy8gVGhleSBhcmUgc2hhcmVkIGFjcm9zcyBhbGwgaW5zdGFuY2VzIG9mIGxvY2FsRm9yYWdlLlxudmFyIERlZmluZWREcml2ZXJzID0ge307XG5cbnZhciBEcml2ZXJTdXBwb3J0ID0ge307XG5cbnZhciBEZWZhdWx0RHJpdmVycyA9IHtcbiAgICBJTkRFWEVEREI6IGFzeW5jU3RvcmFnZSxcbiAgICBXRUJTUUw6IHdlYlNRTFN0b3JhZ2UsXG4gICAgTE9DQUxTVE9SQUdFOiBsb2NhbFN0b3JhZ2VXcmFwcGVyXG59O1xuXG52YXIgRGVmYXVsdERyaXZlck9yZGVyID0gW0RlZmF1bHREcml2ZXJzLklOREVYRUREQi5fZHJpdmVyLCBEZWZhdWx0RHJpdmVycy5XRUJTUUwuX2RyaXZlciwgRGVmYXVsdERyaXZlcnMuTE9DQUxTVE9SQUdFLl9kcml2ZXJdO1xuXG52YXIgT3B0aW9uYWxEcml2ZXJNZXRob2RzID0gWydkcm9wSW5zdGFuY2UnXTtcblxudmFyIExpYnJhcnlNZXRob2RzID0gWydjbGVhcicsICdnZXRJdGVtJywgJ2l0ZXJhdGUnLCAna2V5JywgJ2tleXMnLCAnbGVuZ3RoJywgJ3JlbW92ZUl0ZW0nLCAnc2V0SXRlbSddLmNvbmNhdChPcHRpb25hbERyaXZlck1ldGhvZHMpO1xuXG52YXIgRGVmYXVsdENvbmZpZyA9IHtcbiAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgZHJpdmVyOiBEZWZhdWx0RHJpdmVyT3JkZXIuc2xpY2UoKSxcbiAgICBuYW1lOiAnbG9jYWxmb3JhZ2UnLFxuICAgIC8vIERlZmF1bHQgREIgc2l6ZSBpcyBfSlVTVCBVTkRFUl8gNU1CLCBhcyBpdCdzIHRoZSBoaWdoZXN0IHNpemVcbiAgICAvLyB3ZSBjYW4gdXNlIHdpdGhvdXQgYSBwcm9tcHQuXG4gICAgc2l6ZTogNDk4MDczNixcbiAgICBzdG9yZU5hbWU6ICdrZXl2YWx1ZXBhaXJzJyxcbiAgICB2ZXJzaW9uOiAxLjBcbn07XG5cbmZ1bmN0aW9uIGNhbGxXaGVuUmVhZHkobG9jYWxGb3JhZ2VJbnN0YW5jZSwgbGlicmFyeU1ldGhvZCkge1xuICAgIGxvY2FsRm9yYWdlSW5zdGFuY2VbbGlicmFyeU1ldGhvZF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgcmV0dXJuIGxvY2FsRm9yYWdlSW5zdGFuY2UucmVhZHkoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbEZvcmFnZUluc3RhbmNlW2xpYnJhcnlNZXRob2RdLmFwcGx5KGxvY2FsRm9yYWdlSW5zdGFuY2UsIF9hcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBhcmcgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2tleSBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJnLmhhc093blByb3BlcnR5KF9rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KGFyZ1tfa2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXVtfa2V5XSA9IGFyZ1tfa2V5XS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdW19rZXldID0gYXJnW19rZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbn1cblxudmFyIExvY2FsRm9yYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExvY2FsRm9yYWdlKG9wdGlvbnMpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvY2FsRm9yYWdlKTtcblxuICAgICAgICBmb3IgKHZhciBkcml2ZXJUeXBlS2V5IGluIERlZmF1bHREcml2ZXJzKSB7XG4gICAgICAgICAgICBpZiAoRGVmYXVsdERyaXZlcnMuaGFzT3duUHJvcGVydHkoZHJpdmVyVHlwZUtleSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJpdmVyID0gRGVmYXVsdERyaXZlcnNbZHJpdmVyVHlwZUtleV07XG4gICAgICAgICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBkcml2ZXIuX2RyaXZlcjtcbiAgICAgICAgICAgICAgICB0aGlzW2RyaXZlclR5cGVLZXldID0gZHJpdmVyTmFtZTtcblxuICAgICAgICAgICAgICAgIGlmICghRGVmaW5lZERyaXZlcnNbZHJpdmVyTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byB3YWl0IGZvciB0aGUgcHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgZHJpdmVycyBjYW4gYmUgZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAvLyBpbiBhIGJsb2NraW5nIG1hbm5lclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmluZURyaXZlcihkcml2ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRDb25maWcgPSBleHRlbmQoe30sIERlZmF1bHRDb25maWcpO1xuICAgICAgICB0aGlzLl9jb25maWcgPSBleHRlbmQoe30sIHRoaXMuX2RlZmF1bHRDb25maWcsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9kcml2ZXJTZXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbml0RHJpdmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVhZHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGJJbmZvID0gbnVsbDtcblxuICAgICAgICB0aGlzLl93cmFwTGlicmFyeU1ldGhvZHNXaXRoUmVhZHkoKTtcbiAgICAgICAgdGhpcy5zZXREcml2ZXIodGhpcy5fY29uZmlnLmRyaXZlcilbXCJjYXRjaFwiXShmdW5jdGlvbiAoKSB7fSk7XG4gICAgfVxuXG4gICAgLy8gU2V0IGFueSBjb25maWcgdmFsdWVzIGZvciBsb2NhbEZvcmFnZTsgY2FuIGJlIGNhbGxlZCBhbnl0aW1lIGJlZm9yZVxuICAgIC8vIHRoZSBmaXJzdCBBUEkgY2FsbCAoZS5nLiBgZ2V0SXRlbWAsIGBzZXRJdGVtYCkuXG4gICAgLy8gV2UgbG9vcCB0aHJvdWdoIG9wdGlvbnMgc28gd2UgZG9uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGNvbmZpZ1xuICAgIC8vIHZhbHVlcy5cblxuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLmNvbmZpZyA9IGZ1bmN0aW9uIGNvbmZpZyhvcHRpb25zKSB7XG4gICAgICAgIC8vIElmIHRoZSBvcHRpb25zIGFyZ3VtZW50IGlzIGFuIG9iamVjdCwgd2UgdXNlIGl0IHRvIHNldCB2YWx1ZXMuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2UgcmV0dXJuIGVpdGhlciBhIHNwZWNpZmllZCBjb25maWcgdmFsdWUgb3IgYWxsXG4gICAgICAgIC8vIGNvbmZpZyB2YWx1ZXMuXG4gICAgICAgIGlmICgodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9wdGlvbnMpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIC8vIElmIGxvY2FsZm9yYWdlIGlzIHJlYWR5IGFuZCBmdWxseSBpbml0aWFsaXplZCwgd2UgY2FuJ3Qgc2V0XG4gICAgICAgICAgICAvLyBhbnkgbmV3IGNvbmZpZ3VyYXRpb24gdmFsdWVzLiBJbnN0ZWFkLCB3ZSByZXR1cm4gYW4gZXJyb3IuXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVhZHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiQ2FuJ3QgY2FsbCBjb25maWcoKSBhZnRlciBsb2NhbGZvcmFnZSBcIiArICdoYXMgYmVlbiB1c2VkLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gJ3N0b3JlTmFtZScpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tpXSA9IG9wdGlvbnNbaV0ucmVwbGFjZSgvXFxXL2csICdfJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09ICd2ZXJzaW9uJyAmJiB0eXBlb2Ygb3B0aW9uc1tpXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignRGF0YWJhc2UgdmVyc2lvbiBtdXN0IGJlIGEgbnVtYmVyLicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbmZpZ1tpXSA9IG9wdGlvbnNbaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFmdGVyIGFsbCBjb25maWcgb3B0aW9ucyBhcmUgc2V0IGFuZFxuICAgICAgICAgICAgLy8gdGhlIGRyaXZlciBvcHRpb24gaXMgdXNlZCwgdHJ5IHNldHRpbmcgaXRcbiAgICAgICAgICAgIGlmICgnZHJpdmVyJyBpbiBvcHRpb25zICYmIG9wdGlvbnMuZHJpdmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RHJpdmVyKHRoaXMuX2NvbmZpZy5kcml2ZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25maWdbb3B0aW9uc107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFVzZWQgdG8gZGVmaW5lIGEgY3VzdG9tIGRyaXZlciwgc2hhcmVkIGFjcm9zcyBhbGwgaW5zdGFuY2VzIG9mXG4gICAgLy8gbG9jYWxGb3JhZ2UuXG5cblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5kZWZpbmVEcml2ZXIgPSBmdW5jdGlvbiBkZWZpbmVEcml2ZXIoZHJpdmVyT2JqZWN0LCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZHJpdmVyTmFtZSA9IGRyaXZlck9iamVjdC5fZHJpdmVyO1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGlhbmNlRXJyb3IgPSBuZXcgRXJyb3IoJ0N1c3RvbSBkcml2ZXIgbm90IGNvbXBsaWFudDsgc2VlICcgKyAnaHR0cHM6Ly9tb3ppbGxhLmdpdGh1Yi5pby9sb2NhbEZvcmFnZS8jZGVmaW5lZHJpdmVyJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBBIGRyaXZlciBuYW1lIHNob3VsZCBiZSBkZWZpbmVkIGFuZCBub3Qgb3ZlcmxhcCB3aXRoIHRoZVxuICAgICAgICAgICAgICAgIC8vIGxpYnJhcnktZGVmaW5lZCwgZGVmYXVsdCBkcml2ZXJzLlxuICAgICAgICAgICAgICAgIGlmICghZHJpdmVyT2JqZWN0Ll9kcml2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGNvbXBsaWFuY2VFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZHJpdmVyTWV0aG9kcyA9IExpYnJhcnlNZXRob2RzLmNvbmNhdCgnX2luaXRTdG9yYWdlJyk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGRyaXZlck1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyaXZlck1ldGhvZE5hbWUgPSBkcml2ZXJNZXRob2RzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIHByb3BlcnR5IGlzIHRoZXJlLFxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgYmUgYSBtZXRob2QgZXZlbiB3aGVuIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1JlcXVpcmVkID0gIWluY2x1ZGVzKE9wdGlvbmFsRHJpdmVyTWV0aG9kcywgZHJpdmVyTWV0aG9kTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoaXNSZXF1aXJlZCB8fCBkcml2ZXJPYmplY3RbZHJpdmVyTWV0aG9kTmFtZV0pICYmIHR5cGVvZiBkcml2ZXJPYmplY3RbZHJpdmVyTWV0aG9kTmFtZV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChjb21wbGlhbmNlRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZ3VyZU1pc3NpbmdNZXRob2RzID0gZnVuY3Rpb24gY29uZmlndXJlTWlzc2luZ01ldGhvZHMoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2ROb3RJbXBsZW1lbnRlZEZhY3RvcnkgPSBmdW5jdGlvbiBtZXRob2ROb3RJbXBsZW1lbnRlZEZhY3RvcnkobWV0aG9kTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ01ldGhvZCAnICsgbWV0aG9kTmFtZSArICcgaXMgbm90IGltcGxlbWVudGVkIGJ5IHRoZSBjdXJyZW50IGRyaXZlcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZSQxLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZUNhbGxiYWNrKHByb21pc2UsIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9sZW4gPSBPcHRpb25hbERyaXZlck1ldGhvZHMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHRpb25hbERyaXZlck1ldGhvZCA9IE9wdGlvbmFsRHJpdmVyTWV0aG9kc1tfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRyaXZlck9iamVjdFtvcHRpb25hbERyaXZlck1ldGhvZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcml2ZXJPYmplY3Rbb3B0aW9uYWxEcml2ZXJNZXRob2RdID0gbWV0aG9kTm90SW1wbGVtZW50ZWRGYWN0b3J5KG9wdGlvbmFsRHJpdmVyTWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25maWd1cmVNaXNzaW5nTWV0aG9kcygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNldERyaXZlclN1cHBvcnQgPSBmdW5jdGlvbiBzZXREcml2ZXJTdXBwb3J0KHN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKERlZmluZWREcml2ZXJzW2RyaXZlck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1JlZGVmaW5pbmcgTG9jYWxGb3JhZ2UgZHJpdmVyOiAnICsgZHJpdmVyTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgRGVmaW5lZERyaXZlcnNbZHJpdmVyTmFtZV0gPSBkcml2ZXJPYmplY3Q7XG4gICAgICAgICAgICAgICAgICAgIERyaXZlclN1cHBvcnRbZHJpdmVyTmFtZV0gPSBzdXBwb3J0O1xuICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCB1c2UgYSB0aGVuLCBzbyB0aGF0IHdlIGNhbiBkZWZpbmVcbiAgICAgICAgICAgICAgICAgICAgLy8gZHJpdmVycyB0aGF0IGhhdmUgc2ltcGxlIF9zdXBwb3J0IG1ldGhvZHNcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gYSBibG9ja2luZyBtYW5uZXJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoJ19zdXBwb3J0JyBpbiBkcml2ZXJPYmplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyaXZlck9iamVjdC5fc3VwcG9ydCAmJiB0eXBlb2YgZHJpdmVyT2JqZWN0Ll9zdXBwb3J0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcml2ZXJPYmplY3QuX3N1cHBvcnQoKS50aGVuKHNldERyaXZlclN1cHBvcnQsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXREcml2ZXJTdXBwb3J0KCEhZHJpdmVyT2JqZWN0Ll9zdXBwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNldERyaXZlclN1cHBvcnQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhlY3V0ZVR3b0NhbGxiYWNrcyhwcm9taXNlLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBMb2NhbEZvcmFnZS5wcm90b3R5cGUuZHJpdmVyID0gZnVuY3Rpb24gZHJpdmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHJpdmVyIHx8IG51bGw7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5nZXREcml2ZXIgPSBmdW5jdGlvbiBnZXREcml2ZXIoZHJpdmVyTmFtZSwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGdldERyaXZlclByb21pc2UgPSBEZWZpbmVkRHJpdmVyc1tkcml2ZXJOYW1lXSA/IFByb21pc2UkMS5yZXNvbHZlKERlZmluZWREcml2ZXJzW2RyaXZlck5hbWVdKSA6IFByb21pc2UkMS5yZWplY3QobmV3IEVycm9yKCdEcml2ZXIgbm90IGZvdW5kLicpKTtcblxuICAgICAgICBleGVjdXRlVHdvQ2FsbGJhY2tzKGdldERyaXZlclByb21pc2UsIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIGdldERyaXZlclByb21pc2U7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5nZXRTZXJpYWxpemVyID0gZnVuY3Rpb24gZ2V0U2VyaWFsaXplcihjYWxsYmFjaykge1xuICAgICAgICB2YXIgc2VyaWFsaXplclByb21pc2UgPSBQcm9taXNlJDEucmVzb2x2ZShsb2NhbGZvcmFnZVNlcmlhbGl6ZXIpO1xuICAgICAgICBleGVjdXRlVHdvQ2FsbGJhY2tzKHNlcmlhbGl6ZXJQcm9taXNlLCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBzZXJpYWxpemVyUHJvbWlzZTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLnJlYWR5ID0gZnVuY3Rpb24gcmVhZHkoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gc2VsZi5fZHJpdmVyU2V0LnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuX3JlYWR5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fcmVhZHkgPSBzZWxmLl9pbml0RHJpdmVyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9yZWFkeTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhlY3V0ZVR3b0NhbGxiYWNrcyhwcm9taXNlLCBjYWxsYmFjaywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLnNldERyaXZlciA9IGZ1bmN0aW9uIHNldERyaXZlcihkcml2ZXJzLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGRyaXZlcnMpKSB7XG4gICAgICAgICAgICBkcml2ZXJzID0gW2RyaXZlcnNdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN1cHBvcnRlZERyaXZlcnMgPSB0aGlzLl9nZXRTdXBwb3J0ZWREcml2ZXJzKGRyaXZlcnMpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHNldERyaXZlclRvQ29uZmlnKCkge1xuICAgICAgICAgICAgc2VsZi5fY29uZmlnLmRyaXZlciA9IHNlbGYuZHJpdmVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBleHRlbmRTZWxmV2l0aERyaXZlcihkcml2ZXIpIHtcbiAgICAgICAgICAgIHNlbGYuX2V4dGVuZChkcml2ZXIpO1xuICAgICAgICAgICAgc2V0RHJpdmVyVG9Db25maWcoKTtcblxuICAgICAgICAgICAgc2VsZi5fcmVhZHkgPSBzZWxmLl9pbml0U3RvcmFnZShzZWxmLl9jb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3JlYWR5O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdERyaXZlcihzdXBwb3J0ZWREcml2ZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RHJpdmVySW5kZXggPSAwO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZHJpdmVyUHJvbWlzZUxvb3AoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50RHJpdmVySW5kZXggPCBzdXBwb3J0ZWREcml2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBzdXBwb3J0ZWREcml2ZXJzW2N1cnJlbnREcml2ZXJJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50RHJpdmVySW5kZXgrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fZGJJbmZvID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JlYWR5ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0RHJpdmVyKGRyaXZlck5hbWUpLnRoZW4oZXh0ZW5kU2VsZldpdGhEcml2ZXIpW1wiY2F0Y2hcIl0oZHJpdmVyUHJvbWlzZUxvb3ApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0RHJpdmVyVG9Db25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdObyBhdmFpbGFibGUgc3RvcmFnZSBtZXRob2QgZm91bmQuJyk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2RyaXZlclNldCA9IFByb21pc2UkMS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fZHJpdmVyU2V0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBkcml2ZXJQcm9taXNlTG9vcCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZXJlIG1pZ2h0IGJlIGEgZHJpdmVyIGluaXRpYWxpemF0aW9uIGluIHByb2dyZXNzXG4gICAgICAgIC8vIHNvIHdhaXQgZm9yIGl0IHRvIGZpbmlzaCBpbiBvcmRlciB0byBhdm9pZCBhIHBvc3NpYmxlXG4gICAgICAgIC8vIHJhY2UgY29uZGl0aW9uIHRvIHNldCBfZGJJbmZvXG4gICAgICAgIHZhciBvbGREcml2ZXJTZXREb25lID0gdGhpcy5fZHJpdmVyU2V0ICE9PSBudWxsID8gdGhpcy5fZHJpdmVyU2V0W1wiY2F0Y2hcIl0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZXNvbHZlKCk7XG4gICAgICAgIH0pIDogUHJvbWlzZSQxLnJlc29sdmUoKTtcblxuICAgICAgICB0aGlzLl9kcml2ZXJTZXQgPSBvbGREcml2ZXJTZXREb25lLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBzdXBwb3J0ZWREcml2ZXJzWzBdO1xuICAgICAgICAgICAgc2VsZi5fZGJJbmZvID0gbnVsbDtcbiAgICAgICAgICAgIHNlbGYuX3JlYWR5ID0gbnVsbDtcblxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0RHJpdmVyKGRyaXZlck5hbWUpLnRoZW4oZnVuY3Rpb24gKGRyaXZlcikge1xuICAgICAgICAgICAgICAgIHNlbGYuX2RyaXZlciA9IGRyaXZlci5fZHJpdmVyO1xuICAgICAgICAgICAgICAgIHNldERyaXZlclRvQ29uZmlnKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5fd3JhcExpYnJhcnlNZXRob2RzV2l0aFJlYWR5KCk7XG4gICAgICAgICAgICAgICAgc2VsZi5faW5pdERyaXZlciA9IGluaXREcml2ZXIoc3VwcG9ydGVkRHJpdmVycyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXREcml2ZXJUb0NvbmZpZygpO1xuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdObyBhdmFpbGFibGUgc3RvcmFnZSBtZXRob2QgZm91bmQuJyk7XG4gICAgICAgICAgICBzZWxmLl9kcml2ZXJTZXQgPSBQcm9taXNlJDEucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9kcml2ZXJTZXQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGV4ZWN1dGVUd29DYWxsYmFja3ModGhpcy5fZHJpdmVyU2V0LCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzLl9kcml2ZXJTZXQ7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5zdXBwb3J0cyA9IGZ1bmN0aW9uIHN1cHBvcnRzKGRyaXZlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuICEhRHJpdmVyU3VwcG9ydFtkcml2ZXJOYW1lXTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLl9leHRlbmQgPSBmdW5jdGlvbiBfZXh0ZW5kKGxpYnJhcnlNZXRob2RzQW5kUHJvcGVydGllcykge1xuICAgICAgICBleHRlbmQodGhpcywgbGlicmFyeU1ldGhvZHNBbmRQcm9wZXJ0aWVzKTtcbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLl9nZXRTdXBwb3J0ZWREcml2ZXJzID0gZnVuY3Rpb24gX2dldFN1cHBvcnRlZERyaXZlcnMoZHJpdmVycykge1xuICAgICAgICB2YXIgc3VwcG9ydGVkRHJpdmVycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZHJpdmVycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGRyaXZlck5hbWUgPSBkcml2ZXJzW2ldO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3VwcG9ydHMoZHJpdmVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBzdXBwb3J0ZWREcml2ZXJzLnB1c2goZHJpdmVyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cHBvcnRlZERyaXZlcnM7XG4gICAgfTtcblxuICAgIExvY2FsRm9yYWdlLnByb3RvdHlwZS5fd3JhcExpYnJhcnlNZXRob2RzV2l0aFJlYWR5ID0gZnVuY3Rpb24gX3dyYXBMaWJyYXJ5TWV0aG9kc1dpdGhSZWFkeSgpIHtcbiAgICAgICAgLy8gQWRkIGEgc3R1YiBmb3IgZWFjaCBkcml2ZXIgQVBJIG1ldGhvZCB0aGF0IGRlbGF5cyB0aGUgY2FsbCB0byB0aGVcbiAgICAgICAgLy8gY29ycmVzcG9uZGluZyBkcml2ZXIgbWV0aG9kIHVudGlsIGxvY2FsRm9yYWdlIGlzIHJlYWR5LiBUaGVzZSBzdHVic1xuICAgICAgICAvLyB3aWxsIGJlIHJlcGxhY2VkIGJ5IHRoZSBkcml2ZXIgbWV0aG9kcyBhcyBzb29uIGFzIHRoZSBkcml2ZXIgaXNcbiAgICAgICAgLy8gbG9hZGVkLCBzbyB0aGVyZSBpcyBubyBwZXJmb3JtYW5jZSBpbXBhY3QuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBMaWJyYXJ5TWV0aG9kcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY2FsbFdoZW5SZWFkeSh0aGlzLCBMaWJyYXJ5TWV0aG9kc1tpXSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgTG9jYWxGb3JhZ2UucHJvdG90eXBlLmNyZWF0ZUluc3RhbmNlID0gZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2Uob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IExvY2FsRm9yYWdlKG9wdGlvbnMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gTG9jYWxGb3JhZ2U7XG59KCk7XG5cbi8vIFRoZSBhY3R1YWwgbG9jYWxGb3JhZ2Ugb2JqZWN0IHRoYXQgd2UgZXhwb3NlIGFzIGEgbW9kdWxlIG9yIHZpYSBhXG4vLyBnbG9iYWwuIEl0J3MgZXh0ZW5kZWQgYnkgcHVsbGluZyBpbiBvbmUgb2Ygb3VyIG90aGVyIGxpYnJhcmllcy5cblxuXG52YXIgbG9jYWxmb3JhZ2VfanMgPSBuZXcgTG9jYWxGb3JhZ2UoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhbGZvcmFnZV9qcztcblxufSx7XCIzXCI6M31dfSx7fSxbNF0pKDQpXG59KTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiaW1wb3J0IHJlYWN0RG9tIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgcmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuY29uc3QgZ2tzID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBSZWNvaWxfZ2t4KGdrKSB7XG4gIHZhciBfZ2tzJGdldDtcblxuICByZXR1cm4gKF9na3MkZ2V0ID0gZ2tzLmdldChnaykpICE9PSBudWxsICYmIF9na3MkZ2V0ICE9PSB2b2lkIDAgPyBfZ2tzJGdldCA6IGZhbHNlO1xufVxuXG5SZWNvaWxfZ2t4LnNldFBhc3MgPSBnayA9PiB7XG4gIGdrcy5zZXQoZ2ssIHRydWUpO1xufTtcblxuUmVjb2lsX2dreC5zZXRGYWlsID0gZ2sgPT4ge1xuICBna3Muc2V0KGdrLCBmYWxzZSk7XG59O1xuXG52YXIgUmVjb2lsX2dreF8xID0gUmVjb2lsX2dreDsgLy8gQG9zcy1vbmx5XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IE1hcCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIHRoZSBvcmlnaW5hbCwgYnV0IHdpdGggdGhlXG4gKiB2YWx1ZXMgcmVwbGFjZWQgd2l0aCB0aGUgb3V0cHV0IG9mIHRoZSBnaXZlbiBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBtYXBNYXAobWFwLCBjYWxsYmFjaykge1xuICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gIG1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgcmVzdWx0LnNldChrZXksIGNhbGxiYWNrKHZhbHVlLCBrZXkpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBSZWNvaWxfbWFwTWFwID0gbWFwTWFwO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gbnVsbHRocm93cyh4LCBtZXNzYWdlKSB7XG4gIGlmICh4ICE9IG51bGwpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihtZXNzYWdlICE9PSBudWxsICYmIG1lc3NhZ2UgIT09IHZvaWQgMCA/IG1lc3NhZ2UgOiAnR290IHVuZXhwZWN0ZWQgbnVsbCBvciB1bmRlZmluZWQnKTtcbn1cblxudmFyIFJlY29pbF9udWxsdGhyb3dzID0gbnVsbHRocm93cztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmZ1bmN0aW9uIHJlY292ZXJhYmxlVmlvbGF0aW9uKG1lc3NhZ2UsIHByb2plY3ROYW1lLCB7XG4gIGVycm9yXG59ID0ge30pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXJyb3IpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciByZWNvdmVyYWJsZVZpb2xhdGlvbl8xID0gcmVjb3ZlcmFibGVWaW9sYXRpb247XG5cbi8vIEBvc3Mtb25seVxuXG5cbnZhciBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24gPSByZWNvdmVyYWJsZVZpb2xhdGlvbl8xO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEludGVyZmFjZSBmb3IgYHNjaGVkdWxlci90cmFjaW5nYCB0byBhaWQgaW4gcHJvZmlsaW5nIFJlY29pbCBhbmQgUmVjb2lsIGFwcHMuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG4vLyBmbG93bGludC1uZXh0LWxpbmUgdW50eXBlZC1pbXBvcnQ6b2ZmXG4vLyBAZmItb25seTogY29uc3QgU2NoZWR1bGVyVHJhY2luZyA9IHJlcXVpcmUoJ1NjaGVkdWxlclRyYWNpbmcnKTtcbmZ1bmN0aW9uIHRyYWNlKG1lc3NhZ2UsIG5vZGUsIGZuKSB7XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICAvLyBAZmItb25seTogaWYgKF9fREVWX18pIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiBpZiAoXG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICAvLyBAZmItb25seTogU2NoZWR1bGVyVHJhY2luZy51bnN0YWJsZV90cmFjZSAhPT0gdW5kZWZpbmVkICYmXG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICAvLyBAZmItb25seTogd2luZG93LnBlcmZvcm1hbmNlICE9PSB1bmRlZmluZWRcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiApIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiByZXR1cm4gU2NoZWR1bGVyVHJhY2luZy51bnN0YWJsZV90cmFjZShcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiBgUmVjb2lsOiAke21lc3NhZ2V9IGZvciBub2RlOiAke1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgLy8gQGZiLW9ubHk6IHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyA/IG5vZGUgOiBub2RlLmtleVxuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgLy8gQGZiLW9ubHk6IH1gLFxuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgLy8gQGZiLW9ubHk6IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSxcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiBmbixcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiApO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgLy8gQGZiLW9ubHk6IH1cbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiB9XG4gIHJldHVybiBmbigpO1xufVxuXG5mdW5jdGlvbiB3cmFwKGZuKSB7XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICAvLyBAZmItb25seTogaWYgKF9fREVWX18pIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiBpZiAoU2NoZWR1bGVyVHJhY2luZy51bnN0YWJsZV93cmFwICE9PSB1bmRlZmluZWQpIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiByZXR1cm4gU2NoZWR1bGVyVHJhY2luZy51bnN0YWJsZV93cmFwKGZuKTtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiB9XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICAvLyBAZmItb25seTogfVxuICByZXR1cm4gZm47XG59XG5cbnZhciBSZWNvaWxfVHJhY2luZyA9IHtcbiAgdHJhY2UsXG4gIHdyYXBcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogVXRpbGl0aWVzIGZvciB3b3JraW5nIHdpdGggYnVpbHQtaW4gTWFwcyBhbmQgU2V0cyB3aXRob3V0IG11dGF0aW5nIHRoZW0uXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBzZXRCeUFkZGluZ1RvU2V0KHNldCwgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IFNldChzZXQpO1xuICBuZXh0LmFkZCh2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIHNldEJ5RGVsZXRpbmdGcm9tU2V0KHNldCwgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IFNldChzZXQpO1xuICBuZXh0LmRlbGV0ZSh2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIG1hcEJ5U2V0dGluZ0luTWFwKG1hcCwgaywgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IE1hcChtYXApO1xuICBuZXh0LnNldChrLCB2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIG1hcEJ5VXBkYXRpbmdJbk1hcChtYXAsIGssIHVwZGF0ZXIpIHtcbiAgY29uc3QgbmV4dCA9IG5ldyBNYXAobWFwKTtcbiAgbmV4dC5zZXQoaywgdXBkYXRlcihuZXh0LmdldChrKSkpO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gbWFwQnlEZWxldGluZ0Zyb21NYXAobWFwLCBrKSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgTWFwKG1hcCk7XG4gIG5leHQuZGVsZXRlKGspO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gbWFwQnlEZWxldGluZ011bHRpcGxlRnJvbU1hcChtYXAsIGtzKSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgTWFwKG1hcCk7XG4gIGtzLmZvckVhY2goayA9PiBuZXh0LmRlbGV0ZShrKSk7XG4gIHJldHVybiBuZXh0O1xufVxuXG52YXIgUmVjb2lsX0NvcHlPbldyaXRlID0ge1xuICBzZXRCeUFkZGluZ1RvU2V0LFxuICBzZXRCeURlbGV0aW5nRnJvbVNldCxcbiAgbWFwQnlTZXR0aW5nSW5NYXAsXG4gIG1hcEJ5VXBkYXRpbmdJbk1hcCxcbiAgbWFwQnlEZWxldGluZ0Zyb21NYXAsXG4gIG1hcEJ5RGVsZXRpbmdNdWx0aXBsZUZyb21NYXBcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBzcHJpbnRmKGZvcm1hdCwgLi4uYXJncykge1xuICBsZXQgaW5kZXggPSAwO1xuICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoLyVzL2csICgpID0+IFN0cmluZyhhcmdzW2luZGV4KytdKSk7XG59XG5cbnZhciBzcHJpbnRmXzEgPSBzcHJpbnRmO1xuXG5mdW5jdGlvbiBleHBlY3RhdGlvblZpb2xhdGlvbihmb3JtYXQsIC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBzcHJpbnRmXzEuY2FsbChudWxsLCBmb3JtYXQsIC4uLmFyZ3MpO1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIGVycm9yLm5hbWUgPSAnRXhwZWN0YXRpb24gVmlvbGF0aW9uJztcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfVxufVxuXG52YXIgZXhwZWN0YXRpb25WaW9sYXRpb25fMSA9IGV4cGVjdGF0aW9uVmlvbGF0aW9uO1xuXG4vLyBAb3NzLW9ubHlcblxuXG52YXIgUmVjb2lsX2V4cGVjdGF0aW9uVmlvbGF0aW9uID0gZXhwZWN0YXRpb25WaW9sYXRpb25fMTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmNsYXNzIEFic3RyYWN0UmVjb2lsVmFsdWUge1xuICBjb25zdHJ1Y3RvcihuZXdLZXkpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJrZXlcIiwgdm9pZCAwKTtcblxuICAgIHRoaXMua2V5ID0gbmV3S2V5O1xuICB9XG5cbn1cblxuY2xhc3MgUmVjb2lsU3RhdGUgZXh0ZW5kcyBBYnN0cmFjdFJlY29pbFZhbHVlIHt9XG5cbmNsYXNzIFJlY29pbFZhbHVlUmVhZE9ubHkgZXh0ZW5kcyBBYnN0cmFjdFJlY29pbFZhbHVlIHt9XG5cbmZ1bmN0aW9uIGlzUmVjb2lsVmFsdWUoeCkge1xuICByZXR1cm4geCBpbnN0YW5jZW9mIFJlY29pbFN0YXRlIHx8IHggaW5zdGFuY2VvZiBSZWNvaWxWYWx1ZVJlYWRPbmx5O1xufVxuXG52YXIgUmVjb2lsX1JlY29pbFZhbHVlID0ge1xuICBBYnN0cmFjdFJlY29pbFZhbHVlLFxuICBSZWNvaWxTdGF0ZSxcbiAgUmVjb2lsVmFsdWVSZWFkT25seSxcbiAgaXNSZWNvaWxWYWx1ZVxufTtcblxudmFyIFJlY29pbF9SZWNvaWxWYWx1ZV8xID0gUmVjb2lsX1JlY29pbFZhbHVlLkFic3RyYWN0UmVjb2lsVmFsdWU7XG52YXIgUmVjb2lsX1JlY29pbFZhbHVlXzIgPSBSZWNvaWxfUmVjb2lsVmFsdWUuUmVjb2lsU3RhdGU7XG52YXIgUmVjb2lsX1JlY29pbFZhbHVlXzMgPSBSZWNvaWxfUmVjb2lsVmFsdWUuUmVjb2lsVmFsdWVSZWFkT25seTtcbnZhciBSZWNvaWxfUmVjb2lsVmFsdWVfNCA9IFJlY29pbF9SZWNvaWxWYWx1ZS5pc1JlY29pbFZhbHVlO1xuXG52YXIgUmVjb2lsX1JlY29pbFZhbHVlJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogUmVjb2lsX1JlY29pbFZhbHVlXzEsXG4gIFJlY29pbFN0YXRlOiBSZWNvaWxfUmVjb2lsVmFsdWVfMixcbiAgUmVjb2lsVmFsdWVSZWFkT25seTogUmVjb2lsX1JlY29pbFZhbHVlXzMsXG4gIGlzUmVjb2lsVmFsdWU6IFJlY29pbF9SZWNvaWxWYWx1ZV80XG59KTtcblxuY2xhc3MgRGVmYXVsdFZhbHVlIHt9XG5cbmNvbnN0IERFRkFVTFRfVkFMVUUgPSBuZXcgRGVmYXVsdFZhbHVlKCk7XG5cbmNsYXNzIFJlY29pbFZhbHVlTm90UmVhZHkgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGtleSkge1xuICAgIHN1cGVyKGBUcmllZCB0byBzZXQgdGhlIHZhbHVlIG9mIFJlY29pbCBzZWxlY3RvciAke2tleX0gdXNpbmcgYW4gdXBkYXRlciBmdW5jdGlvbiwgYnV0IGl0IGlzIGFuIGFzeW5jIHNlbGVjdG9yIGluIGEgcGVuZGluZyBvciBlcnJvciBzdGF0ZTsgdGhpcyBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICB9XG5cbn1cblxuLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbmNvbnN0IG5vZGVzID0gbmV3IE1hcCgpOyAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5jb25zdCByZWNvaWxWYWx1ZXMgPSBuZXcgTWFwKCk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuZnVuY3Rpb24gcmVnaXN0ZXJOb2RlKG5vZGUpIHtcbiAgaWYgKG5vZGVzLmhhcyhub2RlLmtleSkpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYER1cGxpY2F0ZSBhdG9tIGtleSBcIiR7bm9kZS5rZXl9XCIuIFRoaXMgaXMgYSBGQVRBTCBFUlJPUiBpblxuICAgICAgcHJvZHVjdGlvbi4gQnV0IGl0IGlzIHNhZmUgdG8gaWdub3JlIHRoaXMgd2FybmluZyBpZiBpdCBvY2N1cnJlZCBiZWNhdXNlIG9mXG4gICAgICBob3QgbW9kdWxlIHJlcGxhY2VtZW50LmA7IC8vIFRPRE8gTmVlZCB0byBmaWd1cmUgb3V0IGlmIHRoZXJlIGlzIGEgc3RhbmRhcmQvb3Blbi1zb3VyY2UgZXF1aXZhbGVudCB0byBzZWUgaWYgaG90IG1vZHVsZSByZXBsYWNlbWVudCBpcyBoYXBwZW5pbmc6XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgLy8gQGZiLW9ubHk6IGlmIChfX0RFVl9fKSB7XG4gICAgLy8gQGZiLW9ubHk6IGNvbnN0IGlzQWNjZXB0aW5nVXBkYXRlID0gcmVxdWlyZSgnX19kZWJ1ZycpLmlzQWNjZXB0aW5nVXBkYXRlO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIC8vIEBmYi1vbmx5OiBpZiAodHlwZW9mIGlzQWNjZXB0aW5nVXBkYXRlICE9PSAnZnVuY3Rpb24nIHx8ICFpc0FjY2VwdGluZ1VwZGF0ZSgpKSB7XG4gICAgLy8gQGZiLW9ubHk6IGV4cGVjdGF0aW9uVmlvbGF0aW9uKG1lc3NhZ2UsICdyZWNvaWwnKTtcbiAgICAvLyBAZmItb25seTogfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIC8vIEBmYi1vbmx5OiB9IGVsc2Uge1xuICAgIC8vIEBmYi1vbmx5OiByZWNvdmVyYWJsZVZpb2xhdGlvbihtZXNzYWdlLCAncmVjb2lsJyk7XG4gICAgLy8gQGZiLW9ubHk6IH1cblxuICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTsgLy8gQG9zcy1vbmx5XG4gIH1cblxuICBub2Rlcy5zZXQobm9kZS5rZXksIG5vZGUpO1xuICBjb25zdCByZWNvaWxWYWx1ZSA9IG5vZGUuc2V0ID09IG51bGwgPyBuZXcgUmVjb2lsX1JlY29pbFZhbHVlJDEuUmVjb2lsVmFsdWVSZWFkT25seShub2RlLmtleSkgOiBuZXcgUmVjb2lsX1JlY29pbFZhbHVlJDEuUmVjb2lsU3RhdGUobm9kZS5rZXkpO1xuICByZWNvaWxWYWx1ZXMuc2V0KG5vZGUua2V5LCByZWNvaWxWYWx1ZSk7XG4gIHJldHVybiByZWNvaWxWYWx1ZTtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG5cblxuY2xhc3MgTm9kZU1pc3NpbmdFcnJvciBleHRlbmRzIEVycm9yIHt9IC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cblxuZnVuY3Rpb24gZ2V0Tm9kZShrZXkpIHtcbiAgY29uc3Qgbm9kZSA9IG5vZGVzLmdldChrZXkpO1xuXG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgTm9kZU1pc3NpbmdFcnJvcihgTWlzc2luZyBkZWZpbml0aW9uIGZvciBSZWNvaWxWYWx1ZTogXCIke2tleX1cIlwiYCk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn0gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG5mdW5jdGlvbiBnZXROb2RlTWF5YmUoa2V5KSB7XG4gIHJldHVybiBub2Rlcy5nZXQoa2V5KTtcbn1cblxudmFyIFJlY29pbF9Ob2RlID0ge1xuICBub2RlcyxcbiAgcmVjb2lsVmFsdWVzLFxuICByZWdpc3Rlck5vZGUsXG4gIGdldE5vZGUsXG4gIGdldE5vZGVNYXliZSxcbiAgTm9kZU1pc3NpbmdFcnJvcixcbiAgRGVmYXVsdFZhbHVlLFxuICBERUZBVUxUX1ZBTFVFLFxuICBSZWNvaWxWYWx1ZU5vdFJlYWR5XG59O1xuXG5jb25zdCB7XG4gIG1hcEJ5RGVsZXRpbmdGcm9tTWFwOiBtYXBCeURlbGV0aW5nRnJvbU1hcCQxLFxuICBtYXBCeVNldHRpbmdJbk1hcDogbWFwQnlTZXR0aW5nSW5NYXAkMSxcbiAgc2V0QnlBZGRpbmdUb1NldDogc2V0QnlBZGRpbmdUb1NldCQxXG59ID0gUmVjb2lsX0NvcHlPbldyaXRlO1xuXG5jb25zdCB7XG4gIGdldE5vZGU6IGdldE5vZGUkMSxcbiAgZ2V0Tm9kZU1heWJlOiBnZXROb2RlTWF5YmUkMVxufSA9IFJlY29pbF9Ob2RlOyAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5cbmNvbnN0IGVtcHR5U2V0ID0gT2JqZWN0LmZyZWV6ZShuZXcgU2V0KCkpO1xuXG5jbGFzcyBSZWFkT25seVJlY29pbFZhbHVlRXJyb3IgZXh0ZW5kcyBFcnJvciB7fSAvLyBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgbG9hZGFibGUgb2YgYSBub2RlIGFuZCB1cGRhdGUgdGhlIHN0YXRlLlxuLy8gVXBkYXRlIGRlcGVuZGVuY2llcyBhbmQgc3Vic2NyaXB0aW9ucyBmb3Igc2VsZWN0b3JzLlxuLy8gVXBkYXRlIHNhdmVkIHZhbHVlIHZhbGlkYXRpb24gZm9yIGF0b21zLlxuXG5cbmZ1bmN0aW9uIGdldE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIGtleSkge1xuICByZXR1cm4gZ2V0Tm9kZSQxKGtleSkuZ2V0KHN0b3JlLCBzdGF0ZSk7XG59IC8vIFBlZWsgYXQgdGhlIGN1cnJlbnQgdmFsdWUgbG9hZGFibGUgZm9yIGEgbm9kZSB3aXRob3V0IGFueSBldmFsdWF0aW9uIG9yIHN0YXRlIGNoYW5nZVxuXG5cbmZ1bmN0aW9uIHBlZWtOb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBrZXkpIHtcbiAgcmV0dXJuIGdldE5vZGUkMShrZXkpLnBlZWsoc3RvcmUsIHN0YXRlKTtcbn0gLy8gV3JpdGUgdmFsdWUgZGlyZWN0bHkgdG8gc3RhdGUgYnlwYXNzaW5nIHRoZSBOb2RlIGludGVyZmFjZSBhcyB0aGUgbm9kZVxuLy8gZGVmaW5pdGlvbnMgbWF5IG5vdCBoYXZlIGJlZW4gbG9hZGVkIHlldCB3aGVuIHByb2Nlc3NpbmcgdGhlIGluaXRpYWwgc25hcHNob3QuXG5cblxuZnVuY3Rpb24gc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRChzdGF0ZSwga2V5LCBuZXdWYWx1ZSkge1xuICB2YXIgX25vZGUkaW52YWxpZGF0ZTtcblxuICBjb25zdCBub2RlID0gZ2V0Tm9kZU1heWJlJDEoa2V5KTtcbiAgbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX25vZGUkaW52YWxpZGF0ZSA9IG5vZGUuaW52YWxpZGF0ZSkgPT09IG51bGwgfHwgX25vZGUkaW52YWxpZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkaW52YWxpZGF0ZS5jYWxsKG5vZGUsIHN0YXRlKTtcbiAgcmV0dXJuIHsgLi4uc3RhdGUsXG4gICAgYXRvbVZhbHVlczogbWFwQnlEZWxldGluZ0Zyb21NYXAkMShzdGF0ZS5hdG9tVmFsdWVzLCBrZXkpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBtYXBCeVNldHRpbmdJbk1hcCQxKHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLCBrZXksIG5ld1ZhbHVlKSxcbiAgICBkaXJ0eUF0b21zOiBzZXRCeUFkZGluZ1RvU2V0JDEoc3RhdGUuZGlydHlBdG9tcywga2V5KVxuICB9O1xufSAvLyBSZXR1cm4gdGhlIGRpc2NvdmVyZWQgZGVwZW5kZW5jaWVzIGFuZCB2YWx1ZXMgdG8gYmUgd3JpdHRlbiBieSBzZXR0aW5nXG4vLyBhIG5vZGUgdmFsdWUuIChNdWx0aXBsZSB2YWx1ZXMgbWF5IGJlIHdyaXR0ZW4gZHVlIHRvIHNlbGVjdG9ycyBnZXR0aW5nIHRvXG4vLyBzZXQgdXBzdHJlYW1zOyBkZXBzIG1heSBiZSBkaXNjb3ZlcmVkIGJlY2F1c2Ugb2YgcmVhZHMgaW4gdXBkYXRlciBmdW5jdGlvbnMuKVxuXG5cbmZ1bmN0aW9uIHNldE5vZGVWYWx1ZShzdG9yZSwgc3RhdGUsIGtleSwgbmV3VmFsdWUpIHtcbiAgY29uc3Qgbm9kZSA9IGdldE5vZGUkMShrZXkpO1xuXG4gIGlmIChub2RlLnNldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFJlYWRPbmx5UmVjb2lsVmFsdWVFcnJvcihgQXR0ZW1wdCB0byBzZXQgcmVhZC1vbmx5IFJlY29pbFZhbHVlOiAke2tleX1gKTtcbiAgfVxuXG4gIHJldHVybiBub2RlLnNldChzdG9yZSwgc3RhdGUsIG5ld1ZhbHVlKTtcbn1cblxuZnVuY3Rpb24gY2xlYW5VcE5vZGUoc3RvcmUsIGtleSkge1xuICBjb25zdCBub2RlID0gZ2V0Tm9kZSQxKGtleSk7XG4gIG5vZGUuY2xlYW5VcChzdG9yZSk7XG59IC8vIEZpbmQgYWxsIG9mIHRoZSByZWN1cnNpdmVseSBkZXBlbmRlbnQgbm9kZXNcblxuXG5mdW5jdGlvbiBnZXREb3duc3RyZWFtTm9kZXMoc3RvcmUsIHN0YXRlLCBrZXlzKSB7XG4gIGNvbnN0IHZpc2l0ZWROb2RlcyA9IG5ldyBTZXQoKTtcbiAgY29uc3QgdmlzaXRpbmdOb2RlcyA9IEFycmF5LmZyb20oa2V5cyk7XG4gIGNvbnN0IGdyYXBoID0gc3RvcmUuZ2V0R3JhcGgoc3RhdGUudmVyc2lvbik7XG5cbiAgZm9yIChsZXQga2V5ID0gdmlzaXRpbmdOb2Rlcy5wb3AoKTsga2V5OyBrZXkgPSB2aXNpdGluZ05vZGVzLnBvcCgpKSB7XG4gICAgdmFyIF9ncmFwaCRub2RlVG9Ob2RlU3VicztcblxuICAgIHZpc2l0ZWROb2Rlcy5hZGQoa2V5KTtcbiAgICBjb25zdCBzdWJzY3JpYmVkTm9kZXMgPSAoX2dyYXBoJG5vZGVUb05vZGVTdWJzID0gZ3JhcGgubm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZ2V0KGtleSkpICE9PSBudWxsICYmIF9ncmFwaCRub2RlVG9Ob2RlU3VicyAhPT0gdm9pZCAwID8gX2dyYXBoJG5vZGVUb05vZGVTdWJzIDogZW1wdHlTZXQ7XG5cbiAgICBmb3IgKGNvbnN0IGRvd25zdHJlYW1Ob2RlIG9mIHN1YnNjcmliZWROb2Rlcykge1xuICAgICAgaWYgKCF2aXNpdGVkTm9kZXMuaGFzKGRvd25zdHJlYW1Ob2RlKSkge1xuICAgICAgICB2aXNpdGluZ05vZGVzLnB1c2goZG93bnN0cmVhbU5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2aXNpdGVkTm9kZXM7XG59XG5cbnZhciBSZWNvaWxfRnVuY3Rpb25hbENvcmUgPSB7XG4gIGdldE5vZGVMb2FkYWJsZSxcbiAgcGVla05vZGVMb2FkYWJsZSxcbiAgc2V0Tm9kZVZhbHVlLFxuICBjbGVhblVwTm9kZSxcbiAgc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCxcbiAgZ2V0RG93bnN0cmVhbU5vZGVzXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8qKlxuICogUmV0dXJucyBhIHNldCBjb250YWluaW5nIGFsbCBvZiB0aGUgdmFsdWVzIGZyb20gdGhlIGZpcnN0IHNldCB0aGF0IGFyZSBub3RcbiAqIHByZXNlbnQgaW4gYW55IG9mIHRoZSBzdWJzZXF1ZW50IHNldHMuXG4gKlxuICogTm90ZTogdGhpcyBpcyB3cml0dGVuIHByb2NlZHVyYWxseSAoaS5lLiwgd2l0aG91dCBmaWx0ZXJTZXQpIGZvciBwZXJmb3JtYW50XG4gKiB1c2UgaW4gdGlnaHQgbG9vcHMuXG4gKi9cblxuZnVuY3Rpb24gZGlmZmVyZW5jZVNldHMoc2V0LCAuLi5zZXRzV2l0aFZhbHVlc1RvUmVtb3ZlKSB7XG4gIGNvbnN0IHJldCA9IG5ldyBTZXQoKTtcblxuICBGSVJTVDogZm9yIChjb25zdCB2YWx1ZSBvZiBzZXQpIHtcbiAgICBmb3IgKGNvbnN0IG90aGVyU2V0IG9mIHNldHNXaXRoVmFsdWVzVG9SZW1vdmUpIHtcbiAgICAgIGlmIChvdGhlclNldC5oYXModmFsdWUpKSB7XG4gICAgICAgIGNvbnRpbnVlIEZJUlNUO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldC5hZGQodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxudmFyIFJlY29pbF9kaWZmZXJlbmNlU2V0cyA9IGRpZmZlcmVuY2VTZXRzO1xuXG5mdW5jdGlvbiBncmFwaCgpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlRGVwczogbmV3IE1hcCgpLFxuICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOiBuZXcgTWFwKClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xvbmVHcmFwaChncmFwaCkge1xuICByZXR1cm4ge1xuICAgIG5vZGVEZXBzOiBSZWNvaWxfbWFwTWFwKGdyYXBoLm5vZGVEZXBzLCBzID0+IG5ldyBTZXQocykpLFxuICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOiBSZWNvaWxfbWFwTWFwKGdyYXBoLm5vZGVUb05vZGVTdWJzY3JpcHRpb25zLCBzID0+IG5ldyBTZXQocykpXG4gIH07XG59IC8vIE5vdGUgdGhhdCB0aGlzIG92ZXJ3cml0ZXMgdGhlIGRlcHMgb2YgZXhpc3Rpbmcgbm9kZXMsIHJhdGhlciB0aGFuIHVuaW9uaW5nXG4vLyB0aGUgbmV3IGRlcHMgd2l0aCB0aGUgb2xkIGRlcHMuXG5cblxuZnVuY3Rpb24gbWVyZ2VEZXBlbmRlbmN5TWFwSW50b0dyYXBoKGRlcHMsIGdyYXBoLCAvLyBJZiBvbGRlckdyYXBoIGlzIGdpdmVuIHRoZW4gd2Ugd2lsbCBub3Qgb3ZlcndyaXRlIGNoYW5nZXMgbWFkZSB0byB0aGUgZ2l2ZW5cbi8vIGdyYXBoIGNvbXBhcmVkIHdpdGggb2xkZXJHcmFwaDpcbm9sZGVyR3JhcGgpIHtcbiAgY29uc3Qge1xuICAgIG5vZGVEZXBzLFxuICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zXG4gIH0gPSBncmFwaDtcbiAgZGVwcy5mb3JFYWNoKCh1cHN0cmVhbXMsIGRvd25zdHJlYW0pID0+IHtcbiAgICBjb25zdCBleGlzdGluZ1Vwc3RyZWFtcyA9IG5vZGVEZXBzLmdldChkb3duc3RyZWFtKTtcblxuICAgIGlmIChleGlzdGluZ1Vwc3RyZWFtcyAmJiBvbGRlckdyYXBoICYmIGV4aXN0aW5nVXBzdHJlYW1zICE9PSBvbGRlckdyYXBoLm5vZGVEZXBzLmdldChkb3duc3RyZWFtKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVXBkYXRlIG5vZGVEZXBzOlxuXG5cbiAgICBub2RlRGVwcy5zZXQoZG93bnN0cmVhbSwgbmV3IFNldCh1cHN0cmVhbXMpKTsgLy8gQWRkIG5ldyBkZXBzIHRvIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOlxuXG4gICAgY29uc3QgYWRkZWRVcHN0cmVhbXMgPSBleGlzdGluZ1Vwc3RyZWFtcyA9PSBudWxsID8gdXBzdHJlYW1zIDogUmVjb2lsX2RpZmZlcmVuY2VTZXRzKHVwc3RyZWFtcywgZXhpc3RpbmdVcHN0cmVhbXMpO1xuICAgIGFkZGVkVXBzdHJlYW1zLmZvckVhY2godXBzdHJlYW0gPT4ge1xuICAgICAgaWYgKCFub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5oYXModXBzdHJlYW0pKSB7XG4gICAgICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zLnNldCh1cHN0cmVhbSwgbmV3IFNldCgpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXhpc3RpbmcgPSBSZWNvaWxfbnVsbHRocm93cyhub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQodXBzdHJlYW0pKTtcbiAgICAgIGV4aXN0aW5nLmFkZChkb3duc3RyZWFtKTtcbiAgICB9KTsgLy8gUmVtb3ZlIHJlbW92ZWQgZGVwcyBmcm9tIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOlxuXG4gICAgaWYgKGV4aXN0aW5nVXBzdHJlYW1zKSB7XG4gICAgICBjb25zdCByZW1vdmVkVXBzdHJlYW1zID0gUmVjb2lsX2RpZmZlcmVuY2VTZXRzKGV4aXN0aW5nVXBzdHJlYW1zLCB1cHN0cmVhbXMpO1xuICAgICAgcmVtb3ZlZFVwc3RyZWFtcy5mb3JFYWNoKHVwc3RyZWFtID0+IHtcbiAgICAgICAgaWYgKCFub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5oYXModXBzdHJlYW0pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBSZWNvaWxfbnVsbHRocm93cyhub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQodXBzdHJlYW0pKTtcbiAgICAgICAgZXhpc3RpbmcuZGVsZXRlKGRvd25zdHJlYW0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZy5zaXplID09PSAwKSB7XG4gICAgICAgICAgbm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZGVsZXRlKHVwc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlKGRlcGVuZGVuY3lNYXAsIHN0b3JlLCB2ZXJzaW9uKSB7XG4gIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZSwgX3N0b3JlU3RhdGUkcHJldmlvdXNULCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QyLCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QzO1xuXG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmICghKHZlcnNpb24gPT09IHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbiB8fCB2ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJG5leHRUcmVlID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkbmV4dFRyZWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5leHRUcmVlLnZlcnNpb24pIHx8IHZlcnNpb24gPT09ICgoX3N0b3JlU3RhdGUkcHJldmlvdXNUID0gc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJHByZXZpb3VzVCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcHJldmlvdXNULnZlcnNpb24pKSkge1xuICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignVHJpZWQgdG8gc2F2ZSBkZXBlbmRlbmNpZXMgdG8gYSBkaXNjYXJkZWQgdHJlZScpO1xuICB9IC8vIE1lcmdlIHRoZSBkZXBlbmRlbmNpZXMgZGlzY292ZXJlZCBpbnRvIHRoZSBzdG9yZSdzIGRlcGVuZGVuY3kgbWFwXG4gIC8vIGZvciB0aGUgdmVyc2lvbiB0aGF0IHdhcyByZWFkOlxuXG5cbiAgY29uc3QgZ3JhcGggPSBzdG9yZS5nZXRHcmFwaCh2ZXJzaW9uKTtcbiAgbWVyZ2VEZXBlbmRlbmN5TWFwSW50b0dyYXBoKGRlcGVuZGVuY3lNYXAsIGdyYXBoKTsgLy8gSWYgdGhpcyB2ZXJzaW9uIGlzIG5vdCB0aGUgbGF0ZXN0IHZlcnNpb24sIGFsc28gd3JpdGUgdGhlc2UgZGVwZW5kZW5jaWVzXG4gIC8vIGludG8gbGF0ZXIgdmVyc2lvbnMgaWYgdGhleSBkb24ndCBhbHJlYWR5IGhhdmUgdGhlaXIgb3duOlxuXG4gIGlmICh2ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJHByZXZpb3VzVDIgPSBzdG9yZVN0YXRlLnByZXZpb3VzVHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkcHJldmlvdXNUMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcHJldmlvdXNUMi52ZXJzaW9uKSkge1xuICAgIGNvbnN0IGN1cnJlbnRHcmFwaCA9IHN0b3JlLmdldEdyYXBoKHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbik7XG4gICAgbWVyZ2VEZXBlbmRlbmN5TWFwSW50b0dyYXBoKGRlcGVuZGVuY3lNYXAsIGN1cnJlbnRHcmFwaCwgZ3JhcGgpO1xuICB9XG5cbiAgaWYgKHZlcnNpb24gPT09ICgoX3N0b3JlU3RhdGUkcHJldmlvdXNUMyA9IHN0b3JlU3RhdGUucHJldmlvdXNUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmVTdGF0ZSRwcmV2aW91c1QzLnZlcnNpb24pIHx8IHZlcnNpb24gPT09IHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbikge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZTI7XG5cbiAgICBjb25zdCBuZXh0VmVyc2lvbiA9IChfc3RvcmVTdGF0ZSRuZXh0VHJlZTIgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRuZXh0VHJlZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5leHRUcmVlMi52ZXJzaW9uO1xuXG4gICAgaWYgKG5leHRWZXJzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IG5leHRHcmFwaCA9IHN0b3JlLmdldEdyYXBoKG5leHRWZXJzaW9uKTtcbiAgICAgIG1lcmdlRGVwZW5kZW5jeU1hcEludG9HcmFwaChkZXBlbmRlbmN5TWFwLCBuZXh0R3JhcGgsIGdyYXBoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VEZXBzSW50b0RlcGVuZGVuY3lNYXAoZnJvbSwgaW50bykge1xuICBmcm9tLmZvckVhY2goKHVwc3RyZWFtRGVwcywgZG93bnN0cmVhbU5vZGUpID0+IHtcbiAgICBpZiAoIWludG8uaGFzKGRvd25zdHJlYW1Ob2RlKSkge1xuICAgICAgaW50by5zZXQoZG93bnN0cmVhbU5vZGUsIG5ldyBTZXQoKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVwcyA9IFJlY29pbF9udWxsdGhyb3dzKGludG8uZ2V0KGRvd25zdHJlYW1Ob2RlKSk7XG4gICAgdXBzdHJlYW1EZXBzLmZvckVhY2goZGVwID0+IGRlcHMuYWRkKGRlcCkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVG9EZXBlbmRlbmN5TWFwKGRvd25zdHJlYW0sIHVwc3RyZWFtLCBkZXBlbmRlbmN5TWFwKSB7XG4gIGlmICghZGVwZW5kZW5jeU1hcC5oYXMoZG93bnN0cmVhbSkpIHtcbiAgICBkZXBlbmRlbmN5TWFwLnNldChkb3duc3RyZWFtLCBuZXcgU2V0KCkpO1xuICB9XG5cbiAgUmVjb2lsX251bGx0aHJvd3MoZGVwZW5kZW5jeU1hcC5nZXQoZG93bnN0cmVhbSkpLmFkZCh1cHN0cmVhbSk7XG59XG5cbnZhciBSZWNvaWxfR3JhcGggPSB7XG4gIGFkZFRvRGVwZW5kZW5jeU1hcCxcbiAgY2xvbmVHcmFwaCxcbiAgZ3JhcGgsXG4gIG1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwLFxuICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmVcbn07XG5cbmNvbnN0IHtcbiAgZ2V0RG93bnN0cmVhbU5vZGVzOiBnZXREb3duc3RyZWFtTm9kZXMkMSxcbiAgZ2V0Tm9kZUxvYWRhYmxlOiBnZXROb2RlTG9hZGFibGUkMSxcbiAgc2V0Tm9kZVZhbHVlOiBzZXROb2RlVmFsdWUkMVxufSA9IFJlY29pbF9GdW5jdGlvbmFsQ29yZTtcblxuY29uc3Qge1xuICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmU6IHNhdmVEZXBlbmRlbmN5TWFwVG9TdG9yZSQxXG59ID0gUmVjb2lsX0dyYXBoO1xuXG5jb25zdCB7XG4gIGdldE5vZGVNYXliZTogZ2V0Tm9kZU1heWJlJDJcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBEZWZhdWx0VmFsdWU6IERlZmF1bHRWYWx1ZSQxLFxuICBSZWNvaWxWYWx1ZU5vdFJlYWR5OiBSZWNvaWxWYWx1ZU5vdFJlYWR5JDFcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBBYnN0cmFjdFJlY29pbFZhbHVlJDEsXG4gIFJlY29pbFN0YXRlOiBSZWNvaWxTdGF0ZSQxLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5OiBSZWNvaWxWYWx1ZVJlYWRPbmx5JDEsXG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkMVxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5mdW5jdGlvbiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUoc3RvcmUsIHtcbiAga2V5XG59LCB0cmVlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlKSB7XG4gIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZSwgX3N0b3JlU3RhdGUkcHJldmlvdXNUO1xuXG4gIC8vIFJlYWRpbmcgZnJvbSBhbiBvbGRlciB0cmVlIGNhbiBjYXVzZSBidWdzIGJlY2F1c2UgdGhlIGRlcGVuZGVuY2llcyB0aGF0IHdlXG4gIC8vIGRpc2NvdmVyIGR1cmluZyB0aGUgcmVhZCBhcmUgbG9zdC5cbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgaWYgKCEodHJlZVN0YXRlLnZlcnNpb24gPT09IHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbiB8fCB0cmVlU3RhdGUudmVyc2lvbiA9PT0gKChfc3RvcmVTdGF0ZSRuZXh0VHJlZSA9IHN0b3JlU3RhdGUubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJG5leHRUcmVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmVTdGF0ZSRuZXh0VHJlZS52ZXJzaW9uKSB8fCB0cmVlU3RhdGUudmVyc2lvbiA9PT0gKChfc3RvcmVTdGF0ZSRwcmV2aW91c1QgPSBzdG9yZVN0YXRlLnByZXZpb3VzVHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkcHJldmlvdXNUID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmVTdGF0ZSRwcmV2aW91c1QudmVyc2lvbikpKSB7XG4gICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdUcmllZCB0byByZWFkIGZyb20gYSBkaXNjYXJkZWQgdHJlZScpO1xuICB9XG5cbiAgY29uc3QgW2RlcGVuZGVuY3lNYXAsIGxvYWRhYmxlXSA9IGdldE5vZGVMb2FkYWJsZSQxKHN0b3JlLCB0cmVlU3RhdGUsIGtleSk7XG5cbiAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9hc3luY19zZWxlY3Rvcl9yZWZhY3RvcicpKSB7XG4gICAgLyoqXG4gICAgICogSW4gc2VsZWN0b3JfTkVXLCB3ZSB0YWtlIGNhcmUgb2YgdXBkYXRpbmcgc3RhdGUgZGVwcyB3aXRoaW4gdGhlIHNlbGVjdG9yXG4gICAgICovXG4gICAgc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlJDEoZGVwZW5kZW5jeU1hcCwgc3RvcmUsIHRyZWVTdGF0ZS52ZXJzaW9uKTtcbiAgfVxuXG4gIHJldHVybiBsb2FkYWJsZTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBdG9tVmFsdWVXcml0ZXMoYXRvbVZhbHVlcywgd3JpdGVzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFJlY29pbF9tYXBNYXAoYXRvbVZhbHVlcywgdiA9PiB2KTtcbiAgd3JpdGVzLmZvckVhY2goKHYsIGspID0+IHtcbiAgICBpZiAodi5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJyAmJiB2LmNvbnRlbnRzIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDEpIHtcbiAgICAgIHJlc3VsdC5kZWxldGUoayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5zZXQoaywgdik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gdmFsdWVGcm9tVmFsdWVPclVwZGF0ZXIoc3RvcmUsIHN0YXRlLCB7XG4gIGtleVxufSwgdmFsdWVPclVwZGF0ZXIpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFVwZGF0ZXIgZm9ybTogcGFzcyBpbiB0aGUgY3VycmVudCB2YWx1ZS4gVGhyb3cgaWYgdGhlIGN1cnJlbnQgdmFsdWVcbiAgICAvLyBpcyB1bmF2YWlsYWJsZSAobmFtZWx5IHdoZW4gdXBkYXRpbmcgYW4gYXN5bmMgc2VsZWN0b3IgdGhhdCdzXG4gICAgLy8gcGVuZGluZyBvciBlcnJvcmVkKTpcbiAgICAvLyBOT1RFOiBUaGlzIHdpbGwgZXZhbHVhdGUgbm9kZSwgYnV0IG5vdCB1cGRhdGUgc3RhdGUgd2l0aCBub2RlIHN1YnNjcmlwdGlvbnMhXG4gICAgY29uc3QgY3VycmVudCA9IGdldE5vZGVMb2FkYWJsZSQxKHN0b3JlLCBzdGF0ZSwga2V5KVsxXTtcblxuICAgIGlmIChjdXJyZW50LnN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgIHRocm93IG5ldyBSZWNvaWxWYWx1ZU5vdFJlYWR5JDEoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnQuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICAgIHRocm93IGN1cnJlbnQuY29udGVudHM7XG4gICAgfSAvLyBUIGl0c2VsZiBtYXkgYmUgYSBmdW5jdGlvbiwgc28gb3VyIHJlZmluZW1lbnQgaXMgbm90IHN1ZmZpY2llbnQ6XG5cblxuICAgIHJldHVybiB2YWx1ZU9yVXBkYXRlcihjdXJyZW50LmNvbnRlbnRzKTsgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlT3JVcGRhdGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5QWN0aW9uKHN0b3JlLCBzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ3NldCcpIHtcbiAgICBjb25zdCB7XG4gICAgICByZWNvaWxWYWx1ZSxcbiAgICAgIHZhbHVlT3JVcGRhdGVyXG4gICAgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlRnJvbVZhbHVlT3JVcGRhdGVyKHN0b3JlLCBzdGF0ZSwgcmVjb2lsVmFsdWUsIHZhbHVlT3JVcGRhdGVyKTtcbiAgICBjb25zdCBbZGVwTWFwLCB3cml0ZXNdID0gc2V0Tm9kZVZhbHVlJDEoc3RvcmUsIHN0YXRlLCByZWNvaWxWYWx1ZS5rZXksIG5ld1ZhbHVlKTtcbiAgICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUkMShkZXBNYXAsIHN0b3JlLCBzdGF0ZS52ZXJzaW9uKTtcblxuICAgIGZvciAoY29uc3QgW2tleSwgbG9hZGFibGVdIG9mIHdyaXRlcy5lbnRyaWVzKCkpIHtcbiAgICAgIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZShzdGF0ZSwga2V5LCBsb2FkYWJsZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSAnc2V0TG9hZGFibGUnKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVjb2lsVmFsdWU6IHtcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgbG9hZGFibGVcbiAgICB9ID0gYWN0aW9uO1xuICAgIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZShzdGF0ZSwga2V5LCBsb2FkYWJsZSk7XG4gIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdtYXJrTW9kaWZpZWQnKSB7XG4gICAgY29uc3Qge1xuICAgICAgcmVjb2lsVmFsdWU6IHtcbiAgICAgICAga2V5XG4gICAgICB9XG4gICAgfSA9IGFjdGlvbjtcbiAgICBzdGF0ZS5kaXJ0eUF0b21zLmFkZChrZXkpO1xuICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSAnc2V0VW52YWxpZGF0ZWQnKSB7XG4gICAgdmFyIF9ub2RlJGludmFsaWRhdGU7XG5cbiAgICAvLyBXcml0ZSB2YWx1ZSBkaXJlY3RseSB0byBzdGF0ZSBieXBhc3NpbmcgdGhlIE5vZGUgaW50ZXJmYWNlIGFzIHRoZSBub2RlXG4gICAgLy8gZGVmaW5pdGlvbnMgbWF5IG5vdCBoYXZlIGJlZW4gbG9hZGVkIHlldCB3aGVuIHByb2Nlc3NpbmcgdGhlIGluaXRpYWwgc25hcHNob3QuXG4gICAgY29uc3Qge1xuICAgICAgcmVjb2lsVmFsdWU6IHtcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgdW52YWxpZGF0ZWRWYWx1ZVxuICAgIH0gPSBhY3Rpb247XG4gICAgY29uc3Qgbm9kZSA9IGdldE5vZGVNYXliZSQyKGtleSk7XG4gICAgbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX25vZGUkaW52YWxpZGF0ZSA9IG5vZGUuaW52YWxpZGF0ZSkgPT09IG51bGwgfHwgX25vZGUkaW52YWxpZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkaW52YWxpZGF0ZS5jYWxsKG5vZGUsIHN0YXRlKTtcbiAgICBzdGF0ZS5hdG9tVmFsdWVzLmRlbGV0ZShrZXkpO1xuICAgIHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLnNldChrZXksIHVudmFsaWRhdGVkVmFsdWUpO1xuICAgIHN0YXRlLmRpcnR5QXRvbXMuYWRkKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKGBVbmtub3duIGFjdGlvbiAke2FjdGlvbi50eXBlfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyaXRlTG9hZGFibGVUb1RyZWVTdGF0ZShzdGF0ZSwga2V5LCBsb2FkYWJsZSkge1xuICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScgJiYgbG9hZGFibGUuY29udGVudHMgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMSkge1xuICAgIHN0YXRlLmF0b21WYWx1ZXMuZGVsZXRlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuYXRvbVZhbHVlcy5zZXQoa2V5LCBsb2FkYWJsZSk7XG4gIH1cblxuICBzdGF0ZS5kaXJ0eUF0b21zLmFkZChrZXkpO1xuICBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5kZWxldGUoa2V5KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlBY3Rpb25zVG9TdG9yZShzdG9yZSwgYWN0aW9ucykge1xuICBzdG9yZS5yZXBsYWNlU3RhdGUoc3RhdGUgPT4ge1xuICAgIGNvbnN0IG5ld1N0YXRlID0gY29weVRyZWVTdGF0ZShzdGF0ZSk7XG5cbiAgICBmb3IgKGNvbnN0IGFjdGlvbiBvZiBhY3Rpb25zKSB7XG4gICAgICBhcHBseUFjdGlvbihzdG9yZSwgbmV3U3RhdGUsIGFjdGlvbik7XG4gICAgfVxuXG4gICAgaW52YWxpZGF0ZURvd25zdHJlYW1zKHN0b3JlLCBuZXdTdGF0ZSk7XG4gICAgcmV0dXJuIG5ld1N0YXRlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwgYWN0aW9uLCBrZXksIG1lc3NhZ2UpIHtcbiAgaWYgKGJhdGNoU3RhY2subGVuZ3RoKSB7XG4gICAgY29uc3QgYWN0aW9uc0J5U3RvcmUgPSBiYXRjaFN0YWNrW2JhdGNoU3RhY2subGVuZ3RoIC0gMV07XG4gICAgbGV0IGFjdGlvbnMgPSBhY3Rpb25zQnlTdG9yZS5nZXQoc3RvcmUpO1xuXG4gICAgaWYgKCFhY3Rpb25zKSB7XG4gICAgICBhY3Rpb25zQnlTdG9yZS5zZXQoc3RvcmUsIGFjdGlvbnMgPSBbXSk7XG4gICAgfVxuXG4gICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgUmVjb2lsX1RyYWNpbmcudHJhY2UobWVzc2FnZSwga2V5LCAoKSA9PiBhcHBseUFjdGlvbnNUb1N0b3JlKHN0b3JlLCBbYWN0aW9uXSkpO1xuICB9XG59XG5cbmNvbnN0IGJhdGNoU3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gYmF0Y2hTdGFydCgpIHtcbiAgY29uc3QgYWN0aW9uc0J5U3RvcmUgPSBuZXcgTWFwKCk7XG4gIGJhdGNoU3RhY2sucHVzaChhY3Rpb25zQnlTdG9yZSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgZm9yIChjb25zdCBbc3RvcmUsIGFjdGlvbnNdIG9mIGFjdGlvbnNCeVN0b3JlKSB7XG4gICAgICBSZWNvaWxfVHJhY2luZy50cmFjZSgnUmVjb2lsIGJhdGNoZWQgdXBkYXRlcycsICctJywgKCkgPT4gYXBwbHlBY3Rpb25zVG9TdG9yZShzdG9yZSwgYWN0aW9ucykpO1xuICAgIH1cblxuICAgIGNvbnN0IHBvcHBlZCA9IGJhdGNoU3RhY2sucG9wKCk7XG5cbiAgICBpZiAocG9wcGVkICE9PSBhY3Rpb25zQnlTdG9yZSkge1xuICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdJbmNvcnJlY3Qgb3JkZXIgb2YgYmF0Y2ggcG9wcGluZycpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29weVRyZWVTdGF0ZShzdGF0ZSkge1xuICByZXR1cm4geyAuLi5zdGF0ZSxcbiAgICBhdG9tVmFsdWVzOiBuZXcgTWFwKHN0YXRlLmF0b21WYWx1ZXMpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBuZXcgTWFwKHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zKSxcbiAgICBkaXJ0eUF0b21zOiBuZXcgU2V0KHN0YXRlLmRpcnR5QXRvbXMpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFsaWRhdGVEb3duc3RyZWFtcyhzdG9yZSwgc3RhdGUpIHtcbiAgLy8gSW5mb3JtIGFueSBub2RlcyB0aGF0IHdlcmUgY2hhbmdlZCBvciBkb3duc3RyZWFtIG9mIGNoYW5nZXMgc28gdGhhdCB0aGV5XG4gIC8vIGNhbiBjbGVhciBvdXQgYW55IGNhY2hlcyBhcyBuZWVkZWQgZHVlIHRvIHRoZSB1cGRhdGU6XG4gIGNvbnN0IGRvd25zdHJlYW1zID0gZ2V0RG93bnN0cmVhbU5vZGVzJDEoc3RvcmUsIHN0YXRlLCBzdGF0ZS5kaXJ0eUF0b21zKTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBkb3duc3RyZWFtcykge1xuICAgIHZhciBfZ2V0Tm9kZU1heWJlLCBfZ2V0Tm9kZU1heWJlJGludmFsaWQ7XG5cbiAgICAoX2dldE5vZGVNYXliZSA9IGdldE5vZGVNYXliZSQyKGtleSkpID09PSBudWxsIHx8IF9nZXROb2RlTWF5YmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZ2V0Tm9kZU1heWJlJGludmFsaWQgPSBfZ2V0Tm9kZU1heWJlLmludmFsaWRhdGUpID09PSBudWxsIHx8IF9nZXROb2RlTWF5YmUkaW52YWxpZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldE5vZGVNYXliZSRpbnZhbGlkLmNhbGwoX2dldE5vZGVNYXliZSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldFJlY29pbFZhbHVlKHN0b3JlLCByZWNvaWxWYWx1ZSwgdmFsdWVPclVwZGF0ZXIpIHtcbiAgcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwge1xuICAgIHR5cGU6ICdzZXQnLFxuICAgIHJlY29pbFZhbHVlLFxuICAgIHZhbHVlT3JVcGRhdGVyXG4gIH0sIHJlY29pbFZhbHVlLmtleSwgJ3NldCBSZWNvaWwgdmFsdWUnKTtcbn1cblxuZnVuY3Rpb24gc2V0UmVjb2lsVmFsdWVMb2FkYWJsZShzdG9yZSwgcmVjb2lsVmFsdWUsIGxvYWRhYmxlKSB7XG4gIGlmIChsb2FkYWJsZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQxKSB7XG4gICAgcmV0dXJuIHNldFJlY29pbFZhbHVlKHN0b3JlLCByZWNvaWxWYWx1ZSwgbG9hZGFibGUpO1xuICB9XG5cbiAgcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwge1xuICAgIHR5cGU6ICdzZXRMb2FkYWJsZScsXG4gICAgcmVjb2lsVmFsdWUsXG4gICAgbG9hZGFibGVcbiAgfSwgcmVjb2lsVmFsdWUua2V5LCAnc2V0IFJlY29pbCB2YWx1ZScpO1xufVxuXG5mdW5jdGlvbiBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZChzdG9yZSwgcmVjb2lsVmFsdWUpIHtcbiAgcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwge1xuICAgIHR5cGU6ICdtYXJrTW9kaWZpZWQnLFxuICAgIHJlY29pbFZhbHVlXG4gIH0sIHJlY29pbFZhbHVlLmtleSwgJ21hcmsgUmVjb2lsVmFsdWUgbW9kaWZpZWQnKTtcbn1cblxuZnVuY3Rpb24gc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZShzdG9yZSwgcmVjb2lsVmFsdWUsIHVudmFsaWRhdGVkVmFsdWUpIHtcbiAgcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwge1xuICAgIHR5cGU6ICdzZXRVbnZhbGlkYXRlZCcsXG4gICAgcmVjb2lsVmFsdWUsXG4gICAgdW52YWxpZGF0ZWRWYWx1ZVxuICB9LCByZWNvaWxWYWx1ZS5rZXksICdzZXQgUmVjb2lsIHZhbHVlJyk7XG59XG5cbmxldCBzdWJzY3JpcHRpb25JRCA9IDA7XG5cbmZ1bmN0aW9uIHN1YnNjcmliZVRvUmVjb2lsVmFsdWUoc3RvcmUsIHtcbiAga2V5XG59LCBjYWxsYmFjaywgY29tcG9uZW50RGVidWdOYW1lID0gbnVsbCkge1xuICBjb25zdCBzdWJJRCA9IHN1YnNjcmlwdGlvbklEKys7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmICghc3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLmhhcyhrZXkpKSB7XG4gICAgc3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLnNldChrZXksIG5ldyBNYXAoKSk7XG4gIH1cblxuICBSZWNvaWxfbnVsbHRocm93cyhzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuZ2V0KGtleSkpLnNldChzdWJJRCwgW2NvbXBvbmVudERlYnVnTmFtZSAhPT0gbnVsbCAmJiBjb21wb25lbnREZWJ1Z05hbWUgIT09IHZvaWQgMCA/IGNvbXBvbmVudERlYnVnTmFtZSA6ICc8bm90IGNhcHR1cmVkPicsIGNhbGxiYWNrXSk7XG4gIHJldHVybiB7XG4gICAgcmVsZWFzZTogKCkgPT4ge1xuICAgICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICBjb25zdCBzdWJzID0gc3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLmdldChrZXkpO1xuXG4gICAgICBpZiAoc3VicyA9PT0gdW5kZWZpbmVkIHx8ICFzdWJzLmhhcyhzdWJJRCkpIHtcbiAgICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKGBTdWJzY3JpcHRpb24gbWlzc2luZyBhdCByZWxlYXNlIHRpbWUgZm9yIGF0b20gJHtrZXl9LiBUaGlzIGlzIGEgYnVnIGluIFJlY29pbC5gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdWJzLmRlbGV0ZShzdWJJRCk7XG5cbiAgICAgIGlmIChzdWJzLnNpemUgPT09IDApIHtcbiAgICAgICAgc3RvcmVTdGF0ZS5ub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZSA9IHtcbiAgUmVjb2lsVmFsdWVSZWFkT25seTogUmVjb2lsVmFsdWVSZWFkT25seSQxLFxuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBBYnN0cmFjdFJlY29pbFZhbHVlJDEsXG4gIFJlY29pbFN0YXRlOiBSZWNvaWxTdGF0ZSQxLFxuICBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUsXG4gIHNldFJlY29pbFZhbHVlLFxuICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlLFxuICBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCxcbiAgc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSxcbiAgc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSxcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQxLFxuICBhcHBseUF0b21WYWx1ZVdyaXRlcyxcbiAgLy8gVE9ETyBSZW1vdmUgZXhwb3J0IHdoZW4gZGVwcmVjYXRpbmcgaW5pdGlhbFN0b3JlU3RhdGVfREVQUkVDQVRFRCBpbiBSZWNvaWxSb290XG4gIGJhdGNoU3RhcnQsXG4gIGludmFsaWRhdGVEb3duc3RyZWFtc19GT1JfVEVTVElORzogaW52YWxpZGF0ZURvd25zdHJlYW1zXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKlxuICogVGhpcyBpcyB0byBleHBvcnQgZXNzdGllbnRpYWwgZnVuY3Rpb25zIGZyb20gcmVhY3QtZG9tXG4gKiBmb3Igb3VyIHdlYiBidWlsZFxuICovXG5jb25zdCB7XG4gIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzXG59ID0gcmVhY3REb207IC8vIEBvc3Mtb25seVxuLy8gQGZiLW9ubHk6IGNvbnN0IHt1bnN0YWJsZV9iYXRjaGVkVXBkYXRlc30gPSByZXF1aXJlKCdSZWFjdERPTUNvbWV0Jyk7XG5cblxudmFyIFJlY29pbF9SZWFjdEJhdGNoZWRVcGRhdGVzID0ge1xuICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlc1xufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5jb25zdCB7XG4gIGJhdGNoU3RhcnQ6IGJhdGNoU3RhcnQkMVxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuY29uc3Qge1xuICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczogdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMkMVxufSA9IFJlY29pbF9SZWFjdEJhdGNoZWRVcGRhdGVzO1xuXG5sZXQgYmF0Y2hlciA9IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDE7IC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cbi8qKlxuICogU2V0cyB0aGUgcHJvdmlkZWQgYmF0Y2hlciBmdW5jdGlvbiBhcyB0aGUgYmF0Y2hlciBmdW5jdGlvbiB1c2VkIGJ5IFJlY29pbC5cbiAqXG4gKiBTZXQgdGhlIGJhdGNoZXIgdG8gYSBjdXN0b20gYmF0Y2hlciBmb3IgeW91ciByZW5kZXJlcixcbiAqIGlmIHlvdSB1c2UgYSByZW5kZXJlciBvdGhlciB0aGFuIFJlYWN0IERPTSBvciBSZWFjdCBOYXRpdmUuXG4gKi9cbmNvbnN0IHNldEJhdGNoZXIgPSBuZXdCYXRjaGVyID0+IHtcbiAgYmF0Y2hlciA9IG5ld0JhdGNoZXI7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGJhdGNoZXIgZnVuY3Rpb24uXG4gKi9cblxuXG5jb25zdCBnZXRCYXRjaGVyID0gKCkgPT4gYmF0Y2hlcjtcbi8qKlxuICogQ2FsbHMgdGhlIGN1cnJlbnQgYmF0Y2hlciBmdW5jdGlvbiBhbmQgcGFzc2VzIHRoZVxuICogcHJvdmlkZWQgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cblxuXG5jb25zdCBiYXRjaFVwZGF0ZXMgPSBjYWxsYmFjayA9PiB7XG4gIGJhdGNoZXIoKCkgPT4ge1xuICAgIGxldCBiYXRjaEVuZCA9ICgpID0+IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBiYXRjaEVuZCA9IGJhdGNoU3RhcnQkMSgpO1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYmF0Y2hFbmQoKTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIFJlY29pbF9CYXRjaGluZyA9IHtcbiAgZ2V0QmF0Y2hlcixcbiAgc2V0QmF0Y2hlcixcbiAgYmF0Y2hVcGRhdGVzXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gZW5xdWV1ZUV4ZWN1dGlvbihzLCBmKSB7XG4gIGYoKTtcbn1cblxudmFyIFJlY29pbF9RdWV1ZSA9IHtcbiAgZW5xdWV1ZUV4ZWN1dGlvblxufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG4vKipcbiAqIENvbWJpbmVzIG11bHRpcGxlIEl0ZXJhYmxlcyBpbnRvIGEgc2luZ2xlIEl0ZXJhYmxlLlxuICogVHJhdmVyc2VzIHRoZSBpbnB1dCBJdGVyYWJsZXMgaW4gdGhlIG9yZGVyIHByb3ZpZGVkIGFuZCBtYWludGFpbnMgdGhlIG9yZGVyXG4gKiBvZiB0aGVpciBlbGVtZW50cy5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgXG4gKiBjb25zdCByID0gQXJyYXkuZnJvbShjb25jYXRJdGVyYWJsZXMoWydhJywgJ2InXSwgWydjJ10sIFsnZCcsICdlJywgJ2YnXSkpO1xuICogciA9PSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJ107XG4gKiBgYGBcbiAqL1xuXG5mdW5jdGlvbiogY29uY2F0SXRlcmFibGVzKGl0ZXJzKSB7XG4gIGZvciAoY29uc3QgaXRlciBvZiBpdGVycykge1xuICAgIGZvciAoY29uc3QgdmFsIG9mIGl0ZXIpIHtcbiAgICAgIHlpZWxkIHZhbDtcbiAgICB9XG4gIH1cbn1cblxudmFyIFJlY29pbF9jb25jYXRJdGVyYWJsZXMgPSBjb25jYXRJdGVyYWJsZXM7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGl0ZXJhYmxlIHdob3NlIG91dHB1dCBpcyBnZW5lcmF0ZWQgYnkgcGFzc2luZyB0aGUgaW5wdXRcbiAqIGl0ZXJhYmxlJ3MgdmFsdWVzIHRocm91Z2ggdGhlIGZpbHRlciBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiogZmlsdGVySXRlcmFibGUoaXRlcmFibGUsIHByZWRpY2F0ZSkge1xuICAvLyBVc2UgZ2VuZXJhdG9yIHRvIGNyZWF0ZSBpdGVyYWJsZS9pdGVyYXRvclxuICBsZXQgaW5kZXggPSAwO1xuXG4gIGZvciAoY29uc3QgdmFsdWUgb2YgaXRlcmFibGUpIHtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCsrKSkge1xuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWNvaWxfZmlsdGVySXRlcmFibGUgPSBmaWx0ZXJJdGVyYWJsZTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaXRlcmFibGUgd2hvc2Ugb3V0cHV0IGlzIGdlbmVyYXRlZCBieSBwYXNzaW5nIHRoZSBpbnB1dFxuICogaXRlcmFibGUncyB2YWx1ZXMgdGhyb3VnaCB0aGUgbWFwcGVyIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG1hcEl0ZXJhYmxlKGl0ZXJhYmxlLCBjYWxsYmFjaykge1xuICAvLyBVc2UgZ2VuZXJhdG9yIHRvIGNyZWF0ZSBpdGVyYWJsZS9pdGVyYXRvclxuICByZXR1cm4gZnVuY3Rpb24qICgpIHtcbiAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBpdGVyYWJsZSkge1xuICAgICAgeWllbGQgY2FsbGJhY2sodmFsdWUsIGluZGV4KyspO1xuICAgIH1cbiAgfSgpO1xufVxuXG52YXIgUmVjb2lsX21hcEl0ZXJhYmxlID0gbWFwSXRlcmFibGU7XG5cbmNvbnN0IHtcbiAgZ3JhcGg6IGdyYXBoJDFcbn0gPSBSZWNvaWxfR3JhcGg7IC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cblxubGV0IG5leHRUcmVlU3RhdGVWZXJzaW9uID0gMDtcblxuY29uc3QgZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24gPSAoKSA9PiBuZXh0VHJlZVN0YXRlVmVyc2lvbisrO1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlUcmVlU3RhdGUoKSB7XG4gIGNvbnN0IHZlcnNpb24gPSBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbigpO1xuICByZXR1cm4ge1xuICAgIHZlcnNpb24sXG4gICAgc3RhdGVJRDogdmVyc2lvbixcbiAgICB0cmFuc2FjdGlvbk1ldGFkYXRhOiB7fSxcbiAgICBkaXJ0eUF0b21zOiBuZXcgU2V0KCksXG4gICAgYXRvbVZhbHVlczogbmV3IE1hcCgpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBuZXcgTWFwKClcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFrZUVtcHR5U3RvcmVTdGF0ZSgpIHtcbiAgY29uc3QgY3VycmVudFRyZWUgPSBtYWtlRW1wdHlUcmVlU3RhdGUoKTtcbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50VHJlZSxcbiAgICBuZXh0VHJlZTogbnVsbCxcbiAgICBwcmV2aW91c1RyZWU6IG51bGwsXG4gICAga25vd25BdG9tczogbmV3IFNldCgpLFxuICAgIGtub3duU2VsZWN0b3JzOiBuZXcgU2V0KCksXG4gICAgdHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zOiBuZXcgTWFwKCksXG4gICAgbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uczogbmV3IE1hcCgpLFxuICAgIG5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnM6IG5ldyBNYXAoKSxcbiAgICBxdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRDogW10sXG4gICAgc3VzcGVuZGVkQ29tcG9uZW50UmVzb2x2ZXJzOiBuZXcgU2V0KCksXG4gICAgZ3JhcGhzQnlWZXJzaW9uOiBuZXcgTWFwKCkuc2V0KGN1cnJlbnRUcmVlLnZlcnNpb24sIGdyYXBoJDEoKSksXG4gICAgdmVyc2lvbnNVc2VkQnlDb21wb25lbnQ6IG5ldyBNYXAoKVxuICB9O1xufVxuXG52YXIgUmVjb2lsX1N0YXRlID0ge1xuICBtYWtlRW1wdHlUcmVlU3RhdGUsXG4gIG1ha2VFbXB0eVN0b3JlU3RhdGUsXG4gIGdldE5leHRUcmVlU3RhdGVWZXJzaW9uXG59O1xuXG5jb25zdCB7XG4gIGJhdGNoVXBkYXRlczogYmF0Y2hVcGRhdGVzJDFcbn0gPSBSZWNvaWxfQmF0Y2hpbmc7XG5cbmNvbnN0IHtcbiAgZ2V0RG93bnN0cmVhbU5vZGVzOiBnZXREb3duc3RyZWFtTm9kZXMkMixcbiAgcGVla05vZGVMb2FkYWJsZTogcGVla05vZGVMb2FkYWJsZSQxXG59ID0gUmVjb2lsX0Z1bmN0aW9uYWxDb3JlO1xuXG5jb25zdCB7XG4gIGdyYXBoOiBncmFwaCQyXG59ID0gUmVjb2lsX0dyYXBoO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkMSxcbiAgcmVjb2lsVmFsdWVzOiByZWNvaWxWYWx1ZXMkMVxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZTogZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDEsXG4gIHNldFJlY29pbFZhbHVlOiBzZXRSZWNvaWxWYWx1ZSQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIGdldE5leHRUcmVlU3RhdGVWZXJzaW9uOiBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQxLFxuICBtYWtlRW1wdHlTdG9yZVN0YXRlOiBtYWtlRW1wdHlTdG9yZVN0YXRlJDFcbn0gPSBSZWNvaWxfU3RhdGU7IC8vIE9wYXF1ZSBhdCB0aGlzIHN1cmZhY2UgYmVjYXVzZSBpdCdzIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgZnJvbSBoZXJlLlxuXG5cbmZ1bmN0aW9uIHJlY29pbFZhbHVlc0ZvcktleXMoa2V5cykge1xuICByZXR1cm4gUmVjb2lsX21hcEl0ZXJhYmxlKGtleXMsIGtleSA9PiBSZWNvaWxfbnVsbHRocm93cyhyZWNvaWxWYWx1ZXMkMS5nZXQoa2V5KSkpO1xufSAvLyBBIFwiU25hcHNob3RcIiBpcyBcInJlYWQtb25seVwiIGFuZCBjYXB0dXJlcyBhIHNwZWNpZmljIHNldCBvZiB2YWx1ZXMgb2YgYXRvbXMuXG4vLyBIb3dldmVyLCB0aGUgZGF0YS1mbG93LWdyYXBoIGFuZCBzZWxlY3RvciB2YWx1ZXMgbWF5IGV2b2x2ZSBhcyBzZWxlY3RvclxuLy8gZXZhbHVhdGlvbiBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkIGFuZCBhc3luYyBzZWxlY3RvcnMgcmVzb2x2ZS5cblxuXG5jbGFzcyBTbmFwc2hvdCB7XG4gIGNvbnN0cnVjdG9yKHN0b3JlU3RhdGUpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfc3RvcmVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldExvYWRhYmxlXCIsIHJlY29pbFZhbHVlID0+IC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQxKHRoaXMuX3N0b3JlLCByZWNvaWxWYWx1ZSkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0UHJvbWlzZVwiLCByZWNvaWxWYWx1ZSA9PiAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICB0aGlzLmdldExvYWRhYmxlKHJlY29pbFZhbHVlKS50b1Byb21pc2UoKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZXROb2Rlc19VTlNUQUJMRVwiLCBvcHQgPT4ge1xuICAgICAgLy8gVE9ETyBEZWFsIHdpdGggbW9kaWZpZWQgc2VsZWN0b3JzXG4gICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc01vZGlmaWVkKSA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc0luaXRpYWxpemVkKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgICAgcmV0dXJuIHJlY29pbFZhbHVlc0ZvcktleXMoc3RhdGUuZGlydHlBdG9tcyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtub3duQXRvbXMgPSB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXM7XG5cbiAgICAgIGNvbnN0IGtub3duU2VsZWN0b3JzID0gdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5rbm93blNlbGVjdG9ycztcblxuICAgICAgcmV0dXJuIChvcHQgPT09IG51bGwgfHwgb3B0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHQuaXNJbml0aWFsaXplZCkgPT0gbnVsbCA/IHJlY29pbFZhbHVlcyQxLnZhbHVlcygpIDogb3B0LmlzSW5pdGlhbGl6ZWQgPT09IHRydWUgPyByZWNvaWxWYWx1ZXNGb3JLZXlzKFJlY29pbF9jb25jYXRJdGVyYWJsZXMoW3RoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcywgdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5rbm93blNlbGVjdG9yc10pKSA6IFJlY29pbF9maWx0ZXJJdGVyYWJsZShyZWNvaWxWYWx1ZXMkMS52YWx1ZXMoKSwgKHtcbiAgICAgICAga2V5XG4gICAgICB9KSA9PiAha25vd25BdG9tcy5oYXMoa2V5KSAmJiAha25vd25TZWxlY3RvcnMuaGFzKGtleSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0RGVwc19VTlNUQUJMRVwiLCByZWNvaWxWYWx1ZSA9PiB7XG4gICAgICB0aGlzLmdldExvYWRhYmxlKHJlY29pbFZhbHVlKTsgLy8gRXZhbHVhdGUgbm9kZSB0byBlbnN1cmUgZGVwcyBhcmUgdXAtdG8tZGF0ZVxuXG4gICAgICBjb25zdCBkZXBzID0gdGhpcy5fc3RvcmUuZ2V0R3JhcGgodGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZS52ZXJzaW9uKS5ub2RlRGVwcy5nZXQocmVjb2lsVmFsdWUua2V5KTtcblxuICAgICAgcmV0dXJuIHJlY29pbFZhbHVlc0ZvcktleXMoZGVwcyAhPT0gbnVsbCAmJiBkZXBzICE9PSB2b2lkIDAgPyBkZXBzIDogW10pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0U3Vic2NyaWJlcnNfVU5TVEFCTEVcIiwgKHtcbiAgICAgIGtleVxuICAgIH0pID0+IHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTtcblxuICAgICAgY29uc3QgZG93bnN0cmVhbU5vZGVzID0gUmVjb2lsX2ZpbHRlckl0ZXJhYmxlKGdldERvd25zdHJlYW1Ob2RlcyQyKHRoaXMuX3N0b3JlLCBzdGF0ZSwgbmV3IFNldChba2V5XSkpLCBub2RlS2V5ID0+IG5vZGVLZXkgIT09IGtleSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBub2RlczogcmVjb2lsVmFsdWVzRm9yS2V5cyhkb3duc3RyZWFtTm9kZXMpXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0SW5mb19VTlNUQUJMRVwiLCByZWNvaWxWYWx1ZSA9PiB7XG4gICAgICB2YXIgX2dyYXBoJG5vZGVEZXBzJGdldDtcblxuICAgICAgY29uc3Qge1xuICAgICAgICBrZXlcbiAgICAgIH0gPSByZWNvaWxWYWx1ZTtcblxuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlO1xuXG4gICAgICBjb25zdCBncmFwaCA9IHRoaXMuX3N0b3JlLmdldEdyYXBoKHN0YXRlLnZlcnNpb24pO1xuXG4gICAgICBjb25zdCB0eXBlID0gdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5rbm93bkF0b21zLmhhcyhrZXkpID8gJ2F0b20nIDogdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5rbm93blNlbGVjdG9ycy5oYXMoa2V5KSA/ICdzZWxlY3RvcicgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsb2FkYWJsZTogcGVla05vZGVMb2FkYWJsZSQxKHRoaXMuX3N0b3JlLCBzdGF0ZSwga2V5KSxcbiAgICAgICAgaXNBY3RpdmU6IHRoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcy5oYXMoa2V5KSB8fCB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duU2VsZWN0b3JzLmhhcyhrZXkpLFxuICAgICAgICBpc1NldDogdHlwZSA9PT0gJ3NlbGVjdG9yJyA/IGZhbHNlIDogc3RhdGUuYXRvbVZhbHVlcy5oYXMoa2V5KSxcbiAgICAgICAgaXNNb2RpZmllZDogc3RhdGUuZGlydHlBdG9tcy5oYXMoa2V5KSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgLy8gRG9uJ3QgdXNlIHRoaXMuZ2V0RGVwcygpIGFzIGl0IHdpbGwgZXZhbHVhdGUgdGhlIG5vZGUgYW5kIHdlIGFyZSBvbmx5IHBlZWtpbmdcbiAgICAgICAgZGVwczogcmVjb2lsVmFsdWVzRm9yS2V5cygoX2dyYXBoJG5vZGVEZXBzJGdldCA9IGdyYXBoLm5vZGVEZXBzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfZ3JhcGgkbm9kZURlcHMkZ2V0ICE9PSB2b2lkIDAgPyBfZ3JhcGgkbm9kZURlcHMkZ2V0IDogW10pLFxuICAgICAgICBzdWJzY3JpYmVyczogdGhpcy5nZXRTdWJzY3JpYmVyc19VTlNUQUJMRShyZWNvaWxWYWx1ZSlcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJtYXBcIiwgbWFwcGVyID0+IHtcbiAgICAgIGNvbnN0IG11dGFibGVTbmFwc2hvdCA9IG5ldyBNdXRhYmxlU25hcHNob3QodGhpcyk7XG4gICAgICBtYXBwZXIobXV0YWJsZVNuYXBzaG90KTsgLy8gaWYgcmVtb3ZpbmcgYmF0Y2hVcGRhdGVzIGZyb20gYHNldGAgYWRkIGl0IGhlcmVcblxuICAgICAgcmV0dXJuIGNsb25lU25hcHNob3QobXV0YWJsZVNuYXBzaG90LmdldFN0b3JlX0lOVEVSTkFMKCkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYXN5bmNNYXBcIiwgYXN5bmMgbWFwcGVyID0+IHtcbiAgICAgIGNvbnN0IG11dGFibGVTbmFwc2hvdCA9IG5ldyBNdXRhYmxlU25hcHNob3QodGhpcyk7XG4gICAgICBhd2FpdCBtYXBwZXIobXV0YWJsZVNuYXBzaG90KTtcbiAgICAgIHJldHVybiBjbG9uZVNuYXBzaG90KG11dGFibGVTbmFwc2hvdC5nZXRTdG9yZV9JTlRFUk5BTCgpKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX3N0b3JlID0ge1xuICAgICAgZ2V0U3RhdGU6ICgpID0+IHN0b3JlU3RhdGUsXG4gICAgICByZXBsYWNlU3RhdGU6IHJlcGxhY2VyID0+IHtcbiAgICAgICAgc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSA9IHJlcGxhY2VyKHN0b3JlU3RhdGUuY3VycmVudFRyZWUpOyAvLyBubyBiYXRjaGluZyBzbyBuZXh0VHJlZSBpcyBuZXZlciBhY3RpdmVcbiAgICAgIH0sXG4gICAgICBnZXRHcmFwaDogdmVyc2lvbiA9PiB7XG4gICAgICAgIGNvbnN0IGdyYXBocyA9IHN0b3JlU3RhdGUuZ3JhcGhzQnlWZXJzaW9uO1xuXG4gICAgICAgIGlmIChncmFwaHMuaGFzKHZlcnNpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIFJlY29pbF9udWxsdGhyb3dzKGdyYXBocy5nZXQodmVyc2lvbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3R3JhcGggPSBncmFwaCQyKCk7XG4gICAgICAgIGdyYXBocy5zZXQodmVyc2lvbiwgbmV3R3JhcGgpO1xuICAgICAgICByZXR1cm4gbmV3R3JhcGg7XG4gICAgICB9LFxuICAgICAgc3Vic2NyaWJlVG9UcmFuc2FjdGlvbnM6ICgpID0+ICh7XG4gICAgICAgIHJlbGVhc2U6ICgpID0+IHt9XG4gICAgICB9KSxcbiAgICAgIGFkZFRyYW5zYWN0aW9uTWV0YWRhdGE6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3Vic2NyaWJlIHRvIFNuYXBzaG90cycpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBnZXRTdG9yZV9JTlRFUk5BTCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmU7XG4gIH1cblxuICBnZXRJRCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJRF9JTlRFUk5BTCgpO1xuICB9XG5cbiAgZ2V0SURfSU5URVJOQUwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWUuc3RhdGVJRDtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGNsb25lU3RvcmVTdGF0ZShzdG9yZSwgdHJlZVN0YXRlLCBidW1wVmVyc2lvbiA9IGZhbHNlKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB2ZXJzaW9uID0gYnVtcFZlcnNpb24gPyBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQxKCkgOiB0cmVlU3RhdGUudmVyc2lvbjtcbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50VHJlZTogYnVtcFZlcnNpb24gPyB7XG4gICAgICAvLyBUT0RPIHNuYXBzaG90cyBzaG91bGRuJ3QgcmVhbGx5IGhhdmUgdmVyc2lvbnMgYmVjYXVzZSBhIG5ldyB2ZXJzaW9uIG51bWJlclxuICAgICAgLy8gaXMgYWx3YXlzIGFzc2lnbmVkIHdoZW4gdGhlIHNuYXBzaG90IGlzIGdvbmUgdG8uXG4gICAgICB2ZXJzaW9uLFxuICAgICAgc3RhdGVJRDogdmVyc2lvbixcbiAgICAgIHRyYW5zYWN0aW9uTWV0YWRhdGE6IHsgLi4udHJlZVN0YXRlLnRyYW5zYWN0aW9uTWV0YWRhdGFcbiAgICAgIH0sXG4gICAgICBkaXJ0eUF0b21zOiBuZXcgU2V0KHRyZWVTdGF0ZS5kaXJ0eUF0b21zKSxcbiAgICAgIGF0b21WYWx1ZXM6IG5ldyBNYXAodHJlZVN0YXRlLmF0b21WYWx1ZXMpLFxuICAgICAgbm9udmFsaWRhdGVkQXRvbXM6IG5ldyBNYXAodHJlZVN0YXRlLm5vbnZhbGlkYXRlZEF0b21zKVxuICAgIH0gOiB0cmVlU3RhdGUsXG4gICAgbmV4dFRyZWU6IG51bGwsXG4gICAgcHJldmlvdXNUcmVlOiBudWxsLFxuICAgIGtub3duQXRvbXM6IG5ldyBTZXQoc3RvcmVTdGF0ZS5rbm93bkF0b21zKSxcbiAgICAvLyBGSVhNRSBoZXJlJ3MgYSBjb3B5XG4gICAga25vd25TZWxlY3RvcnM6IG5ldyBTZXQoc3RvcmVTdGF0ZS5rbm93blNlbGVjdG9ycyksXG4gICAgLy8gRklYTUUgaGVyZSdzIGEgY29weVxuICAgIHRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uczogbmV3IE1hcCgpLFxuICAgIG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnM6IG5ldyBNYXAoKSxcbiAgICBub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zOiBuZXcgTWFwKCksXG4gICAgcXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQ6IFtdLFxuICAgIHN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVyczogbmV3IFNldCgpLFxuICAgIGdyYXBoc0J5VmVyc2lvbjogbmV3IE1hcCgpLnNldCh2ZXJzaW9uLCBzdG9yZS5nZXRHcmFwaCh0cmVlU3RhdGUudmVyc2lvbikpLFxuICAgIHZlcnNpb25zVXNlZEJ5Q29tcG9uZW50OiBuZXcgTWFwKClcbiAgfTtcbn0gLy8gRmFjdG9yeSB0byBidWlsZCBhIGZyZXNoIHNuYXBzaG90XG5cblxuZnVuY3Rpb24gZnJlc2hTbmFwc2hvdChpbml0aWFsaXplU3RhdGUpIHtcbiAgY29uc3Qgc25hcHNob3QgPSBuZXcgU25hcHNob3QobWFrZUVtcHR5U3RvcmVTdGF0ZSQxKCkpO1xuICByZXR1cm4gaW5pdGlhbGl6ZVN0YXRlICE9IG51bGwgPyBzbmFwc2hvdC5tYXAoaW5pdGlhbGl6ZVN0YXRlKSA6IHNuYXBzaG90O1xufSAvLyBGYWN0b3J5IHRvIGNsb25lIGEgc25hcGFob3Qgc3RhdGVcblxuXG5mdW5jdGlvbiBjbG9uZVNuYXBzaG90KHN0b3JlLCB2ZXJzaW9uID0gJ2N1cnJlbnQnKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB0cmVlU3RhdGUgPSB2ZXJzaW9uID09PSAnY3VycmVudCcgPyBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlIDogUmVjb2lsX251bGx0aHJvd3Moc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUpO1xuICByZXR1cm4gbmV3IFNuYXBzaG90KGNsb25lU3RvcmVTdGF0ZShzdG9yZSwgdHJlZVN0YXRlKSk7XG59XG5cbmNsYXNzIE11dGFibGVTbmFwc2hvdCBleHRlbmRzIFNuYXBzaG90IHtcbiAgY29uc3RydWN0b3Ioc25hcHNob3QpIHtcbiAgICBzdXBlcihjbG9uZVN0b3JlU3RhdGUoc25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKSwgc25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLCB0cnVlKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXRcIiwgKHJlY29pbFN0YXRlLCBuZXdWYWx1ZU9yVXBkYXRlcikgPT4ge1xuICAgICAgY29uc3Qgc3RvcmUgPSB0aGlzLmdldFN0b3JlX0lOVEVSTkFMKCk7IC8vIFRoaXMgYmF0Y2hVcGRhdGVzIGVuc3VyZXMgdGhpcyBgc2V0YCBpcyBhcHBsaWVkIGltbWVkaWF0ZWx5IGFuZCB5b3UgY2FuXG4gICAgICAvLyByZWFkIHRoZSB3cml0dGVuIHZhbHVlIGFmdGVyIGNhbGxpbmcgYHNldGAuIEkgd291bGQgbGlrZSB0byByZW1vdmUgdGhpc1xuICAgICAgLy8gYmVoYXZpb3IgYW5kIG9ubHkgYmF0Y2ggaW4gYFNuYXBzaG90Lm1hcGAsIGJ1dCB0aGlzIHdvdWxkIGJlIGEgYnJlYWtpbmdcbiAgICAgIC8vIGNoYW5nZSBwb3RlbnRpYWxseS5cblxuICAgICAgYmF0Y2hVcGRhdGVzJDEoKCkgPT4ge1xuICAgICAgICBzZXRSZWNvaWxWYWx1ZSQxKHN0b3JlLCByZWNvaWxTdGF0ZSwgbmV3VmFsdWVPclVwZGF0ZXIpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXNldFwiLCByZWNvaWxTdGF0ZSA9PiAvLyBTZWUgbm90ZSBhdCBgc2V0YCBhYm91dCBiYXRjaGVkIHVwZGF0ZXMuXG4gICAgYmF0Y2hVcGRhdGVzJDEoKCkgPT4gc2V0UmVjb2lsVmFsdWUkMSh0aGlzLmdldFN0b3JlX0lOVEVSTkFMKCksIHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDEpKSk7XG4gIH0gLy8gV2Ugd2FudCB0byBhbGxvdyB0aGUgbWV0aG9kcyB0byBiZSBkZXN0cnVjdHVyZWQgYW5kIHVzZWQgYXMgYWNjZXNzb3JzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvZXh0cmEtYXJyb3ctaW5pdGlhbGl6ZXJcblxuXG59XG5cbnZhciBSZWNvaWxfU25hcHNob3QgPSB7XG4gIFNuYXBzaG90LFxuICBNdXRhYmxlU25hcHNob3QsXG4gIGZyZXNoU25hcHNob3QsXG4gIGNsb25lU25hcHNob3Rcbn07XG5cbnZhciBSZWNvaWxfU25hcHNob3RfMSA9IFJlY29pbF9TbmFwc2hvdC5TbmFwc2hvdDtcbnZhciBSZWNvaWxfU25hcHNob3RfMiA9IFJlY29pbF9TbmFwc2hvdC5NdXRhYmxlU25hcHNob3Q7XG52YXIgUmVjb2lsX1NuYXBzaG90XzMgPSBSZWNvaWxfU25hcHNob3QuZnJlc2hTbmFwc2hvdDtcbnZhciBSZWNvaWxfU25hcHNob3RfNCA9IFJlY29pbF9TbmFwc2hvdC5jbG9uZVNuYXBzaG90O1xuXG52YXIgUmVjb2lsX1NuYXBzaG90JDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgU25hcHNob3Q6IFJlY29pbF9TbmFwc2hvdF8xLFxuICBNdXRhYmxlU25hcHNob3Q6IFJlY29pbF9TbmFwc2hvdF8yLFxuICBmcmVzaFNuYXBzaG90OiBSZWNvaWxfU25hcHNob3RfMyxcbiAgY2xvbmVTbmFwc2hvdDogUmVjb2lsX1NuYXBzaG90XzRcbn0pO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gdW5pb25TZXRzKC4uLnNldHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuXG4gIGZvciAoY29uc3Qgc2V0IG9mIHNldHMpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldCkge1xuICAgICAgcmVzdWx0LmFkZCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlY29pbF91bmlvblNldHMgPSB1bmlvblNldHM7XG5cbmNvbnN0IHtcbiAgdXNlQ29udGV4dCxcbiAgdXNlRWZmZWN0LFxuICB1c2VNZW1vLFxuICB1c2VSZWYsXG4gIHVzZVN0YXRlXG59ID0gcmVhY3Q7IC8vIEBmYi1vbmx5OiBjb25zdCBSZWNvaWx1c2FnZWxvZ0V2ZW50ID0gcmVxdWlyZSgnUmVjb2lsdXNhZ2Vsb2dFdmVudCcpO1xuLy8gQGZiLW9ubHk6IGNvbnN0IFJlY29pbFVzYWdlTG9nRmFsY29FdmVudCA9IHJlcXVpcmUoJ1JlY29pbFVzYWdlTG9nRmFsY29FdmVudCcpO1xuLy8gQGZiLW9ubHk6IGNvbnN0IFVSSSA9IHJlcXVpcmUoJ1VSSScpO1xuXG5cblxuXG5jb25zdCB7XG4gIGNsZWFuVXBOb2RlOiBjbGVhblVwTm9kZSQxLFxuICBnZXREb3duc3RyZWFtTm9kZXM6IGdldERvd25zdHJlYW1Ob2RlcyQzLFxuICBzZXROb2RlVmFsdWU6IHNldE5vZGVWYWx1ZSQyLFxuICBzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZV9ERVBSRUNBVEVEOiBzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZV9ERVBSRUNBVEVEJDFcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgZ3JhcGg6IGdyYXBoJDMsXG4gIHNhdmVEZXBlbmRlbmN5TWFwVG9TdG9yZTogc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlJDJcbn0gPSBSZWNvaWxfR3JhcGg7XG5cbmNvbnN0IHtcbiAgY2xvbmVHcmFwaDogY2xvbmVHcmFwaCQxXG59ID0gUmVjb2lsX0dyYXBoO1xuXG5jb25zdCB7XG4gIGFwcGx5QXRvbVZhbHVlV3JpdGVzOiBhcHBseUF0b21WYWx1ZVdyaXRlcyQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIGZyZXNoU25hcHNob3Q6IGZyZXNoU25hcHNob3QkMVxufSA9IFJlY29pbF9TbmFwc2hvdCQxO1xuXG5jb25zdCB7XG4gIGdldE5leHRUcmVlU3RhdGVWZXJzaW9uOiBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQyLFxuICBtYWtlRW1wdHlTdG9yZVN0YXRlOiBtYWtlRW1wdHlTdG9yZVN0YXRlJDJcbn0gPSBSZWNvaWxfU3RhdGU7XG5cbmNvbnN0IHtcbiAgbWFwQnlEZWxldGluZ011bHRpcGxlRnJvbU1hcDogbWFwQnlEZWxldGluZ011bHRpcGxlRnJvbU1hcCQxXG59ID0gUmVjb2lsX0NvcHlPbldyaXRlO1xuXG4gLy8gQGZiLW9ubHk6IGNvbnN0IHJlY292ZXJhYmxlVmlvbGF0aW9uID0gcmVxdWlyZSgnLi4vdXRpbC9SZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24nKTtcblxuXG5cblxuIC8vIEBmYi1vbmx5OiBjb25zdCBna3ggPSByZXF1aXJlKCdna3gnKTtcblxuXG5mdW5jdGlvbiBub3RJbkFDb250ZXh0KCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgY29tcG9uZW50IG11c3QgYmUgdXNlZCBpbnNpZGUgYSA8UmVjb2lsUm9vdD4gY29tcG9uZW50LicpO1xufVxuXG5jb25zdCBkZWZhdWx0U3RvcmUgPSBPYmplY3QuZnJlZXplKHtcbiAgZ2V0U3RhdGU6IG5vdEluQUNvbnRleHQsXG4gIHJlcGxhY2VTdGF0ZTogbm90SW5BQ29udGV4dCxcbiAgZ2V0R3JhcGg6IG5vdEluQUNvbnRleHQsXG4gIHN1YnNjcmliZVRvVHJhbnNhY3Rpb25zOiBub3RJbkFDb250ZXh0LFxuICBhZGRUcmFuc2FjdGlvbk1ldGFkYXRhOiBub3RJbkFDb250ZXh0XG59KTtcbmxldCBzdGF0ZVJlcGxhY2VySXNCZWluZ0V4ZWN1dGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZChzdG9yZVN0YXRlKSB7XG4gIGlmIChzdGF0ZVJlcGxhY2VySXNCZWluZ0V4ZWN1dGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBbiBhdG9tIHVwZGF0ZSB3YXMgdHJpZ2dlcmVkIHdpdGhpbiB0aGUgZXhlY3V0aW9uIG9mIGEgc3RhdGUgdXBkYXRlciBmdW5jdGlvbi4gU3RhdGUgdXBkYXRlciBmdW5jdGlvbnMgcHJvdmlkZWQgdG8gUmVjb2lsIG11c3QgYmUgcHVyZSBmdW5jdGlvbnMuJyk7XG4gIH1cblxuICBpZiAoc3RvcmVTdGF0ZS5uZXh0VHJlZSA9PT0gbnVsbCkge1xuICAgIGNvbnN0IHZlcnNpb24gPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlLnZlcnNpb247XG4gICAgY29uc3QgbmV4dFZlcnNpb24gPSBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQyKCk7XG4gICAgc3RvcmVTdGF0ZS5uZXh0VHJlZSA9IHsgLi4uc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSxcbiAgICAgIHZlcnNpb246IG5leHRWZXJzaW9uLFxuICAgICAgc3RhdGVJRDogbmV4dFZlcnNpb24sXG4gICAgICBkaXJ0eUF0b21zOiBuZXcgU2V0KCksXG4gICAgICB0cmFuc2FjdGlvbk1ldGFkYXRhOiB7fVxuICAgIH07XG4gICAgc3RvcmVTdGF0ZS5ncmFwaHNCeVZlcnNpb24uc2V0KG5leHRWZXJzaW9uLCBjbG9uZUdyYXBoJDEoUmVjb2lsX251bGx0aHJvd3Moc3RvcmVTdGF0ZS5ncmFwaHNCeVZlcnNpb24uZ2V0KHZlcnNpb24pKSkpO1xuICB9XG59XG5cbmNvbnN0IEFwcENvbnRleHQgPSByZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgY3VycmVudDogZGVmYXVsdFN0b3JlXG59KTtcblxuY29uc3QgdXNlU3RvcmVSZWYgPSAoKSA9PiB1c2VDb250ZXh0KEFwcENvbnRleHQpO1xuXG5jb25zdCBNdXRhYmxlU291cmNlQ29udGV4dCA9IHJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7IC8vIFRPRE8gVDI3MTA1NTkyODI1OTk2NjBcblxuY29uc3QgdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSA9ICgpID0+IHVzZUNvbnRleHQoTXV0YWJsZVNvdXJjZUNvbnRleHQpO1xuXG5mdW5jdGlvbiBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnMoc3RvcmUpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIGNvbnN0IHRyZWVTdGF0ZSA9IHN0b3JlU3RhdGUuY3VycmVudFRyZWU7IC8vIEluZm9ybSB0cmFuc2FjdGlvbiBzdWJzY3JpYmVycyBvZiB0aGUgdHJhbnNhY3Rpb246XG5cbiAgY29uc3QgZGlydHlBdG9tcyA9IHRyZWVTdGF0ZS5kaXJ0eUF0b21zO1xuXG4gIGlmIChkaXJ0eUF0b21zLnNpemUpIHtcbiAgICAvLyBFeGVjdXRlIE5vZGUtc3BlY2lmaWMgc3Vic2NyaWJlcnMgYmVmb3JlIGdsb2JhbCBzdWJzY3JpYmVyc1xuICAgIGZvciAoY29uc3QgW2tleSwgc3Vic2NyaXB0aW9uc10gb2Ygc3RvcmVTdGF0ZS5ub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zKSB7XG4gICAgICBpZiAoZGlydHlBdG9tcy5oYXMoa2V5KSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtfLCBzdWJzY3JpcHRpb25dIG9mIHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBbXywgc3Vic2NyaXB0aW9uXSBvZiBzdG9yZVN0YXRlLnRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucykge1xuICAgICAgc3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICB9IC8vIENvbXBvbmVudHMgdGhhdCBhcmUgc3Vic2NyaWJlZCB0byB0aGUgZGlydHkgYXRvbTpcblxuXG4gICAgY29uc3QgZGVwZW5kZW50Tm9kZXMgPSBnZXREb3duc3RyZWFtTm9kZXMkMyhzdG9yZSwgdHJlZVN0YXRlLCBkaXJ0eUF0b21zKTtcblxuICAgIGZvciAoY29uc3Qga2V5IG9mIGRlcGVuZGVudE5vZGVzKSB7XG4gICAgICBjb25zdCBjb21wcyA9IHN0b3JlU3RhdGUubm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucy5nZXQoa2V5KTtcblxuICAgICAgaWYgKGNvbXBzKSB7XG4gICAgICAgIGZvciAoY29uc3QgW19zdWJJRCwgW19kZWJ1Z05hbWUsIGNhbGxiYWNrXV0gb2YgY29tcHMpIHtcbiAgICAgICAgICBjYWxsYmFjayh0cmVlU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBXYWtlIGFsbCBzdXNwZW5kZWQgY29tcG9uZW50cyBzbyB0aGUgcmlnaHQgb25lKHMpIGNhbiB0cnkgdG8gcmUtcmVuZGVyLlxuICAgIC8vIFdlIG5lZWQgdG8gd2FrZSB1cCBjb21wb25lbnRzIG5vdCBqdXN0IHdoZW4gc29tZSBhc3luY2hyb25vdXMgc2VsZWN0b3JcbiAgICAvLyByZXNvbHZlZCwgYnV0IGFsc28gd2hlbiBjaGFuZ2luZyBzeW5jaHJvbm91cyB2YWx1ZXMgYmVjYXVzZSB0aGlzIG1heSBjYXVzZVxuICAgIC8vIGEgc2VsZWN0b3IgdG8gY2hhbmdlIGZyb20gYXN5bmNocm9ub3VzIHRvIHN5bmNocm9ub3VzLCBpbiB3aGljaCBjYXNlIHRoZXJlXG4gICAgLy8gd291bGQgYmUgbm8gZm9sbG93LXVwIGFzeW5jaHJvbm91cyByZXNvbHV0aW9uIHRvIHdha2UgdXMgdXAuXG4gICAgLy8gVE9ETyBPUFRJTUlaQVRJT04gT25seSB3YWtlIHVwIHJlbGF0ZWQgZG93bnN0cmVhbSBjb21wb25lbnRzXG5cblxuICAgIGxldCBub2RlTmFtZXMgPSAnW2F2YWlsYWJsZSBpbiBkZXYgYnVpbGRdJztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIG5vZGVOYW1lcyA9IEFycmF5LmZyb20oZGlydHlBdG9tcykuam9pbignLCAnKTtcbiAgICB9XG5cbiAgICBzdG9yZVN0YXRlLnN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVycy5mb3JFYWNoKGNiID0+IFJlY29pbF9UcmFjaW5nLnRyYWNlKCd2YWx1ZSBiZWNhbWUgYXZhaWxhYmxlLCB3YWtpbmcgY29tcG9uZW50cycsIG5vZGVOYW1lcywgY2IpKTtcbiAgfSAvLyBTcGVjaWFsIGJlaGF2aW9yIE9OTFkgaW52b2tlZCBieSB1c2VJbnRlcmZhY2UuXG4gIC8vIEZJWE1FIGRlbGV0ZSBxdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRCB3aGVuIGRlbGV0aW5nIHVzZUludGVyZmFjZS5cblxuXG4gIHN0b3JlU3RhdGUucXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQuZm9yRWFjaChjYiA9PiBjYih0cmVlU3RhdGUpKTtcbiAgc3RvcmVTdGF0ZS5xdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRC5zcGxpY2UoMCwgc3RvcmVTdGF0ZS5xdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRC5sZW5ndGgpO1xufVxuLypcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBCYXRjaGVyIGlzIHRvIG9ic2VydmUgd2hlbiBSZWFjdCBiYXRjaGVzIGVuZCBzbyB0aGF0XG4gKiBSZWNvaWwgc3RhdGUgY2hhbmdlcyBjYW4gYmUgYmF0Y2hlZC4gV2hlbmV2ZXIgUmVjb2lsIHN0YXRlIGNoYW5nZXMsIHdlIGNhbGxcbiAqIHNldFN0YXRlIG9uIHRoZSBiYXRjaGVyLiBUaGVuIHdlIHdhaXQgZm9yIHRoYXQgY2hhbmdlIHRvIGJlIGNvbW1pdHRlZCwgd2hpY2hcbiAqIHNpZ25pZmllcyB0aGUgZW5kIG9mIHRoZSBiYXRjaC4gVGhhdCdzIHdoZW4gd2UgcmVzcG9uZCB0byB0aGUgUmVjb2lsIGNoYW5nZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIEJhdGNoZXIocHJvcHMpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZigpO1xuICBjb25zdCBbXywgc2V0U3RhdGVdID0gdXNlU3RhdGUoW10pO1xuICBwcm9wcy5zZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2UoKCkgPT4gc2V0U3RhdGUoe30pKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBlbnF1ZXVlRXhlY3V0aW9uIHJ1bnMgdGhpcyBmdW5jdGlvbiBpbW1lZGlhdGVseTsgaXQgaXMgb25seSB1c2VkIHRvXG4gICAgLy8gbWFuaXB1bGF0ZSB0aGUgb3JkZXIgb2YgdXNlRWZmZWN0cyBkdXJpbmcgdGVzdHMsIHNpbmNlIFJlYWN0IHNlZW1zIHRvXG4gICAgLy8gY2FsbCB1c2VFZmZlY3QgaW4gYW4gdW5wcmVkaWN0YWJsZSBvcmRlciBzb21ldGltZXMuXG4gICAgUmVjb2lsX1F1ZXVlLmVucXVldWVFeGVjdXRpb24oJ0JhdGNoZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuICAgICAgY29uc3Qge1xuICAgICAgICBuZXh0VHJlZVxuICAgICAgfSA9IHN0b3JlU3RhdGU7IC8vIElnbm9yZSBjb21taXRzIHRoYXQgYXJlIG5vdCBiZWNhdXNlIG9mIFJlY29pbCB0cmFuc2FjdGlvbnMgLS0gbmFtZWx5LFxuICAgICAgLy8gYmVjYXVzZSBzb21ldGhpbmcgYWJvdmUgUmVjb2lsUm9vdCByZS1yZW5kZXJlZDpcblxuICAgICAgaWYgKG5leHRUcmVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gbmV4dFRyZWUgaXMgbm93IGNvbW1pdHRlZCAtLSBub3RlIHRoYXQgY29weWluZyBhbmQgcmVzZXQgb2NjdXJzIHdoZW5cbiAgICAgIC8vIGEgdHJhbnNhY3Rpb24gYmVnaW5zLCBpbiBzdGFydE5leHRUcmVlSWZOZWVkZWQ6XG5cblxuICAgICAgc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUgPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgICAgc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSA9IG5leHRUcmVlO1xuICAgICAgc3RvcmVTdGF0ZS5uZXh0VHJlZSA9IG51bGw7XG4gICAgICBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnMoc3RvcmVSZWYuY3VycmVudCk7XG4gICAgICBjb25zdCBkaXNjYXJkZWRWZXJzaW9uID0gUmVjb2lsX251bGx0aHJvd3Moc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUpLnZlcnNpb247XG4gICAgICBzdG9yZVN0YXRlLmdyYXBoc0J5VmVyc2lvbi5kZWxldGUoZGlzY2FyZGVkVmVyc2lvbik7XG4gICAgICBzdG9yZVN0YXRlLnByZXZpb3VzVHJlZSA9IG51bGw7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpbmRvdy4kcmVjb2lsRGVidWdTdGF0ZXMpIHtcbiAgICB3aW5kb3cuJHJlY29pbERlYnVnU3RhdGVzID0gW107XG4gIH1cbn0gLy8gV2hlbiByZW1vdmluZyB0aGlzIGRlcHJlY2F0ZWQgZnVuY3Rpb24sIHJlbW92ZSBzdGF0ZUJ5U2V0dGluZ1JlY29pbFZhbHVlXG4vLyB3aGljaCB3aWxsIG5vIGxvbmdlciBiZSBuZWVkZWQuXG5cblxuZnVuY3Rpb24gaW5pdGlhbFN0b3JlU3RhdGVfREVQUkVDQVRFRChzdG9yZSwgaW5pdGlhbGl6ZVN0YXRlKSB7XG4gIGNvbnN0IGluaXRpYWwgPSBtYWtlRW1wdHlTdG9yZVN0YXRlJDIoKTtcbiAgaW5pdGlhbGl6ZVN0YXRlKHtcbiAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICBzZXQ6IChhdG9tLCB2YWx1ZSkgPT4ge1xuICAgICAgY29uc3Qgc3RhdGUgPSBpbml0aWFsLmN1cnJlbnRUcmVlO1xuICAgICAgY29uc3QgW2RlcE1hcCwgd3JpdGVzXSA9IHNldE5vZGVWYWx1ZSQyKHN0b3JlLCBzdGF0ZSwgYXRvbS5rZXksIHZhbHVlKTtcbiAgICAgIGNvbnN0IHdyaXR0ZW5Ob2RlcyA9IG5ldyBTZXQod3JpdGVzLmtleXMoKSk7XG4gICAgICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUkMihkZXBNYXAsIHN0b3JlLCBzdGF0ZS52ZXJzaW9uKTtcbiAgICAgIGNvbnN0IG5vbnZhbGlkYXRlZEF0b21zID0gbWFwQnlEZWxldGluZ011bHRpcGxlRnJvbU1hcCQxKHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLCB3cml0dGVuTm9kZXMpO1xuICAgICAgaW5pdGlhbC5jdXJyZW50VHJlZSA9IHsgLi4uc3RhdGUsXG4gICAgICAgIGRpcnR5QXRvbXM6IFJlY29pbF91bmlvblNldHMoc3RhdGUuZGlydHlBdG9tcywgd3JpdHRlbk5vZGVzKSxcbiAgICAgICAgYXRvbVZhbHVlczogYXBwbHlBdG9tVmFsdWVXcml0ZXMkMShzdGF0ZS5hdG9tVmFsdWVzLCB3cml0ZXMpLFxuICAgICAgICAvLyBOQjogUExFQVNFIHVuLWV4cG9ydCBhcHBseUF0b21WYWx1ZVdyaXRlcyB3aGVuIGRlbGV0aW5nIHRoaXMgY29kZVxuICAgICAgICBub252YWxpZGF0ZWRBdG9tc1xuICAgICAgfTtcbiAgICB9LFxuICAgIHNldFVudmFsaWRhdGVkQXRvbVZhbHVlczogYXRvbVZhbHVlcyA9PiB7XG4gICAgICAvLyBGSVhNRSByZXBsYWNlIHRoaXMgd2l0aCBhIG11dGF0aXZlIGxvb3BcbiAgICAgIGF0b21WYWx1ZXMuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgICAgICBpbml0aWFsLmN1cnJlbnRUcmVlID0gc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCQxKGluaXRpYWwuY3VycmVudFRyZWUsIGssIHYpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGluaXRpYWw7XG59XG5cbmZ1bmN0aW9uIGluaXRpYWxTdG9yZVN0YXRlKGluaXRpYWxpemVTdGF0ZSkge1xuICBjb25zdCBzbmFwc2hvdCA9IGZyZXNoU25hcHNob3QkMSgpLm1hcChpbml0aWFsaXplU3RhdGUpO1xuICByZXR1cm4gc25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKS5nZXRTdGF0ZSgpO1xufVxuXG5sZXQgbmV4dElEID0gMDtcblxuZnVuY3Rpb24gUmVjb2lsUm9vdCh7XG4gIGluaXRpYWxpemVTdGF0ZV9ERVBSRUNBVEVELFxuICBpbml0aWFsaXplU3RhdGUsXG4gIHN0b3JlX0lOVEVSTkFMOiBzdG9yZVByb3AsXG4gIC8vIEZvciB1c2Ugd2l0aCBSZWFjdCBcImNvbnRleHQgYnJpZGdpbmdcIlxuICBjaGlsZHJlblxufSkge1xuICB2YXIgX2NyZWF0ZU11dGFibGVTb3VyY2U7XG5cbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiB1c2VFZmZlY3QoKCkgPT4ge1xuICAvLyBAZmItb25seTogaWYgKGdreCgncmVjb2lsX3VzYWdlX2xvZ2dpbmcnKSkge1xuICAvLyBAZmItb25seTogdHJ5IHtcbiAgLy8gQGZiLW9ubHk6IFJlY29pbFVzYWdlTG9nRmFsY29FdmVudC5sb2coKCkgPT4gKHtcbiAgLy8gQGZiLW9ubHk6IHR5cGU6IFJlY29pbHVzYWdlbG9nRXZlbnQuUkVDT0lMX1JPT1RfTU9VTlRFRCxcbiAgLy8gQGZiLW9ubHk6IHBhdGg6IFVSSS5nZXRSZXF1ZXN0VVJJKCkuZ2V0UGF0aCgpLFxuICAvLyBAZmItb25seTogfSkpO1xuICAvLyBAZmItb25seTogfSBjYXRjaCB7XG4gIC8vIEBmYi1vbmx5OiByZWNvdmVyYWJsZVZpb2xhdGlvbihcbiAgLy8gQGZiLW9ubHk6ICdFcnJvciB3aGVuIGxvZ2dpbmcgUmVjb2lsIFVzYWdlIGV2ZW50JyxcbiAgLy8gQGZiLW9ubHk6ICdyZWNvaWwnLFxuICAvLyBAZmItb25seTogKTtcbiAgLy8gQGZiLW9ubHk6IH1cbiAgLy8gQGZiLW9ubHk6IH1cbiAgLy8gQGZiLW9ubHk6IH0sIFtdKTtcbiAgbGV0IHN0b3JlU3RhdGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLWNvbnN0XG5cbiAgY29uc3QgZ2V0R3JhcGggPSB2ZXJzaW9uID0+IHtcbiAgICBjb25zdCBncmFwaHMgPSBzdG9yZVN0YXRlLmN1cnJlbnQuZ3JhcGhzQnlWZXJzaW9uO1xuXG4gICAgaWYgKGdyYXBocy5oYXModmVyc2lvbikpIHtcbiAgICAgIHJldHVybiBSZWNvaWxfbnVsbHRocm93cyhncmFwaHMuZ2V0KHZlcnNpb24pKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdHcmFwaCA9IGdyYXBoJDMoKTtcbiAgICBncmFwaHMuc2V0KHZlcnNpb24sIG5ld0dyYXBoKTtcbiAgICByZXR1cm4gbmV3R3JhcGg7XG4gIH07XG5cbiAgY29uc3Qgc3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMgPSAoY2FsbGJhY2ssIGtleSkgPT4ge1xuICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgLy8gR2xvYmFsIHRyYW5zYWN0aW9uIHN1YnNjcmlwdGlvbnNcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zXG4gICAgICB9ID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuICAgICAgY29uc3QgaWQgPSBuZXh0SUQrKztcbiAgICAgIHRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5zZXQoaWQsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbGVhc2U6ICgpID0+IHtcbiAgICAgICAgICB0cmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuZGVsZXRlKGlkKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm9kZS1zcGVjaWZpYyB0cmFuc2FjdGlvbiBzdWJzY3JpcHRpb25zOlxuICAgICAgY29uc3Qge1xuICAgICAgICBub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zXG4gICAgICB9ID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuXG4gICAgICBpZiAoIW5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuaGFzKGtleSkpIHtcbiAgICAgICAgbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5zZXQoa2V5LCBuZXcgTWFwKCkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpZCA9IG5leHRJRCsrO1xuICAgICAgUmVjb2lsX251bGx0aHJvd3Mobm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkuc2V0KGlkLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWxlYXNlOiAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3VicyA9IG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuZ2V0KGtleSk7XG5cbiAgICAgICAgICBpZiAoc3Vicykge1xuICAgICAgICAgICAgc3Vicy5kZWxldGUoaWQpO1xuXG4gICAgICAgICAgICBpZiAoc3Vicy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgIG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGRUcmFuc2FjdGlvbk1ldGFkYXRhID0gbWV0YWRhdGEgPT4ge1xuICAgIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZChzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCkpO1xuXG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKG1ldGFkYXRhKSkge1xuICAgICAgUmVjb2lsX251bGx0aHJvd3Moc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpLm5leHRUcmVlKS50cmFuc2FjdGlvbk1ldGFkYXRhW2tdID0gbWV0YWRhdGFba107XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHJlcGxhY2VTdGF0ZSA9IHJlcGxhY2VyID0+IHtcbiAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuICAgIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZChzdG9yZVN0YXRlKTsgLy8gVXNlIHJlcGxhY2VyIHRvIGdldCB0aGUgbmV4dCBzdGF0ZTpcblxuICAgIGNvbnN0IG5leHRUcmVlID0gUmVjb2lsX251bGx0aHJvd3Moc3RvcmVTdGF0ZS5uZXh0VHJlZSk7XG4gICAgbGV0IHJlcGxhY2VkO1xuXG4gICAgdHJ5IHtcbiAgICAgIHN0YXRlUmVwbGFjZXJJc0JlaW5nRXhlY3V0ZWQgPSB0cnVlO1xuICAgICAgcmVwbGFjZWQgPSByZXBsYWNlcihuZXh0VHJlZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHN0YXRlUmVwbGFjZXJJc0JlaW5nRXhlY3V0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZWQgPT09IG5leHRUcmVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvdy4kcmVjb2lsRGVidWdTdGF0ZXMucHVzaChyZXBsYWNlZCk7IC8vIFRPRE8gdGhpcyBzaG91bGRuJ3QgaGFwcGVuIGhlcmUgYmVjYXVzZSBpdCdzIG5vdCBiYXRjaGVkXG4gICAgICB9XG4gICAgfSAvLyBTYXZlIGNoYW5nZXMgdG8gbmV4dFRyZWUgYW5kIHNjaGVkdWxlIGEgUmVhY3QgdXBkYXRlOlxuXG5cbiAgICBzdG9yZVN0YXRlLm5leHRUcmVlID0gcmVwbGFjZWQ7XG4gICAgUmVjb2lsX251bGx0aHJvd3Mobm90aWZ5QmF0Y2hlck9mQ2hhbmdlLmN1cnJlbnQpKCk7XG4gIH07XG5cbiAgY29uc3Qgbm90aWZ5QmF0Y2hlck9mQ2hhbmdlID0gdXNlUmVmKG51bGwpO1xuXG4gIGZ1bmN0aW9uIHNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZSh4KSB7XG4gICAgbm90aWZ5QmF0Y2hlck9mQ2hhbmdlLmN1cnJlbnQgPSB4O1xuICB9IC8vIEZJWE1FIFQyNzEwNTU5MjgyNTk5NjYwXG5cblxuICBjb25zdCBjcmVhdGVNdXRhYmxlU291cmNlID0gKF9jcmVhdGVNdXRhYmxlU291cmNlID0gcmVhY3QuY3JlYXRlTXV0YWJsZVNvdXJjZSkgIT09IG51bGwgJiYgX2NyZWF0ZU11dGFibGVTb3VyY2UgIT09IHZvaWQgMCA/IF9jcmVhdGVNdXRhYmxlU291cmNlIDogLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gIHJlYWN0LnVuc3RhYmxlX2NyZWF0ZU11dGFibGVTb3VyY2U7IC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG4gIGNvbnN0IHN0b3JlID0gc3RvcmVQcm9wICE9PSBudWxsICYmIHN0b3JlUHJvcCAhPT0gdm9pZCAwID8gc3RvcmVQcm9wIDoge1xuICAgIGdldFN0YXRlOiAoKSA9PiBzdG9yZVN0YXRlLmN1cnJlbnQsXG4gICAgcmVwbGFjZVN0YXRlLFxuICAgIGdldEdyYXBoLFxuICAgIHN1YnNjcmliZVRvVHJhbnNhY3Rpb25zLFxuICAgIGFkZFRyYW5zYWN0aW9uTWV0YWRhdGFcbiAgfTtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VSZWYoc3RvcmUpO1xuICBzdG9yZVN0YXRlID0gdXNlUmVmKGluaXRpYWxpemVTdGF0ZV9ERVBSRUNBVEVEICE9IG51bGwgPyBpbml0aWFsU3RvcmVTdGF0ZV9ERVBSRUNBVEVEKHN0b3JlLCBpbml0aWFsaXplU3RhdGVfREVQUkVDQVRFRCkgOiBpbml0aWFsaXplU3RhdGUgIT0gbnVsbCA/IGluaXRpYWxTdG9yZVN0YXRlKGluaXRpYWxpemVTdGF0ZSkgOiBtYWtlRW1wdHlTdG9yZVN0YXRlJDIoKSk7XG4gIGNvbnN0IG11dGFibGVTb3VyY2UgPSB1c2VNZW1vKCgpID0+IGNyZWF0ZU11dGFibGVTb3VyY2UgPyBjcmVhdGVNdXRhYmxlU291cmNlKHN0b3JlU3RhdGUsICgpID0+IHN0b3JlU3RhdGUuY3VycmVudC5jdXJyZW50VHJlZS52ZXJzaW9uKSA6IG51bGwsIFtjcmVhdGVNdXRhYmxlU291cmNlLCBzdG9yZVN0YXRlXSk7IC8vIENsZWFudXAgd2hlbiB0aGUgPFJlY29pbFJvb3Q+IGlzIHVubW91bnRlZFxuXG4gIHVzZUVmZmVjdCgoKSA9PiAoKSA9PiB7XG4gICAgZm9yIChjb25zdCBhdG9tS2V5IG9mIHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKS5rbm93bkF0b21zKSB7XG4gICAgICBjbGVhblVwTm9kZSQxKHN0b3JlUmVmLmN1cnJlbnQsIGF0b21LZXkpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdG9yZVJlZlxuICB9LCAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChNdXRhYmxlU291cmNlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBtdXRhYmxlU291cmNlXG4gIH0sIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KEJhdGNoZXIsIHtcbiAgICBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2U6IHNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZVxuICB9KSwgY2hpbGRyZW4pKTtcbn1cblxudmFyIFJlY29pbF9SZWNvaWxSb290X3JlYWN0ID0ge1xuICB1c2VTdG9yZVJlZixcbiAgdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSxcbiAgUmVjb2lsUm9vdCxcbiAgc2VuZEVuZE9mQmF0Y2hOb3RpZmljYXRpb25zX0ZPUl9URVNUSU5HOiBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnNcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgbWFwIGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBrZXlzICsgdmFsdWVzIGZyb20gdGhlIG9yaWdpbmFsIG1hcCB3aGVyZVxuICogdGhlIGdpdmVuIGNhbGxiYWNrIHJldHVybmVkIHRydWUuXG4gKi9cblxuZnVuY3Rpb24gZmlsdGVyTWFwKG1hcCwgY2FsbGJhY2spIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcCkge1xuICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5KSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVjb2lsX2ZpbHRlck1hcCA9IGZpbHRlck1hcDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG4vKipcbiAqIFJldHVybnMgYSBzZXQgY29udGFpbmluZyBhbGwgb2YgdGhlIHZhbHVlcyBmcm9tIHRoZSBvcmlnaW5hbCBzZXQgd2hlcmVcbiAqIHRoZSBnaXZlbiBjYWxsYmFjayByZXR1cm5lZCB0cnVlLlxuICovXG5cbmZ1bmN0aW9uIGZpbHRlclNldChzZXQsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQoKTtcblxuICBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldCkge1xuICAgIGlmIChjYWxsYmFjayh2YWx1ZSkpIHtcbiAgICAgIHJlc3VsdC5hZGQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBSZWNvaWxfZmlsdGVyU2V0ID0gZmlsdGVyU2V0O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuXG52YXIgaW52YXJpYW50XzEgPSBpbnZhcmlhbnQ7XG5cbi8vIEBvc3Mtb25seVxuXG5cbnZhciBSZWNvaWxfaW52YXJpYW50ID0gaW52YXJpYW50XzE7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBtZXJnZU1hcHMoLi4ubWFwcykge1xuICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgaXRlcmF0b3IgPSBtYXBzW2ldLmtleXMoKTtcbiAgICBsZXQgbmV4dEtleTtcblxuICAgIHdoaWxlICghKG5leHRLZXkgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdIC0gbWFwL2l0ZXJhdG9yIGtub3dzIG5vdGhpbmcgYWJvdXQgZmxvdyB0eXBlc1xuICAgICAgcmVzdWx0LnNldChuZXh0S2V5LnZhbHVlLCBtYXBzW2ldLmdldChuZXh0S2V5LnZhbHVlKSk7XG4gICAgfVxuICB9XG4gIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl0gKD49MC42Ni4wIHNpdGU9d3d3LG1vYmlsZSkgVGhpcyBjb21tZW50XG4gICAqIHN1cHByZXNzZXMgYW4gZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjY2IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvclxuICAgKiBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cblxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBSZWNvaWxfbWVyZ2VNYXBzID0gbWVyZ2VNYXBzO1xuXG52YXIgX3VzZU11dGFibGVTb3VyY2U7XG5cbiAvLyBGSVhNRSBUMjcxMDU1OTI4MjU5OTY2MFxuXG5cbmNvbnN0IHVzZU11dGFibGVTb3VyY2UgPSAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbihfdXNlTXV0YWJsZVNvdXJjZSA9IHJlYWN0LnVzZU11dGFibGVTb3VyY2UpICE9PSBudWxsICYmIF91c2VNdXRhYmxlU291cmNlICE9PSB2b2lkIDAgPyBfdXNlTXV0YWJsZVNvdXJjZSA6IHJlYWN0LnVuc3RhYmxlX3VzZU11dGFibGVTb3VyY2U7IC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5mdW5jdGlvbiBtdXRhYmxlU291cmNlRXhpc3RzKCkge1xuICByZXR1cm4gdXNlTXV0YWJsZVNvdXJjZSAmJiAhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy4kZGlzYWJsZVJlY29pbFZhbHVlTXV0YWJsZVNvdXJjZV9URU1QX0hBQ0tfRE9fTk9UX1VTRSk7XG59XG5cbnZhciBSZWNvaWxfbXV0YWJsZVNvdXJjZSA9IHtcbiAgbXV0YWJsZVNvdXJjZUV4aXN0cyxcbiAgdXNlTXV0YWJsZVNvdXJjZVxufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBNSVQgTGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE5IEdlb3JnIFRhdm9uaXVzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmNvbnN0IFVOS05PV05fRlVOQ1RJT04gPSAnPHVua25vd24+Jztcbi8qKlxuICogVGhpcyBwYXJzZXMgdGhlIGRpZmZlcmVudCBzdGFjayB0cmFjZXMgYW5kIHB1dHMgdGhlbSBpbnRvIG9uZSBmb3JtYXRcbiAqIFRoaXMgYm9ycm93cyBoZWF2aWx5IGZyb20gVHJhY2VLaXQgKGh0dHBzOi8vZ2l0aHViLmNvbS9jc25vdmVyL1RyYWNlS2l0KVxuICovXG5cbmZ1bmN0aW9uIHN0YWNrVHJhY2VQYXJzZXIoc3RhY2tTdHJpbmcpIHtcbiAgY29uc3QgbGluZXMgPSBzdGFja1N0cmluZy5zcGxpdCgnXFxuJyk7XG4gIHJldHVybiBsaW5lcy5yZWR1Y2UoKHN0YWNrLCBsaW5lKSA9PiB7XG4gICAgY29uc3QgcGFyc2VSZXN1bHQgPSBwYXJzZUNocm9tZShsaW5lKSB8fCBwYXJzZVdpbmpzKGxpbmUpIHx8IHBhcnNlR2Vja28obGluZSkgfHwgcGFyc2VOb2RlKGxpbmUpIHx8IHBhcnNlSlNDKGxpbmUpO1xuXG4gICAgaWYgKHBhcnNlUmVzdWx0KSB7XG4gICAgICBzdGFjay5wdXNoKHBhcnNlUmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhY2s7XG4gIH0sIFtdKTtcbn1cblxuY29uc3QgY2hyb21lUmUgPSAvXlxccyphdCAoLio/KSA/XFwoKCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lLWV4dGVuc2lvbnxuYXRpdmV8ZXZhbHx3ZWJwYWNrfDxhbm9ueW1vdXM+fFxcL3xbYS16XTpcXFxcfFxcXFxcXFxcKS4qPykoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtcbmNvbnN0IGNocm9tZUV2YWxSZSA9IC9cXCgoXFxTKikoPzo6KFxcZCspKSg/OjooXFxkKykpXFwpLztcblxuZnVuY3Rpb24gcGFyc2VDaHJvbWUobGluZSkge1xuICBjb25zdCBwYXJ0cyA9IGNocm9tZVJlLmV4ZWMobGluZSk7XG5cbiAgaWYgKCFwYXJ0cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgaXNOYXRpdmUgPSBwYXJ0c1syXSAmJiBwYXJ0c1syXS5pbmRleE9mKCduYXRpdmUnKSA9PT0gMDsgLy8gc3RhcnQgb2YgbGluZVxuXG4gIGNvbnN0IGlzRXZhbCA9IHBhcnRzWzJdICYmIHBhcnRzWzJdLmluZGV4T2YoJ2V2YWwnKSA9PT0gMDsgLy8gc3RhcnQgb2YgbGluZVxuXG4gIGNvbnN0IHN1Ym1hdGNoID0gY2hyb21lRXZhbFJlLmV4ZWMocGFydHNbMl0pO1xuXG4gIGlmIChpc0V2YWwgJiYgc3VibWF0Y2ggIT0gbnVsbCkge1xuICAgIC8vIHRocm93IG91dCBldmFsIGxpbmUvY29sdW1uIGFuZCB1c2UgdG9wLW1vc3QgbGluZS9jb2x1bW4gbnVtYmVyXG4gICAgcGFydHNbMl0gPSBzdWJtYXRjaFsxXTsgLy8gdXJsXG5cbiAgICBwYXJ0c1szXSA9IHN1Ym1hdGNoWzJdOyAvLyBsaW5lXG5cbiAgICBwYXJ0c1s0XSA9IHN1Ym1hdGNoWzNdOyAvLyBjb2x1bW5cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmlsZTogIWlzTmF0aXZlID8gcGFydHNbMl0gOiBudWxsLFxuICAgIG1ldGhvZE5hbWU6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgYXJndW1lbnRzOiBpc05hdGl2ZSA/IFtwYXJ0c1syXV0gOiBbXSxcbiAgICBsaW5lTnVtYmVyOiBwYXJ0c1szXSA/ICtwYXJ0c1szXSA6IG51bGwsXG4gICAgY29sdW1uOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGxcbiAgfTtcbn1cblxuY29uc3Qgd2luanNSZSA9IC9eXFxzKmF0ICg/OigoPzpcXFtvYmplY3Qgb2JqZWN0XFxdKT8uKykgKT9cXCg/KCg/OmZpbGV8bXMtYXBweHxodHRwcz98d2VicGFja3xibG9iKTouKj8pOihcXGQrKSg/OjooXFxkKykpP1xcKT9cXHMqJC9pO1xuXG5mdW5jdGlvbiBwYXJzZVdpbmpzKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSB3aW5qc1JlLmV4ZWMobGluZSk7XG5cbiAgaWYgKCFwYXJ0cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmaWxlOiBwYXJ0c1syXSxcbiAgICBtZXRob2ROYW1lOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgIGFyZ3VtZW50czogW10sXG4gICAgbGluZU51bWJlcjogK3BhcnRzWzNdLFxuICAgIGNvbHVtbjogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsXG4gIH07XG59XG5cbmNvbnN0IGdlY2tvUmUgPSAvXlxccyooLio/KSg/OlxcKCguKj8pXFwpKT8oPzpefEApKCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lfHdlYnBhY2t8cmVzb3VyY2V8XFxbbmF0aXZlKS4qP3xbXkBdKmJ1bmRsZSkoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXHMqJC9pO1xuY29uc3QgZ2Vja29FdmFsUmUgPSAvKFxcUyspIGxpbmUgKFxcZCspKD86ID4gZXZhbCBsaW5lIFxcZCspKiA+IGV2YWwvaTtcblxuZnVuY3Rpb24gcGFyc2VHZWNrbyhsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gZ2Vja29SZS5leGVjKGxpbmUpO1xuXG4gIGlmICghcGFydHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGlzRXZhbCA9IHBhcnRzWzNdICYmIHBhcnRzWzNdLmluZGV4T2YoJyA+IGV2YWwnKSA+IC0xO1xuICBjb25zdCBzdWJtYXRjaCA9IGdlY2tvRXZhbFJlLmV4ZWMocGFydHNbM10pO1xuXG4gIGlmIChpc0V2YWwgJiYgc3VibWF0Y2ggIT0gbnVsbCkge1xuICAgIC8vIHRocm93IG91dCBldmFsIGxpbmUvY29sdW1uIGFuZCB1c2UgdG9wLW1vc3QgbGluZSBudW1iZXJcbiAgICBwYXJ0c1szXSA9IHN1Ym1hdGNoWzFdO1xuICAgIHBhcnRzWzRdID0gc3VibWF0Y2hbMl07XG4gICAgcGFydHNbNV0gPSBudWxsOyAvLyBubyBjb2x1bW4gd2hlbiBldmFsXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZpbGU6IHBhcnRzWzNdLFxuICAgIG1ldGhvZE5hbWU6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgYXJndW1lbnRzOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCcsJykgOiBbXSxcbiAgICBsaW5lTnVtYmVyOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGwsXG4gICAgY29sdW1uOiBwYXJ0c1s1XSA/ICtwYXJ0c1s1XSA6IG51bGxcbiAgfTtcbn1cblxuY29uc3QgamF2YVNjcmlwdENvcmVSZSA9IC9eXFxzKig/OihbXkBdKikoPzpcXCgoLio/KVxcKSk/QCk/KFxcUy4qPyk6KFxcZCspKD86OihcXGQrKSk/XFxzKiQvaTtcblxuZnVuY3Rpb24gcGFyc2VKU0MobGluZSkge1xuICBjb25zdCBwYXJ0cyA9IGphdmFTY3JpcHRDb3JlUmUuZXhlYyhsaW5lKTtcblxuICBpZiAoIXBhcnRzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZpbGU6IHBhcnRzWzNdLFxuICAgIG1ldGhvZE5hbWU6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgYXJndW1lbnRzOiBbXSxcbiAgICBsaW5lTnVtYmVyOiArcGFydHNbNF0sXG4gICAgY29sdW1uOiBwYXJ0c1s1XSA/ICtwYXJ0c1s1XSA6IG51bGxcbiAgfTtcbn1cblxuY29uc3Qgbm9kZVJlID0gL15cXHMqYXQgKD86KCg/OlxcW29iamVjdCBvYmplY3RcXF0pP1teXFxcXC9dKyg/OiBcXFthcyBcXFMrXFxdKT8pICk/XFwoPyguKj8pOihcXGQrKSg/OjooXFxkKykpP1xcKT9cXHMqJC9pO1xuXG5mdW5jdGlvbiBwYXJzZU5vZGUobGluZSkge1xuICBjb25zdCBwYXJ0cyA9IG5vZGVSZS5leGVjKGxpbmUpO1xuXG4gIGlmICghcGFydHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmlsZTogcGFydHNbMl0sXG4gICAgbWV0aG9kTmFtZTogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICBhcmd1bWVudHM6IFtdLFxuICAgIGxpbmVOdW1iZXI6ICtwYXJ0c1szXSxcbiAgICBjb2x1bW46IHBhcnRzWzRdID8gK3BhcnRzWzRdIDogbnVsbFxuICB9O1xufVxuXG52YXIgUmVjb2lsX3N0YWNrVHJhY2VQYXJzZXIgPSBzdGFja1RyYWNlUGFyc2VyO1xuXG5jb25zdCB7XG4gIHVzZVJlZjogdXNlUmVmJDFcbn0gPSByZWFjdDtcblxuXG5cblxuXG5mdW5jdGlvbiB1c2VDb21wb25lbnROYW1lKCkge1xuICBjb25zdCBuYW1lUmVmID0gdXNlUmVmJDEoKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKFJlY29pbF9na3hfMSgncmVjb2lsX2luZmVyX2NvbXBvbmVudF9uYW1lcycpKSB7XG4gICAgICB2YXIgX25hbWVSZWYkY3VycmVudDtcblxuICAgICAgaWYgKG5hbWVSZWYuY3VycmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIGJsZXNzZWQgd2F5IHRvIGRldGVybWluZSB0aGUgY2FsbGluZyBSZWFjdCBjb21wb25lbnQgZnJvbVxuICAgICAgICAvLyB3aXRoaW4gYSBob29rLiBUaGlzIGhhY2sgdXNlcyB0aGUgZmFjdCB0aGF0IGhvb2tzIG11c3Qgc3RhcnQgd2l0aCAndXNlJ1xuICAgICAgICAvLyBhbmQgdGhhdCBob29rcyBhcmUgZWl0aGVyIGNhbGxlZCBieSBSZWFjdCBDb21wb25lbnRzIG9yIG90aGVyIGhvb2tzLiBJdFxuICAgICAgICAvLyBmb2xsb3dzIHRoZXJlZm9yZSwgdGhhdCB0byBmaW5kIHRoZSBjYWxsaW5nIGNvbXBvbmVudCwgeW91IHNpbXBseSBuZWVkXG4gICAgICAgIC8vIHRvIGxvb2sgZG93biB0aGUgc3RhY2sgYW5kIGZpbmQgdGhlIGZpcnN0IGZ1bmN0aW9uIHdoaWNoIGRvZXNuJ3Qgc3RhcnRcbiAgICAgICAgLy8gd2l0aCAndXNlJy4gV2UgYXJlIG9ubHkgZW5hYmxpbmcgdGhpcyBpbiBkZXYgZm9yIG5vdywgc2luY2Ugb25jZSB0aGVcbiAgICAgICAgLy8gY29kZWJhc2UgaXMgbWluaWZpZWQsIHRoZSBuYW1pbmcgYXNzdW1wdGlvbnMgbm8gbG9uZ2VyIGhvbGQgdHJ1ZS5cbiAgICAgICAgY29uc3QgZnJhbWVzID0gUmVjb2lsX3N0YWNrVHJhY2VQYXJzZXIobmV3IEVycm9yKCkuc3RhY2spO1xuXG4gICAgICAgIGZvciAoY29uc3Qge1xuICAgICAgICAgIG1ldGhvZE5hbWVcbiAgICAgICAgfSBvZiBmcmFtZXMpIHtcbiAgICAgICAgICAvLyBJIG9ic2VydmVkIGNhc2VzIHdoZXJlIHRoZSBmcmFtZSB3YXMgb2YgdGhlIGZvcm0gJ09iamVjdC51c2VYWFgnXG4gICAgICAgICAgLy8gaGVuY2Ugd2h5IEknbSBzZWFyY2hpbmcgZm9yIGhvb2tzIGZvbGxvd2luZyBhIHdvcmQgYm91bmRhcnlcbiAgICAgICAgICBpZiAoIW1ldGhvZE5hbWUubWF0Y2goL1xcYnVzZVteXFxiXSskLykpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lUmVmLmN1cnJlbnQgPSBtZXRob2ROYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5hbWVSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoX25hbWVSZWYkY3VycmVudCA9IG5hbWVSZWYuY3VycmVudCkgIT09IG51bGwgJiYgX25hbWVSZWYkY3VycmVudCAhPT0gdm9pZCAwID8gX25hbWVSZWYkY3VycmVudCA6ICc8dW5hYmxlIHRvIGRldGVybWluZSBjb21wb25lbnQgbmFtZT4nO1xuICAgIH1cbiAgfSAvLyBAZmItb25seTogcmV0dXJuIFwiPGNvbXBvbmVudCBuYW1lIG9ubHkgYXZhaWxhYmxlIHdoZW4gYm90aCBpbiBkZXYgbW9kZSBhbmQgd2hlbiBwYXNzaW5nIEdLICdyZWNvaWxfaW5mZXJfY29tcG9uZW50X25hbWVzJz5cIjtcblxuXG4gIHJldHVybiAnPGNvbXBvbmVudCBuYW1lIG5vdCBhdmFpbGFibGU+JzsgLy8gQG9zcy1vbmx5XG59XG5cbnZhciBSZWNvaWxfdXNlQ29tcG9uZW50TmFtZSA9IHVzZUNvbXBvbmVudE5hbWU7XG5cbmNvbnN0IHtcbiAgdXNlQ2FsbGJhY2ssXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0JDEsXG4gIHVzZU1lbW86IHVzZU1lbW8kMSxcbiAgdXNlUmVmOiB1c2VSZWYkMixcbiAgdXNlU3RhdGU6IHVzZVN0YXRlJDFcbn0gPSByZWFjdDtcblxuY29uc3Qge1xuICBiYXRjaFVwZGF0ZXM6IGJhdGNoVXBkYXRlcyQyXG59ID0gUmVjb2lsX0JhdGNoaW5nO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkMixcbiAgZ2V0Tm9kZTogZ2V0Tm9kZSQyLFxuICBub2Rlczogbm9kZXMkMVxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIHVzZVJlY29pbE11dGFibGVTb3VyY2U6IHVzZVJlY29pbE11dGFibGVTb3VyY2UkMSxcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDFcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdF9yZWFjdDtcblxuY29uc3Qge1xuICBpc1JlY29pbFZhbHVlOiBpc1JlY29pbFZhbHVlJDJcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWUkMTtcblxuY29uc3Qge1xuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBBYnN0cmFjdFJlY29pbFZhbHVlJDIsXG4gIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZTogZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIsXG4gIHNldFJlY29pbFZhbHVlOiBzZXRSZWNvaWxWYWx1ZSQyLFxuICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlOiBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDEsXG4gIHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWU6IHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUkMSxcbiAgc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZTogc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIFNuYXBzaG90OiBTbmFwc2hvdCQxLFxuICBjbG9uZVNuYXBzaG90OiBjbG9uZVNuYXBzaG90JDFcbn0gPSBSZWNvaWxfU25hcHNob3QkMTtcblxuY29uc3Qge1xuICBzZXRCeUFkZGluZ1RvU2V0OiBzZXRCeUFkZGluZ1RvU2V0JDJcbn0gPSBSZWNvaWxfQ29weU9uV3JpdGU7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCB7XG4gIG11dGFibGVTb3VyY2VFeGlzdHM6IG11dGFibGVTb3VyY2VFeGlzdHMkMSxcbiAgdXNlTXV0YWJsZVNvdXJjZTogdXNlTXV0YWJsZVNvdXJjZSQxXG59ID0gUmVjb2lsX211dGFibGVTb3VyY2U7XG5cblxuXG5cblxuXG5cblxuXG5mdW5jdGlvbiBoYW5kbGVMb2FkYWJsZShsb2FkYWJsZSwgYXRvbSwgc3RvcmVSZWYpIHtcbiAgLy8gV2UgY2FuJ3QganVzdCB0aHJvdyB0aGUgcHJvbWlzZSB3ZSBhcmUgd2FpdGluZyBvbiB0byBTdXNwZW5zZS4gIElmIHRoZVxuICAvLyB1cHN0cmVhbSBkZXBlbmRlbmNpZXMgY2hhbmdlIGl0IG1heSBwcm9kdWNlIGEgc3RhdGUgaW4gd2hpY2ggdGhlIGNvbXBvbmVudFxuICAvLyBjYW4gcmVuZGVyLCBidXQgaXQgd291bGQgc3RpbGwgYmUgc3VzcGVuZGVkIG9uIGEgUHJvbWlzZSB0aGF0IG1heSBuZXZlciByZXNvbHZlLlxuICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gIH0gZWxzZSBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKS5zdXNwZW5kZWRDb21wb25lbnRSZXNvbHZlcnMuYWRkKHJlc29sdmUpO1xuICAgIH0pO1xuICAgIHRocm93IHByb21pc2U7XG4gIH0gZWxzZSBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50cztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmFsdWUgb2YgbG9hZGFibGUgYXRvbSBcIiR7YXRvbS5rZXl9XCJgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCBob29rTmFtZSkge1xuICBpZiAoIWlzUmVjb2lsVmFsdWUkMihyZWNvaWxWYWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYXJndW1lbnQgdG8gJHtob29rTmFtZX06IGV4cGVjdGVkIGFuIGF0b20gb3Igc2VsZWN0b3IgYnV0IGdvdCAke1N0cmluZyhyZWNvaWxWYWx1ZSl9YCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsSW50ZXJmYWNlX0RFUFJFQ0FURUQoKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICBjb25zdCBbXywgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUkMShbXSk7XG4gIGNvbnN0IHJlY29pbFZhbHVlc1VzZWQgPSB1c2VSZWYkMihuZXcgU2V0KCkpO1xuICByZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQgPSBuZXcgU2V0KCk7IC8vIFRyYWNrIHRoZSBSZWNvaWxWYWx1ZXMgdXNlZCBqdXN0IGR1cmluZyB0aGlzIHJlbmRlclxuXG4gIGNvbnN0IHByZXZpb3VzU3Vic2NyaXB0aW9ucyA9IHVzZVJlZiQyKG5ldyBTZXQoKSk7XG4gIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSB1c2VSZWYkMihuZXcgTWFwKCkpO1xuICBjb25zdCB1bnN1YnNjcmliZUZyb20gPSB1c2VDYWxsYmFjayhrZXkgPT4ge1xuICAgIGNvbnN0IHN1YiA9IHN1YnNjcmlwdGlvbnMuY3VycmVudC5nZXQoa2V5KTtcblxuICAgIGlmIChzdWIpIHtcbiAgICAgIHN1Yi5yZWxlYXNlKHN0b3JlUmVmLmN1cnJlbnQpO1xuICAgICAgc3Vic2NyaXB0aW9ucy5jdXJyZW50LmRlbGV0ZShrZXkpO1xuICAgIH1cbiAgfSwgW3N0b3JlUmVmLCBzdWJzY3JpcHRpb25zXSk7XG4gIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBSZWNvaWxfdXNlQ29tcG9uZW50TmFtZSgpO1xuICB1c2VFZmZlY3QkMSgoKSA9PiB7XG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlU3RhdGUoX3N0YXRlLCBrZXkpIHtcbiAgICAgIGlmICghc3Vic2NyaXB0aW9ucy5jdXJyZW50LmhhcyhrZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VVcGRhdGUoW10pO1xuICAgIH1cblxuICAgIFJlY29pbF9kaWZmZXJlbmNlU2V0cyhyZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQsIHByZXZpb3VzU3Vic2NyaXB0aW9ucy5jdXJyZW50KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoc3Vic2NyaXB0aW9ucy5jdXJyZW50LmhhcyhrZXkpKSB7XG4gICAgICAgIFJlY29pbF9leHBlY3RhdGlvblZpb2xhdGlvbihgRG91YmxlIHN1YnNjcmlwdGlvbiB0byBSZWNvaWxWYWx1ZSBcIiR7a2V5fVwiYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3ViID0gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxKHN0b3JlLCBuZXcgQWJzdHJhY3RSZWNvaWxWYWx1ZSQyKGtleSksIHN0YXRlID0+IHtcbiAgICAgICAgUmVjb2lsX1RyYWNpbmcudHJhY2UoJ1JlY29pbFZhbHVlIHN1YnNjcmlwdGlvbiBmaXJlZCcsIGtleSwgKCkgPT4ge1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHN0YXRlLCBrZXkpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGNvbXBvbmVudE5hbWUpO1xuICAgICAgc3Vic2NyaXB0aW9ucy5jdXJyZW50LnNldChrZXksIHN1Yik7XG4gICAgICBSZWNvaWxfVHJhY2luZy50cmFjZSgnaW5pdGlhbCB1cGRhdGUgb24gc3Vic2NyaWJpbmcnLCBrZXksICgpID0+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpbmNlIHdlJ3JlIHN1YnNjcmliaW5nIGluIGFuIGVmZmVjdCB3ZSBuZWVkIHRvIHVwZGF0ZSB0byB0aGUgbGF0ZXN0XG4gICAgICAgICAqIHZhbHVlIG9mIHRoZSBhdG9tIHNpbmNlIGl0IG1heSBoYXZlIGNoYW5nZWQgc2luY2Ugd2UgcmVuZGVyZWQuIFdlIGNhblxuICAgICAgICAgKiBnbyBhaGVhZCBhbmQgZG8gdGhhdCBub3csIHVubGVzcyB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgYmF0Y2ggLS1cbiAgICAgICAgICogaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGQgZG8gaXQgYXQgdGhlIGVuZCBvZiB0aGUgYmF0Y2gsIGR1ZSB0byB0aGVcbiAgICAgICAgICogZm9sbG93aW5nIGVkZ2UgY2FzZTogU3VwcG9zZSBhbiBhdG9tIGlzIHVwZGF0ZWQgaW4gYW5vdGhlciB1c2VFZmZlY3RcbiAgICAgICAgICogb2YgdGhpcyBzYW1lIGNvbXBvbmVudC4gVGhlbiB0aGUgZm9sbG93aW5nIHNlcXVlbmNlIG9mIGV2ZW50cyBvY2N1cjpcbiAgICAgICAgICogMS4gQXRvbSBpcyB1cGRhdGVkIGFuZCBzdWJzIGZpcmVkIChidXQgd2UgbWF5IG5vdCBiZSBzdWJzY3JpYmVkXG4gICAgICAgICAqICAgIHlldCBkZXBlbmRpbmcgb24gb3JkZXIgb2YgZWZmZWN0cywgc28gd2UgbWlzcyB0aGlzKSBVcGRhdGVkIHZhbHVlXG4gICAgICAgICAqICAgIGlzIG5vdyBpbiBuZXh0VHJlZSwgYnV0IG5vdCBjdXJyZW50VHJlZS5cbiAgICAgICAgICogMi4gVGhpcyBlZmZlY3QgaGFwcGVucy4gV2Ugc3Vic2NyaWJlIGFuZCB1cGRhdGUuXG4gICAgICAgICAqIDMuIEZyb20gdGhlIHVwZGF0ZSB3ZSByZS1yZW5kZXIgYW5kIHJlYWQgY3VycmVudFRyZWUsIHdpdGggb2xkIHZhbHVlLlxuICAgICAgICAgKiA0LiBCYXRjaGVyJ3MgZWZmZWN0IHNldHMgY3VycmVudFRyZWUgdG8gbmV4dFRyZWUuXG4gICAgICAgICAqIEluIHRoaXMgc2VxdWVuY2Ugd2UgbWlzcyB0aGUgdXBkYXRlLiBUbyBhdm9pZCB0aGF0LCBhZGQgdGhlIHVwZGF0ZVxuICAgICAgICAgKiB0byBxdWV1ZWRDb21wb25lbnRDYWxsYmFjayBpZiBhIGJhdGNoIGlzIGluIHByb2dyZXNzLlxuICAgICAgICAgKi9cbiAgICAgICAgLy8gRklYTUUgZGVsZXRlIHF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVEIHdoZW4gZGVsZXRpbmcgdXNlSW50ZXJmYWNlLlxuICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgaWYgKHN0YXRlLm5leHRUcmVlKSB7XG4gICAgICAgICAgc3RvcmUuZ2V0U3RhdGUoKS5xdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRC5wdXNoKFJlY29pbF9UcmFjaW5nLndyYXAoKCkgPT4ge1xuICAgICAgICAgICAgdXBkYXRlU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSwga2V5KTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSwga2V5KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgUmVjb2lsX2RpZmZlcmVuY2VTZXRzKHByZXZpb3VzU3Vic2NyaXB0aW9ucy5jdXJyZW50LCByZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIHVuc3Vic2NyaWJlRnJvbShrZXkpO1xuICAgIH0pO1xuICAgIHByZXZpb3VzU3Vic2NyaXB0aW9ucy5jdXJyZW50ID0gcmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50O1xuICB9KTtcbiAgdXNlRWZmZWN0JDEoKCkgPT4ge1xuICAgIGNvbnN0IHN1YnMgPSBzdWJzY3JpcHRpb25zLmN1cnJlbnQ7XG4gICAgcmV0dXJuICgpID0+IHN1YnMuZm9yRWFjaCgoXywga2V5KSA9PiB1bnN1YnNjcmliZUZyb20oa2V5KSk7XG4gIH0sIFt1bnN1YnNjcmliZUZyb21dKTtcbiAgcmV0dXJuIHVzZU1lbW8kMSgoKSA9PiB7XG4gICAgZnVuY3Rpb24gdXNlU2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VTZXRSZWNvaWxTdGF0ZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3VmFsdWVPclVwZGF0ZXIgPT4ge1xuICAgICAgICBzZXRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFN0YXRlLCBuZXdWYWx1ZU9yVXBkYXRlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVzZVJlc2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZXNldFJlY29pbFN0YXRlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoKSA9PiBzZXRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlTG9hZGFibGUocmVjb2lsVmFsdWUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50LmhhcyhyZWNvaWxWYWx1ZS5rZXkpKSB7XG4gICAgICAgIHJlY29pbFZhbHVlc1VzZWQuY3VycmVudCA9IHNldEJ5QWRkaW5nVG9TZXQkMihyZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQsIHJlY29pbFZhbHVlLmtleSk7XG4gICAgICB9IC8vIFRPRE8gUmVzdG9yZSBvcHRpbWl6YXRpb24gdG8gbWVtb2l6ZSBsb29rdXBcblxuXG4gICAgICByZXR1cm4gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsVmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgICAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCAndXNlUmVjb2lsVmFsdWUnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbG9hZGFibGUgPSB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlKHJlY29pbFZhbHVlKTsgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG5cbiAgICAgIHJldHVybiBoYW5kbGVMb2FkYWJsZShsb2FkYWJsZSwgcmVjb2lsVmFsdWUsIHN0b3JlUmVmKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1c2VSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICAgICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSwgJ3VzZVJlY29pbFN0YXRlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbdXNlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUpLCB1c2VTZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVzZVJlY29pbFN0YXRlTG9hZGFibGUocmVjb2lsU3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFJlY29pbFZhbHVlOiB1c2VSZWNvaWxWYWx1ZSxcbiAgICAgIGdldFJlY29pbFZhbHVlTG9hZGFibGU6IHVzZVJlY29pbFZhbHVlTG9hZGFibGUsXG4gICAgICBnZXRSZWNvaWxTdGF0ZTogdXNlUmVjb2lsU3RhdGUsXG4gICAgICBnZXRSZWNvaWxTdGF0ZUxvYWRhYmxlOiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlLFxuICAgICAgZ2V0U2V0UmVjb2lsU3RhdGU6IHVzZVNldFJlY29pbFN0YXRlLFxuICAgICAgZ2V0UmVzZXRSZWNvaWxTdGF0ZTogdXNlUmVzZXRSZWNvaWxTdGF0ZVxuICAgIH07XG4gIH0sIFtyZWNvaWxWYWx1ZXNVc2VkLCBzdG9yZVJlZl0pO1xufVxuXG5jb25zdCByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HID0ge1xuICBjdXJyZW50OiAwXG59O1xuXG5mdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX01VVEFCTEVTT1VSQ0UocmVjb2lsVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJyk7XG4gIH1cblxuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDEoKTtcbiAgY29uc3QgZ2V0VmFsdWUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgcmVjb2lsQ29tcG9uZW50R2V0UmVjb2lsVmFsdWVDb3VudF9GT1JfVEVTVElORy5jdXJyZW50Kys7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFZhbHVlLCBzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCkuY3VycmVudFRyZWUpO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFZhbHVlXSk7XG4gIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBSZWNvaWxfdXNlQ29tcG9uZW50TmFtZSgpO1xuICBjb25zdCBzdWJzY3JpYmUgPSB1c2VDYWxsYmFjaygoX3NvbWV0aGluZywgY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgc3ViID0gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxKHN0b3JlLCByZWNvaWxWYWx1ZSwgKCkgPT4ge1xuICAgICAgUmVjb2lsX1RyYWNpbmcudHJhY2UoJ1JlY29pbFZhbHVlIHN1YnNjcmlwdGlvbiBmaXJlZCcsIHJlY29pbFZhbHVlLmtleSwgKCkgPT4ge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSk7XG4gICAgfSwgY29tcG9uZW50TmFtZSk7XG4gICAgcmV0dXJuICgpID0+IHN1Yi5yZWxlYXNlKHN0b3JlKTtcbiAgfSwgW3JlY29pbFZhbHVlLCBzdG9yZVJlZiwgY29tcG9uZW50TmFtZV0pO1xuICByZXR1cm4gdXNlTXV0YWJsZVNvdXJjZSQxKHVzZVJlY29pbE11dGFibGVTb3VyY2UkMSgpLCBnZXRWYWx1ZSwgc3Vic2NyaWJlKTtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9MRUdBQ1kocmVjb2lsVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJyk7XG4gIH1cblxuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDEoKTtcbiAgY29uc3QgW18sIGZvcmNlVXBkYXRlXSA9IHVzZVN0YXRlJDEoW10pO1xuICBjb25zdCBjb21wb25lbnROYW1lID0gUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUoKTtcbiAgdXNlRWZmZWN0JDEoKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICBjb25zdCBzdWIgPSBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEoc3RvcmUsIHJlY29pbFZhbHVlLCBfc3RhdGUgPT4ge1xuICAgICAgUmVjb2lsX1RyYWNpbmcudHJhY2UoJ1JlY29pbFZhbHVlIHN1YnNjcmlwdGlvbiBmaXJlZCcsIHJlY29pbFZhbHVlLmtleSwgKCkgPT4ge1xuICAgICAgICBmb3JjZVVwZGF0ZShbXSk7XG4gICAgICB9KTtcbiAgICB9LCBjb21wb25lbnROYW1lKTtcbiAgICBSZWNvaWxfVHJhY2luZy50cmFjZSgnaW5pdGlhbCB1cGRhdGUgb24gc3Vic2NyaWJpbmcnLCByZWNvaWxWYWx1ZS5rZXksICgpID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogU2luY2Ugd2UncmUgc3Vic2NyaWJpbmcgaW4gYW4gZWZmZWN0IHdlIG5lZWQgdG8gdXBkYXRlIHRvIHRoZSBsYXRlc3RcbiAgICAgICAqIHZhbHVlIG9mIHRoZSBhdG9tIHNpbmNlIGl0IG1heSBoYXZlIGNoYW5nZWQgc2luY2Ugd2UgcmVuZGVyZWQuIFdlIGNhblxuICAgICAgICogZ28gYWhlYWQgYW5kIGRvIHRoYXQgbm93LCB1bmxlc3Mgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIGJhdGNoIC0tXG4gICAgICAgKiBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBkbyBpdCBhdCB0aGUgZW5kIG9mIHRoZSBiYXRjaCwgZHVlIHRvIHRoZVxuICAgICAgICogZm9sbG93aW5nIGVkZ2UgY2FzZTogU3VwcG9zZSBhbiBhdG9tIGlzIHVwZGF0ZWQgaW4gYW5vdGhlciB1c2VFZmZlY3RcbiAgICAgICAqIG9mIHRoaXMgc2FtZSBjb21wb25lbnQuIFRoZW4gdGhlIGZvbGxvd2luZyBzZXF1ZW5jZSBvZiBldmVudHMgb2NjdXI6XG4gICAgICAgKiAxLiBBdG9tIGlzIHVwZGF0ZWQgYW5kIHN1YnMgZmlyZWQgKGJ1dCB3ZSBtYXkgbm90IGJlIHN1YnNjcmliZWRcbiAgICAgICAqICAgIHlldCBkZXBlbmRpbmcgb24gb3JkZXIgb2YgZWZmZWN0cywgc28gd2UgbWlzcyB0aGlzKSBVcGRhdGVkIHZhbHVlXG4gICAgICAgKiAgICBpcyBub3cgaW4gbmV4dFRyZWUsIGJ1dCBub3QgY3VycmVudFRyZWUuXG4gICAgICAgKiAyLiBUaGlzIGVmZmVjdCBoYXBwZW5zLiBXZSBzdWJzY3JpYmUgYW5kIHVwZGF0ZS5cbiAgICAgICAqIDMuIEZyb20gdGhlIHVwZGF0ZSB3ZSByZS1yZW5kZXIgYW5kIHJlYWQgY3VycmVudFRyZWUsIHdpdGggb2xkIHZhbHVlLlxuICAgICAgICogNC4gQmF0Y2hlcidzIGVmZmVjdCBzZXRzIGN1cnJlbnRUcmVlIHRvIG5leHRUcmVlLlxuICAgICAgICogSW4gdGhpcyBzZXF1ZW5jZSB3ZSBtaXNzIHRoZSB1cGRhdGUuIFRvIGF2b2lkIHRoYXQsIGFkZCB0aGUgdXBkYXRlXG4gICAgICAgKiB0byBxdWV1ZWRDb21wb25lbnRDYWxsYmFjayBpZiBhIGJhdGNoIGlzIGluIHByb2dyZXNzLlxuICAgICAgICovXG4gICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgIGlmIChzdGF0ZS5uZXh0VHJlZSkge1xuICAgICAgICBzdG9yZS5nZXRTdGF0ZSgpLnF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVELnB1c2goUmVjb2lsX1RyYWNpbmcud3JhcCgoKSA9PiB7XG4gICAgICAgICAgZm9yY2VVcGRhdGUoW10pO1xuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JjZVVwZGF0ZShbXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHN1Yi5yZWxlYXNlKHN0b3JlKTtcbiAgfSwgW3JlY29pbFZhbHVlLCBzdG9yZVJlZl0pO1xuICByZXR1cm4gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsVmFsdWUpO1xufVxuLyoqXG4gIExpa2UgdXNlUmVjb2lsVmFsdWUoKSwgYnV0IGVpdGhlciByZXR1cm5zIHRoZSB2YWx1ZSBpZiBhdmFpbGFibGUgb3JcbiAganVzdCB1bmRlZmluZWQgaWYgbm90IGF2YWlsYWJsZSBmb3IgYW55IHJlYXNvbiwgc3VjaCBhcyBwZW5kaW5nIG9yIGVycm9yLlxuKi9cblxuXG5mdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlKHJlY29pbFZhbHVlKSB7XG4gIGlmIChtdXRhYmxlU291cmNlRXhpc3RzJDEoKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvcmVhY3QtaG9va3NcbiAgICByZXR1cm4gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9NVVRBQkxFU09VUkNFKHJlY29pbFZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L3JlYWN0LWhvb2tzXG4gICAgcmV0dXJuIHVzZVJlY29pbFZhbHVlTG9hZGFibGVfTEVHQUNZKHJlY29pbFZhbHVlKTtcbiAgfVxufVxuLyoqXG4gIFJldHVybnMgdGhlIHZhbHVlIHJlcHJlc2VudGVkIGJ5IHRoZSBSZWNvaWxWYWx1ZS5cbiAgSWYgdGhlIHZhbHVlIGlzIHBlbmRpbmcsIGl0IHdpbGwgdGhyb3cgYSBQcm9taXNlIHRvIHN1c3BlbmQgdGhlIGNvbXBvbmVudCxcbiAgaWYgdGhlIHZhbHVlIGlzIGFuIGVycm9yIGl0IHdpbGwgdGhyb3cgaXQgZm9yIHRoZSBuZWFyZXN0IFJlYWN0IGVycm9yIGJvdW5kYXJ5LlxuICBUaGlzIHdpbGwgYWxzbyBzdWJzY3JpYmUgdGhlIGNvbXBvbmVudCBmb3IgYW55IHVwZGF0ZXMgaW4gdGhlIHZhbHVlLlxuICAqL1xuXG5cbmZ1bmN0aW9uIHVzZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFZhbHVlLCAndXNlUmVjb2lsVmFsdWUnKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICBjb25zdCBsb2FkYWJsZSA9IHVzZVJlY29pbFZhbHVlTG9hZGFibGUocmVjb2lsVmFsdWUpOyAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cblxuICByZXR1cm4gaGFuZGxlTG9hZGFibGUobG9hZGFibGUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZik7XG59XG4vKipcbiAgUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIHRoZSB2YWx1ZSBvZiBhIFJlY29pbFN0YXRlIHRvIGJlIHVwZGF0ZWQsIGJ1dCBkb2VzXG4gIG5vdCBzdWJzY3JpYmUgdGhlIGNvbXBvbmVudCB0byBjaGFuZ2VzIHRvIHRoYXQgUmVjb2lsU3RhdGUuXG4qL1xuXG5cbmZ1bmN0aW9uIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlU2V0UmVjb2lsU3RhdGUnKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2sobmV3VmFsdWVPclVwZGF0ZXIgPT4ge1xuICAgIHNldFJlY29pbFZhbHVlJDIoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsU3RhdGUsIG5ld1ZhbHVlT3JVcGRhdGVyKTtcbiAgfSwgW3N0b3JlUmVmLCByZWNvaWxTdGF0ZV0pO1xufVxuLyoqXG4gIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgcmVzZXQgdGhlIHZhbHVlIG9mIGEgUmVjb2lsU3RhdGUgdG8gaXRzIGRlZmF1bHRcbiovXG5cblxuZnVuY3Rpb24gdXNlUmVzZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSwgJ3VzZVJlc2V0UmVjb2lsU3RhdGUnKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldFJlY29pbFZhbHVlJDIoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsU3RhdGUsIERFRkFVTFRfVkFMVUUkMik7XG4gIH0sIFtzdG9yZVJlZiwgcmVjb2lsU3RhdGVdKTtcbn1cbi8qKlxuICBFcXVpdmFsZW50IHRvIHVzZVN0YXRlKCkuIEFsbG93cyB0aGUgdmFsdWUgb2YgdGhlIFJlY29pbFN0YXRlIHRvIGJlIHJlYWQgYW5kIHdyaXR0ZW4uXG4gIFN1YnNlcXVlbnQgdXBkYXRlcyB0byB0aGUgUmVjb2lsU3RhdGUgd2lsbCBjYXVzZSB0aGUgY29tcG9uZW50IHRvIHJlLXJlbmRlci4gSWYgdGhlXG4gIFJlY29pbFN0YXRlIGlzIHBlbmRpbmcsIHRoaXMgd2lsbCBzdXNwZW5kIHRoZSBjb21wb25lbnQgYW5kIGluaXRpYXRlIHRoZVxuICByZXRyaWV2YWwgb2YgdGhlIHZhbHVlLiBJZiBldmFsdWF0aW5nIHRoZSBSZWNvaWxTdGF0ZSByZXN1bHRlZCBpbiBhbiBlcnJvciwgdGhpcyB3aWxsXG4gIHRocm93IHRoZSBlcnJvciBzbyB0aGF0IHRoZSBuZWFyZXN0IFJlYWN0IGVycm9yIGJvdW5kYXJ5IGNhbiBjYXRjaCBpdC5cbiovXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZWNvaWxTdGF0ZScpO1xuICB9XG5cbiAgcmV0dXJuIFt1c2VSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG59XG4vKipcbiAgTGlrZSB1c2VSZWNvaWxTdGF0ZSgpLCBidXQgZG9lcyBub3QgY2F1c2UgU3VzcGVuc2Ugb3IgUmVhY3QgZXJyb3IgaGFuZGxpbmcuIFJldHVybnNcbiAgYW4gb2JqZWN0IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIFJlY29pbFN0YXRlIGlzIGF2YWlsYWJsZSwgcGVuZGluZywgb3JcbiAgdW5hdmFpbGFibGUgZHVlIHRvIGFuIGVycm9yLlxuKi9cblxuXG5mdW5jdGlvbiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVjb2lsU3RhdGVMb2FkYWJsZScpO1xuICB9XG5cbiAgcmV0dXJuIFt1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlKHJlY29pbFN0YXRlKSwgdXNlU2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpXTtcbn1cblxuZnVuY3Rpb24gdXNlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb24oY2FsbGJhY2spIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQxKCk7XG4gIHVzZUVmZmVjdCQxKCgpID0+IHtcbiAgICBjb25zdCBzdWIgPSBzdG9yZVJlZi5jdXJyZW50LnN1YnNjcmliZVRvVHJhbnNhY3Rpb25zKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gc3ViLnJlbGVhc2U7XG4gIH0sIFtjYWxsYmFjaywgc3RvcmVSZWZdKTtcbn1cblxuZnVuY3Rpb24gZXh0ZXJuYWxseVZpc2libGVBdG9tVmFsdWVzSW5TdGF0ZShzdGF0ZSkge1xuICBjb25zdCBhdG9tVmFsdWVzID0gc3RhdGUuYXRvbVZhbHVlcztcbiAgY29uc3QgcGVyc2lzdGVkQXRvbUNvbnRlbnRzVmFsdWVzID0gUmVjb2lsX21hcE1hcChSZWNvaWxfZmlsdGVyTWFwKGF0b21WYWx1ZXMsICh2LCBrKSA9PiB7XG4gICAgY29uc3Qgbm9kZSA9IGdldE5vZGUkMihrKTtcbiAgICBjb25zdCBwZXJzaXN0ZW5jZSA9IG5vZGUucGVyc2lzdGVuY2VfVU5TVEFCTEU7XG4gICAgcmV0dXJuIHBlcnNpc3RlbmNlICE9IG51bGwgJiYgcGVyc2lzdGVuY2UudHlwZSAhPT0gJ25vbmUnICYmIHYuc3RhdGUgPT09ICdoYXNWYWx1ZSc7XG4gIH0pLCB2ID0+IHYuY29udGVudHMpOyAvLyBNZXJnZSBpbiBub252YWxpZGF0ZWQgYXRvbXM7IHdlIG1heSBub3QgaGF2ZSBkZWZzIGZvciB0aGVtIGJ1dCB0aGV5IHdpbGxcbiAgLy8gYWxsIGhhdmUgcGVyc2lzdGVuY2Ugb24gb3IgdGhleSB3b3VsZG4ndCBiZSB0aGVyZSBpbiB0aGUgZmlyc3QgcGxhY2UuXG5cbiAgcmV0dXJuIFJlY29pbF9tZXJnZU1hcHMoc3RhdGUubm9udmFsaWRhdGVkQXRvbXMsIHBlcnNpc3RlZEF0b21Db250ZW50c1ZhbHVlcyk7XG59XG5cbi8qKlxuICBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgYWZ0ZXIgYW55IGF0b21zIGhhdmUgYmVlbiBtb2RpZmllZCBhbmQgdGhlIGNvbnNlcXVlbnRcbiAgY29tcG9uZW50IHJlLXJlbmRlcnMgaGF2ZSBiZWVuIGNvbW1pdHRlZC4gVGhpcyBpcyBpbnRlbmRlZCBmb3IgcGVyc2lzdGluZ1xuICB0aGUgdmFsdWVzIG9mIHRoZSBhdG9tcyB0byBzdG9yYWdlLiBUaGUgc3RvcmVkIHZhbHVlcyBjYW4gdGhlbiBiZSByZXN0b3JlZFxuICB1c2luZyB0aGUgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzIGhvb2suXG5cbiAgVGhlIGNhbGxiYWNrIHJlY2VpdmVzIHRoZSBmb2xsb3dpbmcgaW5mbzpcblxuICBhdG9tVmFsdWVzOiBUaGUgY3VycmVudCB2YWx1ZSBvZiBldmVyeSBhdG9tIHRoYXQgaXMgYm90aCBwZXJzaXN0YWJsZSAocGVyc2lzdGVuY2VcbiAgICAgICAgICAgICAgdHlwZSBub3Qgc2V0IHRvICdub25lJykgYW5kIHdob3NlIHZhbHVlIGlzIGF2YWlsYWJsZSAobm90IGluIGFuXG4gICAgICAgICAgICAgIGVycm9yIG9yIGxvYWRpbmcgc3RhdGUpLlxuXG4gIHByZXZpb3VzQXRvbVZhbHVlczogVGhlIHZhbHVlIG9mIGV2ZXJ5IHBlcnNpc3RhYmxlIGFuZCBhdmFpbGFibGUgYXRvbSBiZWZvcmVcbiAgICAgICAgICAgICAgIHRoZSB0cmFuc2FjdGlvbiBiZWdhbi5cblxuICBhdG9tSW5mbzogQSBtYXAgY29udGFpbmluZyB0aGUgcGVyc2lzdGVuY2Ugc2V0dGluZ3MgZm9yIGVhY2ggYXRvbS4gRXZlcnkga2V5XG4gICAgICAgICAgICB0aGF0IGV4aXN0cyBpbiBhdG9tVmFsdWVzIHdpbGwgYWxzbyBleGlzdCBpbiBhdG9tSW5mby5cblxuICBtb2RpZmllZEF0b21zOiBUaGUgc2V0IG9mIGF0b21zIHRoYXQgd2VyZSB3cml0dGVuIHRvIGR1cmluZyB0aGUgdHJhbnNhY3Rpb24uXG5cbiAgdHJhbnNhY3Rpb25NZXRhZGF0YTogQXJiaXRyYXJ5IGluZm9ybWF0aW9uIHRoYXQgd2FzIGFkZGVkIHZpYSB0aGVcbiAgICAgICAgICB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMgaG9vay4gVXNlZnVsIGZvciBpZ25vcmluZyB0aGUgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzXG4gICAgICAgICAgdHJhbnNhY3Rpb24sIHRvIGF2b2lkIGxvb3BzLlxuKi9cbmZ1bmN0aW9uIHVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRChjYWxsYmFjaykge1xuICB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbih1c2VDYWxsYmFjayhzdG9yZSA9PiB7XG4gICAgbGV0IHByZXZpb3VzVHJlZSA9IHN0b3JlLmdldFN0YXRlKCkucHJldmlvdXNUcmVlO1xuICAgIGNvbnN0IGN1cnJlbnRUcmVlID0gc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTtcblxuICAgIGlmICghcHJldmlvdXNUcmVlKSB7XG4gICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ1RyYW5zYWN0aW9uIHN1YnNjcmliZXJzIG5vdGlmaWVkIHdpdGhvdXQgYSBwcmV2aW91cyB0cmVlIGJlaW5nIHByZXNlbnQgLS0gdGhpcyBpcyBhIGJ1ZyBpbiBSZWNvaWwnKTtcbiAgICAgIHByZXZpb3VzVHJlZSA9IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7IC8vIGF0dGVtcHQgdG8gdHJ1bmRsZSBvblxuICAgIH1cblxuICAgIGNvbnN0IGF0b21WYWx1ZXMgPSBleHRlcm5hbGx5VmlzaWJsZUF0b21WYWx1ZXNJblN0YXRlKGN1cnJlbnRUcmVlKTtcbiAgICBjb25zdCBwcmV2aW91c0F0b21WYWx1ZXMgPSBleHRlcm5hbGx5VmlzaWJsZUF0b21WYWx1ZXNJblN0YXRlKHByZXZpb3VzVHJlZSk7XG4gICAgY29uc3QgYXRvbUluZm8gPSBSZWNvaWxfbWFwTWFwKG5vZGVzJDEsIG5vZGUgPT4ge1xuICAgICAgdmFyIF9ub2RlJHBlcnNpc3RlbmNlX1VOUywgX25vZGUkcGVyc2lzdGVuY2VfVU5TMiwgX25vZGUkcGVyc2lzdGVuY2VfVU5TMywgX25vZGUkcGVyc2lzdGVuY2VfVU5TNDtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGVyc2lzdGVuY2VfVU5TVEFCTEU6IHtcbiAgICAgICAgICB0eXBlOiAoX25vZGUkcGVyc2lzdGVuY2VfVU5TID0gKF9ub2RlJHBlcnNpc3RlbmNlX1VOUzIgPSBub2RlLnBlcnNpc3RlbmNlX1VOU1RBQkxFKSA9PT0gbnVsbCB8fCBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMyLnR5cGUpICE9PSBudWxsICYmIF9ub2RlJHBlcnNpc3RlbmNlX1VOUyAhPT0gdm9pZCAwID8gX25vZGUkcGVyc2lzdGVuY2VfVU5TIDogJ25vbmUnLFxuICAgICAgICAgIGJhY2tCdXR0b246IChfbm9kZSRwZXJzaXN0ZW5jZV9VTlMzID0gKF9ub2RlJHBlcnNpc3RlbmNlX1VOUzQgPSBub2RlLnBlcnNpc3RlbmNlX1VOU1RBQkxFKSA9PT0gbnVsbCB8fCBfbm9kZSRwZXJzaXN0ZW5jZV9VTlM0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbm9kZSRwZXJzaXN0ZW5jZV9VTlM0LmJhY2tCdXR0b24pICE9PSBudWxsICYmIF9ub2RlJHBlcnNpc3RlbmNlX1VOUzMgIT09IHZvaWQgMCA/IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzMgOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pOyAvLyBGaWx0ZXIgb24gZXhpc3RhbmNlIGluIGF0b21WYWx1ZXMgc28gdGhhdCBleHRlcm5hbGx5LXZpc2libGUgcnVsZXNcbiAgICAvLyBhcmUgYWxzbyBhcHBsaWVkIHRvIG1vZGlmaWVkIGF0b21zIChzcGVjaWZpY2FsbHkgZXhjbHVkZSBzZWxlY3RvcnMpOlxuXG4gICAgY29uc3QgbW9kaWZpZWRBdG9tcyA9IFJlY29pbF9maWx0ZXJTZXQoY3VycmVudFRyZWUuZGlydHlBdG9tcywgayA9PiBhdG9tVmFsdWVzLmhhcyhrKSB8fCBwcmV2aW91c0F0b21WYWx1ZXMuaGFzKGspKTtcbiAgICBjYWxsYmFjayh7XG4gICAgICBhdG9tVmFsdWVzLFxuICAgICAgcHJldmlvdXNBdG9tVmFsdWVzLFxuICAgICAgYXRvbUluZm8sXG4gICAgICBtb2RpZmllZEF0b21zLFxuICAgICAgdHJhbnNhY3Rpb25NZXRhZGF0YTogeyAuLi5jdXJyZW50VHJlZS50cmFuc2FjdGlvbk1ldGFkYXRhXG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFtjYWxsYmFja10pKTtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlcihjYWxsYmFjaykge1xuICB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbih1c2VDYWxsYmFjayhzdG9yZSA9PiB7XG4gICAgY2FsbGJhY2soe1xuICAgICAgc25hcHNob3Q6IGNsb25lU25hcHNob3QkMShzdG9yZSwgJ2N1cnJlbnQnKSxcbiAgICAgIHByZXZpb3VzU25hcHNob3Q6IGNsb25lU25hcHNob3QkMShzdG9yZSwgJ3ByZXZpb3VzJylcbiAgICB9KTtcbiAgfSwgW2NhbGxiYWNrXSkpO1xufSAvLyBSZXR1cm4gYSBzbmFwc2hvdCBvZiB0aGUgY3VycmVudCBzdGF0ZSBhbmQgc3Vic2NyaWJlIHRvIGFsbCBzdGF0ZSBjaGFuZ2VzXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsU25hcHNob3QoKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICBjb25zdCBbc25hcHNob3QsIHNldFNuYXBzaG90XSA9IHVzZVN0YXRlJDEoKCkgPT4gY2xvbmVTbmFwc2hvdCQxKHN0b3JlUmVmLmN1cnJlbnQpKTtcbiAgdXNlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb24odXNlQ2FsbGJhY2soc3RvcmUgPT4gc2V0U25hcHNob3QoY2xvbmVTbmFwc2hvdCQxKHN0b3JlKSksIFtdKSk7XG4gIHJldHVybiBzbmFwc2hvdDtcbn1cblxuZnVuY3Rpb24gdXNlR290b1JlY29pbFNuYXBzaG90KCkge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDEoKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrKHNuYXBzaG90ID0+IHtcbiAgICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWU7XG5cbiAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHByZXYgPSAoX3N0b3JlU3RhdGUkbmV4dFRyZWUgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmVTdGF0ZSRuZXh0VHJlZSAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkbmV4dFRyZWUgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgIGNvbnN0IG5leHQgPSBzbmFwc2hvdC5nZXRTdG9yZV9JTlRFUk5BTCgpLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG4gICAgYmF0Y2hVcGRhdGVzJDIoKCkgPT4ge1xuICAgICAgY29uc3Qga2V5c1RvVXBkYXRlID0gbmV3IFNldCgpO1xuXG4gICAgICBmb3IgKGNvbnN0IGtleXMgb2YgW3ByZXYuYXRvbVZhbHVlcy5rZXlzKCksIG5leHQuYXRvbVZhbHVlcy5rZXlzKCldKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgICB2YXIgX3ByZXYkYXRvbVZhbHVlcyRnZXQsIF9uZXh0JGF0b21WYWx1ZXMkZ2V0O1xuXG4gICAgICAgICAgaWYgKCgoX3ByZXYkYXRvbVZhbHVlcyRnZXQgPSBwcmV2LmF0b21WYWx1ZXMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9wcmV2JGF0b21WYWx1ZXMkZ2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcHJldiRhdG9tVmFsdWVzJGdldC5jb250ZW50cykgIT09ICgoX25leHQkYXRvbVZhbHVlcyRnZXQgPSBuZXh0LmF0b21WYWx1ZXMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9uZXh0JGF0b21WYWx1ZXMkZ2V0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbmV4dCRhdG9tVmFsdWVzJGdldC5jb250ZW50cykgJiYgZ2V0Tm9kZSQyKGtleSkuc2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHMpIHtcbiAgICAgICAgICAgIGtleXNUb1VwZGF0ZS5hZGQoa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAga2V5c1RvVXBkYXRlLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgc2V0UmVjb2lsVmFsdWVMb2FkYWJsZSQxKHN0b3JlUmVmLmN1cnJlbnQsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDIoa2V5KSwgbmV4dC5hdG9tVmFsdWVzLmhhcyhrZXkpID8gUmVjb2lsX251bGx0aHJvd3MobmV4dC5hdG9tVmFsdWVzLmdldChrZXkpKSA6IERFRkFVTFRfVkFMVUUkMik7XG4gICAgICB9KTtcbiAgICAgIHN0b3JlUmVmLmN1cnJlbnQucmVwbGFjZVN0YXRlKHN0YXRlID0+IHtcbiAgICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsXG4gICAgICAgICAgc3RhdGVJRDogc25hcHNob3QuZ2V0SURfSU5URVJOQUwoKVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sIFtzdG9yZVJlZl0pO1xufVxuXG5mdW5jdGlvbiB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMoKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICByZXR1cm4gKHZhbHVlcywgdHJhbnNhY3Rpb25NZXRhZGF0YSA9IHt9KSA9PiB7XG4gICAgYmF0Y2hVcGRhdGVzJDIoKCkgPT4ge1xuICAgICAgc3RvcmVSZWYuY3VycmVudC5hZGRUcmFuc2FjdGlvbk1ldGFkYXRhKHRyYW5zYWN0aW9uTWV0YWRhdGEpO1xuICAgICAgdmFsdWVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUkMShzdG9yZVJlZi5jdXJyZW50LCBuZXcgQWJzdHJhY3RSZWNvaWxWYWx1ZSQyKGtleSksIHZhbHVlKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmNsYXNzIFNlbnRpbmVsIHt9XG5cbmNvbnN0IFNFTlRJTkVMID0gbmV3IFNlbnRpbmVsKCk7XG5cbmZ1bmN0aW9uIHVzZVJlY29pbENhbGxiYWNrKGZuLCBkZXBzKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMSgpO1xuICBjb25zdCBnb3RvU25hcHNob3QgPSB1c2VHb3RvUmVjb2lsU25hcHNob3QoKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrKCguLi5hcmdzKSA9PiB7XG4gICAgLy8gVXNlIGN1cnJlbnRUcmVlIGZvciB0aGUgc25hcHNob3QgdG8gc2hvdyB0aGUgY3VycmVudGx5IGNvbW1pdHRlZCBzdGF0ZVxuICAgIGNvbnN0IHNuYXBzaG90ID0gY2xvbmVTbmFwc2hvdCQxKHN0b3JlUmVmLmN1cnJlbnQpO1xuXG4gICAgZnVuY3Rpb24gc2V0KHJlY29pbFN0YXRlLCBuZXdWYWx1ZU9yVXBkYXRlcikge1xuICAgICAgc2V0UmVjb2lsVmFsdWUkMihzdG9yZVJlZi5jdXJyZW50LCByZWNvaWxTdGF0ZSwgbmV3VmFsdWVPclVwZGF0ZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0KHJlY29pbFN0YXRlKSB7XG4gICAgICBzZXRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDIpO1xuICAgIH1cblxuICAgIGxldCByZXQgPSBTRU5USU5FTDtcbiAgICBiYXRjaFVwZGF0ZXMkMigoKSA9PiB7XG4gICAgICAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuICAgICAgcmV0ID0gZm4oe1xuICAgICAgICBzZXQsXG4gICAgICAgIHJlc2V0LFxuICAgICAgICBzbmFwc2hvdCxcbiAgICAgICAgZ290b1NuYXBzaG90XG4gICAgICB9KSguLi5hcmdzKTtcbiAgICB9KTtcbiAgICAhIShyZXQgaW5zdGFuY2VvZiBTZW50aW5lbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSZWNvaWxfaW52YXJpYW50KGZhbHNlLCAnYmF0Y2hVcGRhdGVzIHNob3VsZCByZXR1cm4gaW1tZWRpYXRlbHknKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiByZXQ7XG4gIH0sIGRlcHMgIT0gbnVsbCA/IFsuLi5kZXBzLCBzdG9yZVJlZl0gOiB1bmRlZmluZWQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmYi13d3cvcmVhY3QtaG9va3MtZGVwc1xuICApO1xufVxuXG52YXIgUmVjb2lsX0hvb2tzID0ge1xuICByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HLFxuICB1c2VHb3RvUmVjb2lsU25hcHNob3QsXG4gIHVzZVJlY29pbENhbGxiYWNrLFxuICB1c2VSZWNvaWxJbnRlcmZhY2U6IHVzZVJlY29pbEludGVyZmFjZV9ERVBSRUNBVEVELFxuICB1c2VSZWNvaWxTbmFwc2hvdCxcbiAgdXNlUmVjb2lsU3RhdGUsXG4gIHVzZVJlY29pbFN0YXRlTG9hZGFibGUsXG4gIHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXIsXG4gIHVzZVJlY29pbFZhbHVlLFxuICB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlLFxuICB1c2VSZXNldFJlY29pbFN0YXRlLFxuICB1c2VTZXRSZWNvaWxTdGF0ZSxcbiAgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzLFxuICB1c2VUcmFuc2FjdGlvbk9ic2VydmF0aW9uX0RFUFJFQ0FURUQsXG4gIHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uX0RFUFJFQ0FURUQ6IHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uXG59O1xuXG5jb25zdCB7XG4gIHVzZU1lbW86IHVzZU1lbW8kMlxufSA9IHJlYWN0O1xuXG5jb25zdCB7XG4gIFJlY29pbFJvb3Q6IFJlY29pbFJvb3QkMSxcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDJcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdF9yZWFjdDtcblxuZnVuY3Rpb24gdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290cygpIHtcbiAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZVJlZiQyKCkuY3VycmVudDtcbiAgcmV0dXJuIHVzZU1lbW8kMigoKSA9PiB7XG4gICAgZnVuY3Rpb24gUmVjb2lsQnJpZGdlKHtcbiAgICAgIGNoaWxkcmVuXG4gICAgfSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KFJlY29pbFJvb3QkMSwge1xuICAgICAgICBzdG9yZV9JTlRFUk5BTDogc3RvcmVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVjb2lsQnJpZGdlO1xuICB9LCBbc3RvcmVdKTtcbn1cblxudmFyIFJlY29pbF91c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzID0gdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290cztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbi8vIFNwbGl0IGRlY2xhcmF0aW9uIGFuZCBpbXBsZW1lbnRhdGlvbiB0byBhbGxvdyB0aGlzIGZ1bmN0aW9uIHRvIHByZXRlbmQgdG9cbi8vIGNoZWNrIGZvciBhY3R1YWwgaW5zdGFuY2Ugb2YgUHJvbWlzZSBpbnN0ZWFkIG9mIHNvbWV0aGluZyB3aXRoIGEgYHRoZW5gXG4vLyBtZXRob2QuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5mdW5jdGlvbiBpc1Byb21pc2UocCkge1xuICByZXR1cm4gISFwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5cbnZhciBSZWNvaWxfaXNQcm9taXNlID0gaXNQcm9taXNlO1xuXG4vLyBUT0RPIENvbnZlcnQgTG9hZGFibGUgdG8gYSBDbGFzcyB0byBhbGxvdyBmb3IgcnVudGltZSB0eXBlIGRldGVjdGlvbi5cbi8vIENvbnRhaW5pbmcgc3RhdGljIGZhY3RvcmllcyBvZiB3aXRoVmFsdWUoKSwgd2l0aEVycm9yKCksIHdpdGhQcm9taXNlKCksIGFuZCBhbGwoKVxuXG5cbmNvbnN0IGxvYWRhYmxlQWNjZXNzb3JzID0ge1xuICAvKipcbiAgICogaWYgbG9hZGFibGUgaGFzIGEgdmFsdWUgKHN0YXRlID09PSAnaGFzVmFsdWUnKSwgcmV0dXJuIHRoYXQgdmFsdWUuXG4gICAqIE90aGVyd2lzZSwgdGhyb3cgdGhlICh1bndyYXBwZWQpIHByb21pc2Ugb3IgdGhlIGVycm9yLlxuICAgKi9cbiAgZ2V0VmFsdWUoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICdsb2FkaW5nJyAmJiBSZWNvaWxfZ2t4XzEoJ3JlY29pbF9hc3luY19zZWxlY3Rvcl9yZWZhY3RvcicpKSB7XG4gICAgICB0aHJvdyB0aGlzLmNvbnRlbnRzLnRoZW4oKHtcbiAgICAgICAgX192YWx1ZVxuICAgICAgfSkgPT4gX192YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3RhdGUgIT09ICdoYXNWYWx1ZScpIHtcbiAgICAgIHRocm93IHRoaXMuY29udGVudHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH0sXG5cbiAgdG9Qcm9taXNlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlID09PSAnaGFzVmFsdWUnID8gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29udGVudHMpIDogdGhpcy5zdGF0ZSA9PT0gJ2hhc0Vycm9yJyA/IFByb21pc2UucmVqZWN0KHRoaXMuY29udGVudHMpIDogUmVjb2lsX2dreF8xKCdyZWNvaWxfYXN5bmNfc2VsZWN0b3JfcmVmYWN0b3InKSA/IHRoaXMuY29udGVudHMudGhlbigoe1xuICAgICAgX192YWx1ZVxuICAgIH0pID0+IF9fdmFsdWUpIDogdGhpcy5jb250ZW50cztcbiAgfSxcblxuICB2YWx1ZU1heWJlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlID09PSAnaGFzVmFsdWUnID8gdGhpcy5jb250ZW50cyA6IHVuZGVmaW5lZDtcbiAgfSxcblxuICB2YWx1ZU9yVGhyb3coKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgIT09ICdoYXNWYWx1ZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTG9hZGFibGUgZXhwZWN0ZWQgdmFsdWUsIGJ1dCBpbiBcIiR7dGhpcy5zdGF0ZX1cIiBzdGF0ZWApO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbnRlbnRzO1xuICB9LFxuXG4gIGVycm9yTWF5YmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgPT09ICdoYXNFcnJvcicgPyB0aGlzLmNvbnRlbnRzIDogdW5kZWZpbmVkO1xuICB9LFxuXG4gIGVycm9yT3JUaHJvdygpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gJ2hhc0Vycm9yJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBMb2FkYWJsZSBleHBlY3RlZCBlcnJvciwgYnV0IGluIFwiJHt0aGlzLnN0YXRlfVwiIHN0YXRlYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH0sXG5cbiAgcHJvbWlzZU1heWJlKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlID09PSAnbG9hZGluZycgPyBSZWNvaWxfZ2t4XzEoJ3JlY29pbF9hc3luY19zZWxlY3Rvcl9yZWZhY3RvcicpID8gdGhpcy5jb250ZW50cy50aGVuKCh7XG4gICAgICBfX3ZhbHVlXG4gICAgfSkgPT4gX192YWx1ZSkgOiB0aGlzLmNvbnRlbnRzIDogdW5kZWZpbmVkO1xuICB9LFxuXG4gIHByb21pc2VPclRocm93KCkge1xuICAgIGlmICh0aGlzLnN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTG9hZGFibGUgZXhwZWN0ZWQgcHJvbWlzZSwgYnV0IGluIFwiJHt0aGlzLnN0YXRlfVwiIHN0YXRlYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlY29pbF9na3hfMSgncmVjb2lsX2FzeW5jX3NlbGVjdG9yX3JlZmFjdG9yJykgPyB0aGlzLmNvbnRlbnRzLnRoZW4oKHtcbiAgICAgIF9fdmFsdWVcbiAgICB9KSA9PiBfX3ZhbHVlKSA6IHRoaXMuY29udGVudHM7XG4gIH0sXG5cbiAgLy8gVE9ETyBVbml0IHRlc3RzXG4gIC8vIFRPRE8gQ29udmVydCBMb2FkYWJsZSB0byBhIENsYXNzIHRvIGJldHRlciBzdXBwb3J0IGNoYWluaW5nXG4gIC8vICAgICAgYnkgcmV0dXJuaW5nIGEgTG9hZGFibGUgZnJvbSBhIG1hcCBmdW5jdGlvblxuICBtYXAobWFwKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0YXRlID09PSAnaGFzVmFsdWUnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBuZXh0ID0gbWFwKHRoaXMuY29udGVudHMpOyAvLyBUT0RPIGlmIG5leHQgaW5zdGFuY2VvZiBMb2FkYWJsZSwgdGhlbiByZXR1cm4gbmV4dFxuXG4gICAgICAgIHJldHVybiBSZWNvaWxfaXNQcm9taXNlKG5leHQpID8gbG9hZGFibGVXaXRoUHJvbWlzZShuZXh0KSA6IGxvYWRhYmxlV2l0aFZhbHVlKG5leHQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gUmVjb2lsX2lzUHJvbWlzZShlKSA/IC8vIElmIHdlIFwic3VzcGVuZGVkXCIsIHRoZW4gdHJ5IGFnYWluLlxuICAgICAgICAvLyBlcnJvcnMgYW5kIHN1YnNlcXVlbnQgcmV0cmllcyB3aWxsIGJlIGhhbmRsZWQgaW4gJ2xvYWRpbmcnIGNhc2VcbiAgICAgICAgbG9hZGFibGVXaXRoUHJvbWlzZShlLm5leHQoKCkgPT4gbWFwKHRoaXMuY29udGVudHMpKSkgOiBsb2FkYWJsZVdpdGhFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICByZXR1cm4gbG9hZGFibGVXaXRoUHJvbWlzZSh0aGlzLmNvbnRlbnRzIC8vIFRPRE8gaWYgbWFwIHJldHVybnMgYSBsb2FkYWJsZSwgdGhlbiByZXR1cm4gdGhlIHZhbHVlIG9yIHByb21pc2Ugb3IgdGhyb3cgdGhlIGVycm9yXG4gICAgICAudGhlbihtYXApLmNhdGNoKGUgPT4ge1xuICAgICAgICBpZiAoUmVjb2lsX2lzUHJvbWlzZShlKSkge1xuICAgICAgICAgIC8vIHdlIHdlcmUgXCJzdXNwZW5kZWQsXCIgdHJ5IGFnYWluXG4gICAgICAgICAgcmV0dXJuIGUudGhlbigoKSA9PiBtYXAodGhpcy5jb250ZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTG9hZGFibGUgc3RhdGUnKTtcbiAgfVxuXG59O1xuXG5mdW5jdGlvbiBsb2FkYWJsZVdpdGhWYWx1ZSh2YWx1ZSkge1xuICAvLyBCdWlsZCBvYmplY3RzIHRoaXMgd2F5IHNpbmNlIEZsb3cgZG9lc24ndCBzdXBwb3J0IGRpc2pvaW50IHVuaW9ucyBmb3IgY2xhc3MgcHJvcGVydGllc1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgc3RhdGU6ICdoYXNWYWx1ZScsXG4gICAgY29udGVudHM6IHZhbHVlLFxuICAgIC4uLmxvYWRhYmxlQWNjZXNzb3JzXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkYWJsZVdpdGhFcnJvcihlcnJvcikge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgc3RhdGU6ICdoYXNFcnJvcicsXG4gICAgY29udGVudHM6IGVycm9yLFxuICAgIC4uLmxvYWRhYmxlQWNjZXNzb3JzXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkYWJsZVdpdGhQcm9taXNlKHByb21pc2UpIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xuICAgIHN0YXRlOiAnbG9hZGluZycsXG4gICAgY29udGVudHM6IHByb21pc2UsXG4gICAgLi4ubG9hZGFibGVBY2Nlc3NvcnNcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRhYmxlTG9hZGluZygpIHtcbiAgcmV0dXJuIGxvYWRhYmxlV2l0aFByb21pc2UobmV3IFByb21pc2UoKCkgPT4ge30pKTtcbn1cblxuZnVuY3Rpb24gbG9hZGFibGVBbGwoaW5wdXRzKSB7XG4gIHJldHVybiBpbnB1dHMuZXZlcnkoaSA9PiBpLnN0YXRlID09PSAnaGFzVmFsdWUnKSA/IGxvYWRhYmxlV2l0aFZhbHVlKGlucHV0cy5tYXAoaSA9PiBpLmNvbnRlbnRzKSkgOiBpbnB1dHMuc29tZShpID0+IGkuc3RhdGUgPT09ICdoYXNFcnJvcicpID8gbG9hZGFibGVXaXRoRXJyb3IoIC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLWNhbGxdICM0NDA3MDc0MCBBcnJheS5maW5kIHNob3VsZCByZWZpbmUgcGFyYW1ldGVyXG4gIFJlY29pbF9udWxsdGhyb3dzKGlucHV0cy5maW5kKGkgPT4gaS5zdGF0ZSA9PT0gJ2hhc0Vycm9yJyksICdJbnZhbGlkIGxvYWRhYmxlIHBhc3NlZCB0byBsb2FkYWJsZUFsbCcpLmNvbnRlbnRzKSA6IGxvYWRhYmxlV2l0aFByb21pc2UoUmVjb2lsX2dreF8xKCdyZWNvaWxfYXN5bmNfc2VsZWN0b3JfcmVmYWN0b3InKSA/IFByb21pc2UuYWxsKGlucHV0cy5tYXAoaSA9PiBpLmNvbnRlbnRzKSkudGhlbih2YWx1ZSA9PiAoe1xuICAgIF9fdmFsdWU6IHZhbHVlXG4gIH0pKSA6IFByb21pc2UuYWxsKGlucHV0cy5tYXAoaSA9PiBpLmNvbnRlbnRzKSkpO1xufVxuXG52YXIgUmVjb2lsX0xvYWRhYmxlID0ge1xuICBsb2FkYWJsZVdpdGhWYWx1ZSxcbiAgbG9hZGFibGVXaXRoRXJyb3IsXG4gIGxvYWRhYmxlV2l0aFByb21pc2UsXG4gIGxvYWRhYmxlTG9hZGluZyxcbiAgbG9hZGFibGVBbGxcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5jb25zdCBBUlJBWV9CVUZGRVJfVklFV19UWVBFUyA9IFtJbnQ4QXJyYXksIFVpbnQ4QXJyYXksIFVpbnQ4Q2xhbXBlZEFycmF5LCBJbnQxNkFycmF5LCBVaW50MTZBcnJheSwgSW50MzJBcnJheSwgVWludDMyQXJyYXksIEZsb2F0MzJBcnJheSwgRmxvYXQ2NEFycmF5LCBEYXRhVmlld107XG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbHVlKSB7XG4gIGZvciAoY29uc3QgdHlwZSBvZiBBUlJBWV9CVUZGRVJfVklFV19UWVBFUykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHR5cGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIFJlY29pbF9pc0FycmF5QnVmZmVyVmlldyA9IGlzQXJyYXlCdWZmZXJWaWV3O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgX293bmVyRG9jdW1lbnQsIF9kb2MkZGVmYXVsdFZpZXc7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgZG9jID0gb2JqZWN0ICE9IG51bGwgPyAoX293bmVyRG9jdW1lbnQgPSBvYmplY3Qub3duZXJEb2N1bWVudCkgIT09IG51bGwgJiYgX293bmVyRG9jdW1lbnQgIT09IHZvaWQgMCA/IF9vd25lckRvY3VtZW50IDogb2JqZWN0IDogZG9jdW1lbnQ7XG4gIGNvbnN0IGRlZmF1bHRWaWV3ID0gKF9kb2MkZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcpICE9PSBudWxsICYmIF9kb2MkZGVmYXVsdFZpZXcgIT09IHZvaWQgMCA/IF9kb2MkZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgIT0gbnVsbCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxudmFyIFJlY29pbF9pc05vZGUgPSBpc05vZGU7XG5cbmNvbnN0IGlzU1NSID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpc1JlYWN0TmF0aXZlID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmItd3d3L3R5cGVvZi11bmRlZmluZWRcblxuZnVuY3Rpb24gc2hvdWxkTm90QmVGcm96ZW4odmFsdWUpIHtcbiAgLy8gUHJpbWl0aXZlcyBhbmQgZnVuY3Rpb25zOlxuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIFJlYWN0IGVsZW1lbnRzOlxuXG5cbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUuJCR0eXBlb2YpIHtcbiAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gSW1tdXRhYmxlIHN0cnVjdHVyZXM6XG5cblxuICBpZiAodmFsdWVbJ0BAX19JTU1VVEFCTEVfSVRFUkFCTEVfX0BAJ10gIT0gbnVsbCB8fCB2YWx1ZVsnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnXSAhPSBudWxsIHx8IHZhbHVlWydAQF9fSU1NVVRBQkxFX0lOREVYRURfX0BAJ10gIT0gbnVsbCB8fCB2YWx1ZVsnQEBfX0lNTVVUQUJMRV9PUkRFUkVEX19AQCddICE9IG51bGwgfHwgdmFsdWVbJ0BAX19JTU1VVEFCTEVfUkVDT1JEX19AQCddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBET00gbm9kZXM6XG5cblxuICBpZiAoUmVjb2lsX2lzTm9kZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChSZWNvaWxfaXNQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFJlY29pbF9pc0FycmF5QnVmZmVyVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBTb21lIGVudmlyb25tZW50cywganVzdCBhcyBKZXN0LCBkb24ndCB3b3JrIHdpdGggdGhlIGluc3RhbmNlb2YgY2hlY2tcblxuXG4gIGlmICghaXNTU1IgJiYgIWlzUmVhY3ROYXRpdmUgJiYgKCAvLyAkRmxvd0ZpeE1lIFdpbmRvdyBkb2VzIG5vdCBoYXZlIGEgRmxvd1R5cGUgZGVmaW5pdGlvbiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvNjcwOVxuICB2YWx1ZSA9PT0gd2luZG93IHx8IHZhbHVlIGluc3RhbmNlb2YgV2luZG93KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBSZWN1cnNpdmVseSBmcmVlemUgYSB2YWx1ZSB0byBlbmZvcmNlIGl0IGlzIHJlYWQtb25seS5cbi8vIFRoaXMgbWF5IGFsc28gaGF2ZSBtaW5pbWFsIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyBmb3IgZW51bWVyYXRpbmdcbi8vIG9iamVjdHMgKGJhc2VkIG9uIGJyb3dzZXIgaW1wbGVtZW50YXRpb25zLCBvZiBjb3Vyc2UpXG5cblxuZnVuY3Rpb24gZGVlcEZyZWV6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHNob3VsZE5vdEJlRnJvemVuKHZhbHVlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIE9iamVjdC5mcmVlemUodmFsdWUpOyAvLyBNYWtlIGFsbCBwcm9wZXJ0aWVzIHJlYWQtb25seVxuXG4gIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgY29uc3QgcHJvcCA9IHZhbHVlW2tleV07IC8vIFByZXZlbnQgaW5maW5pdGUgcmVjdXJzc2lvbiBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcy5cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wID09PSAnb2JqZWN0JyAmJiBwcm9wICE9IG51bGwgJiYgIU9iamVjdC5pc0Zyb3plbihwcm9wKSkge1xuICAgICAgICBkZWVwRnJlZXplVmFsdWUocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LnNlYWwodmFsdWUpOyAvLyBUaGlzIGFsc28gbWFrZXMgZXhpc3RpbmcgcHJvcGVydGllcyBub24tY29uZmlndXJhYmxlLlxufVxuXG52YXIgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZSA9IGRlZXBGcmVlemVWYWx1ZTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbi8vIGNhY2hlIGltcGxlbWVudGF0aW9uIHRoYXQgb25seSBzdG9yZXMgdGhlIG1vc3QgcmVjZW50IGVudHJ5XG4vLyBiYXNlZCBvbiBrZXkgcmVmZXJlbmNlIGVxdWFsaXR5XG5mdW5jdGlvbiBjYWNoZU1vc3RSZWNlbnQoKSB7XG4gIGxldCBtb3N0UmVjZW50S2V5O1xuICBsZXQgbW9zdFJlY2VudFZhbHVlO1xuICBjb25zdCBjYWNoZSA9IHtcbiAgICBnZXQ6IGtleSA9PiBrZXkgPT09IG1vc3RSZWNlbnRLZXkgPyBtb3N0UmVjZW50VmFsdWUgOiB1bmRlZmluZWQsXG4gICAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgbW9zdFJlY2VudEtleSA9IGtleTtcbiAgICAgIG1vc3RSZWNlbnRWYWx1ZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGNhY2hlO1xufVxuXG52YXIgUmVjb2lsX2NhY2hlTW9zdFJlY2VudCA9IGNhY2hlTW9zdFJlY2VudDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBJbXBsZW1lbnRzIChhIHN1YnNldCBvZikgdGhlIGludGVyZmFjZSBvZiBidWlsdC1pbiBNYXAgYnV0IHN1cHBvcnRzIGFycmF5cyBhc1xuICoga2V5cy4gVHdvIGtleXMgYXJlIGVxdWFsIGlmIGNvcnJlc3BvbmRpbmcgZWxlbWVudHMgYXJlIGVxdWFsIGFjY29yZGluZyB0byB0aGVcbiAqIGVxdWFsaXR5IHNlbWFudGljcyBvZiBidWlsdC1pbiBNYXAuIE9wZXJhdGlvbnMgYXJlIGF0IHdvcnN0IE8obipiKSB3aGVyZSBuIGlzXG4gKiB0aGUgYXJyYXkgbGVuZ3RoIGFuZCBiIGlzIHRoZSBjb21wbGV4aXR5IG9mIHRoZSBidWlsdC1pbiBvcGVyYXRpb24uXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuY29uc3QgTEVBRiA9IFN5bWJvbCgnQXJyYXlLZXllZE1hcCcpO1xuY29uc3QgZW1wdHlNYXAgPSBuZXcgTWFwKCk7XG5cbmNsYXNzIEFycmF5S2V5ZWRNYXAge1xuICBjb25zdHJ1Y3RvcihleGlzdGluZykge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9iYXNlXCIsIG5ldyBNYXAoKSk7XG5cbiAgICBpZiAoZXhpc3RpbmcgaW5zdGFuY2VvZiBBcnJheUtleWVkTWFwKSB7XG4gICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiBleGlzdGluZy5lbnRyaWVzKCkpIHtcbiAgICAgICAgdGhpcy5zZXQoaywgdik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChleGlzdGluZykge1xuICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgZXhpc3RpbmcpIHtcbiAgICAgICAgdGhpcy5zZXQoaywgdik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgY29uc3Qga3MgPSBBcnJheS5pc0FycmF5KGtleSkgPyBrZXkgOiBba2V5XTtcbiAgICBsZXQgbWFwID0gdGhpcy5fYmFzZTtcbiAgICBrcy5mb3JFYWNoKGsgPT4ge1xuICAgICAgdmFyIF9tYXAkZ2V0O1xuXG4gICAgICBtYXAgPSAoX21hcCRnZXQgPSBtYXAuZ2V0KGspKSAhPT0gbnVsbCAmJiBfbWFwJGdldCAhPT0gdm9pZCAwID8gX21hcCRnZXQgOiBlbXB0eU1hcDtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtYXAuZ2V0KExFQUYpO1xuICB9XG5cbiAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBrcyA9IEFycmF5LmlzQXJyYXkoa2V5KSA/IGtleSA6IFtrZXldO1xuICAgIGxldCBtYXAgPSB0aGlzLl9iYXNlO1xuICAgIGxldCBuZXh0ID0gbWFwO1xuICAgIGtzLmZvckVhY2goayA9PiB7XG4gICAgICBuZXh0ID0gbWFwLmdldChrKTtcblxuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIG5leHQgPSBuZXcgTWFwKCk7XG4gICAgICAgIG1hcC5zZXQoaywgbmV4dCk7XG4gICAgICB9XG5cbiAgICAgIG1hcCA9IG5leHQ7XG4gICAgfSk7XG4gICAgbmV4dC5zZXQoTEVBRiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKGtleSkge1xuICAgIGNvbnN0IGtzID0gQXJyYXkuaXNBcnJheShrZXkpID8ga2V5IDogW2tleV07XG4gICAgbGV0IG1hcCA9IHRoaXMuX2Jhc2U7XG4gICAgbGV0IG5leHQgPSBtYXA7XG4gICAga3MuZm9yRWFjaChrID0+IHtcbiAgICAgIG5leHQgPSBtYXAuZ2V0KGspO1xuXG4gICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgbmV4dCA9IG5ldyBNYXAoKTtcbiAgICAgICAgbWFwLnNldChrLCBuZXh0KTtcbiAgICAgIH1cblxuICAgICAgbWFwID0gbmV4dDtcbiAgICB9KTtcbiAgICBuZXh0LmRlbGV0ZShMRUFGKTsgLy8gVE9ETyBXZSBjb3VsZCBjbGVhbnVwIGVtcHR5IG1hcHNcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZW50cmllcygpIHtcbiAgICBjb25zdCBhbnN3ZXIgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHJlY3Vyc2UobGV2ZWwsIHByZWZpeCkge1xuICAgICAgbGV2ZWwuZm9yRWFjaCgodiwgaykgPT4ge1xuICAgICAgICBpZiAoayA9PT0gTEVBRikge1xuICAgICAgICAgIGFuc3dlci5wdXNoKFtwcmVmaXgsIHZdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWN1cnNlKHYsIHByZWZpeC5jb25jYXQoaykpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZWN1cnNlKHRoaXMuX2Jhc2UsIFtdKTtcbiAgICByZXR1cm4gYW5zd2VyLnZhbHVlcygpO1xuICB9XG5cbiAgdG9CdWlsdEluTWFwKCkge1xuICAgIHJldHVybiBuZXcgTWFwKHRoaXMuZW50cmllcygpKTtcbiAgfVxuXG59XG5cbnZhciBSZWNvaWxfQXJyYXlLZXllZE1hcCA9IHtcbiAgQXJyYXlLZXllZE1hcFxufTtcblxudmFyIFJlY29pbF9BcnJheUtleWVkTWFwXzEgPSBSZWNvaWxfQXJyYXlLZXllZE1hcC5BcnJheUtleWVkTWFwO1xuXG52YXIgUmVjb2lsX0FycmF5S2V5ZWRNYXAkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBcnJheUtleWVkTWFwOiBSZWNvaWxfQXJyYXlLZXllZE1hcF8xXG59KTtcblxuY29uc3Qge1xuICBBcnJheUtleWVkTWFwOiBBcnJheUtleWVkTWFwJDFcbn0gPSBSZWNvaWxfQXJyYXlLZXllZE1hcCQxO1xuXG5mdW5jdGlvbiBjYWNoZVdpdGhSZWZlcmVuY2VFcXVhbGl0eSgpIHtcbiAgcmV0dXJuIG5ldyBBcnJheUtleWVkTWFwJDEoKTtcbn1cblxudmFyIFJlY29pbF9jYWNoZVdpdGhSZWZlcmVuY2VFcXVhbGl0eSA9IGNhY2hlV2l0aFJlZmVyZW5jZUVxdWFsaXR5O1xuXG5jb25zdCBUSU1FX1dBUk5JTkdfVEhSRVNIT0xEX01TID0gMTU7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeSh4LCBvcHQsIGtleSkge1xuICAvLyBBIG9wdGltaXphdGlvbiB0byBhdm9pZCB0aGUgbW9yZSBleHBlbnNpdmUgSlNPTi5zdHJpbmdpZnkoKSBmb3Igc2ltcGxlIHN0cmluZ3NcbiAgLy8gVGhpcyBtYXkgbG9zZSBwcm90ZWN0aW9uIGZvciB1MjAyOCBhbmQgdTIwMjksIHRob3VnaC5cbiAgaWYgKHR5cGVvZiB4ID09PSAnc3RyaW5nJyAmJiAheC5pbmNsdWRlcygnXCInKSAmJiAheC5pbmNsdWRlcygnXFxcXCcpKSB7XG4gICAgcmV0dXJuIGBcIiR7eH1cImA7XG4gIH0gLy8gSGFuZGxlIHByaW1pdGl2ZSB0eXBlc1xuXG5cbiAgc3dpdGNoICh0eXBlb2YgeCkge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gJyc7XG4gICAgLy8gSlNPTi5zdHJpbmdpZnkodW5kZWZpbmVkKSByZXR1cm5zIHVuZGVmaW5lZCwgYnV0IHdlIGFsd2F5cyB3YW50IHRvIHJldHVybiBhIHN0cmluZ1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4geCA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICAvLyBjYXNlICdiaWdpbnQnOiAvLyBCaWdJbnQgaXMgbm90IHN1cHBvcnRlZCBpbiB3d3dcbiAgICAgIHJldHVybiBTdHJpbmcoeCk7XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgLy8gQWRkIHN1cnJvdW5kaW5nIHF1b3RlcyBhbmQgZXNjYXBlIGludGVybmFsIHF1b3Rlc1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHgpO1xuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgaWYgKChvcHQgPT09IG51bGwgfHwgb3B0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHQuYWxsb3dGdW5jdGlvbnMpICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdCB0byBzZXJpYWxpemUgZnVuY3Rpb24gaW4gYSBSZWNvaWwgY2FjaGUga2V5Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBgX19GVU5DVElPTigke3gubmFtZX0pX19gO1xuICB9XG5cbiAgaWYgKHggPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9IC8vIEZhbGxiYWNrIGNhc2UgZm9yIHVua25vd24gdHlwZXNcblxuXG4gIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICB2YXIgX0pTT04kc3RyaW5naWZ5O1xuXG4gICAgcmV0dXJuIChfSlNPTiRzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeSh4KSkgIT09IG51bGwgJiYgX0pTT04kc3RyaW5naWZ5ICE9PSB2b2lkIDAgPyBfSlNPTiRzdHJpbmdpZnkgOiAnJztcbiAgfSAvLyBEZWFsIHdpdGggYWxsIHByb21pc2VzIGFzIGVxdWl2YWxlbnQgZm9yIG5vdy5cblxuXG4gIGlmIChSZWNvaWxfaXNQcm9taXNlKHgpKSB7XG4gICAgcmV0dXJuICdfX1BST01JU0VfXyc7XG4gIH0gLy8gQXJyYXlzIGhhbmRsZSByZWN1cnNpdmUgc3RyaW5naWZpY2F0aW9uXG5cblxuICBpZiAoQXJyYXkuaXNBcnJheSh4KSkge1xuICAgIHJldHVybiBgWyR7eC5tYXAoKHYsIGkpID0+IHN0cmluZ2lmeSh2LCBvcHQsIGkudG9TdHJpbmcoKSkpfV1gO1xuICB9IC8vIElmIGFuIG9iamVjdCBkZWZpbmVzIGEgdG9KU09OKCkgbWV0aG9kLCB0aGVuIHVzZSB0aGF0IHRvIG92ZXJyaWRlIHRoZVxuICAvLyBzZXJpYWxpemF0aW9uLiAgVGhpcyBtYXRjaGVzIHRoZSBiZWhhdmlvciBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAvLyBQYXNzIHRoZSBrZXkgZm9yIGNvbXBhdGliaWxpdHkuXG4gIC8vIEltbXV0YWJsZS5qcyBjb2xsZWN0aW9ucyBkZWZpbmUgdGhpcyBtZXRob2QgdG8gYWxsb3cgdXMgdG8gc2VyaWFsaXplIHRoZW0uXG5cblxuICBpZiAodHlwZW9mIHgudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTogb2ZmXG4gICAgcmV0dXJuIHN0cmluZ2lmeSh4LnRvSlNPTihrZXkpLCBvcHQsIGtleSk7XG4gIH0gLy8gRm9yIGJ1aWx0LWluIE1hcHMsIHNvcnQgdGhlIGtleXMgaW4gYSBzdGFibGUgb3JkZXIgaW5zdGVhZCBvZiB0aGVcbiAgLy8gZGVmYXVsdCBpbnNlcnRpb24gb3JkZXIuICBTdXBwb3J0IG5vbi1zdHJpbmcga2V5cy5cblxuXG4gIGlmICh4IGluc3RhbmNlb2YgTWFwKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiB4KSB7XG4gICAgICAvLyBTdHJpbmdpZnkgd2lsbCBlc2NhcGUgYW55IG5lc3RlZCBxdW90ZXNcbiAgICAgIG9ialt0eXBlb2YgayA9PT0gJ3N0cmluZycgPyBrIDogc3RyaW5naWZ5KGssIG9wdCldID0gdjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KG9iaiwgb3B0LCBrZXkpO1xuICB9IC8vIEZvciBidWlsdC1pbiBTZXRzLCBzb3J0IHRoZSBrZXlzIGluIGEgc3RhYmxlIG9yZGVyIGluc3RlYWQgb2YgdGhlXG4gIC8vIGRlZmF1bHQgaW5zZXJ0aW9uIG9yZGVyLlxuXG5cbiAgaWYgKHggaW5zdGFuY2VvZiBTZXQpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KEFycmF5LmZyb20oeCkuc29ydCgoYSwgYikgPT4gc3RyaW5naWZ5KGEsIG9wdCkubG9jYWxlQ29tcGFyZShzdHJpbmdpZnkoYiwgb3B0KSkpLCBvcHQsIGtleSk7XG4gIH0gLy8gQW55dGhpbmcgZWxzZSB0aGF0IGlzIGl0ZXJhYmxlIHNlcmlhbGl6ZSBhcyBhbiBBcnJheS5cblxuXG4gIGlmICh4W1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCAmJiB0eXBlb2YgeFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTogb2ZmXG4gICAgcmV0dXJuIHN0cmluZ2lmeShBcnJheS5mcm9tKHgpLCBvcHQsIGtleSk7XG4gIH0gLy8gRm9yIGFsbCBvdGhlciBPYmplY3RzLCBzb3J0IHRoZSBrZXlzIGluIGEgc3RhYmxlIG9yZGVyLlxuXG5cbiAgcmV0dXJuIGB7JHtPYmplY3Qua2V5cyh4KS5maWx0ZXIoa2V5ID0+IHhba2V5XSAhPT0gdW5kZWZpbmVkKS5zb3J0KCkgLy8gc3RyaW5naWZ5IHRoZSBrZXkgdG8gYWRkIHF1b3RlcyBhbmQgZXNjYXBlIGFueSBuZXN0ZWQgc2xhc2hlcyBvciBxdW90ZXMuXG4gIC5tYXAoa2V5ID0+IGAke3N0cmluZ2lmeShrZXksIG9wdCl9OiR7c3RyaW5naWZ5KHhba2V5XSwgb3B0LCBrZXkpfWApLmpvaW4oJywnKX19YDtcbn0gLy8gVXRpbGl0eSBzaW1pbGFyIHRvIEpTT04uc3RyaW5naWZ5KCkgZXhjZXB0OlxuLy8gKiBTZXJpYWxpemUgYnVpbHQtaW4gU2V0cyBhcyBhbiBBcnJheVxuLy8gKiBTZXJpYWxpemUgYnVpbHQtaW4gTWFwcyBhcyBhbiBPYmplY3QuICBTdXBwb3J0cyBub24tc3RyaW5nIGtleXMuXG4vLyAqIFNlcmlhbGl6ZSBvdGhlciBpdGVyYWJsZXMgYXMgYXJyYXlzXG4vLyAqIFNvcnQgdGhlIGtleXMgb2YgT2JqZWN0cyBhbmQgTWFwcyB0byBoYXZlIGEgc3RhYmxlIG9yZGVyIGJhc2VkIG9uIHN0cmluZyBjb252ZXJzaW9uLlxuLy8gICAgVGhpcyBvdmVycmlkZXMgdGhlaXIgZGVmYXVsdCBpbnNlcnRpb24gb3JkZXIuXG4vLyAqIFN0aWxsIHVzZXMgdG9KU09OKCkgb2YgYW55IG9iamVjdCB0byBvdmVycmlkZSBzZXJpYWxpemF0aW9uXG4vLyAqIFN1cHBvcnQgU3ltYm9scyAodGhvdWdoIGRvbid0IGd1YXJhbnRlZSB1bmlxdWVuZXNzKVxuLy8gKiBXZSBjb3VsZCBzdXBwb3J0IEJpZ0ludCwgYnV0IEZsb3cgZG9lc24ndCBzZWVtIHRvIGxpa2UgaXQuXG4vLyBTZWUgUmVjb2lsX3N0YWJsZVN0cmluZ2lmeS10ZXN0LmpzIGZvciBleGFtcGxlc1xuXG5cbmZ1bmN0aW9uIHN0YWJsZVN0cmluZ2lmeSh4LCBvcHQgPSB7XG4gIGFsbG93RnVuY3Rpb25zOiBmYWxzZVxufSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2UgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiAwO1xuICAgICAgY29uc3Qgc3RyID0gc3RyaW5naWZ5KHgsIG9wdCk7XG4gICAgICBjb25zdCBlbmRUaW1lID0gd2luZG93LnBlcmZvcm1hbmNlID8gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpIDogMDtcblxuICAgICAgaWYgKGVuZFRpbWUgLSBzdGFydFRpbWUgPiBUSU1FX1dBUk5JTkdfVEhSRVNIT0xEX01TKSB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIGZiLXd3dy9uby1jb25zb2xlICovXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoYFJlY29pbDogU3BlbnQgJHtlbmRUaW1lIC0gc3RhcnRUaW1lfW1zIGNvbXB1dGluZyBhIGNhY2hlIGtleWApO1xuICAgICAgICBjb25zb2xlLndhcm4oeCwgc3RyKTtcbiAgICAgICAgY29uc29sZS5ncm91cEVuZCgpO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIGZiLXd3dy9uby1jb25zb2xlICovXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeSh4LCBvcHQpO1xufVxuXG52YXIgUmVjb2lsX3N0YWJsZVN0cmluZ2lmeSA9IHN0YWJsZVN0cmluZ2lmeTtcblxuLy8gSWYgd2UgZG8gcHJvZmlsZSBhbmQgZmluZCB0aGUga2V5IGVxdWFsaXR5IGNoZWNrIGlzIGV4cGVuc2l2ZSxcbi8vIHdlIGNvdWxkIGFsd2F5cyB0cnkgdG8gb3B0aW1pemUuLiAgU29tZXRoaW5nIHRoYXQgY29tZXMgdG8gbWluZCBpcyBoYXZpbmdcbi8vIGVhY2ggY2hlY2sgYXNzaWduIGFuIGluY3JlbWVudGluZyBpbmRleCB0byBlYWNoIHJlZmVyZW5jZSB0aGF0IG1hcHMgdG8gdGhlXG4vLyB2YWx1ZSBlcXVpdmFsZW5jeS4gIFRoZW4sIGlmIGFuIG9iamVjdCBhbHJlYWR5IGhhcyBhbiBpbmRleCwgdGhlIGNvbXBhcmlzb25cbi8vIGNoZWNrL2xvb2t1cCB3b3VsZCBiZSB0cml2aWFsIGFuZCB0aGUgc3RyaW5nIHNlcmlhbGl6YXRpb24gd291bGQgb25seSBuZWVkXG4vLyB0byBiZSBkb25lIG9uY2UgcGVyIG9iamVjdCBpbnN0YW5jZS4gIEp1c3QgYSB0aG91Z2h0Li5cbi8vIENhY2hlIGltcGxlbWVudGF0aW9uIHRvIHVzZSB2YWx1ZSBlcXVhbGl0eSBmb3Iga2V5cyBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0XG4vLyByZWZlcmVuY2UgZXF1YWxpdHkuICBUaGlzIGFsbG93cyBkaWZmZXJlbnQgaW5zdGFuY2VzIG9mIGRlcGVuZGVuY3kgdmFsdWVzIHRvXG4vLyBiZSB1c2VkLiAgTm9ybWFsbHkgdGhpcyBpcyBub3QgbmVlZGVkLCBhcyBkZXBlbmRlbnQgYXRvbXMvc2VsZWN0b3JzIHdpbGxcbi8vIHRoZW1zZWx2ZXMgYmUgY2FjaGVkIGFuZCBhbHdheXMgcmV0dXJuIHRoZSBzYW1lIGluc3RhbmNlLiAgSG93ZXZlciwgaWZcbi8vIGRpZmZlcmVudCBwYXJhbXMgb3IgdXBzdHJlYW0gdmFsdWVzIGZvciB0aG9zZSBkZXBlbmRlbmNpZXMgY291bGQgcHJvZHVjZVxuLy8gZXF1aXZhbGVudCB2YWx1ZXMgb3IgdGhleSBoYXZlIGEgY3VzdG9tIGNhY2hlIGltcGxlbWVudGF0aW9uLCB0aGVuIHRoaXNcbi8vIGltcGxlbWVudGF0aW9uIG1heSBiZSBuZWVkZWQuICBUaGUgZG93bnNpZGUgd2l0aCB0aGlzIGFwcHJvYWNoIGlzIHRoYXQgaXRcbi8vIHRha2VzIGxvbmdlciB0byBjb21wdXRlIHRoZSB2YWx1ZSBlcXVpdmFsZW5jZSB2cyBzaW1wbGUgcmVmZXJlbmNlIGVxdWFsaXR5LlxuXG5cbmZ1bmN0aW9uIGNhY2hlV2l0aFZhbHVlRXF1YWxpdHkoKSB7XG4gIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgY29uc3QgY2FjaGUgPSB7XG4gICAgZ2V0OiBrZXkgPT4gbWFwLmdldChSZWNvaWxfc3RhYmxlU3RyaW5naWZ5KGtleSkpLFxuICAgIHNldDogKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIG1hcC5zZXQoUmVjb2lsX3N0YWJsZVN0cmluZ2lmeShrZXkpLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gY2FjaGU7XG4gICAgfSxcbiAgICBtYXAgLy8gRm9yIGRlYnVnZ2luZ1xuXG4gIH07XG4gIHJldHVybiBjYWNoZTtcbn1cblxudmFyIFJlY29pbF9jYWNoZVdpdGhWYWx1ZUVxdWFsaXR5ID0gY2FjaGVXaXRoVmFsdWVFcXVhbGl0eTtcblxuLyoqXG4gKiAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLiBDb25maWRlbnRpYWwgYW5kIHByb3ByaWV0YXJ5LlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gbm9kZUNhY2hlTW9zdFJlY2VudCgpIHtcbiAgbGV0IG1vc3RSZWNlbnQ7XG4gIHJldHVybiB7XG4gICAgZ2V0OiAoZ2V0Tm9kZVZhbHVlLCBoYW5kbGVycykgPT4ge1xuICAgICAgaWYgKG1vc3RSZWNlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IFtub2RlS2V5LCBub2RlVmFsdWVdIG9mIG1vc3RSZWNlbnQucm91dGUpIHtcbiAgICAgICAgdmFyIF9oYW5kbGVycyRvbkNhY2hlSGl0O1xuXG4gICAgICAgIGlmIChnZXROb2RlVmFsdWUobm9kZUtleSkgIT09IG5vZGVWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBoYW5kbGVycyA9PT0gbnVsbCB8fCBoYW5kbGVycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9oYW5kbGVycyRvbkNhY2hlSGl0ID0gaGFuZGxlcnMub25DYWNoZUhpdCkgPT09IG51bGwgfHwgX2hhbmRsZXJzJG9uQ2FjaGVIaXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oYW5kbGVycyRvbkNhY2hlSGl0LmNhbGwoaGFuZGxlcnMsIG5vZGVLZXkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9zdFJlY2VudC52YWx1ZTtcbiAgICB9LFxuICAgIHNldDogKHJvdXRlLCB2YWx1ZSkgPT4ge1xuICAgICAgbW9zdFJlY2VudCA9IHtcbiAgICAgICAgcm91dGUsXG4gICAgICAgIHZhbHVlXG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0Um9vdDogKCkgPT4gbW9zdFJlY2VudFxuICB9O1xufVxuXG52YXIgUmVjb2lsX25vZGVDYWNoZU1vc3RSZWNlbnQgPSBub2RlQ2FjaGVNb3N0UmVjZW50O1xuXG5mdW5jdGlvbiBzZXRJblRyZWVDYWNoZShyb290LCByb3V0ZSwgcmVzdWx0KSB7XG4gIGlmIChyb290ID09IG51bGwpIHtcbiAgICBpZiAocm91dGUubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAncmVzdWx0JyxcbiAgICAgICAgcmVzdWx0XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBbcGF0aCwgLi4ucmVzdF0gPSByb3V0ZTtcbiAgICAgIGNvbnN0IFtub2RlS2V5LCB2YWx1ZV0gPSBwYXRoO1xuICAgICAgY29uc3QgcmV0ID0ge1xuICAgICAgICB0eXBlOiAnYnJhbmNoJyxcbiAgICAgICAgbm9kZUtleSxcbiAgICAgICAgYnJhbmNoZXM6IG5ldyBNYXAoW1t2YWx1ZSwgc2V0SW5UcmVlQ2FjaGUobnVsbCwgcmVzdCwgcmVzdWx0KV1dKVxuICAgICAgfTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChyb3V0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICEocm9vdC50eXBlID09PSAncmVzdWx0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSZWNvaWxfaW52YXJpYW50KGZhbHNlLCAnRXhpc3RpbmcgY2FjaGUgbXVzdCBoYXZlIGEgcmVzdWx0IHR5cGUgbm9kZSBhdCB0aGUgZW5kIG9mIHRoZSByb3V0ZScpIDogUmVjb2lsX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICAgIGlmIChyb290LnJlc3VsdCAmJiByb290LnJlc3VsdC5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHtcbiAgICAgICAgICB0eXBlOiAncmVzdWx0JyxcbiAgICAgICAgICByZXN1bHRcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICEocm9vdC5yZXN1bHQgPT09IHJlc3VsdCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSZWNvaWxfaW52YXJpYW50KGZhbHNlLCAnRXhpc3RpbmcgY2FjaGUgbXVzdCBoYXZlIHRoZSBzYW1lIHJlc3VsdCBhdCB0aGUgZW5kIG9mIHRoZSByb3V0ZScpIDogUmVjb2lsX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGNvbnN0IHJldCA9IHJvb3Q7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IFtwYXRoLCAuLi5yZXN0XSA9IHJvdXRlO1xuICAgICAgY29uc3QgW25vZGVLZXksIHZhbHVlXSA9IHBhdGg7XG4gICAgICAhKHJvb3QudHlwZSA9PT0gJ2JyYW5jaCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmVjb2lsX2ludmFyaWFudChmYWxzZSwgJ0V4aXN0aW5nIGNhY2hlIG11c3QgaGF2ZSBhIGJyYW5jaCBtaWR3YXkgdGhyb3VnaCB0aGUgcm91dGUnKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgIShyb290Lm5vZGVLZXkgPT09IG5vZGVLZXkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUmVjb2lsX2ludmFyaWFudChmYWxzZSwgJ0V4aXN0aW5nIGNhY2hlIG11c3QgaGF2ZSBhIGJyYW5jaCBmb3IgdGhlIHNhbWUgbm9kZUtleSBtaWR3YXkgdGhyb3VnaCB0aGUgcm91dGUnKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcm9vdC5icmFuY2hlcy5zZXQodmFsdWUsIHNldEluVHJlZUNhY2hlKHJvb3QuYnJhbmNoZXMuZ2V0KHZhbHVlKSwgcmVzdCwgcmVzdWx0KSk7XG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RnJvbVRyZWVDYWNoZShyb290LCBnZXROb2RlVmFsdWUsIGhhbmRsZXJzKSB7XG4gIHZhciBfaGFuZGxlcnMkb25DYWNoZUhpdDtcblxuICBpZiAocm9vdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmIChyb290LnR5cGUgPT09ICdyZXN1bHQnKSB7XG4gICAgcmV0dXJuIHJvb3QucmVzdWx0O1xuICB9XG5cbiAgaGFuZGxlcnMgPT09IG51bGwgfHwgaGFuZGxlcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfaGFuZGxlcnMkb25DYWNoZUhpdCA9IGhhbmRsZXJzLm9uQ2FjaGVIaXQpID09PSBudWxsIHx8IF9oYW5kbGVycyRvbkNhY2hlSGl0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaGFuZGxlcnMkb25DYWNoZUhpdC5jYWxsKGhhbmRsZXJzLCByb290Lm5vZGVLZXkpO1xuICBjb25zdCBub2RlVmFsdWUgPSBnZXROb2RlVmFsdWUocm9vdC5ub2RlS2V5KTtcbiAgcmV0dXJuIGdldEZyb21UcmVlQ2FjaGUocm9vdC5icmFuY2hlcy5nZXQobm9kZVZhbHVlKSwgZ2V0Tm9kZVZhbHVlLCBoYW5kbGVycyk7XG59XG5cbnZhciBSZWNvaWxfVHJlZU5vZGVDYWNoZSA9IHtcbiAgc2V0SW5UcmVlQ2FjaGUsXG4gIGdldEZyb21UcmVlQ2FjaGVcbn07XG5cbmNvbnN0IHtcbiAgZ2V0RnJvbVRyZWVDYWNoZTogZ2V0RnJvbVRyZWVDYWNoZSQxLFxuICBzZXRJblRyZWVDYWNoZTogc2V0SW5UcmVlQ2FjaGUkMVxufSA9IFJlY29pbF9UcmVlTm9kZUNhY2hlO1xuXG5mdW5jdGlvbiB0cmVlQ2FjaGVSZWZlcmVuY2VFcXVhbGl0eSgpIHtcbiAgbGV0IHRyZWVSb290O1xuICByZXR1cm4ge1xuICAgIGdldDogKGdldE5vZGVWYWx1ZSwgaGFuZGxlcnMpID0+IGdldEZyb21UcmVlQ2FjaGUkMSh0cmVlUm9vdCwgZ2V0Tm9kZVZhbHVlLCBoYW5kbGVycyksXG4gICAgc2V0OiAocm91dGUsIHJlc3VsdCkgPT4ge1xuICAgICAgdHJlZVJvb3QgPSBzZXRJblRyZWVDYWNoZSQxKHRyZWVSb290LCByb3V0ZSwgcmVzdWx0KTtcbiAgICB9LFxuICAgIGdldFJvb3Q6ICgpID0+IHRyZWVSb290XG4gIH07XG59XG5cbnZhciBSZWNvaWxfdHJlZUNhY2hlUmVmZXJlbmNlRXF1YWxpdHkgPSB0cmVlQ2FjaGVSZWZlcmVuY2VFcXVhbGl0eTtcblxuY29uc3Qge1xuICBnZXRGcm9tVHJlZUNhY2hlOiBnZXRGcm9tVHJlZUNhY2hlJDIsXG4gIHNldEluVHJlZUNhY2hlOiBzZXRJblRyZWVDYWNoZSQyXG59ID0gUmVjb2lsX1RyZWVOb2RlQ2FjaGU7XG5cbmZ1bmN0aW9uIHRyZWVDYWNoZVZhbHVlRXF1YWxpdHkoKSB7XG4gIGxldCB0cmVlUm9vdDtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IChnZXROb2RlVmFsdWUsIGhhbmRsZXJzKSA9PiBnZXRGcm9tVHJlZUNhY2hlJDIodHJlZVJvb3QsIG5vZGVLZXkgPT4gUmVjb2lsX3N0YWJsZVN0cmluZ2lmeShnZXROb2RlVmFsdWUobm9kZUtleSkpLCBoYW5kbGVycyksXG4gICAgc2V0OiAocm91dGUsIHJlc3VsdCkgPT4ge1xuICAgICAgdHJlZVJvb3QgPSBzZXRJblRyZWVDYWNoZSQyKHRyZWVSb290LCByb3V0ZS5tYXAoKFtub2RlS2V5LCBub2RlVmFsdWVdKSA9PiBbbm9kZUtleSwgUmVjb2lsX3N0YWJsZVN0cmluZ2lmeShub2RlVmFsdWUpXSksIHJlc3VsdCk7XG4gICAgfSxcbiAgICBnZXRSb290OiAoKSA9PiB0cmVlUm9vdFxuICB9O1xufVxuXG52YXIgUmVjb2lsX3RyZWVDYWNoZVZhbHVlRXF1YWxpdHkgPSB0cmVlQ2FjaGVWYWx1ZUVxdWFsaXR5O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKlxuICogVGhpcyBpcyBhIHN0dWIgZm9yIHNvbWUgaW50ZWdyYXRpb24gaW50byBGQiBpbnRlcm5hbCBzdHVmZlxuICovXG5mdW5jdGlvbiBzdGFydFBlcmZCbG9jayhfaWQpIHtcbiAgcmV0dXJuICgpID0+IG51bGw7XG59XG5cbnZhciBSZWNvaWxfUGVyZm9ybWFuY2VUaW1pbmdzID0ge1xuICBzdGFydFBlcmZCbG9ja1xufTtcblxuY29uc3Qge1xuICBsb2FkYWJsZVdpdGhFcnJvcjogbG9hZGFibGVXaXRoRXJyb3IkMSxcbiAgbG9hZGFibGVXaXRoUHJvbWlzZTogbG9hZGFibGVXaXRoUHJvbWlzZSQxLFxuICBsb2FkYWJsZVdpdGhWYWx1ZTogbG9hZGFibGVXaXRoVmFsdWUkMVxufSA9IFJlY29pbF9Mb2FkYWJsZTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuY29uc3Qge1xuICBnZXROb2RlTG9hZGFibGU6IGdldE5vZGVMb2FkYWJsZSQyLFxuICBwZWVrTm9kZUxvYWRhYmxlOiBwZWVrTm9kZUxvYWRhYmxlJDIsXG4gIHNldE5vZGVWYWx1ZTogc2V0Tm9kZVZhbHVlJDNcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlOiBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUkM1xufSA9IFJlY29pbF9HcmFwaDtcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDMsXG4gIFJlY29pbFZhbHVlTm90UmVhZHk6IFJlY29pbFZhbHVlTm90UmVhZHkkMixcbiAgcmVnaXN0ZXJOb2RlOiByZWdpc3Rlck5vZGUkMVxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkM1xufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5jb25zdCB7XG4gIEFic3RyYWN0UmVjb2lsVmFsdWU6IEFic3RyYWN0UmVjb2lsVmFsdWUkM1xufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5jb25zdCB7XG4gIHNldFJlY29pbFZhbHVlTG9hZGFibGU6IHNldFJlY29pbFZhbHVlTG9hZGFibGUkMlxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuXG5cblxuXG5cblxuY29uc3Qge1xuICBzdGFydFBlcmZCbG9jazogc3RhcnRQZXJmQmxvY2skMVxufSA9IFJlY29pbF9QZXJmb3JtYW5jZVRpbWluZ3M7XG5cbi8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5jb25zdCBlbXB0eVNldCQxID0gT2JqZWN0LmZyZWV6ZShuZXcgU2V0KCkpO1xuY29uc3QgZGVwZW5kZW5jeVN0YWNrID0gW107IC8vIGZvciBkZXRlY3RpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuXG5jb25zdCB3YWl0aW5nU3RvcmVzID0gbmV3IE1hcCgpO1xuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG5cbmNvbnN0IGdldE5ld0V4ZWN1dGlvbklkID0gKCgpID0+IHtcbiAgbGV0IGV4ZWN1dGlvbklkID0gMDtcbiAgcmV0dXJuICgpID0+IGV4ZWN1dGlvbklkKys7XG59KSgpO1xuXG5mdW5jdGlvbiBnZXRJbml0aWFsRXhlY3V0aW9uSW5mbygpIHtcbiAgcmV0dXJuIHtcbiAgICBkZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcms6IG51bGwsXG4gICAgbGF0ZXN0TG9hZGFibGU6IG51bGwsXG4gICAgbGF0ZXN0RXhlY3V0aW9uSWQ6IG51bGwsXG4gICAgc3RhdGVWZXJzaW9uOiBudWxsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHNlbGVjdG9yKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGtleSxcbiAgICBnZXQsXG4gICAgY2FjaGVJbXBsZW1lbnRhdGlvbl9VTlNUQUJMRTogY2FjaGVJbXBsZW1lbnRhdGlvblxuICB9ID0gb3B0aW9ucztcbiAgY29uc3Qgc2V0ID0gb3B0aW9ucy5zZXQgIT0gbnVsbCA/IG9wdGlvbnMuc2V0IDogdW5kZWZpbmVkOyAvLyBmbG93XG5cbiAgLyoqXG4gICAqIEhBQ0s6IGRvaW5nIHRoaXMgYXMgYSB3YXkgdG8gbWFwIGdpdmVuIGNhY2hlIHRvIGNvcnJlc3BvbmRpbmcgdHJlZSBjYWNoZVxuICAgKi9cblxuICBjb25zdCBjYWNoZSA9IGNhY2hlSW1wbGVtZW50YXRpb24gPT09IFJlY29pbF9jYWNoZVdpdGhSZWZlcmVuY2VFcXVhbGl0eSA/IFJlY29pbF90cmVlQ2FjaGVSZWZlcmVuY2VFcXVhbGl0eSgpIDogY2FjaGVJbXBsZW1lbnRhdGlvbiA9PT0gUmVjb2lsX2NhY2hlV2l0aFZhbHVlRXF1YWxpdHkgPyBSZWNvaWxfdHJlZUNhY2hlVmFsdWVFcXVhbGl0eSgpIDogY2FjaGVJbXBsZW1lbnRhdGlvbiA9PT0gUmVjb2lsX2NhY2hlTW9zdFJlY2VudCA/IFJlY29pbF9ub2RlQ2FjaGVNb3N0UmVjZW50KCkgOiBSZWNvaWxfdHJlZUNhY2hlUmVmZXJlbmNlRXF1YWxpdHkoKTtcbiAgY29uc3QgZXhlY3V0aW9uSW5mbyA9IGdldEluaXRpYWxFeGVjdXRpb25JbmZvKCk7XG5cbiAgZnVuY3Rpb24gaW5pdFNlbGVjdG9yKHN0b3JlKSB7XG4gICAgc3RvcmUuZ2V0U3RhdGUoKS5rbm93blNlbGVjdG9ycy5hZGQoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeVN0b3JlV2hlbkFzeW5jU2V0dGxlcyhzdG9yZSwgbG9hZGFibGUsIGV4ZWN1dGlvbklkKSB7XG4gICAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgIGxldCBzdG9yZXMgPSB3YWl0aW5nU3RvcmVzLmdldChleGVjdXRpb25JZCk7XG5cbiAgICAgIGlmIChzdG9yZXMgPT0gbnVsbCkge1xuICAgICAgICB3YWl0aW5nU3RvcmVzLnNldChleGVjdXRpb25JZCwgc3RvcmVzID0gbmV3IFNldCgpKTtcbiAgICAgIH1cblxuICAgICAgc3RvcmVzLmFkZChzdG9yZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBGSVhNRTogd2Ugc2hvdWxkIGtlZXAgdHJhY2sgb2YgbGF0ZXN0IGV4ZWN1dGlvbiBpZCBfcGVyIHN0b3JlXyBhbmQgdXBkYXRlXG4gICAqIHRoZSBzdG9yZXMgYWNjb3JkaW5nbHkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbm90aWZ5U3RvcmVzT2ZTZXR0bGVkQXN5bmMobmV3TG9hZGFibGUsIGV4ZWN1dGlvbklkKSB7XG4gICAgY29uc3Qgc3RvcmVzID0gd2FpdGluZ1N0b3Jlcy5nZXQoZXhlY3V0aW9uSWQpO1xuXG4gICAgaWYgKHN0b3JlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGNvbnN0IHN0b3JlIG9mIHN0b3Jlcykge1xuICAgICAgICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDIoc3RvcmUsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDMoa2V5KSwgbmV3TG9hZGFibGUpO1xuICAgICAgfVxuXG4gICAgICB3YWl0aW5nU3RvcmVzLmRlbGV0ZShleGVjdXRpb25JZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q2FjaGVkTm9kZUxvYWRhYmxlKHN0b3JlLCBzdGF0ZSwga2V5KSB7XG4gICAgaWYgKHN0YXRlLmF0b21WYWx1ZXMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBbbmV3IE1hcCgpLCBSZWNvaWxfbnVsbHRocm93cyhzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKV07XG4gICAgfVxuXG4gICAgY29uc3QgWywgbG9hZGFibGVdID0gZ2V0Tm9kZUxvYWRhYmxlJDIoc3RvcmUsIHN0YXRlLCBrZXkpO1xuICAgIGNvbnN0IGlzS2V5UG9pbnRpbmdUb1NlbGVjdG9yID0gc3RvcmUuZ2V0U3RhdGUoKS5rbm93blNlbGVjdG9ycy5oYXMoa2V5KTtcblxuICAgIGlmIChsb2FkYWJsZS5zdGF0ZSAhPT0gJ2xvYWRpbmcnICYmIGlzS2V5UG9pbnRpbmdUb1NlbGVjdG9yKSB7XG4gICAgICBzdGF0ZS5hdG9tVmFsdWVzLnNldChrZXksIGxvYWRhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW25ldyBNYXAoKSwgbG9hZGFibGVdO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGF0dGFjaGVzIGEgdGhlbigpIGFuZCBhIGNhdGNoKCkgdG8gYSBwcm9taXNlIHRoYXQgd2FzXG4gICAqIHJldHVybmVkIGZyb20gYSBzZWxlY3RvcidzIGdldCgpIChlaXRoZXIgZXhwbGljaXRseSBvciBpbXBsaWNpdGx5IGJ5XG4gICAqIHJ1bm5pbmcgYSBmdW5jdGlvbiB0aGF0IHVzZXMgdGhlIFwiYXN5bmNcIiBrZXl3b3JkKS4gSWYgYSBzZWxlY3RvcidzIGdldCgpXG4gICAqIHJldHVybnMgYSBwcm9taXNlLCB3ZSBoYXZlIHR3byBwb3NzaWJpbGl0aWVzOlxuICAgKlxuICAgKiAxLiBUaGUgcHJvbWlzZSB3aWxsIHJlc29sdmUsIGluIHdoaWNoIGNhc2UgaXQgd2lsbCBoYXZlIGNvbXBsZXRlbHkgZmluaXNoZWRcbiAgICogICAgZXhlY3V0aW5nIHdpdGhvdXQgYW55IHJlbWFpbmluZyBwZW5kaW5nIGRlcGVuZGVuY2llcy4gTm8gbW9yZSByZXRyaWVzXG4gICAqICAgIGFyZSBuZWVkZWQgYW5kIHdlIGNhbiBwcm9jZWVkIHdpdGggdXBkYXRpbmcgdGhlIGNhY2hlIGFuZCBub3RpZnlpbmdcbiAgICogICAgc3Vic2NyaWJlcnMgKGlmIGl0IGlzIHRoZSBsYXRlc3QgZXhlY3V0aW9uLCBvdGhlcndpc2Ugb25seSB0aGUgY2FjaGVcbiAgICogICAgd2lsbCBiZSB1cGRhdGVkIGFuZCBzdWJzY3JpcHRpb25zIHdpbGwgbm90IGJlIGZpcmVkKS4gVGhpcyBpcyB0aGUgY2FzZVxuICAgKiAgICBoYW5kbGVkIGJ5IHRoZSBhdHRhY2hlZCB0aGVuKCkgaGFuZGxlci5cbiAgICpcbiAgICogMi4gVGhlIHByb21pc2Ugd2lsbCB0aHJvdyBiZWNhdXNlIGl0IGVpdGhlciBoYXMgYW4gZXJyb3Igb3IgaXQgY2FtZSBhY3Jvc3NcbiAgICogICAgYW4gYXN5bmMgZGVwZW5kZW5jeSB0aGF0IGhhcyBub3QgeWV0IHJlc29sdmVkLCBpbiB3aGljaCBjYXNlIHdlIHdpbGxcbiAgICogICAgY2FsbCB3cmFwRGVwZGVuY3lQcm9taXNlKCksIHdob3NlIHJlc3BvbnNpYmlsaXR5IGlzIHRvIGhhbmRsZSBkZXBlbmRlbmN5XG4gICAqICAgIHByb21pc2VzLiBUaGlzIGNhc2UgaXMgaGFuZGxlZCBieSB0aGUgYXR0YWNoZWQgY2F0Y2goKSBoYW5kbGVyLlxuICAgKlxuICAgKiBCb3RoIGJyYW5jaGVzIHdpbGwgZXZlbnR1YWxseSByZXNvbHZlIHRvIHRoZSBmaW5hbCByZXN1bHQgb2YgdGhlIHNlbGVjdG9yXG4gICAqIChvciBhbiBlcnJvciBpZiBhIHJlYWwgZXJyb3Igb2NjdXJyZWQpLlxuICAgKlxuICAgKiBUaGUgZXhlY3V0aW9uIHdpbGwgcnVuIHRvIGNvbXBsZXRpb24gZXZlbiBpZiBpdCBpcyBzdGFsZSwgYW5kIGl0cyB2YWx1ZVxuICAgKiB3aWxsIGJlIGNhY2hlZC4gQnV0IHN0YWxlIGV4ZWN1dGlvbnMgd2lsbCBub3QgdXBkYXRlIGdsb2JhbCBzdGF0ZSBvciB1cGRhdGVcbiAgICogZXhlY3V0aW9uSW5mbyBhcyB0aGF0IGlzIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGUgJ2xhdGVzdCcgZXhlY3V0aW9uLlxuICAgKlxuICAgKiBOb3RlIHRoaXMgZnVuY3Rpb24gc2hvdWxkIG5vdCBiZSBwYXNzZWQgYSBwcm9taXNlIHRoYXQgd2FzIHRocm93bi0tQUtBIGFcbiAgICogZGVwZW5kZW5jeSBwcm9taXNlLiBEZXBlbmRlbmN5IHByb21pc2VzIHNob3VsZCBiZSBwYXNzZWQgdG9cbiAgICogd3JhcFBlbmRpbmdEZXBlbmRlbmN5UHJvbWlzZSgpKS5cbiAgICovXG5cblxuICBmdW5jdGlvbiB3cmFwUGVuZGluZ1Byb21pc2Uoc3RvcmUsIHByb21pc2UsIHN0YXRlLCBkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2YWx1ZSA9PiB7XG4gICAgICBjb25zdCBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aFZhbHVlJDEodmFsdWUpO1xuICAgICAgbWF5YmVGcmVlemVWYWx1ZSh2YWx1ZSk7XG4gICAgICBzZXRDYWNoZShzdGF0ZSwgZGVwVmFsdWVzVG9EZXBSb3V0ZShkZXBWYWx1ZXMpLCBsb2FkYWJsZSk7XG4gICAgICBzZXRMb2FkYWJsZUluU3RvcmVUb05vdGlmeURlcHMobG9hZGFibGUsIGV4ZWN1dGlvbklkKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF9fdmFsdWU6IHZhbHVlLFxuICAgICAgICBfX2tleToga2V5XG4gICAgICB9O1xuICAgIH0pLmNhdGNoKGVycm9yT3JQcm9taXNlID0+IHtcbiAgICAgIGlmIChpc0xhdGVzdEV4ZWN1dGlvbihleGVjdXRpb25JZCkpIHtcbiAgICAgICAgdXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyhkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UoZXJyb3JPclByb21pc2UpKSB7XG4gICAgICAgIHJldHVybiB3cmFwUGVuZGluZ0RlcGVuZGVuY3lQcm9taXNlKHN0b3JlLCBlcnJvck9yUHJvbWlzZSwgc3RhdGUsIGRlcFZhbHVlcywgZXhlY3V0aW9uSWQpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aEVycm9yJDEoZXJyb3JPclByb21pc2UpO1xuICAgICAgbWF5YmVGcmVlemVWYWx1ZShlcnJvck9yUHJvbWlzZSk7XG4gICAgICBzZXRDYWNoZShzdGF0ZSwgZGVwVmFsdWVzVG9EZXBSb3V0ZShkZXBWYWx1ZXMpLCBsb2FkYWJsZSk7XG4gICAgICBzZXRMb2FkYWJsZUluU3RvcmVUb05vdGlmeURlcHMobG9hZGFibGUsIGV4ZWN1dGlvbklkKTtcbiAgICAgIHRocm93IGVycm9yT3JQcm9taXNlO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGF0dGFjaGVzIGEgdGhlbigpIGFuZCBhIGNhdGNoKCkgdG8gYSBwcm9taXNlIHRoYXQgd2FzXG4gICAqIHRocm93biBmcm9tIGEgc2VsZWN0b3IncyBnZXQoKS4gSWYgYSBzZWxlY3RvcidzIGdldCgpIHRocm93cyBhIHByb21pc2UsXG4gICAqIHdlIGhhdmUgdHdvIHBvc3NpYmlsaXRpZXM6XG4gICAqXG4gICAqIDEuIFRoZSBwcm9taXNlIHdpbGwgcmVzb2x2ZSwgbWVhbmluZyBvbmUgb2Ygb3VyIHNlbGVjdG9yJ3MgZGVwZW5kZW5jaWVzIGlzXG4gICAqICAgIG5vdyBhdmFpbGFibGUgYW5kIHdlIHNob3VsZCBcInJldHJ5XCIgb3VyIGdldCgpIGJ5IHJ1bm5pbmcgaXQgYWdhaW4uIFRoaXNcbiAgICogICAgaXMgdGhlIGNhc2UgaGFuZGxlZCBieSB0aGUgYXR0YWNoZWQgdGhlbigpIGhhbmRsZXIuXG4gICAqXG4gICAqIDIuIFRoZSBwcm9taXNlIHdpbGwgdGhyb3cgYmVjYXVzZSBzb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIHRoZSBkZXBlbmRlbmN5XG4gICAqICAgIHByb21pc2UgKGluIG90aGVyIHdvcmRzIGEgcmVhbCBlcnJvciBvY2N1cnJlZCkuIFRoaXMgY2FzZSBpcyBoYW5kbGVkIGJ5XG4gICAqICAgIHRoZSBhdHRhY2hlZCBjYXRjaCgpIGhhbmRsZXIuIElmIHRoZSBkZXBlbmRlbmN5IHByb21pc2UgdGhyb3dzLCBpdCBpc1xuICAgKiAgICBfYWx3YXlzXyBhIHJlYWwgZXJyb3IgYW5kIG5vdCBhbm90aGVyIGRlcGVuZGVuY3kgcHJvbWlzZSAoYW55IGRlcGVuZGVuY3lcbiAgICogICAgcHJvbWlzZXMgd291bGQgaGF2ZSBiZWVuIGhhbmRsZWQgdXBzdHJlYW0pLlxuICAgKlxuICAgKiBUaGUgdGhlbigpIGJyYW5jaCB3aWxsIGV2ZW50dWFsbHkgcmVzb2x2ZSB0byB0aGUgZmluYWwgcmVzdWx0IG9mIHRoZVxuICAgKiBzZWxlY3RvciAob3IgYW4gZXJyb3IgaWYgYSByZWFsIGVycm9yIG9jY3VycyksIGFuZCB0aGUgY2F0Y2goKSB3aWxsIGFsd2F5c1xuICAgKiByZXNvbHZlIHRvIGFuIGVycm9yIGJlY2F1c2UgdGhlIGRlcGVuZGVuY3kgcHJvbWlzZSBpcyBhIHByb21pc2UgdGhhdCB3YXNcbiAgICogd3JhcHBlZCB1cHN0cmVhbSwgbWVhbmluZyBpdCB3aWxsIG9ubHkgcmVzb2x2ZSB0byBpdHMgcmVhbCB2YWx1ZSBvciB0byBhXG4gICAqIHJlYWwgZXJyb3IuXG4gICAqXG4gICAqIFRoZSBleGVjdXRpb24gd2lsbCBydW4gdG8gY29tcGxldGlvbiBldmVuIGlmIGl0IGlzIHN0YWxlLCBhbmQgaXRzIHZhbHVlXG4gICAqIHdpbGwgYmUgY2FjaGVkLiBCdXQgc3RhbGUgZXhlY3V0aW9ucyB3aWxsIG5vdCB1cGRhdGUgZ2xvYmFsIHN0YXRlIG9yIHVwZGF0ZVxuICAgKiBleGVjdXRpb25JbmZvIGFzIHRoYXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSAnbGF0ZXN0JyBleGVjdXRpb24uXG4gICAqXG4gICAqIE5vdGUgdGhpcyBmdW5jdGlvbiBzaG91bGQgbm90IGJlIHBhc3NlZCBhIHByb21pc2UgdGhhdCB3YXMgcmV0dXJuZWQgZnJvbVxuICAgKiBnZXQoKS4gVGhlIGludGVudGlvbiBpcyB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgb25seSBwYXNzZWQgcHJvbWlzZXMgdGhhdFxuICAgKiB3ZXJlIHRocm93biBkdWUgdG8gYSBwZW5kaW5nIGRlcGVuZGVuY3kuIFByb21pc2VzIHJldHVybmVkIGJ5IGdldCgpIHNob3VsZFxuICAgKiBiZSBwYXNzZWQgdG8gd3JhcFBlbmRpbmdQcm9taXNlKCkgaW5zdGVhZC5cbiAgICovXG5cblxuICBmdW5jdGlvbiB3cmFwUGVuZGluZ0RlcGVuZGVuY3lQcm9taXNlKHN0b3JlLCBwcm9taXNlLCBzdGF0ZSwgZXhpc3RpbmdEZXBzLCBleGVjdXRpb25JZCkge1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4ocmVzb2x2ZWREZXAgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBfX2tleTogcmVzb2x2ZWREZXBLZXksXG4gICAgICAgIF9fdmFsdWU6IGRlcFZhbHVlXG4gICAgICB9ID0gcmVzb2x2ZWREZXA7XG5cbiAgICAgIGlmIChyZXNvbHZlZERlcEtleSAhPSBudWxsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3RlIGZvciBhc3luYyBhdG9tcywgdGhpcyBtZWFucyB3ZSBhcmUgY2hhbmdpbmcgdGhlIGF0b20ncyB2YWx1ZVxuICAgICAgICAgKiBpbiB0aGUgc3RvcmUgZm9yIHRoZSBnaXZlbiB2ZXJzaW9uLiBUaGlzIHNob3VsZCBiZSBhbHJpZ2h0IGJlY2F1c2VcbiAgICAgICAgICogdGhlIHZlcnNpb24gb2Ygc3RhdGUgaXMgbm93IHN0YWxlIGFuZCBhIG5ldyB2ZXJzaW9uIHdpbGwgaGF2ZVxuICAgICAgICAgKiBhbHJlYWR5IGJlZW4gdHJpZ2dlcmVkIGJ5IHRoZSBhdG9tIGJlaW5nIHJlc29sdmVkIChzZWUgdGhpcyBsb2dpY1xuICAgICAgICAgKiBpbiBSZWNvaWxfYXRvbS5qcylcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRlLmF0b21WYWx1ZXMuc2V0KHJlc29sdmVkRGVwS2V5LCBsb2FkYWJsZVdpdGhWYWx1ZSQxKGRlcFZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFtsb2FkYWJsZSwgZGVwVmFsdWVzXSA9IGV2YWx1YXRlU2VsZWN0b3JHZXR0ZXIoc3RvcmUsIHN0YXRlLCBleGVjdXRpb25JZCk7XG5cbiAgICAgIGlmIChpc0xhdGVzdEV4ZWN1dGlvbihleGVjdXRpb25JZCkpIHtcbiAgICAgICAgdXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyhkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkKTtcbiAgICAgIH1cblxuICAgICAgbWF5YmVGcmVlemVMb2FkYWJsZUNvbnRlbnRzKGxvYWRhYmxlKTtcblxuICAgICAgaWYgKGxvYWRhYmxlLnN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgICAgc2V0Q2FjaGUoc3RhdGUsIGRlcFZhbHVlc1RvRGVwUm91dGUoZGVwVmFsdWVzKSwgbG9hZGFibGUpO1xuICAgICAgICBzZXRMb2FkYWJsZUluU3RvcmVUb05vdGlmeURlcHMobG9hZGFibGUsIGV4ZWN1dGlvbklkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnaGFzRXJyb3InKSB7XG4gICAgICAgIHRocm93IGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBfX3ZhbHVlOiBsb2FkYWJsZS5jb250ZW50cyxcbiAgICAgICAgICBfX2tleToga2V5XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFJldHVybmluZyBwcm9taXNlIGhlcmUgd2l0aG91dCB3cmFwcGluZyBhcyB0aGUgd3JhcGVwciBsb2dpYyB3YXNcbiAgICAgICAqIGFscmVhZHkgZG9uZSB3aGVuIHdlIGNhbGxlZCBldmFsdWF0ZVNlbGVjdG9yR2V0dGVyKCkgdG8gZ2V0IHRoaXNcbiAgICAgICAqIGxvYWRhYmxlXG4gICAgICAgKi9cblxuXG4gICAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgY29uc3QgbG9hZGFibGUgPSBsb2FkYWJsZVdpdGhFcnJvciQxKGVycm9yKTtcbiAgICAgIG1heWJlRnJlZXplVmFsdWUoZXJyb3IpO1xuICAgICAgc2V0Q2FjaGUoc3RhdGUsIGRlcFZhbHVlc1RvRGVwUm91dGUoZXhpc3RpbmdEZXBzKSwgbG9hZGFibGVXaXRoRXJyb3IkMShlcnJvcikpO1xuICAgICAgc2V0TG9hZGFibGVJblN0b3JlVG9Ob3RpZnlEZXBzKGxvYWRhYmxlLCBleGVjdXRpb25JZCk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExvYWRhYmxlSW5TdG9yZVRvTm90aWZ5RGVwcyhsb2FkYWJsZSwgZXhlY3V0aW9uSWQpIHtcbiAgICBpZiAoaXNMYXRlc3RFeGVjdXRpb24oZXhlY3V0aW9uSWQpKSB7XG4gICAgICBzZXRFeGVjdXRpb25JbmZvKGxvYWRhYmxlKTtcbiAgICAgIG5vdGlmeVN0b3Jlc09mU2V0dGxlZEFzeW5jKGxvYWRhYmxlLCBleGVjdXRpb25JZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0RGVwc0luU3RvcmUoc3RvcmUsIHN0YXRlLCBkZXBzLCBleGVjdXRpb25JZCkge1xuICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUsIF9zdG9yZSRnZXRTdGF0ZSRjdXJyZSwgX3N0b3JlJGdldFN0YXRlMiwgX3N0b3JlJGdldFN0YXRlMiRuZXh0O1xuXG4gICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKGV4ZWN1dGlvbklkKSB8fCBzdGF0ZS52ZXJzaW9uID09PSAoKF9zdG9yZSRnZXRTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCkpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9zdG9yZSRnZXRTdGF0ZSRjdXJyZSA9IF9zdG9yZSRnZXRTdGF0ZS5jdXJyZW50VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlJGN1cnJlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmUkZ2V0U3RhdGUkY3VycmUudmVyc2lvbikgfHwgc3RhdGUudmVyc2lvbiA9PT0gKChfc3RvcmUkZ2V0U3RhdGUyID0gc3RvcmUuZ2V0U3RhdGUoKSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9zdG9yZSRnZXRTdGF0ZTIkbmV4dCA9IF9zdG9yZSRnZXRTdGF0ZTIubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZTIkbmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlMiRuZXh0LnZlcnNpb24pKSB7XG4gICAgICB2YXIgX3N0b3JlJGdldFN0YXRlJG5leHRULCBfc3RvcmUkZ2V0U3RhdGUzLCBfc3RvcmUkZ2V0U3RhdGUzJG5leHQ7XG5cbiAgICAgIHNhdmVEZXBlbmRlbmN5TWFwVG9TdG9yZSQzKG5ldyBNYXAoW1trZXksIGRlcHNdXSksIHN0b3JlLCAoX3N0b3JlJGdldFN0YXRlJG5leHRUID0gKF9zdG9yZSRnZXRTdGF0ZTMgPSBzdG9yZS5nZXRTdGF0ZSgpKSA9PT0gbnVsbCB8fCBfc3RvcmUkZ2V0U3RhdGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3N0b3JlJGdldFN0YXRlMyRuZXh0ID0gX3N0b3JlJGdldFN0YXRlMy5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlMyRuZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmUkZ2V0U3RhdGUzJG5leHQudmVyc2lvbikgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgOiBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLnZlcnNpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldE5ld0RlcEluU3RvcmUoc3RvcmUsIHN0YXRlLCBkZXBzLCBuZXdEZXBLZXksIGV4ZWN1dGlvbklkKSB7XG4gICAgZGVwcy5hZGQobmV3RGVwS2V5KTtcbiAgICBzZXREZXBzSW5TdG9yZShzdG9yZSwgc3RhdGUsIGRlcHMsIGV4ZWN1dGlvbklkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2YWx1YXRlU2VsZWN0b3JHZXR0ZXIoc3RvcmUsIHN0YXRlLCBleGVjdXRpb25JZCkge1xuICAgIGNvbnN0IGVuZFBlcmZCbG9jayA9IHN0YXJ0UGVyZkJsb2NrJDEoa2V5KTsgLy8gVE9ETyBUNjM5NjU4NjY6IHVzZSBleGVjdXRpb24gSUQgaGVyZVxuXG4gICAgbGV0IHJlc3VsdDtcbiAgICBsZXQgbG9hZGFibGU7XG4gICAgY29uc3QgZGVwVmFsdWVzID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0aW5nIGEgZnJlc2ggc2V0IG9mIGRlcHMgdGhhdCB3ZSdsbCBiZSB1c2luZyB0byB1cGRhdGUgc3RhdGUuIFdlJ3JlXG4gICAgICogc3RhcnRpbmcgYSBuZXcgc2V0IHZlcnN1cyBhZGRpbmcgaXQgaW4gZXhpc3Rpbmcgc3RhdGUgZGVwcyBiZWNhdXNlXG4gICAgICogdGhlIHZlcnNpb24gb2Ygc3RhdGUgdGhhdCB3ZSB1cGRhdGUgZGVwcyBmb3IgbWF5IGJlIGEgbW9yZSByZWNlbnQgdmVyc2lvblxuICAgICAqIHRoYW4gdGhlIHZlcnNpb24gdGhlIHNlbGVjdG9yIHdhcyBjYWxsZWQgd2l0aC4gVGhpcyBpcyBiZWNhdXNlIHRoZSBsYXRlc3RcbiAgICAgKiBleGVjdXRpb24gd2lsbCB1cGRhdGUgdGhlIGRlcHMgb2YgdGhlIGN1cnJlbnQvbGF0ZXN0IHZlcnNpb24gb2Ygc3RhdGUgKFxuICAgICAqIHRoaXMgaXMgc2FmZSB0byBkbyBiZWNhdXNlIHRoZSBmYWN0IHRoYXQgdGhlIHNlbGVjdG9yIGlzIHRoZSBsYXRlc3RcbiAgICAgKiBleGVjdXRpb24gbWVhbnMgdGhlIGRlcHMgd2UgZGlzY292ZXIgYmVsb3cgYXJlIG91ciBiZXN0IGd1ZXNzIGF0IHRoZVxuICAgICAqIGRlcHMgZm9yIHRoZSBjdXJyZW50L2xhdGVzdCBzdGF0ZSBpbiB0aGUgc3RvcmUpXG4gICAgICovXG5cbiAgICBjb25zdCBkZXBzID0gbmV3IFNldCgpO1xuICAgIHNldERlcHNJblN0b3JlKHN0b3JlLCBzdGF0ZSwgZGVwcywgZXhlY3V0aW9uSWQpO1xuXG4gICAgZnVuY3Rpb24gZ2V0UmVjb2lsVmFsdWUocmVjb2lsVmFsdWUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAga2V5OiBkZXBLZXlcbiAgICAgIH0gPSByZWNvaWxWYWx1ZTtcbiAgICAgIHNldE5ld0RlcEluU3RvcmUoc3RvcmUsIHN0YXRlLCBkZXBzLCBkZXBLZXksIGV4ZWN1dGlvbklkKTtcbiAgICAgIGNvbnN0IFssIGRlcExvYWRhYmxlXSA9IGdldENhY2hlZE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIGRlcEtleSk7XG4gICAgICBkZXBWYWx1ZXMuc2V0KGRlcEtleSwgZGVwTG9hZGFibGUpO1xuXG4gICAgICBpZiAoZGVwTG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgcmV0dXJuIGRlcExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBkZXBMb2FkYWJsZS5jb250ZW50cztcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZ2V0KHtcbiAgICAgICAgZ2V0OiBnZXRSZWNvaWxWYWx1ZVxuICAgICAgfSk7XG4gICAgICByZXN1bHQgPSBpc1JlY29pbFZhbHVlJDMocmVzdWx0KSA/IGdldFJlY29pbFZhbHVlKHJlc3VsdCkgOiByZXN1bHQ7XG5cbiAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzdWx0ID0gd3JhcFBlbmRpbmdQcm9taXNlKHN0b3JlLCByZXN1bHQsIHN0YXRlLCBkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkKS5maW5hbGx5KGVuZFBlcmZCbG9jayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmRQZXJmQmxvY2soKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvck9yRGVwUHJvbWlzZSkge1xuICAgICAgcmVzdWx0ID0gZXJyb3JPckRlcFByb21pc2U7XG5cbiAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzdWx0ID0gd3JhcFBlbmRpbmdEZXBlbmRlbmN5UHJvbWlzZShzdG9yZSwgcmVzdWx0LCBzdGF0ZSwgZGVwVmFsdWVzLCBleGVjdXRpb25JZCkuZmluYWxseShlbmRQZXJmQmxvY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kUGVyZkJsb2NrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aEVycm9yJDEocmVzdWx0KTtcbiAgICB9IGVsc2UgaWYgKFJlY29pbF9pc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgbG9hZGFibGUgPSBsb2FkYWJsZVdpdGhQcm9taXNlJDEocmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9hZGFibGUgPSBsb2FkYWJsZVdpdGhWYWx1ZSQxKHJlc3VsdCk7XG4gICAgfVxuXG4gICAgbWF5YmVGcmVlemVMb2FkYWJsZUNvbnRlbnRzKGxvYWRhYmxlKTtcbiAgICByZXR1cm4gW2xvYWRhYmxlLCBkZXBWYWx1ZXNdO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmFsRnJvbUNhY2hlQW5kVXBkYXRlZERvd25zdHJlYW1EZXBzKHN0b3JlLCBzdGF0ZSkge1xuICAgIHZhciBfc3RvcmUkZ2V0R3JhcGgkbm9kZUQ7XG5cbiAgICBpZiAoc3RhdGUuYXRvbVZhbHVlcy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIHN0YXRlLmF0b21WYWx1ZXMuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVwcyA9IG5ldyBTZXQoKF9zdG9yZSRnZXRHcmFwaCRub2RlRCA9IHN0b3JlLmdldEdyYXBoKHN0YXRlLnZlcnNpb24pLm5vZGVEZXBzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfc3RvcmUkZ2V0R3JhcGgkbm9kZUQgIT09IHZvaWQgMCA/IF9zdG9yZSRnZXRHcmFwaCRub2RlRCA6IGVtcHR5U2V0JDEpO1xuICAgIHNldERlcHNJblN0b3JlKHN0b3JlLCBzdGF0ZSwgZGVwcywgZXhlY3V0aW9uSW5mby5sYXRlc3RFeGVjdXRpb25JZCk7XG4gICAgY29uc3QgY2FjaGVkVmFsID0gY2FjaGUuZ2V0KG5vZGVLZXkgPT4ge1xuICAgICAgY29uc3QgWywgbG9hZGFibGVdID0gZ2V0Q2FjaGVkTm9kZUxvYWRhYmxlKHN0b3JlLCBzdGF0ZSwgbm9kZUtleSk7XG4gICAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gICAgfSwge1xuICAgICAgb25DYWNoZUhpdDogbm9kZUtleSA9PiB7XG4gICAgICAgIGlmIChub2RlS2V5ICE9PSBrZXkpIHtcbiAgICAgICAgICBzZXROZXdEZXBJblN0b3JlKHN0b3JlLCBzdGF0ZSwgZGVwcywgbm9kZUtleSwgZXhlY3V0aW9uSW5mby5sYXRlc3RFeGVjdXRpb25JZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FjaGVkVmFsO1xuICB9XG4gIC8qKlxuICAgKiBGSVhNRTogZGVwIGtleXMgc2hvdWxkIHRha2UgaW50byBhY2NvdW50IHRoZSBzdGF0ZSBvZiB0aGUgbG9hZGFibGUgdG9cbiAgICogcHJldmVudCB0aGUgZWRnZSBjYXNlIHdoZXJlIGEgbG9hZGFibGUgd2l0aCBhbiBlcnJvciBhbmQgYSBsb2FkYWJsZSB3aXRoXG4gICAqIGFuIGVycm9yIGFzIGEgdmFsdWUgYXJlIHRyZWF0ZWQgYXMgdGhlIHNhbWUgdGhpbmcgaW5jb3JyZWN0bHkuIEZvciBleGFtcGxlXG4gICAqIHRoZXNlIHR3byBzaG91bGQgYmUgdHJlYXRlZCBkaWZmZXJlbnRseTpcbiAgICpcbiAgICogc2VsZWN0b3Ioe2tleTogJycsIGdldDogKCkgPT4gbmV3IEVycm9yKCdoaScpfSk7XG4gICAqIHNlbGVjdG9yKHtrZXk6ICcnLCBnZXQgKCkgPT4ge3Rocm93IG5ldyBFcnJvcignaGknKX19KTtcbiAgICpcbiAgICogV2l0aCBjdXJyZW50IGltcGxlbWVudGF0aW9uIHRoZXkgYXJlIHRyZWF0ZWQgdGhlIHNhbWVcbiAgICovXG5cblxuICBmdW5jdGlvbiBkZXBWYWx1ZXNUb0RlcFJvdXRlKGRlcFZhbHVlcykge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGRlcFZhbHVlcy5lbnRyaWVzKCkpLm1hcCgoW2tleSwgdmFsTG9hZGFibGVdKSA9PiBba2V5LCB2YWxMb2FkYWJsZS5jb250ZW50c10pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmFsRnJvbVJ1bm5pbmdOZXdFeGVjdXRpb25BbmRVcGRhdGVkRGVwcyhzdG9yZSwgc3RhdGUpIHtcbiAgICBjb25zdCBuZXdFeGVjdXRpb25JZCA9IGdldE5ld0V4ZWN1dGlvbklkKCk7XG4gICAgY29uc3QgW2xvYWRhYmxlLCBuZXdEZXBWYWx1ZXNdID0gZXZhbHVhdGVTZWxlY3RvckdldHRlcihzdG9yZSwgc3RhdGUsIG5ld0V4ZWN1dGlvbklkKTtcbiAgICBzZXRFeGVjdXRpb25JbmZvKGxvYWRhYmxlLCBuZXdEZXBWYWx1ZXMsIG5ld0V4ZWN1dGlvbklkLCBzdGF0ZSk7XG4gICAgbWF5YmVTZXRDYWNoZVdpdGhMb2FkYWJsZShzdGF0ZSwgZGVwVmFsdWVzVG9EZXBSb3V0ZShuZXdEZXBWYWx1ZXMpLCBsb2FkYWJsZSk7XG4gICAgbm90aWZ5U3RvcmVXaGVuQXN5bmNTZXR0bGVzKHN0b3JlLCBsb2FkYWJsZSwgbmV3RXhlY3V0aW9uSWQpO1xuICAgIHJldHVybiBsb2FkYWJsZTtcbiAgfVxuICAvKipcbiAgICogR2l2ZW4gYSB0cmVlIHN0YXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIFwic2VsZWN0b3IgcmVzdWx0XCIsIHdoaWNoIGlzXG4gICAqIGRlZmluZWQgYXMgYSBzaXplLTIgdHVwbGUgb2YgW0RlcGVuZGVuY3lNYXAsIExvYWRhYmxlPFQ+XS5cbiAgICpcbiAgICogVGhlIHNlbGVjdG9yJ3MgZ2V0KCkgZnVuY3Rpb24gd2lsbCBvbmx5IGJlIHJlLWV2YWx1YXRlZCBpZiBfYm90aF8gb2YgdGhlXG4gICAqIGZvbGxvd2luZyBzdGF0ZW1lbnRzIGFyZSB0cnVlOlxuICAgKlxuICAgKiAxLiBUaGUgY3VycmVudCBkZXAgdmFsdWVzIGZyb20gdGhlIGdpdmVuIHN0YXRlIHByb2R1Y2VkIGEgY2FjaGUga2V5IHRoYXRcbiAgICogICAgd2FzIG5vdCBmb3VuZCBpbiB0aGUgY2FjaGUuXG4gICAqIDIuIFRoZXJlIGlzIG5vIGN1cnJlbnRseSBydW5uaW5nIGFzeW5jIGV4ZWN1dGlvbiBPUiB0aGVyZSBpcyBhblxuICAgKiAgICBhc3luYyBleGVjdXRpb24gdGhhdCBpcyBydW5uaW5nLCBidXQgYWZ0ZXIgY29tcGFyaW5nIHRoZSBkZXAgdmFsdWVzIGluXG4gICAqICAgIHRoZSBnaXZlbiBzdGF0ZSB3aXRoIHRoZSBkZXAgdmFsdWVzIHRoYXQgdGhlIGV4ZWN1dGlvbiBoYXMgZGlzY292ZXJlZCBzb1xuICAgKiAgICBmYXIgd2UgZmluZCB0aGF0IGF0IGxlYXN0IG9uZSBkZXAgdmFsdWUgaGFzIGNoYW5nZWQsIGluIHdoaWNoIGNhc2Ugd2VcbiAgICogICAgc3RhcnQgYSBuZXcgZXhlY3V0aW9uICh0aGUgcHJldmlvdXNseSBydW5uaW5nIGV4ZWN1dGlvbiB3aWxsIGNvbnRpbnVlIHRvXG4gICAqICAgIHJ1biB0byBjb21wbGV0aW9uLCBidXQgb25seSB0aGUgbmV3IGV4ZWN1dGlvbiB3aWxsIGJlIGRlZW1lZCB0aGVcbiAgICogICAgJ2xhdGVzdCcgZXhlY3V0aW9uLCBtZWFuaW5nIGl0IHdpbGwgYmUgdGhlIG9ubHkgZXhlY3V0aW9uIHRoYXQgd2lsbFxuICAgKiAgICB1cGRhdGUgZ2xvYmFsIHN0YXRlIHdoZW4gaXQgaXMgZmluaXNoZWQuIEFueSBub24tbGF0ZXN0IGV4ZWN1dGlvbnMgd2lsbFxuICAgKiAgICBydW4gdG8gY29tcGxldGlvbiBhbmQgdXBkYXRlIHRoZSBzZWxlY3RvciBjYWNoZSBidXQgbm90IGdsb2JhbCBzdGF0ZSkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U2VsZWN0b3JWYWxBbmRVcGRhdGVkRGVwcyhzdG9yZSwgc3RhdGUpIHtcbiAgICBjb25zdCBjYWNoZWRWYWwgPSBnZXRWYWxGcm9tQ2FjaGVBbmRVcGRhdGVkRG93bnN0cmVhbURlcHMoc3RvcmUsIHN0YXRlKTtcblxuICAgIGlmIChjYWNoZWRWYWwgIT0gbnVsbCkge1xuICAgICAgc2V0RXhlY3V0aW9uSW5mbyhjYWNoZWRWYWwpO1xuICAgICAgcmV0dXJuIGNhY2hlZFZhbDtcbiAgICB9IC8vIEZJWE1FOiB0aGlzIHdvbid0IHdvcmsgd2l0aCBjdXN0b20gY2FjaGluZyBiL2MgaXQgdXNlcyBzZXBhcmF0ZSBjYWNoZVxuXG5cbiAgICBpZiAoYXN5bmNXb3JrSXNJblByb2dyZXNzQW5kRGVwc0Rpc2NvdmVyZWRIYXZlTm90Q2hhbmdlZChzdG9yZSwgc3RhdGUpKSB7XG4gICAgICBub3RpZnlTdG9yZVdoZW5Bc3luY1NldHRsZXMoc3RvcmUsIFJlY29pbF9udWxsdGhyb3dzKGV4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUpLCBSZWNvaWxfbnVsbHRocm93cyhleGVjdXRpb25JbmZvLmxhdGVzdEV4ZWN1dGlvbklkKSk7IC8vIEZJWE1FOiBjaGVjayBhZnRlciB0aGUgZmFjdCB0byBzZWUgaWYgd2UgbWFkZSB0aGUgcmlnaHQgY2hvaWNlIGJ5IHdhaXRpbmdcblxuICAgICAgcmV0dXJuIFJlY29pbF9udWxsdGhyb3dzKGV4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUpO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRWYWxGcm9tUnVubmluZ05ld0V4ZWN1dGlvbkFuZFVwZGF0ZWREZXBzKHN0b3JlLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhc3luY1dvcmtJc0luUHJvZ3Jlc3NBbmREZXBzRGlzY292ZXJlZEhhdmVOb3RDaGFuZ2VkKHN0b3JlLCBzdGF0ZSkge1xuICAgIHJldHVybiBleGVjdXRpb25JbmZvLmxhdGVzdExvYWRhYmxlICE9IG51bGwgJiYgZXhlY3V0aW9uSW5mby5sYXRlc3RFeGVjdXRpb25JZCAhPSBudWxsICYmICFoYXZlQXN5bmNEZXBzQ2hhbmdlZChzdG9yZSwgc3RhdGUpO1xuICB9XG5cbiAgY29uc3QgbWFwT2ZDaGVja2VkVmVyc2lvbnMgPSBuZXcgTWFwKCk7XG5cbiAgZnVuY3Rpb24gaGF2ZUFzeW5jRGVwc0NoYW5nZWQoc3RvcmUsIHN0YXRlKSB7XG4gICAgdmFyIF9leGVjdXRpb25JbmZvJGRlcFZhbCwgX21hcE9mQ2hlY2tlZFZlcnNpb25zO1xuXG4gICAgY29uc3Qgb2xkRGVwVmFsdWVzID0gKF9leGVjdXRpb25JbmZvJGRlcFZhbCA9IGV4ZWN1dGlvbkluZm8uZGVwVmFsdWVzRGlzY292ZXJlZFNvRmFyRHVyaW5nQXN5bmNXb3JrKSAhPT0gbnVsbCAmJiBfZXhlY3V0aW9uSW5mbyRkZXBWYWwgIT09IHZvaWQgMCA/IF9leGVjdXRpb25JbmZvJGRlcFZhbCA6IG5ldyBNYXAoKTtcbiAgICBjb25zdCBjYWNoZWREZXBWYWx1ZXNDaGVja2VkRm9yVGhpc1ZlcnNpb24gPSBBcnJheSgoKF9tYXBPZkNoZWNrZWRWZXJzaW9ucyA9IG1hcE9mQ2hlY2tlZFZlcnNpb25zLmdldChzdGF0ZS52ZXJzaW9uKSkgIT09IG51bGwgJiYgX21hcE9mQ2hlY2tlZFZlcnNpb25zICE9PSB2b2lkIDAgPyBfbWFwT2ZDaGVja2VkVmVyc2lvbnMgOiBuZXcgTWFwKCkpLmVudHJpZXMoKSk7XG4gICAgY29uc3QgaXNDYWNoZWRWZXJzaW9uU2FtZSA9IG1hcE9mQ2hlY2tlZFZlcnNpb25zLmhhcyhzdGF0ZS52ZXJzaW9uKSAmJiBjYWNoZWREZXBWYWx1ZXNDaGVja2VkRm9yVGhpc1ZlcnNpb24ubGVuZ3RoID09PSBvbGREZXBWYWx1ZXMuc2l6ZSAmJiBjYWNoZWREZXBWYWx1ZXNDaGVja2VkRm9yVGhpc1ZlcnNpb24uZXZlcnkoKFtub2RlS2V5LCBub2RlVmFsXSkgPT4ge1xuICAgICAgcmV0dXJuIG9sZERlcFZhbHVlcy5nZXQobm9kZUtleSkgPT09IG5vZGVWYWw7XG4gICAgfSk7XG5cbiAgICBpZiAob2xkRGVwVmFsdWVzID09IG51bGwgfHwgc3RhdGUudmVyc2lvbiA9PT0gZXhlY3V0aW9uSW5mby5zdGF0ZVZlcnNpb24gfHwgaXNDYWNoZWRWZXJzaW9uU2FtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIG1hcE9mQ2hlY2tlZFZlcnNpb25zLnNldChzdGF0ZS52ZXJzaW9uLCBuZXcgTWFwKG9sZERlcFZhbHVlcykpO1xuICAgIHJldHVybiBBcnJheS5mcm9tKG9sZERlcFZhbHVlcykuc29tZSgoW25vZGVLZXksIG9sZFZhbF0pID0+IHtcbiAgICAgIGNvbnN0IFssIGxvYWRhYmxlXSA9IGdldENhY2hlZE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIG5vZGVLZXkpO1xuICAgICAgcmV0dXJuIGxvYWRhYmxlLmNvbnRlbnRzICE9PSBvbGRWYWwuY29udGVudHMgJiZcbiAgICAgIC8qKlxuICAgICAgICogRklYTUU6IGluIHRoZSBjb25kaXRpb24gYmVsb3cgd2UncmUgbWFraW5nIHRoZSBhc3N1bXB0aW9uIHRoYXQgYVxuICAgICAgICogZGVwZW5kZW5jeSB0aGF0IGdvZXMgZnJvbSBsb2FkaW5nIHRvIGhhdmluZyBhIHZhbHVlIGlzIGFsd2F5cyBiZWNhdXNlXG4gICAgICAgKiB0aGUgZGVwZW5kZW5jeSByZXNvbHZlZCB0byB0aGF0IHZhbHVlLCBzbyB3ZSBkb24ndCBjb3VudCBpdCBhcyBhIGRlcFxuICAgICAgICogY2hhbmdlIGFzIHRoZSBub3JtYWwgcmV0cnkgbG9vcCB3aWxsIGhhbmRsZSByZXRyeWluZyBpbiByZXNwb25zZSB0byBhXG4gICAgICAgKiByZXNvbHZlZCBhc3luYyBkZXAuIFRoaXMgaXMgYW4gaW5jb3JyZWN0IGFzc3VtcHRpb24gZm9yIHRoZSBlZGdlIGNhc2VcbiAgICAgICAqIHdoZXJlIHRoZXJlIGlzIGFuIGFzeW5jIHNlbGVjdG9yIHRoYXQgaXMgbG9hZGluZywgYW5kIHdoaWxlIGl0IGlzXG4gICAgICAgKiBsb2FkaW5nIG9uZSBvZiBpdHMgZGVwZW5kZW5jaWVzIGNoYW5nZXMsIHRyaWdnZXJpbmcgYSBuZXcgZXhlY3V0aW9uLFxuICAgICAgICogYW5kIHRoYXQgbmV3IGV4ZWN1dGlvbiBwcm9kdWNlcyBhIHZhbHVlIHN5bmNocm9ub3VzbHkgKHdlIGRvbid0IG1ha2VcbiAgICAgICAqIHRoYXQgYXNzdW1wdGlvbiBmb3IgYXN5bmNocm9ub3VzIHdvcmsgYi9jIGl0J3MgZ3VhcmFudGVlZCB0aGF0IGFcbiAgICAgICAqIGxvYWRhYmxlIHRoYXQgZ29lcyBmcm9tICdsb2FkaW5nJyB0byAnbG9hZGluZycgaW4gYSBuZXcgbG9hZGFibGUgaXNcbiAgICAgICAqIGEgZGVwIGNoYW5nZSkuXG4gICAgICAgKi9cbiAgICAgICEob2xkVmFsLnN0YXRlID09PSAnbG9hZGluZycgJiYgbG9hZGFibGUuc3RhdGUgIT09ICdsb2FkaW5nJyk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCB1cGRhdGUgdGhlIHNlbGVjdG9yJ3MgZXhlY3V0aW9uIGluZm8gd2hlbiB0aGUgc2VsZWN0b3JcbiAgICogaGFzIGVpdGhlciBmaW5pc2hlZCBydW5uaW5nIGFuIGV4ZWN1dGlvbiBvciBoYXMgc3RhcnRlZCBhIG5ldyBleGVjdXRpb24uIElmXG4gICAqIHRoZSBnaXZlbiBsb2FkYWJsZSBpcyBpbiBhICdsb2FkaW5nJyBzdGF0ZSwgdGhlIGludGVudGlvbiBpcyB0aGF0IGEgbmV3XG4gICAqIGV4ZWN1dGlvbiBoYXMgc3RhcnRlZC4gT3RoZXJ3aXNlLCB0aGUgaW50ZW50aW9uIGlzIHRoYXQgYW4gZXhlY3V0aW9uIGhhc1xuICAgKiBqdXN0IGZpbmlzaGVkLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHNldEV4ZWN1dGlvbkluZm8obG9hZGFibGUsIGRlcFZhbHVlcywgbmV3RXhlY3V0aW9uSWQsIHN0YXRlKSB7XG4gICAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgIGV4ZWN1dGlvbkluZm8uZGVwVmFsdWVzRGlzY292ZXJlZFNvRmFyRHVyaW5nQXN5bmNXb3JrID0gZGVwVmFsdWVzO1xuICAgICAgZXhlY3V0aW9uSW5mby5sYXRlc3RFeGVjdXRpb25JZCA9IG5ld0V4ZWN1dGlvbklkO1xuICAgICAgZXhlY3V0aW9uSW5mby5sYXRlc3RMb2FkYWJsZSA9IGxvYWRhYmxlO1xuICAgICAgZXhlY3V0aW9uSW5mby5zdGF0ZVZlcnNpb24gPSBzdGF0ZSA9PT0gbnVsbCB8fCBzdGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RhdGUudmVyc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhlY3V0aW9uSW5mby5kZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcmsgPSBudWxsO1xuICAgICAgZXhlY3V0aW9uSW5mby5sYXRlc3RFeGVjdXRpb25JZCA9IG51bGw7XG4gICAgICBleGVjdXRpb25JbmZvLmxhdGVzdExvYWRhYmxlID0gbnVsbDtcbiAgICAgIGV4ZWN1dGlvbkluZm8uc3RhdGVWZXJzaW9uID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENvbmRpdGlvbmFsbHkgdXBkYXRlcyB0aGUgY2FjaGUgd2l0aCBhIGdpdmVuIGxvYWRhYmxlLlxuICAgKlxuICAgKiBXZSBvbmx5IGNhY2hlIGxvYWRhYmxlcyB0aGF0IGFyZSBub3QgbG9hZGluZyBiZWNhdXNlIG91ciBjYWNoZSBrZXlzIGFyZVxuICAgKiBiYXNlZCBvbiBkZXAgdmFsdWVzLCB3aGljaCBhcmUgaW4gYW4gdW5maW5pc2hlZCBzdGF0ZSBmb3IgbG9hZGFibGVzIHRoYXRcbiAgICogaGF2ZSBhICdsb2FkaW5nJyBzdGF0ZSAobmV3IGRlcHMgbWF5IGJlIGRpc2NvdmVyZWQgd2hpbGUgdGhlIHNlbGVjdG9yXG4gICAqIHJ1bnMgaXRzIGFzeW5jIGNvZGUpLiBXZSBuZXZlciB3YW50IHRvIGNhY2hlIHBhcnRpYWwgZGVwZW5kZW5jaWVzIGIvYyBpdFxuICAgKiBjb3VsZCBsZWFkIHRvIGVycm9ycywgc3VjaCBhcyBwcmVtYXR1cmVseSByZXR1cm5pbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiBhXG4gICAqIHBhcnRpYWwgbGlzdCBvZiBkZXBzLS0gd2UgbmVlZCB0aGUgZnVsbCBsaXN0IG9mIGRlcHMgdG8gZW5zdXJlIHRoYXQgd2VcbiAgICogYXJlIHJldHVybmluZyB0aGUgY29ycmVjdCByZXN1bHQgZnJvbSBjYWNoZS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBtYXliZVNldENhY2hlV2l0aExvYWRhYmxlKHN0YXRlLCBkZXBSb3V0ZSwgbG9hZGFibGUpIHtcbiAgICBpZiAobG9hZGFibGUuc3RhdGUgIT09ICdsb2FkaW5nJykge1xuICAgICAgc2V0Q2FjaGUoc3RhdGUsIGRlcFJvdXRlLCBsb2FkYWJsZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyhkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkKSB7XG4gICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKGV4ZWN1dGlvbklkKSkge1xuICAgICAgZXhlY3V0aW9uSW5mby5kZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcmsgPSBkZXBWYWx1ZXM7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNMYXRlc3RFeGVjdXRpb24oZXhlY3V0aW9uSWQpIHtcbiAgICByZXR1cm4gZXhlY3V0aW9uSWQgPT09IGV4ZWN1dGlvbkluZm8ubGF0ZXN0RXhlY3V0aW9uSWQ7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUZyZWV6ZUxvYWRhYmxlQ29udGVudHMobG9hZGFibGUpIHtcbiAgICBpZiAobG9hZGFibGUuc3RhdGUgIT09ICdsb2FkaW5nJykge1xuICAgICAgbWF5YmVGcmVlemVWYWx1ZShsb2FkYWJsZS5jb250ZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWF5YmVGcmVlemVWYWx1ZSh2YWwpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAoQm9vbGVhbihvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZSh2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENhY2hlKHN0YXRlLCBjYWNoZVJvdXRlLCBsb2FkYWJsZSkge1xuICAgIHN0YXRlLmF0b21WYWx1ZXMuc2V0KGtleSwgbG9hZGFibGUpO1xuICAgIGNhY2hlLnNldChjYWNoZVJvdXRlLCBsb2FkYWJsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXRlY3RDaXJjdWxhckRlcGVuZGVuY2llcyhmbikge1xuICAgIGlmIChkZXBlbmRlbmN5U3RhY2suaW5jbHVkZXMoa2V5KSkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGBSZWNvaWwgc2VsZWN0b3IgaGFzIGNpcmN1bGFyIGRlcGVuZGVuY2llczogJHtkZXBlbmRlbmN5U3RhY2suc2xpY2UoZGVwZW5kZW5jeVN0YWNrLmluZGV4T2Yoa2V5KSkuam9pbignIFxcdTIxOTIgJyl9YDtcbiAgICAgIHJldHVybiBsb2FkYWJsZVdpdGhFcnJvciQxKG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgZGVwZW5kZW5jeVN0YWNrLnB1c2goa2V5KTtcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZGVwZW5kZW5jeVN0YWNrLnBvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG15UGVlayhzdG9yZSwgc3RhdGUpIHtcbiAgICBjb25zdCBjYWNoZVZhbCA9IGNhY2hlLmdldChub2RlS2V5ID0+IHtcbiAgICAgIGNvbnN0IHBlZWsgPSBwZWVrTm9kZUxvYWRhYmxlJDIoc3RvcmUsIHN0YXRlLCBub2RlS2V5KTtcbiAgICAgIHJldHVybiBwZWVrID09PSBudWxsIHx8IHBlZWsgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBlZWsuY29udGVudHM7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhY2hlVmFsO1xuICB9XG5cbiAgZnVuY3Rpb24gbXlHZXQoc3RvcmUsIHN0YXRlKSB7XG4gICAgaW5pdFNlbGVjdG9yKHN0b3JlKTtcbiAgICByZXR1cm4gW25ldyBNYXAoKSwgZGV0ZWN0Q2lyY3VsYXJEZXBlbmRlbmNpZXMoKCkgPT4gZ2V0U2VsZWN0b3JWYWxBbmRVcGRhdGVkRGVwcyhzdG9yZSwgc3RhdGUpKV07XG4gIH1cblxuICBmdW5jdGlvbiBpbnZhbGlkYXRlKHN0YXRlKSB7XG4gICAgc3RhdGUuYXRvbVZhbHVlcy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGlmIChzZXQgIT0gbnVsbCkge1xuICAgIGZ1bmN0aW9uIG15U2V0KHN0b3JlLCBzdGF0ZSwgbmV3VmFsdWUpIHtcbiAgICAgIGluaXRTZWxlY3RvcihzdG9yZSk7XG4gICAgICBjb25zdCBkZXBlbmRlbmN5TWFwID0gbmV3IE1hcCgpO1xuICAgICAgY29uc3Qgd3JpdGVzID0gbmV3IE1hcCgpO1xuXG4gICAgICBmdW5jdGlvbiBnZXRSZWNvaWxWYWx1ZSh7XG4gICAgICAgIGtleVxuICAgICAgfSkge1xuICAgICAgICBjb25zdCBbLCBsb2FkYWJsZV0gPSBnZXRDYWNoZWROb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBrZXkpO1xuXG4gICAgICAgIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJykge1xuICAgICAgICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgICAgfSBlbHNlIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJlY29pbFZhbHVlTm90UmVhZHkkMihrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlLCB2YWx1ZU9yVXBkYXRlcikge1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IC8vIGNhc3QgdG8gYW55IGJlY2F1c2Ugd2UgY2FuJ3QgcmVzdHJpY3QgdHlwZSBTIGZyb20gYmVpbmcgYSBmdW5jdGlvbiBpdHNlbGYgd2l0aG91dCBsb3Npbmcgc3VwcG9ydCBmb3Igb3BhcXVlIHR5cGVzXG4gICAgICAgIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgIHZhbHVlT3JVcGRhdGVyKGdldFJlY29pbFZhbHVlKHJlY29pbFN0YXRlKSkgOiB2YWx1ZU9yVXBkYXRlcjtcbiAgICAgICAgY29uc3QgWywgdXBzdHJlYW1Xcml0ZXNdID0gc2V0Tm9kZVZhbHVlJDMoc3RvcmUsIHN0YXRlLCByZWNvaWxTdGF0ZS5rZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgdXBzdHJlYW1Xcml0ZXMuZm9yRWFjaCgodiwgaykgPT4gd3JpdGVzLnNldChrLCB2KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlc2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgICAgICAgc2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUsIERFRkFVTFRfVkFMVUUkMyk7XG4gICAgICB9XG5cbiAgICAgIHNldCh7XG4gICAgICAgIHNldDogc2V0UmVjb2lsU3RhdGUsXG4gICAgICAgIGdldDogZ2V0UmVjb2lsVmFsdWUsXG4gICAgICAgIHJlc2V0OiByZXNldFJlY29pbFN0YXRlXG4gICAgICB9LCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gW2RlcGVuZGVuY3lNYXAsIHdyaXRlc107XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZ2lzdGVyTm9kZSQxKHtcbiAgICAgIGtleSxcbiAgICAgIHBlZWs6IG15UGVlayxcbiAgICAgIGdldDogbXlHZXQsXG4gICAgICBzZXQ6IG15U2V0LFxuICAgICAgY2xlYW5VcDogKCkgPT4ge30sXG4gICAgICBpbnZhbGlkYXRlLFxuICAgICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHksXG4gICAgICBzaG91bGRSZXN0b3JlRnJvbVNuYXBzaG90czogZmFsc2VcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVnaXN0ZXJOb2RlJDEoe1xuICAgICAga2V5LFxuICAgICAgcGVlazogbXlQZWVrLFxuICAgICAgZ2V0OiBteUdldCxcbiAgICAgIGNsZWFuVXA6ICgpID0+IHt9LFxuICAgICAgaW52YWxpZGF0ZSxcbiAgICAgIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiBvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5LFxuICAgICAgc2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHM6IGZhbHNlXG4gICAgfSk7XG4gIH1cbn1cbi8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG5cblxudmFyIFJlY29pbF9zZWxlY3Rvcl9ORVcgPSBzZWxlY3RvcjtcblxuY29uc3Qge1xuICBsb2FkYWJsZVdpdGhFcnJvcjogbG9hZGFibGVXaXRoRXJyb3IkMixcbiAgbG9hZGFibGVXaXRoUHJvbWlzZTogbG9hZGFibGVXaXRoUHJvbWlzZSQyLFxuICBsb2FkYWJsZVdpdGhWYWx1ZTogbG9hZGFibGVXaXRoVmFsdWUkMlxufSA9IFJlY29pbF9Mb2FkYWJsZTtcblxuXG5cbmNvbnN0IHtcbiAgZ2V0Tm9kZUxvYWRhYmxlOiBnZXROb2RlTG9hZGFibGUkMyxcbiAgcGVla05vZGVMb2FkYWJsZTogcGVla05vZGVMb2FkYWJsZSQzLFxuICBzZXROb2RlVmFsdWU6IHNldE5vZGVWYWx1ZSQ0XG59ID0gUmVjb2lsX0Z1bmN0aW9uYWxDb3JlO1xuXG5jb25zdCB7XG4gIGFkZFRvRGVwZW5kZW5jeU1hcDogYWRkVG9EZXBlbmRlbmN5TWFwJDEsXG4gIG1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwOiBtZXJnZURlcHNJbnRvRGVwZW5kZW5jeU1hcCQxLFxuICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmU6IHNhdmVEZXBlbmRlbmN5TWFwVG9TdG9yZSQ0XG59ID0gUmVjb2lsX0dyYXBoO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkNCxcbiAgUmVjb2lsVmFsdWVOb3RSZWFkeTogUmVjb2lsVmFsdWVOb3RSZWFkeSQzLFxuICByZWdpc3Rlck5vZGU6IHJlZ2lzdGVyTm9kZSQyXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogQWJzdHJhY3RSZWNvaWxWYWx1ZSQ0XG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlOiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMyxcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQ0LFxuICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlOiBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDNcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cblxuXG5cblxuXG5cbmNvbnN0IHtcbiAgc3RhcnRQZXJmQmxvY2s6IHN0YXJ0UGVyZkJsb2NrJDJcbn0gPSBSZWNvaWxfUGVyZm9ybWFuY2VUaW1pbmdzO1xuXG4vLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuY29uc3QgZW1wdHlTZXQkMiA9IE9iamVjdC5mcmVlemUobmV3IFNldCgpKTtcblxuZnVuY3Rpb24gY2FjaGVLZXlGcm9tRGVwVmFsdWVzKGRlcFZhbHVlcykge1xuICBjb25zdCBhbnN3ZXIgPSBbXTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBBcnJheS5mcm9tKGRlcFZhbHVlcy5rZXlzKCkpLnNvcnQoKSkge1xuICAgIGNvbnN0IGxvYWRhYmxlID0gUmVjb2lsX251bGx0aHJvd3MoZGVwVmFsdWVzLmdldChrZXkpKTtcbiAgICBhbnN3ZXIucHVzaChrZXkpO1xuICAgIGFuc3dlci5wdXNoKGxvYWRhYmxlLnN0YXRlKTtcbiAgICBhbnN3ZXIucHVzaChsb2FkYWJsZS5jb250ZW50cyk7XG4gIH1cblxuICByZXR1cm4gYW5zd2VyO1xufVxuXG5jb25zdCBkZXBlbmRlbmN5U3RhY2skMSA9IFtdOyAvLyBmb3IgZGV0ZWN0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cblxuY29uc3Qgd2FpdGluZ1N0b3JlcyQxID0gbmV3IE1hcCgpO1xuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG5cbmZ1bmN0aW9uIHNlbGVjdG9yJDEob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAga2V5LFxuICAgIGdldCxcbiAgICBjYWNoZUltcGxlbWVudGF0aW9uX1VOU1RBQkxFOiBjYWNoZUltcGxlbWVudGF0aW9uXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBzZXQgPSBvcHRpb25zLnNldCAhPSBudWxsID8gb3B0aW9ucy5zZXQgOiB1bmRlZmluZWQ7IC8vIGZsb3dcblxuICBsZXQgY2FjaGUgPSBjYWNoZUltcGxlbWVudGF0aW9uICE9PSBudWxsICYmIGNhY2hlSW1wbGVtZW50YXRpb24gIT09IHZvaWQgMCA/IGNhY2hlSW1wbGVtZW50YXRpb24gOiBSZWNvaWxfY2FjaGVXaXRoUmVmZXJlbmNlRXF1YWxpdHkoKTtcblxuICBmdW5jdGlvbiBpbml0U2VsZWN0b3Ioc3RvcmUpIHtcbiAgICBzdG9yZS5nZXRTdGF0ZSgpLmtub3duU2VsZWN0b3JzLmFkZChrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGV0U3RvcmVCZU5vdGlmaWVkV2hlbkFzeW5jU2V0dGxlcyhzdG9yZSwgbG9hZGFibGUpIHtcbiAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgbGV0IHN0b3JlcyA9IHdhaXRpbmdTdG9yZXMkMS5nZXQobG9hZGFibGUpO1xuXG4gICAgICBpZiAoc3RvcmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgd2FpdGluZ1N0b3JlcyQxLnNldChsb2FkYWJsZSwgc3RvcmVzID0gbmV3IFNldCgpKTtcbiAgICAgIH1cblxuICAgICAgc3RvcmVzLmFkZChzdG9yZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5U3RvcmVzT2ZTZXR0bGVkQXN5bmMob3JpZ2luYWxMb2FkYWJsZSwgbmV3TG9hZGFibGUpIHtcbiAgICBjb25zdCBzdG9yZXMgPSB3YWl0aW5nU3RvcmVzJDEuZ2V0KG9yaWdpbmFsTG9hZGFibGUpO1xuXG4gICAgaWYgKHN0b3JlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGNvbnN0IHN0b3JlIG9mIHN0b3Jlcykge1xuICAgICAgICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDMoc3RvcmUsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDQoa2V5KSwgbmV3TG9hZGFibGUpO1xuICAgICAgfVxuXG4gICAgICB3YWl0aW5nU3RvcmVzJDEuZGVsZXRlKG9yaWdpbmFsTG9hZGFibGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1dEludG9DYWNoZShzdGF0ZSwgY2FjaGVLZXksIGxvYWRhYmxlKSB7XG4gICAgaWYgKGxvYWRhYmxlLnN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgIC8vIFN5bmNocm9ub3VzIHJlc3VsdFxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBpZiAoIW9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICBSZWNvaWxfZGVlcEZyZWV6ZVZhbHVlKGxvYWRhYmxlLmNvbnRlbnRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBc3luY2hyb25vdXMgcmVzdWx0XG4gICAgICAvLyBXaGVuIHRoZSBwcm9taXNlIHJlc29sdmVzLCB3ZSBuZWVkIHRvIHJlcGxhY2UgdGhlIGxvYWRpbmcgc3RhdGUgaW4gdGhlXG4gICAgICAvLyBjYWNoZSBhbmQgZmlyZSBhbnkgZXh0ZXJuYWwgc3Vic2NyaXB0aW9ucyB0byByZS1yZW5kZXIgd2l0aCB0aGUgbmV3IHZhbHVlLlxuICAgICAgbG9hZGFibGUuY29udGVudHMudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgaWYgKCFvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBSZWNvaWxfZGVlcEZyZWV6ZVZhbHVlKHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3TG9hZGFibGUgPSBsb2FkYWJsZVdpdGhWYWx1ZSQyKHJlc3VsdCk7IC8vIElmIHRoZSB2YWx1ZSBpcyBub3cgcmVzb2x2ZWQsIHRoZW4gdXBkYXRlIHRoZSBjYWNoZSB3aXRoIHRoZSBuZXcgdmFsdWVcblxuICAgICAgICBjYWNoZSA9IGNhY2hlLnNldChjYWNoZUtleSwgbmV3TG9hZGFibGUpOyAvLyBUT0RPIFBvdGVudGlhbCBvcHRpbWl6YXRpb246IEkgdGhpbmsgdGhpcyBpcyB1cGRhdGluZyB0aGUgY2FjaGVcbiAgICAgICAgLy8gd2l0aCBhIGNhY2hlS2V5IG9mIHRoZSBkZXAgd2hlbiBpdCB3YXNuJ3QgcmVhZHkgeWV0LiAgV2UgY291bGQgYWxzb1xuICAgICAgICAvLyB0aGVvcmV0aWNhbGx5IHB1dCB0aGUgcmVzdWx0IGluIHRoZSBjYWNoZSBmb3IgYSBjYWNoZUtleSB3aXRoIHRoZVxuICAgICAgICAvLyBkZXAgcmVzb2x2ZWQuICBJZiB3ZSBoYWQgc29tZSB3YXkgb2YgZmlndXJpbmcgb3V0IHdoYXQgdGhhdCBjYWNoZUtleSB3YXMuLlxuICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBvcHRpbWl6YXRpb24gd291bGQgY2hhbmdlIHRoZSB1c2VyIHZpc2libGUgYmVoYXZpb3Igc2xpZ2h0bHksXG4gICAgICAgIC8vIHNlZSB0aGUgdW5pdCB0ZXN0IFwidXNlUmVjb2lsU3RhdGUgLSBzZWxlY3RvciBjYXRjaGluZyBwcm9taXNlIDJcIi5cbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgY2F0Y2hlcyBhbmQgaGFuZGxlcyBwZW5kaW5nIGFzeW5jIGRlcGVuZGVuY2llcywgdGhlbiByZXR1cm5zXG4gICAgICAgIC8vIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhleSBhcmUgYXZhaWxhYmxlIHRoZXJlIGlzIGEgcXVlc3Rpb24gaWZcbiAgICAgICAgLy8gdGhlIHJlc3VsdCBvZiB0aGF0IHByb21pc2Ugc2hvdWxkIGJlIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0b3IsIG9yIGlmXG4gICAgICAgIC8vIHRoZSBzZWxlY3RvciBzaG91bGQgcmUtZXZhbHVhdGUgd2hlbiB0aGUgZGVwZW5kZW5jeSBpcyBhdmFpbGFibGUuXG4gICAgICAgIC8vIElmIHRoZSBwcm9taXNlIHJldHVybmVkIGFuZCB0aGUgcGVuZGluZyBkZXBlbmRlbmN5IHJlc29sdmUgYXQgZGlmZmVyZW50XG4gICAgICAgIC8vIHRpbWVzLCB0aGVuIHRoZSBiZWhhdmlvdXIgaXMgYmV0dGVyIGRlZmluZWQsIGFzIGluIHRoZSB1bml0IHRlc3QsXG4gICAgICAgIC8vIFwidXNlUmVjb2lsU3RhdGUgLSBzZWxlY3RvciBjYXRjaGluZyBwcm9taXNlIGFuZCByZXNvbHZpbmcgYXN5bmNocm9ub3VzbHlcIlxuICAgICAgICAvLyBGaXJlIHN1YnNjcmlwdGlvbnMgdG8gcmUtcmVuZGVyIGFueSBzdWJzY3JpYmVkIGNvbXBvbmVudHMgd2l0aCB0aGUgbmV3IHZhbHVlLlxuICAgICAgICAvLyBUaGUgc3RvcmUgdXNlcyB0aGUgQ1VSUkVOVCBzdGF0ZSwgbm90IHRoZSBvbGQgc3RhdGUgZnJvbSB3aGljaFxuICAgICAgICAvLyB0aGlzIHdhcyBjYWxsZWQuICBUaGF0IHN0YXRlIGxpa2VseSBkb2Vzbid0IGhhdmUgdGhlIHN1YnNjcmlwdGlvbnMgc2F2ZWQgeWV0LlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgaGF2ZSB0byBzZXQgdGhlIHZhbHVlIGZvciB0aGlzIGtleSwgbm90IGp1c3Qgbm90aWZ5XG4gICAgICAgIC8vIGNvbXBvbmVudHMsIHNvIHRoYXQgdGhlcmUgd2lsbCBiZSBhIG5ldyB2ZXJzaW9uIGZvciB1c2VNdXRhYmxlU291cmNlLlxuXG4gICAgICAgIG5vdGlmeVN0b3Jlc09mU2V0dGxlZEFzeW5jKGxvYWRhYmxlLCBuZXdMb2FkYWJsZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIC8vIFRPRE8gRmlndXJlIG91dCB3aHkgd2UgYXJlIGNhdGNoaW5nIHByb21pc2VzIGhlcmUgdmVyc3VzIGV2YWx1YXRlU2VsZWN0b3JGdW5jdGlvblxuICAgICAgICAvLyBPSCwgSSBzZWUgd2h5LiAgT2ssIHdvcmsgb24gdGhpcy5cbiAgICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UoZXJyb3IpKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIGlmICghb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZShlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIFRoZSBhc3luYyB2YWx1ZSB3YXMgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvci4gIFVwZGF0ZSB0aGUgY2FjaGUgd2l0aFxuICAgICAgICAvLyB0aGUgZXJyb3IgYW5kIGZpcmUgc3Vic2NyaXB0aW9ucyB0byByZS1yZW5kZXIuXG5cblxuICAgICAgICBjb25zdCBuZXdMb2FkYWJsZSA9IGxvYWRhYmxlV2l0aEVycm9yJDIoZXJyb3IpO1xuICAgICAgICBjYWNoZSA9IGNhY2hlLnNldChjYWNoZUtleSwgbmV3TG9hZGFibGUpO1xuICAgICAgICBub3RpZnlTdG9yZXNPZlNldHRsZWRBc3luYyhsb2FkYWJsZSwgbmV3TG9hZGFibGUpO1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjYWNoZSA9IGNhY2hlLnNldChjYWNoZUtleSwgbG9hZGFibGUpO1xuXG4gICAgaWYgKGxvYWRhYmxlLnN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgIHN0YXRlLmF0b21WYWx1ZXMuc2V0KGtleSwgbG9hZGFibGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZyb21DYWNoZU9yRXZhbHVhdGUoc3RvcmUsIHN0YXRlKSB7XG4gICAgdmFyIF9zdG9yZSRnZXRHcmFwaCRub2RlRDtcblxuICAgIGNvbnN0IGRlcGVuZGVuY3lNYXAgPSBuZXcgTWFwKCk7IC8vIEZpcnN0LCBnZXQgdGhlIGN1cnJlbnQgZGVwcyBmb3IgdGhpcyBzZWxlY3RvclxuXG4gICAgY29uc3QgY3VycmVudERlcHMgPSAoX3N0b3JlJGdldEdyYXBoJG5vZGVEID0gc3RvcmUuZ2V0R3JhcGgoc3RhdGUudmVyc2lvbikubm9kZURlcHMuZ2V0KGtleSkpICE9PSBudWxsICYmIF9zdG9yZSRnZXRHcmFwaCRub2RlRCAhPT0gdm9pZCAwID8gX3N0b3JlJGdldEdyYXBoJG5vZGVEIDogZW1wdHlTZXQkMjtcbiAgICBjb25zdCBkZXBWYWx1ZXMgPSBuZXcgTWFwKEFycmF5LmZyb20oY3VycmVudERlcHMpLnNvcnQoKS5tYXAoZGVwS2V5ID0+IHtcbiAgICAgIGNvbnN0IFtkZXBzLCBsb2FkYWJsZV0gPSBnZXROb2RlTG9hZGFibGUkMyhzdG9yZSwgc3RhdGUsIGRlcEtleSk7XG4gICAgICBtZXJnZURlcHNJbnRvRGVwZW5kZW5jeU1hcCQxKGRlcHMsIGRlcGVuZGVuY3lNYXApO1xuICAgICAgc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlJDQoZGVwZW5kZW5jeU1hcCwgc3RvcmUsIHN0YXRlLnZlcnNpb24pO1xuICAgICAgcmV0dXJuIFtkZXBLZXksIGxvYWRhYmxlXTtcbiAgICB9KSk7IC8vIEFsd2F5cyBjYWNoZSBhbmQgZXZhbHVhdGUgYSBzZWxlY3RvclxuICAgIC8vIEl0IG1heSBwcm92aWRlIGEgcmVzdWx0IGV2ZW4gd2hlbiBub3QgYWxsIGRlcHMgYXJlIGF2YWlsYWJsZS5cblxuICAgIGNvbnN0IGNhY2hlS2V5ID0gY2FjaGVLZXlGcm9tRGVwVmFsdWVzKGRlcFZhbHVlcyk7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblxuICAgIGlmIChjYWNoZWQgIT0gbnVsbCkge1xuICAgICAgbGV0U3RvcmVCZU5vdGlmaWVkV2hlbkFzeW5jU2V0dGxlcyhzdG9yZSwgY2FjaGVkKTtcbiAgICAgIHJldHVybiBbZGVwZW5kZW5jeU1hcCwgY2FjaGVkXTtcbiAgICB9IC8vIENhY2hlIG1pc3MsIGNvbXB1dGUgdGhlIHZhbHVlXG5cblxuICAgIGNvbnN0IFtkZXBzLCBsb2FkYWJsZSwgbmV3RGVwVmFsdWVzXSA9IGV2YWx1YXRlU2VsZWN0b3JGdW5jdGlvbihzdG9yZSwgc3RhdGUpO1xuICAgIG1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwJDEoZGVwcywgZGVwZW5kZW5jeU1hcCk7XG4gICAgc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlJDQoZGVwZW5kZW5jeU1hcCwgc3RvcmUsIHN0YXRlLnZlcnNpb24pOyAvLyBTYXZlIHJlc3VsdCBpbiBjYWNoZVxuXG4gICAgY29uc3QgbmV3Q2FjaGVLZXkgPSBjYWNoZUtleUZyb21EZXBWYWx1ZXMobmV3RGVwVmFsdWVzKTtcbiAgICBsZXRTdG9yZUJlTm90aWZpZWRXaGVuQXN5bmNTZXR0bGVzKHN0b3JlLCBsb2FkYWJsZSk7XG4gICAgcHV0SW50b0NhY2hlKHN0YXRlLCBuZXdDYWNoZUtleSwgbG9hZGFibGUpO1xuICAgIHJldHVybiBbZGVwZW5kZW5jeU1hcCwgbG9hZGFibGVdO1xuICB9XG5cbiAgZnVuY3Rpb24gZXZhbHVhdGVTZWxlY3RvckZ1bmN0aW9uKHN0b3JlLCBzdGF0ZSkge1xuICAgIGNvbnN0IGVuZFBlcmZCbG9jayA9IHN0YXJ0UGVyZkJsb2NrJDIoa2V5KTtcbiAgICBjb25zdCBkZXBWYWx1ZXMgPSBuZXcgTWFwKCk7IC8vIGtleSAtPiB2YWx1ZSBmb3Igb3VyIGRlcHNcblxuICAgIGNvbnN0IGRlcGVuZGVuY3lNYXAgPSBuZXcgTWFwKCk7IC8vIG5vZGUgLT4gbm9kZXMsIHBhcnQgb2Ygb3ZlcmFsbCBkZXAgbWFwLlxuXG4gICAgZnVuY3Rpb24gZ2V0UmVjb2lsVmFsdWUoe1xuICAgICAga2V5OiBkZXBLZXlcbiAgICB9KSB7XG4gICAgICBhZGRUb0RlcGVuZGVuY3lNYXAkMShrZXksIGRlcEtleSwgZGVwZW5kZW5jeU1hcCk7XG4gICAgICBjb25zdCBbZGVwcywgbG9hZGFibGVdID0gZ2V0Tm9kZUxvYWRhYmxlJDMoc3RvcmUsIHN0YXRlLCBkZXBLZXkpO1xuICAgICAgZGVwVmFsdWVzLnNldChkZXBLZXksIGxvYWRhYmxlKTtcbiAgICAgIG1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwJDEoZGVwcywgZGVwZW5kZW5jeU1hcCk7XG4gICAgICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUkNChkZXBlbmRlbmN5TWFwLCBzdG9yZSwgc3RhdGUudmVyc2lvbik7XG5cbiAgICAgIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJykge1xuICAgICAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50czsgLy8gUHJvbWlzZSBvciBlcnJvclxuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgYmlnIG1vbWVudCFcbiAgICAgIGNvbnN0IG91dHB1dCA9IGdldCh7XG4gICAgICAgIGdldDogZ2V0UmVjb2lsVmFsdWVcbiAgICAgIH0pOyAvLyBUT0RPIEFsbG93IHVzZXIgdG8gYWxzbyByZXR1cm4gTG9hZGFibGVzIGZvciBpbXByb3ZlZCBjb21wb3NhYmlsaXR5XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGlzUmVjb2lsVmFsdWUkNChvdXRwdXQpID8gZ2V0UmVjb2lsVmFsdWUob3V0cHV0KSA6IG91dHB1dDtcbiAgICAgIGxldCBsb2FkYWJsZTtcblxuICAgICAgaWYgKCFSZWNvaWxfaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgLy8gVGhlIHNlbGVjdG9yIHJldHVybmVkIGEgc2ltcGxlIHN5bmNocm9ub3VzIHZhbHVlLCBzbyBsZXQncyB1c2UgaXQhXG4gICAgICAgIGVuZFBlcmZCbG9jaygpO1xuICAgICAgICBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aFZhbHVlJDIocmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoZSB1c2VyIHJldHVybmVkIGEgcHJvbWlzZSBmb3IgYW4gYXN5bmNocm9ub3VzIHNlbGVjdG9yLiAgVGhpcyB3aWxsXG4gICAgICAgIC8vIHJlc29sdmUgdG8gdGhlIHByb3BlciB2YWx1ZSBvZiB0aGUgc2VsZWN0b3Igd2hlbiBhdmFpbGFibGUuXG4gICAgICAgIGxvYWRhYmxlID0gbG9hZGFibGVXaXRoUHJvbWlzZSQyKHJlc3VsdC5maW5hbGx5KGVuZFBlcmZCbG9jaykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW2RlcGVuZGVuY3lNYXAsIGxvYWRhYmxlLCBkZXBWYWx1ZXNdO1xuICAgIH0gY2F0Y2ggKGVycm9yT3JEZXBQcm9taXNlKSB7XG4gICAgICAvLyBYWFggd2h5IHdhcyB0aGlzIGNoYW5nZWQgdG8gbm90IHVzZSBpc1Byb21pc2U/XG4gICAgICBjb25zdCBpc1AgPSBlcnJvck9yRGVwUHJvbWlzZS50aGVuICE9PSB1bmRlZmluZWQ7XG4gICAgICBsZXQgbG9hZGFibGU7XG5cbiAgICAgIGlmICghaXNQKSB7XG4gICAgICAgIC8vIFRoZXJlIHdhcyBhIHN5bmNocm9ub3VzIGVycm9yIGluIHRoZSBldmFsdWF0aW9uXG4gICAgICAgIGVuZFBlcmZCbG9jaygpO1xuICAgICAgICBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aEVycm9yJDIoZXJyb3JPckRlcFByb21pc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgYW4gYXN5bmNocm9ub3VzIGRlcGVuZGVuY3kgd2FzIG5vdCByZWFkeSwgdGhlbiByZXR1cm4gYSBwcm9taXNlIHRoYXRcbiAgICAgICAgLy8gd2lsbCByZXNvbHZlIHdoZW4gd2UgZmluYWxseSBkbyBoYXZlIGEgcmVhbCB2YWx1ZSBvciBlcnJvciBmb3IgdGhlIHNlbGVjdG9yLlxuICAgICAgICBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aFByb21pc2UkMihlcnJvck9yRGVwUHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAvLyBOb3cgdGhhdCBpdHMgZGVwcyBhcmUgcmVhZHksIHJlLWV2YWx1YXRlIHRoZSBzZWxlY3RvciAoYW5kXG4gICAgICAgICAgLy8gcmVjb3JkIGFueSBuZXdseS1kaXNjb3ZlcmVkIGRlcGVuZGVuY2llcyBpbiB0aGUgU3RvcmUpOlxuICAgICAgICAgIGNvbnN0IGxvYWRhYmxlID0gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDMoc3RvcmUsIG5ldyBBYnN0cmFjdFJlY29pbFZhbHVlJDQoa2V5KSk7XG5cbiAgICAgICAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICAgIH0gLy8gRWl0aGVyIHRoZSByZS10cnkgcHJvdmlkZWQgYSB2YWx1ZSwgd2hpY2ggd2Ugd2lsbCB1c2UsIG9yIGl0XG4gICAgICAgICAgLy8gZ290IGJsb2NrZWQgYWdhaW4uICBJbiB0aGF0IGNhc2UgdGhpcyBpcyBhIHByb21pc2UgYW5kIHdlJ2xsIHRyeSBhZ2Fpbi5cblxuXG4gICAgICAgICAgcmV0dXJuIGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICB9KS5maW5hbGx5KGVuZFBlcmZCbG9jaykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW2RlcGVuZGVuY3lNYXAsIGxvYWRhYmxlLCBkZXBWYWx1ZXNdO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRldGVjdENpcmN1bGFyRGVwZW5kZW5jaWVzKGZuKSB7XG4gICAgaWYgKGRlcGVuZGVuY3lTdGFjayQxLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgUmVjb2lsIHNlbGVjdG9yIGhhcyBjaXJjdWxhciBkZXBlbmRlbmNpZXM6ICR7ZGVwZW5kZW5jeVN0YWNrJDEuc2xpY2UoZGVwZW5kZW5jeVN0YWNrJDEuaW5kZXhPZihrZXkpKS5qb2luKCcgXFx1MjE5MiAnKX1gO1xuICAgICAgcmV0dXJuIFtuZXcgTWFwKCksIGxvYWRhYmxlV2l0aEVycm9yJDIobmV3IEVycm9yKG1lc3NhZ2UpKV07XG4gICAgfVxuXG4gICAgZGVwZW5kZW5jeVN0YWNrJDEucHVzaChrZXkpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBkZXBlbmRlbmN5U3RhY2skMS5wb3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBteVBlZWsoc3RvcmUsIHN0YXRlKSB7XG4gICAgdmFyIF9zdG9yZSRnZXRHcmFwaCRub2RlRDI7XG5cbiAgICAvLyBGaXJzdCwgZ2V0IHRoZSBjdXJyZW50IGRlcHMgZm9yIHRoaXMgc2VsZWN0b3JcbiAgICBjb25zdCBjdXJyZW50RGVwcyA9IChfc3RvcmUkZ2V0R3JhcGgkbm9kZUQyID0gc3RvcmUuZ2V0R3JhcGgoc3RhdGUudmVyc2lvbikubm9kZURlcHMuZ2V0KGtleSkpICE9PSBudWxsICYmIF9zdG9yZSRnZXRHcmFwaCRub2RlRDIgIT09IHZvaWQgMCA/IF9zdG9yZSRnZXRHcmFwaCRub2RlRDIgOiBlbXB0eVNldCQyO1xuICAgIGNvbnN0IGRlcFZhbHVlcyA9IG5ldyBNYXAoQXJyYXkuZnJvbShjdXJyZW50RGVwcykuc29ydCgpLm1hcChkZXBLZXkgPT4gW2RlcEtleSwgcGVla05vZGVMb2FkYWJsZSQzKHN0b3JlLCBzdGF0ZSwgZGVwS2V5KV0pKTtcbiAgICBjb25zdCBjYWNoZURlcFZhbHVlcyA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAoY29uc3QgW2RlcEtleSwgZGVwVmFsdWVdIG9mIGRlcFZhbHVlcy5lbnRyaWVzKCkpIHtcbiAgICAgIGlmIChkZXBWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlRGVwVmFsdWVzLnNldChkZXBLZXksIGRlcFZhbHVlKTtcbiAgICB9IC8vIEFsd2F5cyBjYWNoZSBhbmQgZXZhbHVhdGUgYSBzZWxlY3RvclxuICAgIC8vIEl0IG1heSBwcm92aWRlIGEgcmVzdWx0IGV2ZW4gd2hlbiBub3QgYWxsIGRlcHMgYXJlIGF2YWlsYWJsZS5cblxuXG4gICAgY29uc3QgY2FjaGVLZXkgPSBjYWNoZUtleUZyb21EZXBWYWx1ZXMoY2FjaGVEZXBWYWx1ZXMpO1xuICAgIHJldHVybiBjYWNoZS5nZXQoY2FjaGVLZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52YWxpZGF0ZShzdGF0ZSkge1xuICAgIHN0YXRlLmF0b21WYWx1ZXMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBteUdldChzdG9yZSwgc3RhdGUpIHtcbiAgICBpbml0U2VsZWN0b3Ioc3RvcmUpOyAvLyBGaXJzdC1sZXZlbCBjYWNoZTogSGF2ZSB3ZSBhbHJlYWR5IGV2YWx1YXRlZCB0aGUgc2VsZWN0b3Igc2luY2UgYmVpbmdcbiAgICAvLyBpbnZhbGlkYXRlZCBkdWUgdG8gYSBkZXBlbmRlbmN5IGNoYW5naW5nP1xuXG4gICAgY29uc3QgY2FjaGVkID0gc3RhdGUuYXRvbVZhbHVlcy5nZXQoa2V5KTtcblxuICAgIGlmIChjYWNoZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFtuZXcgTWFwKCksIGNhY2hlZF07XG4gICAgfSAvLyBTZWNvbmQtbGV2ZWwgY2FjaGUgYmFzZWQgb24gbG9va2luZyB1cCBjdXJyZW50IGRlcGVuZGVuY2llcyBpbiBhIG1hcFxuICAgIC8vIGFuZCBldmFsdWF0aW5nIHNlbGVjdG9yIGlmIG1pc3NpbmcuXG5cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBkZXRlY3RDaXJjdWxhckRlcGVuZGVuY2llcygoKSA9PiBnZXRGcm9tQ2FjaGVPckV2YWx1YXRlKHN0b3JlLCBzdGF0ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0RnJvbUNhY2hlT3JFdmFsdWF0ZShzdG9yZSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZXQgIT0gbnVsbCkge1xuICAgIGZ1bmN0aW9uIG15U2V0KHN0b3JlLCBzdGF0ZSwgbmV3VmFsdWUpIHtcbiAgICAgIGluaXRTZWxlY3RvcihzdG9yZSk7XG4gICAgICBjb25zdCBkZXBlbmRlbmN5TWFwID0gbmV3IE1hcCgpO1xuICAgICAgY29uc3Qgd3JpdGVzID0gbmV3IE1hcCgpO1xuXG4gICAgICBmdW5jdGlvbiBnZXRSZWNvaWxWYWx1ZSh7XG4gICAgICAgIGtleVxuICAgICAgfSkge1xuICAgICAgICBjb25zdCBbZGVwcywgbG9hZGFibGVdID0gZ2V0Tm9kZUxvYWRhYmxlJDMoc3RvcmUsIHN0YXRlLCBrZXkpO1xuICAgICAgICBtZXJnZURlcHNJbnRvRGVwZW5kZW5jeU1hcCQxKGRlcHMsIGRlcGVuZGVuY3lNYXApO1xuXG4gICAgICAgIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJykge1xuICAgICAgICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgICAgfSBlbHNlIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJlY29pbFZhbHVlTm90UmVhZHkkMyhrZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlLCB2YWx1ZU9yVXBkYXRlcikge1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IC8vIGNhc3QgdG8gYW55IGJlY2F1c2Ugd2UgY2FuJ3QgcmVzdHJpY3QgdHlwZSBTIGZyb20gYmVpbmcgYSBmdW5jdGlvbiBpdHNlbGYgd2l0aG91dCBsb3Npbmcgc3VwcG9ydCBmb3Igb3BhcXVlIHR5cGVzXG4gICAgICAgIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgIHZhbHVlT3JVcGRhdGVyKGdldFJlY29pbFZhbHVlKHJlY29pbFN0YXRlKSkgOiB2YWx1ZU9yVXBkYXRlcjtcbiAgICAgICAgY29uc3QgW2RlcHMsIHVwc3RyZWFtV3JpdGVzXSA9IHNldE5vZGVWYWx1ZSQ0KHN0b3JlLCBzdGF0ZSwgcmVjb2lsU3RhdGUua2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIG1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwJDEoZGVwcywgZGVwZW5kZW5jeU1hcCk7XG4gICAgICAgIHVwc3RyZWFtV3JpdGVzLmZvckVhY2goKHYsIGspID0+IHdyaXRlcy5zZXQoaywgdikpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gICAgICAgIHNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDQpO1xuICAgICAgfVxuXG4gICAgICBzZXQoe1xuICAgICAgICBzZXQ6IHNldFJlY29pbFN0YXRlLFxuICAgICAgICBnZXQ6IGdldFJlY29pbFZhbHVlLFxuICAgICAgICByZXNldDogcmVzZXRSZWNvaWxTdGF0ZVxuICAgICAgfSwgbmV3VmFsdWUpO1xuICAgICAgcmV0dXJuIFtkZXBlbmRlbmN5TWFwLCB3cml0ZXNdO1xuICAgIH1cblxuICAgIHJldHVybiByZWdpc3Rlck5vZGUkMih7XG4gICAgICBrZXksXG4gICAgICBwZWVrOiBteVBlZWssXG4gICAgICBnZXQ6IG15R2V0LFxuICAgICAgc2V0OiBteVNldCxcbiAgICAgIGludmFsaWRhdGUsXG4gICAgICBjbGVhblVwOiAoKSA9PiB7fSxcbiAgICAgIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiBvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5LFxuICAgICAgc2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHM6IGZhbHNlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlZ2lzdGVyTm9kZSQyKHtcbiAgICAgIGtleSxcbiAgICAgIHBlZWs6IG15UGVlayxcbiAgICAgIGdldDogbXlHZXQsXG4gICAgICBpbnZhbGlkYXRlLFxuICAgICAgY2xlYW5VcDogKCkgPT4ge30sXG4gICAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSxcbiAgICAgIHNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzOiBmYWxzZVxuICAgIH0pO1xuICB9XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5cbnZhciBSZWNvaWxfc2VsZWN0b3JfT0xEID0gc2VsZWN0b3IkMTtcblxuY29uc3Qgc2VsZWN0b3IkMiA9IFJlY29pbF9na3hfMSgncmVjb2lsX2FzeW5jX3NlbGVjdG9yX3JlZmFjdG9yJykgPyBSZWNvaWxfc2VsZWN0b3JfTkVXIDogUmVjb2lsX3NlbGVjdG9yX09MRDtcbnZhciBSZWNvaWxfc2VsZWN0b3IgPSBzZWxlY3RvciQyO1xuXG4vLyBAZmItb25seTogY29uc3Qge3Njb3BlZEF0b219ID0gcmVxdWlyZSgnUmVjb2lsX1Njb3BlZEF0b20nKTtcbmNvbnN0IHtcbiAgbG9hZGFibGVXaXRoRXJyb3I6IGxvYWRhYmxlV2l0aEVycm9yJDMsXG4gIGxvYWRhYmxlV2l0aFByb21pc2U6IGxvYWRhYmxlV2l0aFByb21pc2UkMyxcbiAgbG9hZGFibGVXaXRoVmFsdWU6IGxvYWRhYmxlV2l0aFZhbHVlJDNcbn0gPSBSZWNvaWxfTG9hZGFibGU7XG5cbmNvbnN0IHtcbiAgREVGQVVMVF9WQUxVRTogREVGQVVMVF9WQUxVRSQ1LFxuICBEZWZhdWx0VmFsdWU6IERlZmF1bHRWYWx1ZSQyLFxuICByZWdpc3Rlck5vZGU6IHJlZ2lzdGVyTm9kZSQzXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQ1XG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQ6IG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkJDEsXG4gIHNldFJlY29pbFZhbHVlOiBzZXRSZWNvaWxWYWx1ZSQzLFxuICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlOiBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDRcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGJhc2VBdG9tKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGtleSxcbiAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRTogcGVyc2lzdGVuY2VcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBkZWZhdWx0TG9hZGFibGUgPSBSZWNvaWxfaXNQcm9taXNlKG9wdGlvbnMuZGVmYXVsdCkgPyBsb2FkYWJsZVdpdGhQcm9taXNlJDMob3B0aW9ucy5kZWZhdWx0LnRoZW4odmFsdWUgPT4ge1xuICAgIGRlZmF1bHRMb2FkYWJsZSA9IGxvYWRhYmxlV2l0aFZhbHVlJDModmFsdWUpOyAvLyBUT0RPIFRlbXBvcmFyeSBkaXNhYmxlIEZsb3cgZHVlIHRvIHBlbmRpbmcgc2VsZWN0b3JfTkVXIHJlZmFjdG9yXG5cbiAgICBjb25zdCBwcm9taXNlSW5mbyA9IHtcbiAgICAgIF9fa2V5OiBrZXksXG4gICAgICBfX3ZhbHVlOiB2YWx1ZVxuICAgIH07XG4gICAgcmV0dXJuIHByb21pc2VJbmZvO1xuICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgZGVmYXVsdExvYWRhYmxlID0gbG9hZGFibGVXaXRoRXJyb3IkMyhlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pKSA6IGxvYWRhYmxlV2l0aFZhbHVlJDMob3B0aW9ucy5kZWZhdWx0KTtcbiAgbGV0IGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUgPSB1bmRlZmluZWQ7IC8vIENsZWFudXAgaGFuZGxlcnMgZm9yIHRoaXMgYXRvbVxuICAvLyBSZWx5IG9uIHN0YWJsZSByZWZlcmVuY2UgZXF1YWxpdHkgb2YgdGhlIHN0b3JlIHRvIHVzZSBpdCBhcyBhIGtleSBwZXIgPFJlY29pbFJvb3Q+XG5cbiAgY29uc3QgY2xlYW51cEVmZmVjdHNCeVN0b3JlID0gbmV3IE1hcCgpO1xuXG4gIGZ1bmN0aW9uIHdyYXBQZW5kaW5nUHJvbWlzZShzdG9yZSwgcHJvbWlzZSkge1xuICAgIGNvbnN0IHdyYXBwZWRQcm9taXNlID0gcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQsIF9zdGF0ZSRhdG9tVmFsdWVzJGdldDtcblxuICAgICAgY29uc3Qgc3RhdGUgPSAoX3N0b3JlJGdldFN0YXRlJG5leHRUID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgOiBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlO1xuXG4gICAgICBpZiAoKChfc3RhdGUkYXRvbVZhbHVlcyRnZXQgPSBzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdGF0ZSRhdG9tVmFsdWVzJGdldC5jb250ZW50cykgPT09IHdyYXBwZWRQcm9taXNlKSB7XG4gICAgICAgIHNldFJlY29pbFZhbHVlJDMoc3RvcmUsIG5vZGUsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX19rZXk6IGtleSxcbiAgICAgICAgX192YWx1ZTogdmFsdWVcbiAgICAgIH07XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgdmFyIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDIsIF9zdGF0ZSRhdG9tVmFsdWVzJGdldDI7XG5cbiAgICAgIGNvbnN0IHN0YXRlID0gKF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDIgPSBzdG9yZS5nZXRTdGF0ZSgpLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyIDogc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTtcblxuICAgICAgaWYgKCgoX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MiA9IHN0YXRlLmF0b21WYWx1ZXMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdGF0ZSRhdG9tVmFsdWVzJGdldDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdGF0ZSRhdG9tVmFsdWVzJGdldDIuY29udGVudHMpID09PSB3cmFwcGVkUHJvbWlzZSkge1xuICAgICAgICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDQoc3RvcmUsIG5vZGUsIGxvYWRhYmxlV2l0aEVycm9yJDMoZXJyb3IpKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSk7XG4gICAgcmV0dXJuIHdyYXBwZWRQcm9taXNlO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEF0b20oc3RvcmUsIGluaXRTdGF0ZSwgdHJpZ2dlcikge1xuICAgIGlmIChzdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMuYWRkKGtleSk7IC8vIFNldHVwIGFzeW5jIGRlZmF1bHRzIHRvIG5vdGlmeSBzdWJzY3JpYmVycyB3aGVuIHRoZXkgcmVzb2x2ZVxuXG4gICAgaWYgKGRlZmF1bHRMb2FkYWJsZS5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICBmdW5jdGlvbiBub3RpZnlEZWZhdWx0U3Vic2NyaWJlcnMoKSB7XG4gICAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzO1xuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gKF9zdG9yZSRnZXRTdGF0ZSRuZXh0VDMgPSBzdG9yZS5nZXRTdGF0ZSgpLm5leHRUcmVlKSAhPT0gbnVsbCAmJiBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzIDogc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTtcblxuICAgICAgICBpZiAoIXN0YXRlLmF0b21WYWx1ZXMuaGFzKGtleSkpIHtcbiAgICAgICAgICBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZCQxKHN0b3JlLCBub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZWZhdWx0TG9hZGFibGUuY29udGVudHMudGhlbihub3RpZnlEZWZhdWx0U3Vic2NyaWJlcnMpLmNhdGNoKG5vdGlmeURlZmF1bHRTdWJzY3JpYmVycyk7XG4gICAgfSAvLyBSdW4gQXRvbSBFZmZlY3RzXG4gICAgLy8gVGhpcyBzdGF0ZSBpcyBzY29wZWQgYnkgU3RvcmUsIHNpbmNlIHRoaXMgaXMgaW4gdGhlIGluaXRBdG9tKCkgY2xvc3VyZVxuXG5cbiAgICBsZXQgaW5pdFZhbHVlID0gREVGQVVMVF9WQUxVRSQ1O1xuICAgIGxldCBwZW5kaW5nU2V0U2VsZiA9IG51bGw7XG5cbiAgICBpZiAob3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFICE9IG51bGwpIHtcbiAgICAgIGxldCBkdXJpbmdJbml0ID0gdHJ1ZTtcblxuICAgICAgY29uc3Qgc2V0U2VsZiA9IGVmZmVjdCA9PiB2YWx1ZU9yVXBkYXRlciA9PiB7XG4gICAgICAgIGlmIChkdXJpbmdJbml0KSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gaW5pdFZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIgfHwgUmVjb2lsX2lzUHJvbWlzZShpbml0VmFsdWUpID8gZGVmYXVsdExvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnID8gZGVmYXVsdExvYWRhYmxlLmNvbnRlbnRzIDogREVGQVVMVF9WQUxVRSQ1IDogaW5pdFZhbHVlO1xuICAgICAgICAgIGluaXRWYWx1ZSA9IHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IC8vIGNhc3QgdG8gYW55IGJlY2F1c2Ugd2UgY2FuJ3QgcmVzdHJpY3QgVCBmcm9tIGJlaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBsb3Npbmcgc3VwcG9ydCBmb3Igb3BhcXVlIHR5cGVzXG4gICAgICAgICAgdmFsdWVPclVwZGF0ZXIoY3VycmVudFZhbHVlKSAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgICAgICAgICA6IHZhbHVlT3JVcGRhdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKHZhbHVlT3JVcGRhdGVyKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXR0aW5nIGF0b21zIHRvIGFzeW5jIHZhbHVlcyBpcyBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZU9yVXBkYXRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcGVuZGluZ1NldFNlbGYgPSB7XG4gICAgICAgICAgICAgIGVmZmVjdCxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlT3JVcGRhdGVyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldFJlY29pbFZhbHVlJDMoc3RvcmUsIG5vZGUsIHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IGN1cnJlbnRWYWx1ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IC8vIGNhc3QgdG8gYW55IGJlY2F1c2Ugd2UgY2FuJ3QgcmVzdHJpY3QgVCBmcm9tIGJlaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBsb3Npbmcgc3VwcG9ydCBmb3Igb3BhcXVlIHR5cGVzXG4gICAgICAgICAgICB2YWx1ZU9yVXBkYXRlcihjdXJyZW50VmFsdWUpOyAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuICAgICAgICAgICAgcGVuZGluZ1NldFNlbGYgPSB7XG4gICAgICAgICAgICAgIGVmZmVjdCxcbiAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgICAgICAgIH0gOiB2YWx1ZU9yVXBkYXRlcik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc2V0U2VsZiA9IGVmZmVjdCA9PiAoKSA9PiBzZXRTZWxmKGVmZmVjdCkoREVGQVVMVF9WQUxVRSQ1KTtcblxuICAgICAgY29uc3Qgb25TZXQgPSBlZmZlY3QgPT4gaGFuZGxlciA9PiB7XG4gICAgICAgIHN0b3JlLnN1YnNjcmliZVRvVHJhbnNhY3Rpb25zKGN1cnJlbnRTdG9yZSA9PiB7XG4gICAgICAgICAgdmFyIF9wZW5kaW5nU2V0U2VsZjM7XG5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGN1cnJlbnRUcmVlLFxuICAgICAgICAgICAgcHJldmlvdXNUcmVlXG4gICAgICAgICAgfSA9IGN1cnJlbnRTdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAgICAgaWYgKCFwcmV2aW91c1RyZWUpIHtcbiAgICAgICAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignVHJhbnNhY3Rpb24gc3Vic2NyaWJlcnMgbm90aWZpZWQgd2l0aG91dCBhIG5leHQgdHJlZSBiZWluZyBwcmVzZW50IC0tIHRoaXMgaXMgYSBidWcgaW4gUmVjb2lsJyk7XG4gICAgICAgICAgICBwcmV2aW91c1RyZWUgPSBjdXJyZW50VHJlZTsgLy8gYXR0ZW1wdCB0byB0cnVuZGxlIG9uXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgbmV3TG9hZGFibGUgPSBjdXJyZW50VHJlZS5hdG9tVmFsdWVzLmdldChrZXkpO1xuXG4gICAgICAgICAgaWYgKG5ld0xvYWRhYmxlID09IG51bGwgfHwgbmV3TG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgICAgIHZhciBfcHJldmlvdXNUcmVlJGF0b21WYWwsIF9wZW5kaW5nU2V0U2VsZiwgX3BlbmRpbmdTZXRTZWxmMjtcblxuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBuZXdMb2FkYWJsZSAhPSBudWxsID8gbmV3TG9hZGFibGUuY29udGVudHMgOiBERUZBVUxUX1ZBTFVFJDU7XG4gICAgICAgICAgICBjb25zdCBvbGRMb2FkYWJsZSA9IChfcHJldmlvdXNUcmVlJGF0b21WYWwgPSBwcmV2aW91c1RyZWUuYXRvbVZhbHVlcy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX3ByZXZpb3VzVHJlZSRhdG9tVmFsICE9PSB2b2lkIDAgPyBfcHJldmlvdXNUcmVlJGF0b21WYWwgOiBkZWZhdWx0TG9hZGFibGU7XG4gICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IG9sZExvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnID8gb2xkTG9hZGFibGUuY29udGVudHMgOiBERUZBVUxUX1ZBTFVFJDU7IC8vIFRPRE8gVGhpcyBpc24ndCBhY3R1YWxseSB2YWxpZCwgdXNlIGFzIGEgcGxhY2Vob2xkZXIgZm9yIG5vdy5cbiAgICAgICAgICAgIC8vIElnbm9yZSBhdG9tIHZhbHVlIGNoYW5nZXMgdGhhdCB3ZXJlIHNldCB2aWEgc2V0U2VsZigpIGluIHRoZSBzYW1lIGVmZmVjdC5cbiAgICAgICAgICAgIC8vIFdlIHdpbGwgc3RpbGwgcHJvcGVybHkgY2FsbCB0aGUgaGFuZGxlciBpZiB0aGVyZSB3YXMgYSBzdWJzZXF1ZW50XG4gICAgICAgICAgICAvLyBzZXQgZnJvbSBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBhdG9tIGVmZmVjdCB3aGljaCB3YXMgYmF0Y2hlZFxuICAgICAgICAgICAgLy8gd2l0aCB0aGUgYHNldFNlbGYoKWAgY2FsbC4gIEhvd2V2ZXIsIHdlIG1heSBpbmNvcnJlY3RseSBpZ25vcmVcbiAgICAgICAgICAgIC8vIHRoZSBoYW5kbGVyIGlmIHRoZSBzdWJzZXF1ZW50IGJhdGNoZWQgY2FsbCBoYXBwZW5zIHRvIHNldCB0aGVcbiAgICAgICAgICAgIC8vIGF0b20gdG8gdGhlIGV4YWN0IHNhbWUgdmFsdWUgYXMgdGhlIGBzZXRTZWxmKClgLiAgIEJ1dCwgaW4gdGhhdFxuICAgICAgICAgICAgLy8gY2FzZSwgaXQgd2FzIGtpbmQgb2YgYSBub29wLCBzbyB0aGUgc2VtYW50aWNzIGFyZSBkZWJhdGFibGUuLlxuXG4gICAgICAgICAgICBpZiAoKChfcGVuZGluZ1NldFNlbGYgPSBwZW5kaW5nU2V0U2VsZikgPT09IG51bGwgfHwgX3BlbmRpbmdTZXRTZWxmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGVuZGluZ1NldFNlbGYuZWZmZWN0KSAhPT0gZWZmZWN0IHx8ICgoX3BlbmRpbmdTZXRTZWxmMiA9IHBlbmRpbmdTZXRTZWxmKSA9PT0gbnVsbCB8fCBfcGVuZGluZ1NldFNlbGYyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGVuZGluZ1NldFNlbGYyLnZhbHVlKSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgaGFuZGxlcihuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgoKF9wZW5kaW5nU2V0U2VsZjMgPSBwZW5kaW5nU2V0U2VsZikgPT09IG51bGwgfHwgX3BlbmRpbmdTZXRTZWxmMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BlbmRpbmdTZXRTZWxmMy5lZmZlY3QpID09PSBlZmZlY3QpIHtcbiAgICAgICAgICAgIHBlbmRpbmdTZXRTZWxmID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGtleSk7XG4gICAgICB9O1xuXG4gICAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiAoX29wdGlvbnMkZWZmZWN0c19VTlNUID0gb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRlZmZlY3RzX1VOU1QgIT09IHZvaWQgMCA/IF9vcHRpb25zJGVmZmVjdHNfVU5TVCA6IFtdKSB7XG4gICAgICAgIHZhciBfb3B0aW9ucyRlZmZlY3RzX1VOU1Q7XG5cbiAgICAgICAgY29uc3QgY2xlYW51cCA9IGVmZmVjdCh7XG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICB0cmlnZ2VyLFxuICAgICAgICAgIHNldFNlbGY6IHNldFNlbGYoZWZmZWN0KSxcbiAgICAgICAgICByZXNldFNlbGY6IHJlc2V0U2VsZihlZmZlY3QpLFxuICAgICAgICAgIG9uU2V0OiBvblNldChlZmZlY3QpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgICAgICBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuc2V0KHN0b3JlLCBjbGVhbnVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJpbmdJbml0ID0gZmFsc2U7XG4gICAgfSAvLyBNdXRhdGUgaW5pdGlhbCBzdGF0ZSBpbiBwbGFjZSBzaW5jZSB3ZSBrbm93IHRoZXJlIGFyZSBubyBvdGhlciBzdWJzY3JpYmVyc1xuICAgIC8vIHNpbmNlIHdlIGFyZSB0aGUgb25lcyBpbml0aWFsaXppbmcgb24gZmlyc3QgdXNlLlxuXG5cbiAgICBpZiAoIShpbml0VmFsdWUgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMikpIHtcbiAgICAgIGluaXRTdGF0ZS5hdG9tVmFsdWVzLnNldChrZXksIFJlY29pbF9pc1Byb21pc2UoaW5pdFZhbHVlKSA/IGxvYWRhYmxlV2l0aFByb21pc2UkMyh3cmFwUGVuZGluZ1Byb21pc2Uoc3RvcmUsIGluaXRWYWx1ZSkpIDogbG9hZGFibGVXaXRoVmFsdWUkMyhpbml0VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBteVBlZWsoX3N0b3JlLCBzdGF0ZSkge1xuICAgIHZhciBfcmVmLCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQzLCBfY2FjaGVkQW5zd2VyRm9yVW52YWw7XG5cbiAgICByZXR1cm4gKF9yZWYgPSAoX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MyA9IHN0YXRlLmF0b21WYWx1ZXMuZ2V0KGtleSkpICE9PSBudWxsICYmIF9zdGF0ZSRhdG9tVmFsdWVzJGdldDMgIT09IHZvaWQgMCA/IF9zdGF0ZSRhdG9tVmFsdWVzJGdldDMgOiAoX2NhY2hlZEFuc3dlckZvclVudmFsID0gY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSkgPT09IG51bGwgfHwgX2NhY2hlZEFuc3dlckZvclVudmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY2FjaGVkQW5zd2VyRm9yVW52YWxbMV0pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9hZGFibGU7XG4gIH1cblxuICBmdW5jdGlvbiBteUdldChzdG9yZSwgc3RhdGUpIHtcbiAgICBpbml0QXRvbShzdG9yZSwgc3RhdGUsICdnZXQnKTtcblxuICAgIGlmIChzdGF0ZS5hdG9tVmFsdWVzLmhhcyhrZXkpKSB7XG4gICAgICAvLyBBdG9tIHZhbHVlIGlzIHN0b3JlZCBpbiBzdGF0ZTpcbiAgICAgIHJldHVybiBbbmV3IE1hcCgpLCBSZWNvaWxfbnVsbHRocm93cyhzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKV07XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5oYXMoa2V5KSkge1xuICAgICAgLy8gQXRvbSB2YWx1ZSBpcyBzdG9yZWQgYnV0IG5lZWRzIHZhbGlkYXRpb24gYmVmb3JlIHVzZS5cbiAgICAgIC8vIFdlIG1pZ2h0IGhhdmUgYWxyZWFkeSB2YWxpZGF0ZWQgaXQgYW5kIGhhdmUgYSBjYWNoZWQgdmFsaWRhdGVkIHZhbHVlOlxuICAgICAgaWYgKGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBlcnNpc3RlbmNlID09IG51bGwpIHtcbiAgICAgICAgUmVjb2lsX2V4cGVjdGF0aW9uVmlvbGF0aW9uKGBUcmllZCB0byByZXN0b3JlIGEgcGVyc2lzdGVkIHZhbHVlIGZvciBhdG9tICR7a2V5fSBidXQgaXQgaGFzIG5vIHBlcnNpc3RlbmNlIHNldHRpbmdzLmApO1xuICAgICAgICByZXR1cm4gW25ldyBNYXAoKSwgZGVmYXVsdExvYWRhYmxlXTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9udmFsaWRhdGVkVmFsdWUgPSBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5nZXQoa2V5KTtcbiAgICAgIGNvbnN0IHZhbGlkYXRvclJlc3VsdCA9IHBlcnNpc3RlbmNlLnZhbGlkYXRvcihub252YWxpZGF0ZWRWYWx1ZSwgREVGQVVMVF9WQUxVRSQ1KTtcbiAgICAgIGNvbnN0IHZhbGlkYXRlZFZhbHVlTG9hZGFibGUgPSB2YWxpZGF0b3JSZXN1bHQgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMiA/IGRlZmF1bHRMb2FkYWJsZSA6IGxvYWRhYmxlV2l0aFZhbHVlJDModmFsaWRhdG9yUmVzdWx0KTtcbiAgICAgIGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUgPSBbbmV3IE1hcCgpLCB2YWxpZGF0ZWRWYWx1ZUxvYWRhYmxlXTtcbiAgICAgIHJldHVybiBjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW25ldyBNYXAoKSwgZGVmYXVsdExvYWRhYmxlXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBteUNsZWFudXAoc3RvcmUpIHtcbiAgICB2YXIgX2NsZWFudXBFZmZlY3RzQnlTdG9yO1xuXG4gICAgKF9jbGVhbnVwRWZmZWN0c0J5U3RvciA9IGNsZWFudXBFZmZlY3RzQnlTdG9yZS5nZXQoc3RvcmUpKSA9PT0gbnVsbCB8fCBfY2xlYW51cEVmZmVjdHNCeVN0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jbGVhbnVwRWZmZWN0c0J5U3RvcigpO1xuICAgIGNsZWFudXBFZmZlY3RzQnlTdG9yZS5kZWxldGUoc3RvcmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52YWxpZGF0ZSgpIHtcbiAgICBjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gbXlTZXQoc3RvcmUsIHN0YXRlLCBuZXdWYWx1ZSkge1xuICAgIGluaXRBdG9tKHN0b3JlLCBzdGF0ZSwgJ3NldCcpOyAvLyBCYWlsIG91dCBpZiB3ZSdyZSBiZWluZyBzZXQgdG8gdGhlIGV4aXN0aW5nIHZhbHVlLCBvciBpZiB3ZSdyZSBiZWluZ1xuICAgIC8vIHJlc2V0IGJ1dCBoYXZlIG5vIHN0b3JlZCB2YWx1ZSAodmFsaWRhdGVkIG9yIHVudmFsaWRhdGVkKSB0byByZXNldCBmcm9tOlxuXG4gICAgaWYgKHN0YXRlLmF0b21WYWx1ZXMuaGFzKGtleSkpIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gUmVjb2lsX251bGx0aHJvd3Moc3RhdGUuYXRvbVZhbHVlcy5nZXQoa2V5KSk7XG5cbiAgICAgIGlmIChleGlzdGluZy5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJyAmJiBuZXdWYWx1ZSA9PT0gZXhpc3RpbmcuY29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIFtuZXcgTWFwKCksIG5ldyBNYXAoKV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghc3RhdGUubm9udmFsaWRhdGVkQXRvbXMuaGFzKGtleSkgJiYgbmV3VmFsdWUgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMikge1xuICAgICAgcmV0dXJuIFtuZXcgTWFwKCksIG5ldyBNYXAoKV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHkgIT09IHRydWUpIHtcbiAgICAgICAgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSA9IHVuZGVmaW5lZDsgLy8gY2FuIGJlIHJlbGVhc2VkIG5vdyBpZiBpdCB3YXMgcHJldmlvdXNseSBpbiB1c2VcblxuICAgIHJldHVybiBbbmV3IE1hcCgpLCBuZXcgTWFwKCkuc2V0KGtleSwgbG9hZGFibGVXaXRoVmFsdWUkMyhuZXdWYWx1ZSkpXTtcbiAgfVxuXG4gIGNvbnN0IG5vZGUgPSByZWdpc3Rlck5vZGUkMyh7XG4gICAga2V5LFxuICAgIHBlZWs6IG15UGVlayxcbiAgICBnZXQ6IG15R2V0LFxuICAgIHNldDogbXlTZXQsXG4gICAgY2xlYW5VcDogbXlDbGVhbnVwLFxuICAgIGludmFsaWRhdGUsXG4gICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHksXG4gICAgcGVyc2lzdGVuY2VfVU5TVEFCTEU6IG9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUgPyB7XG4gICAgICB0eXBlOiBvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFLnR5cGUsXG4gICAgICBiYWNrQnV0dG9uOiBvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFLmJhY2tCdXR0b25cbiAgICB9IDogdW5kZWZpbmVkLFxuICAgIHNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gbm9kZTtcbn0gLy8gcHJldHRpZXItaWdub3JlXG5cblxuZnVuY3Rpb24gYXRvbShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0OiBvcHRpb25zRGVmYXVsdCxcbiAgICAvLyBAZmItb25seTogc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTLFxuICAgIC4uLnJlc3RPcHRpb25zXG4gIH0gPSBvcHRpb25zO1xuXG4gIGlmIChpc1JlY29pbFZhbHVlJDUob3B0aW9uc0RlZmF1bHQpIC8vIENvbnRpbnVlIHRvIHVzZSBhdG9tV2l0aEZhbGxiYWNrIGZvciBwcm9taXNlIGRlZmF1bHRzIGZvciBzY29wZWQgYXRvbXNcbiAgLy8gZm9yIG5vdywgc2luY2Ugc2NvcGVkIGF0b21zIGRvbid0IHN1cHBvcnQgYXN5bmMgZGVmYXVsdHNcbiAgLy8gQGZiLW9ubHk6IHx8IChpc1Byb21pc2Uob3B0aW9uc0RlZmF1bHQpICYmIHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUylcbiAgKSB7XG4gICAgICByZXR1cm4gYXRvbVdpdGhGYWxsYmFjayh7IC4uLnJlc3RPcHRpb25zLFxuICAgICAgICBkZWZhdWx0OiBvcHRpb25zRGVmYXVsdCAvLyBAZmItb25seTogc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTLFxuXG4gICAgICB9KTsgLy8gQGZiLW9ubHk6IH0gZWxzZSBpZiAoc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTICYmICFpc1Byb21pc2Uob3B0aW9uc0RlZmF1bHQpKSB7XG4gICAgICAvLyBAZmItb25seTogcmV0dXJuIHNjb3BlZEF0b208VD4oe1xuICAgICAgLy8gQGZiLW9ubHk6IC4uLnJlc3RPcHRpb25zLFxuICAgICAgLy8gQGZiLW9ubHk6IGRlZmF1bHQ6IG9wdGlvbnNEZWZhdWx0LFxuICAgICAgLy8gQGZiLW9ubHk6IHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUyxcbiAgICAgIC8vIEBmYi1vbmx5OiB9KTtcbiAgICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlQXRvbSh7IC4uLnJlc3RPcHRpb25zLFxuICAgICAgZGVmYXVsdDogb3B0aW9uc0RlZmF1bHRcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhdG9tV2l0aEZhbGxiYWNrKG9wdGlvbnMpIHtcbiAgY29uc3QgYmFzZSA9IGF0b20oeyAuLi5vcHRpb25zLFxuICAgIGRlZmF1bHQ6IERFRkFVTFRfVkFMVUUkNSxcbiAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRTogb3B0aW9ucy5wZXJzaXN0ZW5jZV9VTlNUQUJMRSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogeyAuLi5vcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFLFxuICAgICAgdmFsaWRhdG9yOiBzdG9yZWRWYWx1ZSA9PiBzdG9yZWRWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gc3RvcmVkVmFsdWUgOiBSZWNvaWxfbnVsbHRocm93cyhvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFKS52YWxpZGF0b3Ioc3RvcmVkVmFsdWUsIERFRkFVTFRfVkFMVUUkNSlcbiAgICB9LFxuICAgIC8vIFRPRE8gSGFjayBmb3Igbm93LlxuICAgIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6IG9mZlxuICAgIGVmZmVjdHNfVU5TVEFCTEU6IG9wdGlvbnMuZWZmZWN0c19VTlNUQUJMRVxuICB9KTtcbiAgcmV0dXJuIFJlY29pbF9zZWxlY3Rvcih7XG4gICAga2V5OiBgJHtvcHRpb25zLmtleX1fX3dpdGhGYWxsYmFja2AsXG4gICAgZ2V0OiAoe1xuICAgICAgZ2V0XG4gICAgfSkgPT4ge1xuICAgICAgY29uc3QgYmFzZVZhbHVlID0gZ2V0KGJhc2UpO1xuICAgICAgcmV0dXJuIGJhc2VWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gb3B0aW9ucy5kZWZhdWx0IDogYmFzZVZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiAoe1xuICAgICAgc2V0XG4gICAgfSwgbmV3VmFsdWUpID0+IHNldChiYXNlLCBuZXdWYWx1ZSksXG4gICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHlcbiAgfSk7XG59XG5cbnZhciBSZWNvaWxfYXRvbSA9IGF0b207XG5cbi8vIEtlZXAgaW4gbWluZCB0aGUgcGFyYW1ldGVyIG5lZWRzIHRvIGJlIHNlcmlhbGl6YWJsZSBhcyBhIGNhaGNoZSBrZXlcbi8vIHVzaW5nIFJlY29pbF9zdGFibGVTdHJpbmdpZnlcblxuXG4vLyBBZGQgYSB1bmlxdWUgaW5kZXggdG8gZWFjaCBzZWxlY3RvciBpbiBjYXNlIHRoZSBjYWNoZSBpbXBsZW1lbnRhdGlvbiBhbGxvd3Ncbi8vIGR1cGxpY2F0ZSBrZXlzIGJhc2VkIG9uIGVxdWl2YWxlbnQgc3RyaW5naWZpZWQgcGFyYW1ldGVyc1xubGV0IG5leHRJbmRleCA9IDA7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuLy8gUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG1lbWJlcnMgb2YgYSBmYW1pbHkgb2Ygc2VsZWN0b3JzIG9mIHRoZSBzYW1lIHR5cGVcbi8vIEUuZy4sXG4vL1xuLy8gY29uc3QgcyA9IHNlbGVjdG9yRmFtaWx5KC4uLik7XG4vLyBzKHthOiAxfSkgPT4gYSBzZWxlY3RvclxuLy8gcyh7YTogMn0pID0+IGEgZGlmZmVyZW50IHNlbGVjdG9yXG4vL1xuLy8gQnkgZGVmYXVsdCwgdGhlIHNlbGVjdG9ycyBhcmUgZGlzdGluZ3Vpc2hlZCBieSBkaXN0aW5jdCB2YWx1ZXMgb2YgdGhlXG4vLyBwYXJhbWV0ZXIgYmFzZWQgb24gdmFsdWUgZXF1YWxpdHksIG5vdCByZWZlcmVuY2UgZXF1YWxpdHkuICBUaGlzIGFsbG93cyB1c2luZ1xuLy8gb2JqZWN0IGxpdGVyYWxzIG9yIG90aGVyIGVxdWl2YWxlbnQgb2JqZWN0cyBhdCBjYWxsc2l0ZXMgdG8gbm90IGNyZWF0ZVxuLy8gZHVwbGljYXRlIGNhY2hlIGVudHJpZXMuICBUaGlzIGJlaGF2aW9yIG1heSBiZSBvdmVycmlkZGVuIHdpdGggdGhlXG4vLyBjYWNoZUltcGxlbWVudGF0aW9uRm9yUGFyYW1zIG9wdGlvbi5cbmZ1bmN0aW9uIHNlbGVjdG9yRmFtaWx5KG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJGNhY2hlSW1wbGVtZSwgX29wdGlvbnMkY2FjaGVJbXBsZW1lMjtcblxuICBsZXQgc2VsZWN0b3JDYWNoZSA9IChfb3B0aW9ucyRjYWNoZUltcGxlbWUgPSAoX29wdGlvbnMkY2FjaGVJbXBsZW1lMiA9IG9wdGlvbnMuY2FjaGVJbXBsZW1lbnRhdGlvbkZvclBhcmFtc19VTlNUQUJMRSkgPT09IG51bGwgfHwgX29wdGlvbnMkY2FjaGVJbXBsZW1lMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkY2FjaGVJbXBsZW1lMi5jYWxsKG9wdGlvbnMpKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRjYWNoZUltcGxlbWUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGNhY2hlSW1wbGVtZSA6IFJlY29pbF9jYWNoZVdpdGhWYWx1ZUVxdWFsaXR5KCk7XG4gIHJldHVybiBwYXJhbXMgPT4ge1xuICAgIHZhciBfc3RhYmxlU3RyaW5naWZ5LCBfb3B0aW9ucyRjYWNoZUltcGxlbWUzO1xuXG4gICAgY29uc3QgY2FjaGVkU2VsZWN0b3IgPSBzZWxlY3RvckNhY2hlLmdldChwYXJhbXMpO1xuXG4gICAgaWYgKGNhY2hlZFNlbGVjdG9yICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWNoZWRTZWxlY3RvcjtcbiAgICB9XG5cbiAgICBjb25zdCBteUtleSA9IGAke29wdGlvbnMua2V5fV9fc2VsZWN0b3JGYW1pbHkvJHsoX3N0YWJsZVN0cmluZ2lmeSA9IFJlY29pbF9zdGFibGVTdHJpbmdpZnkocGFyYW1zLCB7XG4gICAgICAvLyBJdCBpcyBwb3NzaWJsZSB0byB1c2UgZnVuY3Rpb25zIGluIHBhcmFtZXRlcnMgaWYgdGhlIHVzZXIgdXNlc1xuICAgICAgLy8gYSBjYWNoZSB3aXRoIHJlZmVyZW5jZSBlcXVhbGl0eSB0aGFua3MgdG8gdGhlIGluY3JlbWVudGluZyBpbmRleC5cbiAgICAgIGFsbG93RnVuY3Rpb25zOiB0cnVlXG4gICAgfSkpICE9PSBudWxsICYmIF9zdGFibGVTdHJpbmdpZnkgIT09IHZvaWQgMCA/IF9zdGFibGVTdHJpbmdpZnkgOiAndm9pZCd9LyR7bmV4dEluZGV4Kyt9YDsgLy8gQXBwZW5kIGluZGV4IGluIGNhc2UgdmFsdWVzIHNlcmlhbGl6ZSB0byB0aGUgc2FtZSBrZXkgc3RyaW5nXG5cbiAgICBjb25zdCBteUdldCA9IGNhbGxiYWNrcyA9PiBvcHRpb25zLmdldChwYXJhbXMpKGNhbGxiYWNrcyk7XG5cbiAgICBjb25zdCBteUNhY2hlSW1wbGVtZW50YXRpb24gPSAoX29wdGlvbnMkY2FjaGVJbXBsZW1lMyA9IG9wdGlvbnMuY2FjaGVJbXBsZW1lbnRhdGlvbl9VTlNUQUJMRSkgPT09IG51bGwgfHwgX29wdGlvbnMkY2FjaGVJbXBsZW1lMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkY2FjaGVJbXBsZW1lMy5jYWxsKG9wdGlvbnMpO1xuICAgIGxldCBuZXdTZWxlY3RvcjtcblxuICAgIGlmIChvcHRpb25zLnNldCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBzZXQgPSBvcHRpb25zLnNldDtcblxuICAgICAgY29uc3QgbXlTZXQgPSAoY2FsbGJhY2tzLCBuZXdWYWx1ZSkgPT4gc2V0KHBhcmFtcykoY2FsbGJhY2tzLCBuZXdWYWx1ZSk7XG5cbiAgICAgIG5ld1NlbGVjdG9yID0gUmVjb2lsX3NlbGVjdG9yKHtcbiAgICAgICAga2V5OiBteUtleSxcbiAgICAgICAgZ2V0OiBteUdldCxcbiAgICAgICAgc2V0OiBteVNldCxcbiAgICAgICAgY2FjaGVJbXBsZW1lbnRhdGlvbl9VTlNUQUJMRTogbXlDYWNoZUltcGxlbWVudGF0aW9uLFxuICAgICAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1NlbGVjdG9yID0gUmVjb2lsX3NlbGVjdG9yKHtcbiAgICAgICAga2V5OiBteUtleSxcbiAgICAgICAgZ2V0OiBteUdldCxcbiAgICAgICAgY2FjaGVJbXBsZW1lbnRhdGlvbl9VTlNUQUJMRTogbXlDYWNoZUltcGxlbWVudGF0aW9uLFxuICAgICAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZWN0b3JDYWNoZSA9IHNlbGVjdG9yQ2FjaGUuc2V0KHBhcmFtcywgbmV3U2VsZWN0b3IpO1xuICAgIHJldHVybiBuZXdTZWxlY3RvcjtcbiAgfTtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG5cblxudmFyIFJlY29pbF9zZWxlY3RvckZhbWlseSA9IHNlbGVjdG9yRmFtaWx5O1xuXG4vLyBAZmItb25seTogY29uc3Qge3BhcmFtZXRlcml6ZWRTY29wZWRBdG9tTGVnYWN5fSA9IHJlcXVpcmUoJ1JlY29pbF9TY29wZWRBdG9tJyk7XG5cblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDYsXG4gIERlZmF1bHRWYWx1ZTogRGVmYXVsdFZhbHVlJDNcbn0gPSBSZWNvaWxfTm9kZTtcbi8qXG5BIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gYXRvbSBiYXNlZCBvbiB0aGUgaW5wdXQgcGFyYW1ldGVyLlxuXG5FYWNoIHVuaXF1ZSBwYXJhbWV0ZXIgcmV0dXJucyBhIHVuaXF1ZSBhdG9tLiBFLmcuLFxuXG4gIGNvbnN0IGYgPSBhdG9tRmFtaWx5KC4uLik7XG4gIGYoe2E6IDF9KSA9PiBhbiBhdG9tXG4gIGYoe2E6IDJ9KSA9PiBhIGRpZmZlcmVudCBhdG9tXG5cblRoaXMgYWxsb3dzIGNvbXBvbmVudHMgdG8gcGVyc2lzdCBsb2NhbCwgcHJpdmF0ZSBzdGF0ZSB1c2luZyBhdG9tcy4gIEVhY2hcbmluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQgbWF5IGhhdmUgYSBkaWZmZXJlbnQga2V5LCB3aGljaCBpdCB1c2VzIGFzIHRoZVxucGFyYW1ldGVyIGZvciBhIGZhbWlseSBvZiBhdG9tczsgaW4gdGhpcyB3YXksIGVhY2ggY29tcG9uZW50IHdpbGwgaGF2ZVxuaXRzIG93biBhdG9tIG5vdCBzaGFyZWQgYnkgb3RoZXIgaW5zdGFuY2VzLiAgVGhlc2Ugc3RhdGUga2V5cyBtYXkgYmUgY29tcG9zZWRcbmludG8gY2hpbGRyZW4ncyBzdGF0ZSBrZXlzIGFzIHdlbGwuXG4qL1xuXG5cbmZ1bmN0aW9uIGF0b21GYW1pbHkob3B0aW9ucykge1xuICBsZXQgYXRvbUNhY2hlID0gUmVjb2lsX2NhY2hlV2l0aFZhbHVlRXF1YWxpdHkoKTsgLy8gQW4gYXRvbSB0byByZXByZXNlbnQgYW55IGxlZ2FjeSBhdG9tcyB0aGF0IHdlIGNhbiB1cGdyYWRlIHRvIGFuIGF0b21GYW1pbHlcblxuICBjb25zdCBsZWdhY3lBdG9tT3B0aW9ucyA9IHtcbiAgICBrZXk6IG9wdGlvbnMua2V5LFxuICAgIC8vIExlZ2FjeSBhdG9tcyBqdXN0IHVzZWQgdGhlIHBsYWluIGtleSBkaXJlY3RseVxuICAgIGRlZmF1bHQ6IERFRkFVTFRfVkFMVUUkNixcbiAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRTogb3B0aW9ucy5wZXJzaXN0ZW5jZV9VTlNUQUJMRVxuICB9O1xuICBsZXQgbGVnYWN5QXRvbTsgLy8gcHJldHRpZXItaWdub3JlXG4gIC8vIEBmYi1vbmx5OiBpZiAoXG4gIC8vIEBmYi1vbmx5OiBvcHRpb25zLnNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DU1xuICAvLyBAZmItb25seTogKSB7XG4gIC8vIEBmYi1vbmx5OiBsZWdhY3lBdG9tID0gcGFyYW1ldGVyaXplZFNjb3BlZEF0b21MZWdhY3k8VCB8IERlZmF1bHRWYWx1ZSwgUD4oe1xuICAvLyBAZmItb25seTogLi4ubGVnYWN5QXRvbU9wdGlvbnMsXG4gIC8vIEBmYi1vbmx5OiBzY29wZVJ1bGVzX0FQUEVORF9PTkxZX1JFQURfVEhFX0RPQ1M6XG4gIC8vIEBmYi1vbmx5OiBvcHRpb25zLnNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUyxcbiAgLy8gQGZiLW9ubHk6IH0pO1xuICAvLyBAZmItb25seTogfSBlbHNlIHtcblxuICBsZWdhY3lBdG9tID0gUmVjb2lsX2F0b20obGVnYWN5QXRvbU9wdGlvbnMpOyAvLyBAZmItb25seTogfVxuICAvLyBTZWxlY3RvciB0byBjYWxjdWxhdGUgdGhlIGRlZmF1bHQgdmFsdWUgYmFzZWQgb24gYW55IHBlcnNpc3RlZCBsZWdhY3kgYXRvbXNcbiAgLy8gdGhhdCB3ZXJlIHVwZ3JhZGVkIHRvIGEgYXRvbUZhbWlseVxuXG4gIGNvbnN0IGF0b21GYW1pbHlEZWZhdWx0ID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAgICBrZXk6IGAke29wdGlvbnMua2V5fV9fYXRvbUZhbWlseS9EZWZhdWx0YCxcbiAgICBnZXQ6IHBhcmFtID0+ICh7XG4gICAgICBnZXRcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBsZWdhY3lWYWx1ZSA9IGdldCh0eXBlb2YgbGVnYWN5QXRvbSA9PT0gJ2Z1bmN0aW9uJyA/IGxlZ2FjeUF0b20ocGFyYW0pIDogbGVnYWN5QXRvbSk7IC8vIEF0b20gd2FzIHVwZ3JhZGVkIGZyb20gYSBub24tcGFyYW1ldGVyaXplZCBhdG9tXG5cbiAgICAgIGlmICghKGxlZ2FjeVZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDMpKSB7XG4gICAgICAgIHJldHVybiBsZWdhY3lWYWx1ZTtcbiAgICAgIH0gLy8gVGhlcmUncyBubyBsZWdhY3kgYXRvbSB2YWx1ZSwgc28gdXNlIHRoZSB1c2VyLXNwZWNpZmllZCBkZWZhdWx0XG5cblxuICAgICAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgPyAvLyBUaGUgZGVmYXVsdCB3YXMgcGFyYW1ldGVyaXplZFxuICAgICAgLy8gRmxvdyBkb2Vzbid0IGtub3cgdGhhdCBUIGlzbid0IGEgZnVuY3Rpb24sIHNvIHdlIG5lZWQgdG8gY2FzZSB0byBhbnlcbiAgICAgIG9wdGlvbnMuZGVmYXVsdChwYXJhbSkgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICA6IC8vIERlZmF1bHQgbWF5IGJlIGEgc3RhdGljIHZhbHVlLCBwcm9taXNlLCBvciBSZWNvaWxWYWx1ZVxuICAgICAgb3B0aW9ucy5kZWZhdWx0O1xuICAgIH0sXG4gICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHlcbiAgfSk7IC8vIFNpbXBsZSBhdG9tRmFtaWx5IGltcGxlbWVudGF0aW9uIHRvIGNhY2hlIGluZGl2aWR1YWwgYXRvbXMgYmFzZWRcbiAgLy8gb24gdGhlIHBhcmFtZXRlciB2YWx1ZSBlcXVhbGl0eS5cblxuICByZXR1cm4gcGFyYW1zID0+IHtcbiAgICB2YXIgX3N0YWJsZVN0cmluZ2lmeTtcblxuICAgIGNvbnN0IGNhY2hlZEF0b20gPSBhdG9tQ2FjaGUuZ2V0KHBhcmFtcyk7XG5cbiAgICBpZiAoY2FjaGVkQXRvbSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQXRvbTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdBdG9tID0gUmVjb2lsX2F0b20oeyAuLi5vcHRpb25zLFxuICAgICAga2V5OiBgJHtvcHRpb25zLmtleX1fXyR7KF9zdGFibGVTdHJpbmdpZnkgPSBSZWNvaWxfc3RhYmxlU3RyaW5naWZ5KHBhcmFtcykpICE9PSBudWxsICYmIF9zdGFibGVTdHJpbmdpZnkgIT09IHZvaWQgMCA/IF9zdGFibGVTdHJpbmdpZnkgOiAndm9pZCd9YCxcbiAgICAgIGRlZmF1bHQ6IGF0b21GYW1pbHlEZWZhdWx0KHBhcmFtcyksXG4gICAgICBlZmZlY3RzX1VOU1RBQkxFOiB0eXBlb2Ygb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFKHBhcmFtcykgOiBvcHRpb25zLmVmZmVjdHNfVU5TVEFCTEUgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAvLyBAZmItb25seTogc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTOiBtYXBTY29wZVJ1bGVzKFxuICAgICAgLy8gQGZiLW9ubHk6IG9wdGlvbnMuc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTLFxuICAgICAgLy8gQGZiLW9ubHk6IHBhcmFtcyxcbiAgICAgIC8vIEBmYi1vbmx5OiApXG5cbiAgICB9KTtcbiAgICBhdG9tQ2FjaGUgPSBhdG9tQ2FjaGUuc2V0KHBhcmFtcywgbmV3QXRvbSk7XG4gICAgcmV0dXJuIG5ld0F0b207XG4gIH07XG59XG5cbnZhciBSZWNvaWxfYXRvbUZhbWlseSA9IGF0b21GYW1pbHk7XG5cbi8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cblxuY29uc3QgY29uc3RhbnRTZWxlY3RvciA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fY29uc3RhbnQnLFxuICBnZXQ6IGNvbnN0YW50ID0+ICgpID0+IGNvbnN0YW50LFxuICBjYWNoZUltcGxlbWVudGF0aW9uRm9yUGFyYW1zX1VOU1RBQkxFOiBSZWNvaWxfY2FjaGVXaXRoUmVmZXJlbmNlRXF1YWxpdHlcbn0pOyAvLyBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZWxlY3RvciB3aGljaCBhbHdheXMgcHJvZHVjZXMgdGhlXG4vLyBzYW1lIGNvbnN0YW50IHZhbHVlLiAgSXQgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHRoZVxuLy8gc2FtZSB2YWx1ZSwgYmFzZWQgb24gcmVmZXJlbmNlIGVxdWFsaXR5LCBhbmQgd2lsbCBwcm92aWRlIHRoZVxuLy8gc2FtZSBzZWxlY3Rvci5cblxuZnVuY3Rpb24gY29uc3RTZWxlY3Rvcihjb25zdGFudCkge1xuICByZXR1cm4gY29uc3RhbnRTZWxlY3Rvcihjb25zdGFudCk7XG59XG5cbnZhciBSZWNvaWxfY29uc3RTZWxlY3RvciA9IGNvbnN0U2VsZWN0b3I7XG5cbi8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cblxuY29uc3QgdGhyb3dpbmdTZWxlY3RvciA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fZXJyb3InLFxuICBnZXQ6IG1lc3NhZ2UgPT4gKCkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSxcbiAgY2FjaGVJbXBsZW1lbnRhdGlvbkZvclBhcmFtc19VTlNUQUJMRTogUmVjb2lsX2NhY2hlV2l0aFJlZmVyZW5jZUVxdWFsaXR5XG59KTsgLy8gRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2VsZWN0b3Igd2hpY2ggYWx3YXlzIHRocm93cyBhbiBlcnJvclxuLy8gd2l0aCB0aGUgcHJvdmlkZWQgbWVzc2FnZS5cblxuZnVuY3Rpb24gZXJyb3JTZWxlY3RvcihtZXNzYWdlKSB7XG4gIHJldHVybiB0aHJvd2luZ1NlbGVjdG9yKG1lc3NhZ2UpO1xufVxuXG52YXIgUmVjb2lsX2Vycm9yU2VsZWN0b3IgPSBlcnJvclNlbGVjdG9yO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFdyYXBzIGFub3RoZXIgcmVjb2lsIHZhbHVlIGFuZCBwcmV2ZW50cyB3cml0aW5nIHRvIGl0LlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gcmVhZE9ubHlTZWxlY3RvcihhdG9tKSB7XG4gIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6IG9mZlxuICByZXR1cm4gYXRvbTtcbn1cblxudmFyIFJlY29pbF9yZWFkT25seVNlbGVjdG9yID0gcmVhZE9ubHlTZWxlY3RvcjtcblxuY29uc3Qge1xuICBsb2FkYWJsZVdpdGhFcnJvcjogbG9hZGFibGVXaXRoRXJyb3IkNCxcbiAgbG9hZGFibGVXaXRoUHJvbWlzZTogbG9hZGFibGVXaXRoUHJvbWlzZSQ0LFxuICBsb2FkYWJsZVdpdGhWYWx1ZTogbG9hZGFibGVXaXRoVmFsdWUkNFxufSA9IFJlY29pbF9Mb2FkYWJsZTtcblxuXG5cblxuXG4gLy8vLy8vLy8vLy8vLy8vLy9cbi8vICBUUlVUSCBUQUJMRVxuLy8vLy8vLy8vLy8vLy8vLy9cbi8vIERlcGVuZGVuY2llcyAgICAgICAgd2FpdEZvck5vbmUgICAgICAgICB3YWl0Rm9yQW55ICAgICAgICB3YWl0Rm9yQWxsXG4vLyAgW2xvYWRpbmcsIGxvYWRpbmddICBbUHJvbWlzZSwgUHJvbWlzZV0gIFByb21pc2UgICAgICAgICAgIFByb21pc2Vcbi8vICBbdmFsdWUsIGxvYWRpbmddICAgIFt2YWx1ZSwgUHJvbWlzZV0gICAgW3ZhbHVlLCBQcm9taXNlXSAgUHJvbWlzZVxuLy8gIFt2YWx1ZSwgdmFsdWVdICAgICAgW3ZhbHVlLCB2YWx1ZV0gICAgICBbdmFsdWUsIHZhbHVlXSAgICBbdmFsdWUsIHZhbHVlXVxuLy9cbi8vICBbZXJyb3IsIGxvYWRpbmddICAgIFtFcnJvciwgUHJvbWlzZV0gICAgUHJvbWlzZSAgICAgICAgICAgRXJyb3Jcbi8vICBbZXJyb3IsIGVycm9yXSAgICAgIFtFcnJvciwgRXJyb3JdICAgICAgRXJyb3IgICAgICAgICAgICAgRXJyb3Jcbi8vICBbdmFsdWUsIGVycm9yXSAgICAgIFt2YWx1ZSwgRXJyb3JdICAgICAgW3ZhbHVlLCBFcnJvcl0gICAgRXJyb3Jcbi8vIElzc3VlIHBhcmFsbGVsIHJlcXVlc3RzIGZvciBhbGwgZGVwZW5kZW5jaWVzIGFuZCByZXR1cm4gdGhlIGN1cnJlbnRcbi8vIHN0YXR1cyBpZiB0aGV5IGhhdmUgcmVzdWx0cywgaGF2ZSBzb21lIGVycm9yLCBvciBhcmUgc3RpbGwgcGVuZGluZy5cblxuXG5mdW5jdGlvbiBjb25jdXJyZW50UmVxdWVzdHMoZ2V0UmVjb2lsVmFsdWUsIGRlcHMpIHtcbiAgY29uc3QgcmVzdWx0cyA9IEFycmF5KGRlcHMubGVuZ3RoKS5maWxsKHVuZGVmaW5lZCk7XG4gIGNvbnN0IGV4Y2VwdGlvbnMgPSBBcnJheShkZXBzLmxlbmd0aCkuZmlsbCh1bmRlZmluZWQpO1xuXG4gIGZvciAoY29uc3QgW2ksIGRlcF0gb2YgZGVwcy5lbnRyaWVzKCkpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0c1tpXSA9IGdldFJlY29pbFZhbHVlKGRlcCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgICAgZXhjZXB0aW9uc1tpXSA9IGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFtyZXN1bHRzLCBleGNlcHRpb25zXTtcbn1cblxuZnVuY3Rpb24gaXNFcnJvcihleHApIHtcbiAgcmV0dXJuIGV4cCAhPSBudWxsICYmICFSZWNvaWxfaXNQcm9taXNlKGV4cCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcERlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGVwZW5kZW5jaWVzKSA/IGRlcGVuZGVuY2llcyA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlcGVuZGVuY2llcykubWFwKGtleSA9PiBkZXBlbmRlbmNpZXNba2V5XSk7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlRnJvbUxvYWRhYmxlUHJvbWlzZVJlc3VsdChyZXN1bHQpIHtcbiAgaWYgKHJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmIHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnX192YWx1ZScpKSB7XG4gICAgcmV0dXJuIHJlc3VsdC5fX3ZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gd3JhcFJlc3VsdHMoZGVwZW5kZW5jaWVzLCByZXN1bHRzKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRlcGVuZGVuY2llcykgPyByZXN1bHRzIDogLy8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoKSBoYXMgY29uc2lzdGVudCBrZXkgb3JkZXJpbmcgd2l0aCBFUzZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGVwZW5kZW5jaWVzKS5yZWR1Y2UoKG91dCwga2V5LCBpZHgpID0+ICh7IC4uLm91dCxcbiAgICBba2V5XTogcmVzdWx0c1tpZHhdXG4gIH0pLCB7fSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSB7XG4gIGNvbnN0IG91dHB1dCA9IGV4Y2VwdGlvbnMubWFwKChleGNlcHRpb24sIGlkeCkgPT4gZXhjZXB0aW9uID09IG51bGwgPyBsb2FkYWJsZVdpdGhWYWx1ZSQ0KHJlc3VsdHNbaWR4XSkgOiBSZWNvaWxfaXNQcm9taXNlKGV4Y2VwdGlvbikgPyBsb2FkYWJsZVdpdGhQcm9taXNlJDQoZXhjZXB0aW9uKSA6IGxvYWRhYmxlV2l0aEVycm9yJDQoZXhjZXB0aW9uKSk7XG4gIHJldHVybiB3cmFwUmVzdWx0cyhkZXBlbmRlbmNpZXMsIG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVBc3luY1Jlc3VsdHNXaXRoU3luY1Jlc3VsdHMoc3luY1Jlc3VsdHMsIGFzeW5jUmVzdWx0cykge1xuICByZXR1cm4gYXN5bmNSZXN1bHRzLm1hcCgocmVzdWx0LCBpZHgpID0+XG4gIC8qKlxuICAgKiBpdCdzIGltcG9ydGFudCB3ZSB1c2UgPT09IHVuZGVmaW5lZCBhcyBvcHBvc2VkIHRvID09IG51bGwsIGJlY2F1c2UgdGhlXG4gICAqIHJlc29sdmVkIHZhbHVlIG9mIHRoZSBhc3luYyBwcm9taXNlIGNvdWxkIGJlIGBudWxsYCwgaW4gd2hpY2ggY2FzZSB3ZVxuICAgKiBkb24ndCB3YW50IHRvIHVzZSBzeW5jUmVzdWx0c1tpZHhdLCB3aGljaCB3b3VsZCBiZSB1bmRlZmluZWQuIElmIGFzeW5jXG4gICAqIHByb21pc2UgcmVzb2x2ZXMgdG8gYHVuZGVmaW5lZGAsIHRoYXQncyBvayBiZWNhdXNlIGBzeW5jUmVzdWx0c1tpZHhdYFxuICAgKiB3aWxsIGFsc28gYmUgYHVuZGVmaW5lZGAuIFRoYXQncyBhIGxpdHRsZSBoYWNreSwgYnV0IGl0IHdvcmtzLlxuICAgKi9cbiAgcmVzdWx0ID09PSB1bmRlZmluZWQgPyBzeW5jUmVzdWx0c1tpZHhdIDogcmVzdWx0KTtcbn0gLy8gU2VsZWN0b3IgdGhhdCByZXF1ZXN0cyBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsIGFuZCBpbW1lZGlhdGVseSByZXR1cm5zXG4vLyBjdXJyZW50IHJlc3VsdHMgd2l0aG91dCB3YWl0aW5nLlxuXG5cbmNvbnN0IHdhaXRGb3JOb25lID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX193YWl0Rm9yTm9uZScsXG4gIGdldDogZGVwZW5kZW5jaWVzID0+ICh7XG4gICAgZ2V0XG4gIH0pID0+IHtcbiAgICAvLyBJc3N1ZSByZXF1ZXN0cyBmb3IgYWxsIGRlcGVuZGVuY2llcyBpbiBwYXJhbGxlbC5cbiAgICBjb25zdCBkZXBzID0gdW53cmFwRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcyk7XG4gICAgY29uc3QgW3Jlc3VsdHMsIGV4Y2VwdGlvbnNdID0gY29uY3VycmVudFJlcXVlc3RzKGdldCwgZGVwcyk7IC8vIEFsd2F5cyByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSByZXN1bHRzOyBuZXZlciBibG9jay5cblxuICAgIHJldHVybiB3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucyk7XG4gIH1cbn0pOyAvLyBTZWxlY3RvciB0aGF0IHJlcXVlc3RzIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwgYW5kIHdhaXRzIGZvciBhdCBsZWFzdFxuLy8gb25lIHRvIGJlIGF2YWlsYWJsZSBiZWZvcmUgcmV0dXJuaW5nIHJlc3VsdHMuICBJdCB3aWxsIG9ubHkgZXJyb3IgaWYgYWxsXG4vLyBkZXBlbmRlbmNpZXMgaGF2ZSBlcnJvcnMuXG5cbmNvbnN0IHdhaXRGb3JBbnkgPSBSZWNvaWxfc2VsZWN0b3JGYW1pbHkoe1xuICBrZXk6ICdfX3dhaXRGb3JBbnknLFxuICBnZXQ6IGRlcGVuZGVuY2llcyA9PiAoe1xuICAgIGdldFxuICB9KSA9PiB7XG4gICAgLy8gSXNzdWUgcmVxdWVzdHMgZm9yIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwuXG4gICAgLy8gRXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgIGNvbnN0IGRlcHMgPSB1bndyYXBEZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKTtcbiAgICBjb25zdCBbcmVzdWx0cywgZXhjZXB0aW9uc10gPSBjb25jdXJyZW50UmVxdWVzdHMoZ2V0LCBkZXBzKTsgLy8gSWYgYW55IHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXR1c1xuXG4gICAgaWYgKGV4Y2VwdGlvbnMuc29tZShleHAgPT4gZXhwID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gd3JhcExvYWRhYmxlcyhkZXBlbmRlbmNpZXMsIHJlc3VsdHMsIGV4Y2VwdGlvbnMpO1xuICAgIH0gLy8gU2luY2Ugd2UgYXJlIHdhaXRpbmcgZm9yIGFueSByZXN1bHRzLCBvbmx5IHRocm93IGFuIGVycm9yIGlmIGFsbFxuICAgIC8vIGRlcGVuZGVuY2llcyBoYXZlIGFuIGVycm9yLiAgVGhlbiwgdGhyb3cgdGhlIGZpcnN0IG9uZS5cblxuXG4gICAgaWYgKGV4Y2VwdGlvbnMuZXZlcnkoaXNFcnJvcikpIHtcbiAgICAgIHRocm93IGV4Y2VwdGlvbnMuZmluZChpc0Vycm9yKTtcbiAgICB9XG5cbiAgICBpZiAoUmVjb2lsX2dreF8xKCdyZWNvaWxfYXN5bmNfc2VsZWN0b3JfcmVmYWN0b3InKSkge1xuICAgICAgLy8gT3RoZXJ3aXNlLCByZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdoZW4gdGhlIG5leHQgcmVzdWx0IGlzXG4gICAgICAvLyBhdmFpbGFibGUsIHdoaWNoZXZlciBvbmUgaGFwcGVucyB0byBiZSBuZXh0LiAgQnV0LCBpZiBhbGwgcGVuZGluZ1xuICAgICAgLy8gZGVwZW5kZW5jaWVzIGVuZCB1cCB3aXRoIGVycm9ycywgdGhlbiByZWplY3QgdGhlIHByb21pc2UuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IFtpLCBleHBdIG9mIGV4Y2VwdGlvbnMuZW50cmllcygpKSB7XG4gICAgICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UoZXhwKSkge1xuICAgICAgICAgICAgZXhwLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgcmVzdWx0c1tpXSA9IGdldFZhbHVlRnJvbUxvYWRhYmxlUHJvbWlzZVJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgICBleGNlcHRpb25zW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgcmVzb2x2ZSh3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucykpO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICBleGNlcHRpb25zW2ldID0gZXJyb3I7XG5cbiAgICAgICAgICAgICAgaWYgKGV4Y2VwdGlvbnMuZXZlcnkoaXNFcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXhjZXB0aW9uc1swXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbaSwgZXhwXSBvZiBleGNlcHRpb25zLmVudHJpZXMoKSkge1xuICAgICAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKGV4cCkpIHtcbiAgICAgICAgICAgIGV4cC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgIHJlc3VsdHNbaV0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgIGV4Y2VwdGlvbnNbaV0gPSBudWxsO1xuICAgICAgICAgICAgICByZXNvbHZlKHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgIGV4Y2VwdGlvbnNbaV0gPSBlcnJvcjtcblxuICAgICAgICAgICAgICBpZiAoZXhjZXB0aW9ucy5ldmVyeShpc0Vycm9yKSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChleGNlcHRpb25zWzBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pOyAvLyBTZWxlY3RvciB0aGF0IHJlcXVlc3RzIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwgYW5kIHdhaXRzIGZvciBhbGwgdG8gYmVcbi8vIGF2YWlsYWJsZSBiZWZvcmUgcmV0dXJuaW5nIGEgdmFsdWUuICBJdCB3aWxsIGVycm9yIGlmIGFueSBkZXBlbmRlbmNpZXMgZXJyb3IuXG5cbmNvbnN0IHdhaXRGb3JBbGwgPSBSZWNvaWxfc2VsZWN0b3JGYW1pbHkoe1xuICBrZXk6ICdfX3dhaXRGb3JBbGwnLFxuICBnZXQ6IGRlcGVuZGVuY2llcyA9PiAoe1xuICAgIGdldFxuICB9KSA9PiB7XG4gICAgLy8gSXNzdWUgcmVxdWVzdHMgZm9yIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwuXG4gICAgLy8gRXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgIGNvbnN0IGRlcHMgPSB1bndyYXBEZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKTtcbiAgICBjb25zdCBbcmVzdWx0cywgZXhjZXB0aW9uc10gPSBjb25jdXJyZW50UmVxdWVzdHMoZ2V0LCBkZXBzKTsgLy8gSWYgYWxsIHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgcmV0dXJuIHRoZSByZXN1bHRzXG5cbiAgICBpZiAoZXhjZXB0aW9ucy5ldmVyeShleHAgPT4gZXhwID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gd3JhcFJlc3VsdHMoZGVwZW5kZW5jaWVzLCByZXN1bHRzKTtcbiAgICB9IC8vIElmIHdlIGhhdmUgYW55IGVycm9ycywgdGhyb3cgdGhlIGZpcnN0IGVycm9yXG5cblxuICAgIGNvbnN0IGVycm9yID0gZXhjZXB0aW9ucy5maW5kKGlzRXJyb3IpO1xuXG4gICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIGlmIChSZWNvaWxfZ2t4XzEoJ3JlY29pbF9hc3luY19zZWxlY3Rvcl9yZWZhY3RvcicpKSB7XG4gICAgICAvLyBPdGhlcndpc2UsIHJldHVybiBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgd2hlbiBhbGwgcmVzdWx0cyBhcmUgYXZhaWxhYmxlXG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZXhjZXB0aW9ucykudGhlbihleGNlcHRpb25SZXN1bHRzID0+IHdyYXBSZXN1bHRzKGRlcGVuZGVuY2llcywgY29tYmluZUFzeW5jUmVzdWx0c1dpdGhTeW5jUmVzdWx0cyhyZXN1bHRzLCBleGNlcHRpb25SZXN1bHRzKS5tYXAoZ2V0VmFsdWVGcm9tTG9hZGFibGVQcm9taXNlUmVzdWx0KSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBQcm9taXNlLmFsbChleGNlcHRpb25zKS50aGVuKHJlc3VsdHMgPT4gd3JhcFJlc3VsdHMoZGVwZW5kZW5jaWVzLCByZXN1bHRzKSk7XG4gICAgfVxuICB9XG59KTtcbmNvbnN0IG5vV2FpdCA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fbm9XYWl0JyxcbiAgZ2V0OiBkZXBlbmRlbmN5ID0+ICh7XG4gICAgZ2V0XG4gIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGxvYWRhYmxlV2l0aFZhbHVlJDQoZ2V0KGRlcGVuZGVuY3kpKTtcbiAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgIHJldHVybiBSZWNvaWxfaXNQcm9taXNlKGV4Y2VwdGlvbikgPyBsb2FkYWJsZVdpdGhQcm9taXNlJDQoZXhjZXB0aW9uKSA6IGxvYWRhYmxlV2l0aEVycm9yJDQoZXhjZXB0aW9uKTtcbiAgICB9XG4gIH1cbn0pO1xudmFyIFJlY29pbF9XYWl0Rm9yID0ge1xuICB3YWl0Rm9yTm9uZSxcbiAgd2FpdEZvckFueSxcbiAgd2FpdEZvckFsbCxcbiAgbm9XYWl0XG59O1xuXG5jb25zdCB7XG4gIGJhdGNoVXBkYXRlczogYmF0Y2hVcGRhdGVzJDMsXG4gIHNldEJhdGNoZXI6IHNldEJhdGNoZXIkMVxufSA9IFJlY29pbF9CYXRjaGluZztcblxuY29uc3Qge1xuICBEZWZhdWx0VmFsdWU6IERlZmF1bHRWYWx1ZSQ0XG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgUmVjb2lsUm9vdDogUmVjb2lsUm9vdCQyXG59ID0gUmVjb2lsX1JlY29pbFJvb3RfcmVhY3Q7XG5cbmNvbnN0IHtcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQ2XG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgZnJlc2hTbmFwc2hvdDogZnJlc2hTbmFwc2hvdCQyXG59ID0gUmVjb2lsX1NuYXBzaG90JDE7XG5cbmNvbnN0IHtcbiAgdXNlR290b1JlY29pbFNuYXBzaG90OiB1c2VHb3RvUmVjb2lsU25hcHNob3QkMSxcbiAgdXNlUmVjb2lsQ2FsbGJhY2s6IHVzZVJlY29pbENhbGxiYWNrJDEsXG4gIHVzZVJlY29pbFNuYXBzaG90OiB1c2VSZWNvaWxTbmFwc2hvdCQxLFxuICB1c2VSZWNvaWxTdGF0ZTogdXNlUmVjb2lsU3RhdGUkMSxcbiAgdXNlUmVjb2lsU3RhdGVMb2FkYWJsZTogdXNlUmVjb2lsU3RhdGVMb2FkYWJsZSQxLFxuICB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyOiB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyJDEsXG4gIHVzZVJlY29pbFZhbHVlOiB1c2VSZWNvaWxWYWx1ZSQxLFxuICB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJDEsXG4gIHVzZVJlc2V0UmVjb2lsU3RhdGU6IHVzZVJlc2V0UmVjb2lsU3RhdGUkMSxcbiAgdXNlU2V0UmVjb2lsU3RhdGU6IHVzZVNldFJlY29pbFN0YXRlJDEsXG4gIHVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlczogdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzJDEsXG4gIHVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRDogdXNlVHJhbnNhY3Rpb25PYnNlcnZhdGlvbl9ERVBSRUNBVEVEJDFcbn0gPSBSZWNvaWxfSG9va3M7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuY29uc3Qge1xuICBub1dhaXQ6IG5vV2FpdCQxLFxuICB3YWl0Rm9yQWxsOiB3YWl0Rm9yQWxsJDEsXG4gIHdhaXRGb3JBbnk6IHdhaXRGb3JBbnkkMSxcbiAgd2FpdEZvck5vbmU6IHdhaXRGb3JOb25lJDFcbn0gPSBSZWNvaWxfV2FpdEZvcjtcblxudmFyIFJlY29pbF9pbmRleCA9IHtcbiAgLy8gVHlwZXNcbiAgRGVmYXVsdFZhbHVlOiBEZWZhdWx0VmFsdWUkNCxcbiAgLy8gQ29tcG9uZW50c1xuICBSZWNvaWxSb290OiBSZWNvaWxSb290JDIsXG4gIHVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHNfVU5TVEFCTEU6IFJlY29pbF91c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzLFxuICAvLyBSZWNvaWxWYWx1ZXNcbiAgYXRvbTogUmVjb2lsX2F0b20sXG4gIHNlbGVjdG9yOiBSZWNvaWxfc2VsZWN0b3IsXG4gIC8vIENvbnZlbmllbmNlIFJlY29pbFZhbHVlc1xuICBhdG9tRmFtaWx5OiBSZWNvaWxfYXRvbUZhbWlseSxcbiAgc2VsZWN0b3JGYW1pbHk6IFJlY29pbF9zZWxlY3RvckZhbWlseSxcbiAgY29uc3RTZWxlY3RvcjogUmVjb2lsX2NvbnN0U2VsZWN0b3IsXG4gIGVycm9yU2VsZWN0b3I6IFJlY29pbF9lcnJvclNlbGVjdG9yLFxuICByZWFkT25seVNlbGVjdG9yOiBSZWNvaWxfcmVhZE9ubHlTZWxlY3RvcixcbiAgLy8gSG9va3MgdGhhdCBhY2NlcHQgUmVjb2lsVmFsdWVzXG4gIHVzZVJlY29pbFZhbHVlOiB1c2VSZWNvaWxWYWx1ZSQxLFxuICB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJDEsXG4gIHVzZVJlY29pbFN0YXRlOiB1c2VSZWNvaWxTdGF0ZSQxLFxuICB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlOiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlJDEsXG4gIHVzZVNldFJlY29pbFN0YXRlOiB1c2VTZXRSZWNvaWxTdGF0ZSQxLFxuICB1c2VSZXNldFJlY29pbFN0YXRlOiB1c2VSZXNldFJlY29pbFN0YXRlJDEsXG4gIC8vIEhvb2tzIGZvciBhc3luY2hyb25vdXMgUmVjb2lsXG4gIHVzZVJlY29pbENhbGxiYWNrOiB1c2VSZWNvaWxDYWxsYmFjayQxLFxuICAvLyBIb29rcyBmb3IgU25hcHNob3RzXG4gIHVzZUdvdG9SZWNvaWxTbmFwc2hvdDogdXNlR290b1JlY29pbFNuYXBzaG90JDEsXG4gIHVzZVJlY29pbFNuYXBzaG90OiB1c2VSZWNvaWxTbmFwc2hvdCQxLFxuICB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyX1VOU1RBQkxFOiB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyJDEsXG4gIHVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fVU5TVEFCTEU6IHVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRCQxLFxuICB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXNfVU5TVEFCTEU6IHVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlcyQxLFxuICAvLyBDb25jdXJyZW5jeSBIZWxwZXJzXG4gIG5vV2FpdDogbm9XYWl0JDEsXG4gIHdhaXRGb3JOb25lOiB3YWl0Rm9yTm9uZSQxLFxuICB3YWl0Rm9yQW55OiB3YWl0Rm9yQW55JDEsXG4gIHdhaXRGb3JBbGw6IHdhaXRGb3JBbGwkMSxcbiAgLy8gT3RoZXIgZnVuY3Rpb25zXG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkNixcbiAgLy8gQmF0Y2hpbmdcbiAgYmF0Y2hVcGRhdGVzOiBiYXRjaFVwZGF0ZXMkMyxcbiAgc2V0QmF0Y2hlcjogc2V0QmF0Y2hlciQxLFxuICAvLyBTbmFwc2hvdCBVdGlsc1xuICBzbmFwc2hvdF9VTlNUQUJMRTogZnJlc2hTbmFwc2hvdCQyXG59O1xudmFyIFJlY29pbF9pbmRleF8xID0gUmVjb2lsX2luZGV4LkRlZmF1bHRWYWx1ZTtcbnZhciBSZWNvaWxfaW5kZXhfMiA9IFJlY29pbF9pbmRleC5SZWNvaWxSb290O1xudmFyIFJlY29pbF9pbmRleF8zID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHNfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzQgPSBSZWNvaWxfaW5kZXguYXRvbTtcbnZhciBSZWNvaWxfaW5kZXhfNSA9IFJlY29pbF9pbmRleC5zZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfNiA9IFJlY29pbF9pbmRleC5hdG9tRmFtaWx5O1xudmFyIFJlY29pbF9pbmRleF83ID0gUmVjb2lsX2luZGV4LnNlbGVjdG9yRmFtaWx5O1xudmFyIFJlY29pbF9pbmRleF84ID0gUmVjb2lsX2luZGV4LmNvbnN0U2VsZWN0b3I7XG52YXIgUmVjb2lsX2luZGV4XzkgPSBSZWNvaWxfaW5kZXguZXJyb3JTZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfMTAgPSBSZWNvaWxfaW5kZXgucmVhZE9ubHlTZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfMTEgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsVmFsdWU7XG52YXIgUmVjb2lsX2luZGV4XzEyID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFZhbHVlTG9hZGFibGU7XG52YXIgUmVjb2lsX2luZGV4XzEzID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFN0YXRlO1xudmFyIFJlY29pbF9pbmRleF8xNCA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxTdGF0ZUxvYWRhYmxlO1xudmFyIFJlY29pbF9pbmRleF8xNSA9IFJlY29pbF9pbmRleC51c2VTZXRSZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfaW5kZXhfMTYgPSBSZWNvaWxfaW5kZXgudXNlUmVzZXRSZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfaW5kZXhfMTcgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsQ2FsbGJhY2s7XG52YXIgUmVjb2lsX2luZGV4XzE4ID0gUmVjb2lsX2luZGV4LnVzZUdvdG9SZWNvaWxTbmFwc2hvdDtcbnZhciBSZWNvaWxfaW5kZXhfMTkgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsU25hcHNob3Q7XG52YXIgUmVjb2lsX2luZGV4XzIwID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXJfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzIxID0gUmVjb2lsX2luZGV4LnVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzIyID0gUmVjb2lsX2luZGV4LnVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlc19VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMjMgPSBSZWNvaWxfaW5kZXgubm9XYWl0O1xudmFyIFJlY29pbF9pbmRleF8yNCA9IFJlY29pbF9pbmRleC53YWl0Rm9yTm9uZTtcbnZhciBSZWNvaWxfaW5kZXhfMjUgPSBSZWNvaWxfaW5kZXgud2FpdEZvckFueTtcbnZhciBSZWNvaWxfaW5kZXhfMjYgPSBSZWNvaWxfaW5kZXgud2FpdEZvckFsbDtcbnZhciBSZWNvaWxfaW5kZXhfMjcgPSBSZWNvaWxfaW5kZXguaXNSZWNvaWxWYWx1ZTtcbnZhciBSZWNvaWxfaW5kZXhfMjggPSBSZWNvaWxfaW5kZXguYmF0Y2hVcGRhdGVzO1xudmFyIFJlY29pbF9pbmRleF8yOSA9IFJlY29pbF9pbmRleC5zZXRCYXRjaGVyO1xudmFyIFJlY29pbF9pbmRleF8zMCA9IFJlY29pbF9pbmRleC5zbmFwc2hvdF9VTlNUQUJMRTtcblxuZXhwb3J0IGRlZmF1bHQgUmVjb2lsX2luZGV4O1xuZXhwb3J0IHsgUmVjb2lsX2luZGV4XzEgYXMgRGVmYXVsdFZhbHVlLCBSZWNvaWxfaW5kZXhfMiBhcyBSZWNvaWxSb290LCBSZWNvaWxfaW5kZXhfNCBhcyBhdG9tLCBSZWNvaWxfaW5kZXhfNiBhcyBhdG9tRmFtaWx5LCBSZWNvaWxfaW5kZXhfMjggYXMgYmF0Y2hVcGRhdGVzLCBSZWNvaWxfaW5kZXhfOCBhcyBjb25zdFNlbGVjdG9yLCBSZWNvaWxfaW5kZXhfOSBhcyBlcnJvclNlbGVjdG9yLCBSZWNvaWxfaW5kZXhfMjcgYXMgaXNSZWNvaWxWYWx1ZSwgUmVjb2lsX2luZGV4XzIzIGFzIG5vV2FpdCwgUmVjb2lsX2luZGV4XzEwIGFzIHJlYWRPbmx5U2VsZWN0b3IsIFJlY29pbF9pbmRleF81IGFzIHNlbGVjdG9yLCBSZWNvaWxfaW5kZXhfNyBhcyBzZWxlY3RvckZhbWlseSwgUmVjb2lsX2luZGV4XzI5IGFzIHNldEJhdGNoZXIsIFJlY29pbF9pbmRleF8zMCBhcyBzbmFwc2hvdF9VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzE4IGFzIHVzZUdvdG9SZWNvaWxTbmFwc2hvdCwgUmVjb2lsX2luZGV4XzMgYXMgdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290c19VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzE3IGFzIHVzZVJlY29pbENhbGxiYWNrLCBSZWNvaWxfaW5kZXhfMTkgYXMgdXNlUmVjb2lsU25hcHNob3QsIFJlY29pbF9pbmRleF8xMyBhcyB1c2VSZWNvaWxTdGF0ZSwgUmVjb2lsX2luZGV4XzE0IGFzIHVzZVJlY29pbFN0YXRlTG9hZGFibGUsIFJlY29pbF9pbmRleF8yMCBhcyB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMTEgYXMgdXNlUmVjb2lsVmFsdWUsIFJlY29pbF9pbmRleF8xMiBhcyB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlLCBSZWNvaWxfaW5kZXhfMTYgYXMgdXNlUmVzZXRSZWNvaWxTdGF0ZSwgUmVjb2lsX2luZGV4XzE1IGFzIHVzZVNldFJlY29pbFN0YXRlLCBSZWNvaWxfaW5kZXhfMjIgYXMgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMjEgYXMgdXNlVHJhbnNhY3Rpb25PYnNlcnZhdGlvbl9VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzI2IGFzIHdhaXRGb3JBbGwsIFJlY29pbF9pbmRleF8yNSBhcyB3YWl0Rm9yQW55LCBSZWNvaWxfaW5kZXhfMjQgYXMgd2FpdEZvck5vbmUgfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcihwcmVmaXgpIHtcbiAgY29uc3QgdmVyc2lvbiA9IFdFQlBBQ0tfVkVSU0lPTjtcbiAgZnVuY3Rpb24gbG9nKG1zZywgLi4uYXJncykge1xuICAgIGNvbnNvbGUubG9nKGBbJHtwcmVmaXh9ICR7dmVyc2lvbn1dICR7bXNnfWAsIC4uLmFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXJyb3IobXNnLCAuLi5hcmdzKSB7XG4gICAgY29uc29sZS5lcnJvcihgWyR7cHJlZml4fSAke3ZlcnNpb259XSAke21zZ31gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhcm4obXNnLCAuLi5hcmdzKSB7XG4gICAgY29uc29sZS53YXJuKGBbJHtwcmVmaXh9ICR7dmVyc2lvbn1dICR7bXNnfWAsIC4uLmFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVidWcobXNnLCAuLi5hcmdzKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhgWyR7cHJlZml4fSAke3ZlcnNpb259XSAke21zZ31gLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHJldHVybiB7IGxvZywgZXJyb3IsIHdhcm4sIGRlYnVnIH07XG59XG5cbmV4cG9ydCBjb25zdCB7IGxvZywgZXJyb3IsIHdhcm4sIGRlYnVnIH0gPSBjcmVhdGVMb2dnZXIoXCJhcHBcIik7XG4iLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93VXNlck1lZGlhfGFsbG93UGF5bWVudFJlcXVlc3R8YWxsb3dGdWxsU2NyZWVufGFsbG93VHJhbnNwYXJlbmN5fGFsdHxhc3luY3xhdXRvQ29tcGxldGV8YXV0b1BsYXl8Y2FwdHVyZXxjZWxsUGFkZGluZ3xjZWxsU3BhY2luZ3xjaGFsbGVuZ2V8Y2hhclNldHxjaGVja2VkfGNpdGV8Y2xhc3NJRHxjbGFzc05hbWV8Y29sc3xjb2xTcGFufGNvbnRlbnR8Y29udGVudEVkaXRhYmxlfGNvbnRleHRNZW51fGNvbnRyb2xzfGNvbnRyb2xzTGlzdHxjb29yZHN8Y3Jvc3NPcmlnaW58ZGF0YXxkYXRlVGltZXxkZWNvZGluZ3xkZWZhdWx0fGRlZmVyfGRpcnxkaXNhYmxlZHxkaXNhYmxlUGljdHVyZUluUGljdHVyZXxkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGluZGV4ID0gbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnR7dHlwZU9mIGFzIGUsaXNFbGVtZW50IGFzIHQsaXNWYWxpZEVsZW1lbnRUeXBlIGFzIG59ZnJvbVwicmVhY3QtaXNcIjtpbXBvcnQgcix7dXNlU3RhdGUgYXMgbyx1c2VDb250ZXh0IGFzIHMsdXNlTWVtbyBhcyBpLHVzZUVmZmVjdCBhcyBhLHVzZVJlZiBhcyBjLGNyZWF0ZUVsZW1lbnQgYXMgdSx1c2VEZWJ1Z1ZhbHVlIGFzIGwsdXNlTGF5b3V0RWZmZWN0IGFzIGR9ZnJvbVwicmVhY3RcIjtpbXBvcnQgaCBmcm9tXCJzaGFsbG93ZXF1YWxcIjtpbXBvcnQgcCBmcm9tXCJAZW1vdGlvbi9zdHlsaXNcIjtpbXBvcnQgZiBmcm9tXCJAZW1vdGlvbi91bml0bGVzc1wiO2ltcG9ydCBtIGZyb21cIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIjtpbXBvcnQgeSBmcm9tXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO2Z1bmN0aW9uIHYoKXtyZXR1cm4odj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3JdPW5bcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBnPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtlWzBdXSxyPTAsbz10Lmxlbmd0aDtyPG87cis9MSluLnB1c2godFtyXSxlW3IrMV0pO3JldHVybiBufSxTPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiW29iamVjdCBPYmplY3RdXCI9PT0odC50b1N0cmluZz90LnRvU3RyaW5nKCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKSYmIWUodCl9LHc9T2JqZWN0LmZyZWV6ZShbXSksRT1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiBiKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gXyhlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmZXx8ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwifWZ1bmN0aW9uIE4oZSl7cmV0dXJuIGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLnN0eWxlZENvbXBvbmVudElkfXZhciBBPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiYocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFJ8fHByb2Nlc3MuZW52LlNDX0FUVFIpfHxcImRhdGEtc3R5bGVkXCIsQz1cIjUuMi4xXCIsST1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZcIkhUTUxFbGVtZW50XCJpbiB3aW5kb3csUD1Cb29sZWFuKFwiYm9vbGVhblwiPT10eXBlb2YgU0NfRElTQUJMRV9TUEVFRFk/U0NfRElTQUJMRV9TUEVFRFk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSYmXCJcIiE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJnByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViksTz17fSxSPVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ezE6XCJDYW5ub3QgY3JlYXRlIHN0eWxlZC1jb21wb25lbnQgZm9yIGNvbXBvbmVudDogJXMuXFxuXFxuXCIsMjpcIkNhbid0IGNvbGxlY3Qgc3R5bGVzIG9uY2UgeW91J3ZlIGNvbnN1bWVkIGEgYFNlcnZlclN0eWxlU2hlZXRgJ3Mgc3R5bGVzISBgU2VydmVyU3R5bGVTaGVldGAgaXMgYSBvbmUgb2ZmIGluc3RhbmNlIGZvciBlYWNoIHNlcnZlci1zaWRlIHJlbmRlciBjeWNsZS5cXG5cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJldXNlIGl0IGFjcm9zcyByZW5kZXJzP1xcbi0gQXJlIHlvdSBhY2NpZGVudGFsbHkgY2FsbGluZyBjb2xsZWN0U3R5bGVzIHR3aWNlP1xcblxcblwiLDM6XCJTdHJlYW1pbmcgU1NSIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudDsgUGxlYXNlIGRvIG5vdCB0cnkgdG8gY2FsbCB0aGlzIG1ldGhvZCBpbiB0aGUgYnJvd3Nlci5cXG5cXG5cIiw0OlwiVGhlIGBTdHlsZVNoZWV0TWFuYWdlcmAgZXhwZWN0cyBhIHZhbGlkIHRhcmdldCBvciBzaGVldCBwcm9wIVxcblxcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBjbGllbnQgYW5kIGlzIHlvdXIgdGFyZ2V0IGZhbHN5P1xcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBzZXJ2ZXIgYW5kIGlzIHRoZSBzaGVldCBmYWxzeT9cXG5cXG5cIiw1OlwiVGhlIGNsb25lIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCBvbiB0aGUgY2xpZW50IVxcblxcbi0gQXJlIHlvdSBydW5uaW5nIGluIGEgY2xpZW50LWxpa2UgZW52aXJvbm1lbnQgb24gdGhlIHNlcnZlcj9cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJ1biBTU1Igb24gdGhlIGNsaWVudD9cXG5cXG5cIiw2OlwiVHJ5aW5nIHRvIGluc2VydCBhIG5ldyBzdHlsZSB0YWcsIGJ1dCB0aGUgZ2l2ZW4gTm9kZSBpcyB1bm1vdW50ZWQhXFxuXFxuLSBBcmUgeW91IHVzaW5nIGEgY3VzdG9tIHRhcmdldCB0aGF0IGlzbid0IG1vdW50ZWQ/XFxuLSBEb2VzIHlvdXIgZG9jdW1lbnQgbm90IGhhdmUgYSB2YWxpZCBoZWFkIGVsZW1lbnQ/XFxuLSBIYXZlIHlvdSBhY2NpZGVudGFsbHkgcmVtb3ZlZCBhIHN0eWxlIHRhZyBtYW51YWxseT9cXG5cXG5cIiw3OidUaGVtZVByb3ZpZGVyOiBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgXCJ0aGVtZVwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcbicsODonVGhlbWVQcm92aWRlcjogUGxlYXNlIG1ha2UgeW91ciBcInRoZW1lXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuJyw5OlwiTWlzc2luZyBkb2N1bWVudCBgPGhlYWQ+YFxcblxcblwiLDEwOlwiQ2Fubm90IGZpbmQgYSBTdHlsZVNoZWV0IGluc3RhbmNlLiBVc3VhbGx5IHRoaXMgaGFwcGVucyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29waWVzIG9mIHN0eWxlZC1jb21wb25lbnRzIGxvYWRlZCBhdCBvbmNlLiBDaGVjayBvdXQgdGhpcyBpc3N1ZSBmb3IgaG93IHRvIHRyb3VibGVzaG9vdCBhbmQgZml4IHRoZSBjb21tb24gY2FzZXMgd2hlcmUgdGhpcyBzaXR1YXRpb24gY2FuIGhhcHBlbjogaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2lzc3Vlcy8xOTQxI2lzc3VlY29tbWVudC00MTc4NjIwMjFcXG5cXG5cIiwxMTpcIl9UaGlzIGVycm9yIHdhcyByZXBsYWNlZCB3aXRoIGEgZGV2LXRpbWUgd2FybmluZywgaXQgd2lsbCBiZSBkZWxldGVkIGZvciB2NCBmaW5hbC5fIFtjcmVhdGVHbG9iYWxTdHlsZV0gcmVjZWl2ZWQgY2hpbGRyZW4gd2hpY2ggd2lsbCBub3QgYmUgcmVuZGVyZWQuIFBsZWFzZSB1c2UgdGhlIGNvbXBvbmVudCB3aXRob3V0IHBhc3NpbmcgY2hpbGRyZW4gZWxlbWVudHMuXFxuXFxuXCIsMTI6XCJJdCBzZWVtcyB5b3UgYXJlIGludGVycG9sYXRpbmcgYSBrZXlmcmFtZSBkZWNsYXJhdGlvbiAoJXMpIGludG8gYW4gdW50YWdnZWQgc3RyaW5nLiBUaGlzIHdhcyBzdXBwb3J0ZWQgaW4gc3R5bGVkLWNvbXBvbmVudHMgdjMsIGJ1dCBpcyBub3QgbG9uZ2VyIHN1cHBvcnRlZCBpbiB2NCBhcyBrZXlmcmFtZXMgYXJlIG5vdyBpbmplY3RlZCBvbi1kZW1hbmQuIFBsZWFzZSB3cmFwIHlvdXIgc3RyaW5nIGluIHRoZSBjc3NcXFxcYFxcXFxgIGhlbHBlciB3aGljaCBlbnN1cmVzIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGNvcnJlY3RseS4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FwaSNjc3NcXG5cXG5cIiwxMzpcIiVzIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cXG5cXG5cIiwxNDonVGhlbWVQcm92aWRlcjogXCJ0aGVtZVwiIHByb3AgaXMgcmVxdWlyZWQuXFxuXFxuJywxNTpcIkEgc3R5bGlzIHBsdWdpbiBoYXMgYmVlbiBzdXBwbGllZCB0aGF0IGlzIG5vdCBuYW1lZC4gV2UgbmVlZCBhIG5hbWUgZm9yIGVhY2ggcGx1Z2luIHRvIGJlIGFibGUgdG8gcHJldmVudCBzdHlsaW5nIGNvbGxpc2lvbnMgYmV0d2VlbiBkaWZmZXJlbnQgc3R5bGlzIGNvbmZpZ3VyYXRpb25zIHdpdGhpbiB0aGUgc2FtZSBhcHAuIEJlZm9yZSB5b3UgcGFzcyB5b3VyIHBsdWdpbiB0byBgPFN0eWxlU2hlZXRNYW5hZ2VyIHN0eWxpc1BsdWdpbnM9e1tdfT5gLCBwbGVhc2UgbWFrZSBzdXJlIGVhY2ggcGx1Z2luIGlzIHVuaXF1ZWx5LW5hbWVkLCBlLmcuXFxuXFxuYGBganNcXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoaW1wb3J0ZWRQbHVnaW4sICduYW1lJywgeyB2YWx1ZTogJ3NvbWUtdW5pcXVlLW5hbWUnIH0pO1xcbmBgYFxcblxcblwiLDE2OlwiUmVhY2hlZCB0aGUgbGltaXQgb2YgaG93IG1hbnkgc3R5bGVkIGNvbXBvbmVudHMgbWF5IGJlIGNyZWF0ZWQgYXQgZ3JvdXAgJXMuXFxuWW91IG1heSBvbmx5IGNyZWF0ZSB1cCB0byAxLDA3Myw3NDEsODI0IGNvbXBvbmVudHMuIElmIHlvdSdyZSBjcmVhdGluZyBjb21wb25lbnRzIGR5bmFtaWNhbGx5LFxcbmFzIGZvciBpbnN0YW5jZSBpbiB5b3VyIHJlbmRlciBtZXRob2QgdGhlbiB5b3UgbWF5IGJlIHJ1bm5pbmcgaW50byB0aGlzIGxpbWl0YXRpb24uXFxuXFxuXCIsMTc6XCJDU1NTdHlsZVNoZWV0IGNvdWxkIG5vdCBiZSBmb3VuZCBvbiBIVE1MU3R5bGVFbGVtZW50LlxcbkhhcyBzdHlsZWQtY29tcG9uZW50cycgc3R5bGUgdGFnIGJlZW4gdW5tb3VudGVkIG9yIGFsdGVyZWQgYnkgYW5vdGhlciBzY3JpcHQ/XFxuXCJ9Ont9O2Z1bmN0aW9uIEQoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aDw9MD92b2lkIDA6YXJndW1lbnRzWzBdLHQ9W10sbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bis9MSl0LnB1c2gobjwwfHxhcmd1bWVudHMubGVuZ3RoPD1uP3ZvaWQgMDphcmd1bWVudHNbbl0pO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2U9ZS5yZXBsYWNlKC8lW2Etel0vLHQpfSkpLGV9ZnVuY3Rpb24gaihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dGhyb3dcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WP25ldyBFcnJvcihcIkFuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXQuaW8vSlVJYUUjXCIrZStcIiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIisobi5sZW5ndGg+MD9cIiBBcmdzOiBcIituLmpvaW4oXCIsIFwiKTpcIlwiKSk6bmV3IEVycm9yKEQuYXBwbHkodm9pZCAwLFtSW2VdXS5jb25jYXQobikpLnRyaW0oKSl9dmFyIFQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuZ3JvdXBTaXplcz1uZXcgVWludDMyQXJyYXkoNTEyKSx0aGlzLmxlbmd0aD01MTIsdGhpcy50YWc9ZX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbmRleE9mR3JvdXA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj0wO248ZTtuKyspdCs9dGhpcy5ncm91cFNpemVzW25dO3JldHVybiB0fSx0Lmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCl7aWYoZT49dGhpcy5ncm91cFNpemVzLmxlbmd0aCl7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplcyxyPW4ubGVuZ3RoLG89cjtlPj1vOykobzw8PTEpPDAmJmooMTYsXCJcIitlKTt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KG8pLHRoaXMuZ3JvdXBTaXplcy5zZXQobiksdGhpcy5sZW5ndGg9bztmb3IodmFyIHM9cjtzPG87cysrKXRoaXMuZ3JvdXBTaXplc1tzXT0wfWZvcih2YXIgaT10aGlzLmluZGV4T2ZHcm91cChlKzEpLGE9MCxjPXQubGVuZ3RoO2E8YzthKyspdGhpcy50YWcuaW5zZXJ0UnVsZShpLHRbYV0pJiYodGhpcy5ncm91cFNpemVzW2VdKyssaSsrKX0sdC5jbGVhckdyb3VwPWZ1bmN0aW9uKGUpe2lmKGU8dGhpcy5sZW5ndGgpe3ZhciB0PXRoaXMuZ3JvdXBTaXplc1tlXSxuPXRoaXMuaW5kZXhPZkdyb3VwKGUpLHI9bit0O3RoaXMuZ3JvdXBTaXplc1tlXT0wO2Zvcih2YXIgbz1uO288cjtvKyspdGhpcy50YWcuZGVsZXRlUnVsZShuKX19LHQuZ2V0R3JvdXA9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZihlPj10aGlzLmxlbmd0aHx8MD09PXRoaXMuZ3JvdXBTaXplc1tlXSlyZXR1cm4gdDtmb3IodmFyIG49dGhpcy5ncm91cFNpemVzW2VdLHI9dGhpcy5pbmRleE9mR3JvdXAoZSksbz1yK24scz1yO3M8bztzKyspdCs9dGhpcy50YWcuZ2V0UnVsZShzKStcIi8qIXNjKi9cXG5cIjtyZXR1cm4gdH0sZX0oKSxrPW5ldyBNYXAseD1uZXcgTWFwLFY9MSxCPWZ1bmN0aW9uKGUpe2lmKGsuaGFzKGUpKXJldHVybiBrLmdldChlKTtmb3IoO3guaGFzKFYpOylWKys7dmFyIHQ9VisrO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJigoMHx0KTwwfHx0PjE8PDMwKSYmaigxNixcIlwiK3QpLGsuc2V0KGUsdCkseC5zZXQodCxlKSx0fSxNPWZ1bmN0aW9uKGUpe3JldHVybiB4LmdldChlKX0sej1mdW5jdGlvbihlLHQpe2suc2V0KGUsdCkseC5zZXQodCxlKX0sTD1cInN0eWxlW1wiK0ErJ11bZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMi4xXCJdJyxHPW5ldyBSZWdFeHAoXCJeXCIrQSsnXFxcXC5nKFxcXFxkKylcXFxcW2lkPVwiKFtcXFxcd1xcXFxkLV0rKVwiXFxcXF0uKj9cIihbXlwiXSopJyksRj1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciByLG89bi5zcGxpdChcIixcIikscz0wLGk9by5sZW5ndGg7czxpO3MrKykocj1vW3NdKSYmZS5yZWdpc3Rlck5hbWUodCxyKX0sWT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10LmlubmVySFRNTC5zcGxpdChcIi8qIXNjKi9cXG5cIikscj1bXSxvPTAscz1uLmxlbmd0aDtvPHM7bysrKXt2YXIgaT1uW29dLnRyaW0oKTtpZihpKXt2YXIgYT1pLm1hdGNoKEcpO2lmKGEpe3ZhciBjPTB8cGFyc2VJbnQoYVsxXSwxMCksdT1hWzJdOzAhPT1jJiYoeih1LGMpLEYoZSx1LGFbM10pLGUuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoYyxyKSksci5sZW5ndGg9MH1lbHNlIHIucHVzaChpKX19fSxxPWZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIF9fd2VicGFja19ub25jZV9fP19fd2VicGFja19ub25jZV9fOm51bGx9LEg9ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuaGVhZCxuPWV8fHQscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIiksbz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5jaGlsZE5vZGVzLG49dC5sZW5ndGg7bj49MDtuLS0pe3ZhciByPXRbbl07aWYociYmMT09PXIubm9kZVR5cGUmJnIuaGFzQXR0cmlidXRlKEEpKXJldHVybiByfX0obikscz12b2lkIDAhPT1vP28ubmV4dFNpYmxpbmc6bnVsbDtyLnNldEF0dHJpYnV0ZShBLFwiYWN0aXZlXCIpLHIuc2V0QXR0cmlidXRlKFwiZGF0YS1zdHlsZWQtdmVyc2lvblwiLFwiNS4yLjFcIik7dmFyIGk9cSgpO3JldHVybiBpJiZyLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsaSksbi5pbnNlcnRCZWZvcmUocixzKSxyfSwkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9SChlKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpKSx0aGlzLnNoZWV0PWZ1bmN0aW9uKGUpe2lmKGUuc2hlZXQpcmV0dXJuIGUuc2hlZXQ7Zm9yKHZhciB0PWRvY3VtZW50LnN0eWxlU2hlZXRzLG49MCxyPXQubGVuZ3RoO248cjtuKyspe3ZhciBvPXRbbl07aWYoby5vd25lck5vZGU9PT1lKXJldHVybiBvfWooMTcpfSh0KSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIHRoaXMuc2hlZXQuaW5zZXJ0UnVsZSh0LGUpLHRoaXMubGVuZ3RoKyssITB9Y2F0Y2goZSl7cmV0dXJuITF9fSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5zaGVldC5kZWxldGVSdWxlKGUpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLnNoZWV0LmNzc1J1bGVzW2VdO3JldHVybiB2b2lkIDAhPT10JiZcInN0cmluZ1wiPT10eXBlb2YgdC5jc3NUZXh0P3QuY3NzVGV4dDpcIlwifSxlfSgpLFc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXMuZWxlbWVudD1IKGUpO3RoaXMubm9kZXM9dC5jaGlsZE5vZGVzLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe2lmKGU8PXRoaXMubGVuZ3RoJiZlPj0wKXt2YXIgbj1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KSxyPXRoaXMubm9kZXNbZV07cmV0dXJuIHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUobixyfHxudWxsKSx0aGlzLmxlbmd0aCsrLCEwfXJldHVybiExfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMubm9kZXNbZV0pLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLm5vZGVzW2VdLnRleHRDb250ZW50OlwiXCJ9LGV9KCksVT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dGhpcy5ydWxlcz1bXSx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZTw9dGhpcy5sZW5ndGgmJih0aGlzLnJ1bGVzLnNwbGljZShlLDAsdCksdGhpcy5sZW5ndGgrKywhMCl9LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnJ1bGVzLnNwbGljZShlLDEpLHRoaXMubGVuZ3RoLS19LHQuZ2V0UnVsZT1mdW5jdGlvbihlKXtyZXR1cm4gZTx0aGlzLmxlbmd0aD90aGlzLnJ1bGVzW2VdOlwiXCJ9LGV9KCksSj1JLFg9e2lzU2VydmVyOiFJLHVzZUNTU09NSW5qZWN0aW9uOiFQfSxaPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dm9pZCAwPT09ZSYmKGU9RSksdm9pZCAwPT09dCYmKHQ9e30pLHRoaXMub3B0aW9ucz12KHt9LFgse30sZSksdGhpcy5ncz10LHRoaXMubmFtZXM9bmV3IE1hcChuKSwhdGhpcy5vcHRpb25zLmlzU2VydmVyJiZJJiZKJiYoSj0hMSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChMKSxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO28mJlwiYWN0aXZlXCIhPT1vLmdldEF0dHJpYnV0ZShBKSYmKFkoZSxvKSxvLnBhcmVudE5vZGUmJm8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSl9fSh0aGlzKSl9ZS5yZWdpc3RlcklkPWZ1bmN0aW9uKGUpe3JldHVybiBCKGUpfTt2YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEwKSxuZXcgZSh2KHt9LHRoaXMub3B0aW9ucyx7fSx0KSx0aGlzLmdzLG4mJnRoaXMubmFtZXN8fHZvaWQgMCl9LHQuYWxsb2NhdGVHU0luc3RhbmNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmdzW2VdPSh0aGlzLmdzW2VdfHwwKSsxfSx0LmdldFRhZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRhZ3x8KHRoaXMudGFnPShuPSh0PXRoaXMub3B0aW9ucykuaXNTZXJ2ZXIscj10LnVzZUNTU09NSW5qZWN0aW9uLG89dC50YXJnZXQsZT1uP25ldyBVKG8pOnI/bmV3ICQobyk6bmV3IFcobyksbmV3IFQoZSkpKTt2YXIgZSx0LG4scixvfSx0Lmhhc05hbWVGb3JJZD1mdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuaGFzKHQpfSx0LnJlZ2lzdGVyTmFtZT1mdW5jdGlvbihlLHQpe2lmKEIoZSksdGhpcy5uYW1lcy5oYXMoZSkpdGhpcy5uYW1lcy5nZXQoZSkuYWRkKHQpO2Vsc2V7dmFyIG49bmV3IFNldDtuLmFkZCh0KSx0aGlzLm5hbWVzLnNldChlLG4pfX0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQsbil7dGhpcy5yZWdpc3Rlck5hbWUoZSx0KSx0aGlzLmdldFRhZygpLmluc2VydFJ1bGVzKEIoZSksbil9LHQuY2xlYXJOYW1lcz1mdW5jdGlvbihlKXt0aGlzLm5hbWVzLmhhcyhlKSYmdGhpcy5uYW1lcy5nZXQoZSkuY2xlYXIoKX0sdC5jbGVhclJ1bGVzPWZ1bmN0aW9uKGUpe3RoaXMuZ2V0VGFnKCkuY2xlYXJHcm91cChCKGUpKSx0aGlzLmNsZWFyTmFtZXMoZSl9LHQuY2xlYXJUYWc9ZnVuY3Rpb24oKXt0aGlzLnRhZz12b2lkIDB9LHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuZ2V0VGFnKCksbj10Lmxlbmd0aCxyPVwiXCIsbz0wO288bjtvKyspe3ZhciBzPU0obyk7aWYodm9pZCAwIT09cyl7dmFyIGk9ZS5uYW1lcy5nZXQocyksYT10LmdldEdyb3VwKG8pO2lmKHZvaWQgMCE9PWkmJjAhPT1hLmxlbmd0aCl7dmFyIGM9QStcIi5nXCIrbysnW2lkPVwiJytzKydcIl0nLHU9XCJcIjt2b2lkIDAhPT1pJiZpLmZvckVhY2goKGZ1bmN0aW9uKGUpe2UubGVuZ3RoPjAmJih1Kz1lK1wiLFwiKX0pKSxyKz1cIlwiK2ErYysne2NvbnRlbnQ6XCInK3UrJ1wifS8qIXNjKi9cXG4nfX19cmV0dXJuIHJ9KHRoaXMpfSxlfSgpLEs9LyhhKShkKS9naSxRPWZ1bmN0aW9uKGUpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGUrKGU+MjU/Mzk6OTcpKX07ZnVuY3Rpb24gZWUoZSl7dmFyIHQsbj1cIlwiO2Zvcih0PU1hdGguYWJzKGUpO3Q+NTI7dD10LzUyfDApbj1RKHQlNTIpK247cmV0dXJuKFEodCU1MikrbikucmVwbGFjZShLLFwiJDEtJDJcIil9dmFyIHRlPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXQubGVuZ3RoO247KWU9MzMqZV50LmNoYXJDb2RlQXQoLS1uKTtyZXR1cm4gZX0sbmU9ZnVuY3Rpb24oZSl7cmV0dXJuIHRlKDUzODEsZSl9O2Z1bmN0aW9uIHJlKGUpe2Zvcih2YXIgdD0wO3Q8ZS5sZW5ndGg7dCs9MSl7dmFyIG49ZVt0XTtpZihiKG4pJiYhTihuKSlyZXR1cm4hMX1yZXR1cm4hMH12YXIgb2U9bmUoXCI1LjIuMVwiKSxzZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3RoaXMucnVsZXM9ZSx0aGlzLnN0YXRpY1J1bGVzSWQ9XCJcIix0aGlzLmlzU3RhdGljPVwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih2b2lkIDA9PT1ufHxuLmlzU3RhdGljKSYmcmUoZSksdGhpcy5jb21wb25lbnRJZD10LHRoaXMuYmFzZUhhc2g9dGUob2UsdCksdGhpcy5iYXNlU3R5bGU9bixaLnJlZ2lzdGVySWQodCl9cmV0dXJuIGUucHJvdG90eXBlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLmNvbXBvbmVudElkLG89W107aWYodGhpcy5iYXNlU3R5bGUmJm8ucHVzaCh0aGlzLmJhc2VTdHlsZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyhlLHQsbikpLHRoaXMuaXNTdGF0aWMmJiFuLmhhc2gpaWYodGhpcy5zdGF0aWNSdWxlc0lkJiZ0Lmhhc05hbWVGb3JJZChyLHRoaXMuc3RhdGljUnVsZXNJZCkpby5wdXNoKHRoaXMuc3RhdGljUnVsZXNJZCk7ZWxzZXt2YXIgcz1OZSh0aGlzLnJ1bGVzLGUsdCxuKS5qb2luKFwiXCIpLGk9ZWUodGUodGhpcy5iYXNlSGFzaCxzLmxlbmd0aCk+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixpKSl7dmFyIGE9bihzLFwiLlwiK2ksdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixpLGEpfW8ucHVzaChpKSx0aGlzLnN0YXRpY1J1bGVzSWQ9aX1lbHNle2Zvcih2YXIgYz10aGlzLnJ1bGVzLmxlbmd0aCx1PXRlKHRoaXMuYmFzZUhhc2gsbi5oYXNoKSxsPVwiXCIsZD0wO2Q8YztkKyspe3ZhciBoPXRoaXMucnVsZXNbZF07aWYoXCJzdHJpbmdcIj09dHlwZW9mIGgpbCs9aCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodT10ZSh1LGgrZCkpO2Vsc2UgaWYoaCl7dmFyIHA9TmUoaCxlLHQsbiksZj1BcnJheS5pc0FycmF5KHApP3Auam9pbihcIlwiKTpwO3U9dGUodSxmK2QpLGwrPWZ9fWlmKGwpe3ZhciBtPWVlKHU+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixtKSl7dmFyIHk9bihsLFwiLlwiK20sdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixtLHkpfW8ucHVzaChtKX19cmV0dXJuIG8uam9pbihcIiBcIil9LGV9KCksaWU9L15cXHMqXFwvXFwvLiokL2dtLGFlPVtcIjpcIixcIltcIixcIi5cIixcIiNcIl07ZnVuY3Rpb24gY2UoZSl7dmFyIHQsbixyLG8scz12b2lkIDA9PT1lP0U6ZSxpPXMub3B0aW9ucyxhPXZvaWQgMD09PWk/RTppLGM9cy5wbHVnaW5zLHU9dm9pZCAwPT09Yz93OmMsbD1uZXcgcChhKSxkPVtdLGg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtpZih0KXRyeXtlKHQrXCJ9XCIpfWNhdGNoKGUpe319cmV0dXJuIGZ1bmN0aW9uKG4scixvLHMsaSxhLGMsdSxsLGQpe3N3aXRjaChuKXtjYXNlIDE6aWYoMD09PWwmJjY0PT09ci5jaGFyQ29kZUF0KDApKXJldHVybiBlKHIrXCI7XCIpLFwiXCI7YnJlYWs7Y2FzZSAyOmlmKDA9PT11KXJldHVybiByK1wiLyp8Ki9cIjticmVhaztjYXNlIDM6c3dpdGNoKHUpe2Nhc2UgMTAyOmNhc2UgMTEyOnJldHVybiBlKG9bMF0rciksXCJcIjtkZWZhdWx0OnJldHVybiByKygwPT09ZD9cIi8qfCovXCI6XCJcIil9Y2FzZS0yOnIuc3BsaXQoXCIvKnwqL31cIikuZm9yRWFjaCh0KX19fSgoZnVuY3Rpb24oZSl7ZC5wdXNoKGUpfSkpLGY9ZnVuY3Rpb24oZSxyLHMpe3JldHVybiAwPT09ciYmYWUuaW5jbHVkZXMoc1tuLmxlbmd0aF0pfHxzLm1hdGNoKG8pP2U6XCIuXCIrdH07ZnVuY3Rpb24gbShlLHMsaSxhKXt2b2lkIDA9PT1hJiYoYT1cIiZcIik7dmFyIGM9ZS5yZXBsYWNlKGllLFwiXCIpLHU9cyYmaT9pK1wiIFwiK3MrXCIgeyBcIitjK1wiIH1cIjpjO3JldHVybiB0PWEsbj1zLHI9bmV3IFJlZ0V4cChcIlxcXFxcIituK1wiXFxcXGJcIixcImdcIiksbz1uZXcgUmVnRXhwKFwiKFxcXFxcIituK1wiXFxcXGIpezIsfVwiKSxsKGl8fCFzP1wiXCI6cyx1KX1yZXR1cm4gbC51c2UoW10uY29uY2F0KHUsW2Z1bmN0aW9uKGUsdCxvKXsyPT09ZSYmby5sZW5ndGgmJm9bMF0ubGFzdEluZGV4T2Yobik+MCYmKG9bMF09b1swXS5yZXBsYWNlKHIsZikpfSxoLGZ1bmN0aW9uKGUpe2lmKC0yPT09ZSl7dmFyIHQ9ZDtyZXR1cm4gZD1bXSx0fX1dKSksbS5oYXNoPXUubGVuZ3RoP3UucmVkdWNlKChmdW5jdGlvbihlLHQpe3JldHVybiB0Lm5hbWV8fGooMTUpLHRlKGUsdC5uYW1lKX0pLDUzODEpLnRvU3RyaW5nKCk6XCJcIixtfXZhciB1ZT1yLmNyZWF0ZUNvbnRleHQoKSxsZT11ZS5Db25zdW1lcixkZT1yLmNyZWF0ZUNvbnRleHQoKSxoZT0oZGUuQ29uc3VtZXIsbmV3IFopLHBlPWNlKCk7ZnVuY3Rpb24gZmUoKXtyZXR1cm4gcyh1ZSl8fGhlfWZ1bmN0aW9uIG1lKCl7cmV0dXJuIHMoZGUpfHxwZX1mdW5jdGlvbiB5ZShlKXt2YXIgdD1vKGUuc3R5bGlzUGx1Z2lucyksbj10WzBdLHM9dFsxXSxjPWZlKCksdT1pKChmdW5jdGlvbigpe3ZhciB0PWM7cmV0dXJuIGUuc2hlZXQ/dD1lLnNoZWV0OmUudGFyZ2V0JiYodD10LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoe3RhcmdldDplLnRhcmdldH0sITEpKSxlLmRpc2FibGVDU1NPTUluamVjdGlvbiYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt1c2VDU1NPTUluamVjdGlvbjohMX0pKSx0fSksW2UuZGlzYWJsZUNTU09NSW5qZWN0aW9uLGUuc2hlZXQsZS50YXJnZXRdKSxsPWkoKGZ1bmN0aW9uKCl7cmV0dXJuIGNlKHtvcHRpb25zOntwcmVmaXg6IWUuZGlzYWJsZVZlbmRvclByZWZpeGVzfSxwbHVnaW5zOm59KX0pLFtlLmRpc2FibGVWZW5kb3JQcmVmaXhlcyxuXSk7cmV0dXJuIGEoKGZ1bmN0aW9uKCl7aChuLGUuc3R5bGlzUGx1Z2lucyl8fHMoZS5zdHlsaXNQbHVnaW5zKX0pLFtlLnN0eWxpc1BsdWdpbnNdKSxyLmNyZWF0ZUVsZW1lbnQodWUuUHJvdmlkZXIse3ZhbHVlOnV9LHIuY3JlYXRlRWxlbWVudChkZS5Qcm92aWRlcix7dmFsdWU6bH0sXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9yLkNoaWxkcmVuLm9ubHkoZS5jaGlsZHJlbik6ZS5jaGlsZHJlbikpfXZhciB2ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbj10aGlzO3RoaXMuaW5qZWN0PWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9cGUpO3ZhciByPW4ubmFtZSt0Lmhhc2g7ZS5oYXNOYW1lRm9ySWQobi5pZCxyKXx8ZS5pbnNlcnRSdWxlcyhuLmlkLHIsdChuLnJ1bGVzLHIsXCJAa2V5ZnJhbWVzXCIpKX0sdGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBqKDEyLFN0cmluZyhuLm5hbWUpKX0sdGhpcy5uYW1lPWUsdGhpcy5pZD1cInNjLWtleWZyYW1lcy1cIitlLHRoaXMucnVsZXM9dH1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0TmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9cGUpLHRoaXMubmFtZStlLmhhc2h9LGV9KCksZ2U9LyhbQS1aXSkvLFNlPS8oW0EtWl0pL2csd2U9L15tcy0vLEVlPWZ1bmN0aW9uKGUpe3JldHVyblwiLVwiK2UudG9Mb3dlckNhc2UoKX07ZnVuY3Rpb24gYmUoZSl7cmV0dXJuIGdlLnRlc3QoZSk/ZS5yZXBsYWNlKFNlLEVlKS5yZXBsYWNlKHdlLFwiLW1zLVwiKTplfXZhciBfZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZXx8ITE9PT1lfHxcIlwiPT09ZX07ZnVuY3Rpb24gTmUoZSxuLHIsbyl7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciBzLGk9W10sYT0wLGM9ZS5sZW5ndGg7YTxjO2ErPTEpXCJcIiE9PShzPU5lKGVbYV0sbixyLG8pKSYmKEFycmF5LmlzQXJyYXkocyk/aS5wdXNoLmFwcGx5KGkscyk6aS5wdXNoKHMpKTtyZXR1cm4gaX1pZihfZShlKSlyZXR1cm5cIlwiO2lmKE4oZSkpcmV0dXJuXCIuXCIrZS5zdHlsZWRDb21wb25lbnRJZDtpZihiKGUpKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZihsPWUpfHxsLnByb3RvdHlwZSYmbC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudHx8IW4pcmV0dXJuIGU7dmFyIHU9ZShuKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ0KHUpJiZjb25zb2xlLndhcm4oXyhlKStcIiBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXCIpLE5lKHUsbixyLG8pfXZhciBsO3JldHVybiBlIGluc3RhbmNlb2YgdmU/cj8oZS5pbmplY3QocixvKSxlLmdldE5hbWUobykpOmU6UyhlKT9mdW5jdGlvbiBlKHQsbil7dmFyIHIsbyxzPVtdO2Zvcih2YXIgaSBpbiB0KXQuaGFzT3duUHJvcGVydHkoaSkmJiFfZSh0W2ldKSYmKFModFtpXSk/cy5wdXNoLmFwcGx5KHMsZSh0W2ldLGkpKTpiKHRbaV0pP3MucHVzaChiZShpKStcIjpcIix0W2ldLFwiO1wiKTpzLnB1c2goYmUoaSkrXCI6IFwiKyhyPWksbnVsbD09KG89dFtpXSl8fFwiYm9vbGVhblwiPT10eXBlb2Ygb3x8XCJcIj09PW8/XCJcIjpcIm51bWJlclwiIT10eXBlb2Ygb3x8MD09PW98fHIgaW4gZj9TdHJpbmcobykudHJpbSgpOm8rXCJweFwiKStcIjtcIikpO3JldHVybiBuP1tuK1wiIHtcIl0uY29uY2F0KHMsW1wifVwiXSk6c30oZSk6ZS50b1N0cmluZygpfWZ1bmN0aW9uIEFlKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gYihlKXx8UyhlKT9OZShnKHcsW2VdLmNvbmNhdChuKSkpOjA9PT1uLmxlbmd0aCYmMT09PWUubGVuZ3RoJiZcInN0cmluZ1wiPT10eXBlb2YgZVswXT9lOk5lKGcoZSxuKSl9dmFyIENlPS9pbnZhbGlkIGhvb2sgY2FsbC9pLEllPW5ldyBTZXQsUGU9ZnVuY3Rpb24oZSx0KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgbj1cIlRoZSBjb21wb25lbnQgXCIrZSsodD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIikrXCIgaGFzIGJlZW4gY3JlYXRlZCBkeW5hbWljYWxseS5cXG5Zb3UgbWF5IHNlZSB0aGlzIHdhcm5pbmcgYmVjYXVzZSB5b3UndmUgY2FsbGVkIHN0eWxlZCBpbnNpZGUgYW5vdGhlciBjb21wb25lbnQuXFxuVG8gcmVzb2x2ZSB0aGlzIG9ubHkgY3JlYXRlIG5ldyBTdHlsZWRDb21wb25lbnRzIG91dHNpZGUgb2YgYW55IHJlbmRlciBtZXRob2QgYW5kIGZ1bmN0aW9uIGNvbXBvbmVudC5cIjt0cnl7YygpLEllLmhhcyhuKXx8KGNvbnNvbGUud2FybihuKSxJZS5hZGQobikpfWNhdGNoKGUpe0NlLnRlc3QoZS5tZXNzYWdlKSYmSWUuZGVsZXRlKG4pfX19LE9lPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49RSksZS50aGVtZSE9PW4udGhlbWUmJmUudGhlbWV8fHR8fG4udGhlbWV9LFJlPS9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2csRGU9LyheLXwtJCkvZztmdW5jdGlvbiBqZShlKXtyZXR1cm4gZS5yZXBsYWNlKFJlLFwiLVwiKS5yZXBsYWNlKERlLFwiXCIpfXZhciBUZT1mdW5jdGlvbihlKXtyZXR1cm4gZWUobmUoZSk+Pj4wKX07ZnVuY3Rpb24ga2UoZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxlLmNoYXJBdCgwKT09PWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkpfXZhciB4ZT1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfHxcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJiFBcnJheS5pc0FycmF5KGUpfSxWZT1mdW5jdGlvbihlKXtyZXR1cm5cIl9fcHJvdG9fX1wiIT09ZSYmXCJjb25zdHJ1Y3RvclwiIT09ZSYmXCJwcm90b3R5cGVcIiE9PWV9O2Z1bmN0aW9uIEJlKGUsdCxuKXt2YXIgcj1lW25dO3hlKHQpJiZ4ZShyKT9NZShyLHQpOmVbbl09dH1mdW5jdGlvbiBNZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07Zm9yKHZhciBvPTAscz1uO288cy5sZW5ndGg7bysrKXt2YXIgaT1zW29dO2lmKHhlKGkpKWZvcih2YXIgYSBpbiBpKVZlKGEpJiZCZShlLGlbYV0sYSl9cmV0dXJuIGV9dmFyIHplPXIuY3JlYXRlQ29udGV4dCgpLExlPXplLkNvbnN1bWVyO2Z1bmN0aW9uIEdlKGUpe3ZhciB0PXMoemUpLG49aSgoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm4gaigxNCk7aWYoYihlKSl7dmFyIG49ZSh0KTtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxudWxsIT09biYmIUFycmF5LmlzQXJyYXkobikmJlwib2JqZWN0XCI9PXR5cGVvZiBuP246aig3KX1yZXR1cm4gQXJyYXkuaXNBcnJheShlKXx8XCJvYmplY3RcIiE9dHlwZW9mIGU/aig4KTp0P3Yoe30sdCx7fSxlKTplfShlLnRoZW1lLHQpfSksW2UudGhlbWUsdF0pO3JldHVybiBlLmNoaWxkcmVuP3IuY3JlYXRlRWxlbWVudCh6ZS5Qcm92aWRlcix7dmFsdWU6bn0sZS5jaGlsZHJlbik6bnVsbH12YXIgRmU9e307ZnVuY3Rpb24gWWUoZSx0LG4pe3ZhciBvPU4oZSksaT0ha2UoZSksYT10LmF0dHJzLGM9dm9pZCAwPT09YT93OmEsZD10LmNvbXBvbmVudElkLGg9dm9pZCAwPT09ZD9mdW5jdGlvbihlLHQpe3ZhciBuPVwic3RyaW5nXCIhPXR5cGVvZiBlP1wic2NcIjpqZShlKTtGZVtuXT0oRmVbbl18fDApKzE7dmFyIHI9bitcIi1cIitUZShcIjUuMi4xXCIrbitGZVtuXSk7cmV0dXJuIHQ/dCtcIi1cIityOnJ9KHQuZGlzcGxheU5hbWUsdC5wYXJlbnRDb21wb25lbnRJZCk6ZCxwPXQuZGlzcGxheU5hbWUsZj12b2lkIDA9PT1wP2Z1bmN0aW9uKGUpe3JldHVybiBrZShlKT9cInN0eWxlZC5cIitlOlwiU3R5bGVkKFwiK18oZSkrXCIpXCJ9KGUpOnAsZz10LmRpc3BsYXlOYW1lJiZ0LmNvbXBvbmVudElkP2plKHQuZGlzcGxheU5hbWUpK1wiLVwiK3QuY29tcG9uZW50SWQ6dC5jb21wb25lbnRJZHx8aCxTPW8mJmUuYXR0cnM/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmF0dHJzLGMpLmZpbHRlcihCb29sZWFuKTpjLEE9dC5zaG91bGRGb3J3YXJkUHJvcDtvJiZlLnNob3VsZEZvcndhcmRQcm9wJiYoQT10LnNob3VsZEZvcndhcmRQcm9wP2Z1bmN0aW9uKG4scil7cmV0dXJuIGUuc2hvdWxkRm9yd2FyZFByb3AobixyKSYmdC5zaG91bGRGb3J3YXJkUHJvcChuLHIpfTplLnNob3VsZEZvcndhcmRQcm9wKTt2YXIgQyxJPW5ldyBzZShuLGcsbz9lLmNvbXBvbmVudFN0eWxlOnZvaWQgMCksUD1JLmlzU3RhdGljJiYwPT09Yy5sZW5ndGgsTz1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbixyKXt2YXIgbz1lLmF0dHJzLGk9ZS5jb21wb25lbnRTdHlsZSxhPWUuZGVmYXVsdFByb3BzLGM9ZS5mb2xkZWRDb21wb25lbnRJZHMsZD1lLnNob3VsZEZvcndhcmRQcm9wLGg9ZS5zdHlsZWRDb21wb25lbnRJZCxwPWUudGFyZ2V0O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmwoaCk7dmFyIGY9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PWUmJihlPUUpO3ZhciByPXYoe30sdCx7dGhlbWU6ZX0pLG89e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQsbixzLGk9ZTtmb3IodCBpbiBiKGkpJiYoaT1pKHIpKSxpKXJbdF09b1t0XT1cImNsYXNzTmFtZVwiPT09dD8obj1vW3RdLHM9aVt0XSxuJiZzP24rXCIgXCIrczpufHxzKTppW3RdfSkpLFtyLG9dfShPZSh0LHMoemUpLGEpfHxFLHQsbykseT1mWzBdLGc9ZlsxXSxTPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWZlKCkscz1tZSgpLGk9dD9lLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEUsbyxzKTplLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKG4sbyxzKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZsKGkpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJiF0JiZyJiZyKGkpLGl9KGkscix5LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ZS53YXJuVG9vTWFueUNsYXNzZXM6dm9pZCAwKSx3PW4sXz1nLiRhc3x8dC4kYXN8fGcuYXN8fHQuYXN8fHAsTj1rZShfKSxBPWchPT10P3Yoe30sdCx7fSxnKTp0LEM9e307Zm9yKHZhciBJIGluIEEpXCIkXCIhPT1JWzBdJiZcImFzXCIhPT1JJiYoXCJmb3J3YXJkZWRBc1wiPT09ST9DLmFzPUFbSV06KGQ/ZChJLG0pOiFOfHxtKEkpKSYmKENbSV09QVtJXSkpO3JldHVybiB0LnN0eWxlJiZnLnN0eWxlIT09dC5zdHlsZSYmKEMuc3R5bGU9dih7fSx0LnN0eWxlLHt9LGcuc3R5bGUpKSxDLmNsYXNzTmFtZT1BcnJheS5wcm90b3R5cGUuY29uY2F0KGMsaCxTIT09aD9TOm51bGwsdC5jbGFzc05hbWUsZy5jbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSxDLnJlZj13LHUoXyxDKX0oQyxlLHQsUCl9O3JldHVybiBPLmRpc3BsYXlOYW1lPWYsKEM9ci5mb3J3YXJkUmVmKE8pKS5hdHRycz1TLEMuY29tcG9uZW50U3R5bGU9SSxDLmRpc3BsYXlOYW1lPWYsQy5zaG91bGRGb3J3YXJkUHJvcD1BLEMuZm9sZGVkQ29tcG9uZW50SWRzPW8/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmZvbGRlZENvbXBvbmVudElkcyxlLnN0eWxlZENvbXBvbmVudElkKTp3LEMuc3R5bGVkQ29tcG9uZW50SWQ9ZyxDLnRhcmdldD1vP2UudGFyZ2V0OmUsQy53aXRoQ29tcG9uZW50PWZ1bmN0aW9uKGUpe3ZhciByPXQuY29tcG9uZW50SWQsbz1mdW5jdGlvbihlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIG4scixvPXt9LHM9T2JqZWN0LmtleXMoZSk7Zm9yKHI9MDtyPHMubGVuZ3RoO3IrKyluPXNbcl0sdC5pbmRleE9mKG4pPj0wfHwob1tuXT1lW25dKTtyZXR1cm4gb30odCxbXCJjb21wb25lbnRJZFwiXSkscz1yJiZyK1wiLVwiKyhrZShlKT9lOmplKF8oZSkpKTtyZXR1cm4gWWUoZSx2KHt9LG8se2F0dHJzOlMsY29tcG9uZW50SWQ6c30pLG4pfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoQyxcImRlZmF1bHRQcm9wc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fZm9sZGVkRGVmYXVsdFByb3BzPW8/TWUoe30sZS5kZWZhdWx0UHJvcHMsdCk6dH19KSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoUGUoZixnKSxDLndhcm5Ub29NYW55Q2xhc3Nlcz1mdW5jdGlvbihlLHQpe3ZhciBuPXt9LHI9ITE7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKCFyJiYobltvXT0hMCxPYmplY3Qua2V5cyhuKS5sZW5ndGg+PTIwMCkpe3ZhciBzPXQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCI7Y29uc29sZS53YXJuKFwiT3ZlciAyMDAgY2xhc3NlcyB3ZXJlIGdlbmVyYXRlZCBmb3IgY29tcG9uZW50IFwiK2UrcytcIi5cXG5Db25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbkV4YW1wbGU6XFxuICBjb25zdCBDb21wb25lbnQgPSBzdHlsZWQuZGl2LmF0dHJzKHByb3BzID0+ICh7XFxuICAgIHN0eWxlOiB7XFxuICAgICAgYmFja2dyb3VuZDogcHJvcHMuYmFja2dyb3VuZCxcXG4gICAgfSxcXG4gIH0pKWB3aWR0aDogMTAwJTtgXFxuXFxuICA8Q29tcG9uZW50IC8+XCIpLHI9ITAsbj17fX19fShmLGcpKSxDLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIuXCIrQy5zdHlsZWRDb21wb25lbnRJZH0saSYmeShDLGUse2F0dHJzOiEwLGNvbXBvbmVudFN0eWxlOiEwLGRpc3BsYXlOYW1lOiEwLGZvbGRlZENvbXBvbmVudElkczohMCxzaG91bGRGb3J3YXJkUHJvcDohMCxzdHlsZWRDb21wb25lbnRJZDohMCx0YXJnZXQ6ITAsd2l0aENvbXBvbmVudDohMH0pLEN9dmFyIHFlPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbiBlKHQscixvKXtpZih2b2lkIDA9PT1vJiYobz1FKSwhbihyKSlyZXR1cm4gaigxLFN0cmluZyhyKSk7dmFyIHM9ZnVuY3Rpb24oKXtyZXR1cm4gdChyLG8sQWUuYXBwbHkodm9pZCAwLGFyZ3VtZW50cykpfTtyZXR1cm4gcy53aXRoQ29uZmlnPWZ1bmN0aW9uKG4pe3JldHVybiBlKHQscix2KHt9LG8se30sbikpfSxzLmF0dHJzPWZ1bmN0aW9uKG4pe3JldHVybiBlKHQscix2KHt9LG8se2F0dHJzOkFycmF5LnByb3RvdHlwZS5jb25jYXQoby5hdHRycyxuKS5maWx0ZXIoQm9vbGVhbil9KSl9LHN9KFllLGUpfTtbXCJhXCIsXCJhYmJyXCIsXCJhZGRyZXNzXCIsXCJhcmVhXCIsXCJhcnRpY2xlXCIsXCJhc2lkZVwiLFwiYXVkaW9cIixcImJcIixcImJhc2VcIixcImJkaVwiLFwiYmRvXCIsXCJiaWdcIixcImJsb2NrcXVvdGVcIixcImJvZHlcIixcImJyXCIsXCJidXR0b25cIixcImNhbnZhc1wiLFwiY2FwdGlvblwiLFwiY2l0ZVwiLFwiY29kZVwiLFwiY29sXCIsXCJjb2xncm91cFwiLFwiZGF0YVwiLFwiZGF0YWxpc3RcIixcImRkXCIsXCJkZWxcIixcImRldGFpbHNcIixcImRmblwiLFwiZGlhbG9nXCIsXCJkaXZcIixcImRsXCIsXCJkdFwiLFwiZW1cIixcImVtYmVkXCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRcIixcImhlYWRlclwiLFwiaGdyb3VwXCIsXCJoclwiLFwiaHRtbFwiLFwiaVwiLFwiaWZyYW1lXCIsXCJpbWdcIixcImlucHV0XCIsXCJpbnNcIixcImtiZFwiLFwia2V5Z2VuXCIsXCJsYWJlbFwiLFwibGVnZW5kXCIsXCJsaVwiLFwibGlua1wiLFwibWFpblwiLFwibWFwXCIsXCJtYXJrXCIsXCJtYXJxdWVlXCIsXCJtZW51XCIsXCJtZW51aXRlbVwiLFwibWV0YVwiLFwibWV0ZXJcIixcIm5hdlwiLFwibm9zY3JpcHRcIixcIm9iamVjdFwiLFwib2xcIixcIm9wdGdyb3VwXCIsXCJvcHRpb25cIixcIm91dHB1dFwiLFwicFwiLFwicGFyYW1cIixcInBpY3R1cmVcIixcInByZVwiLFwicHJvZ3Jlc3NcIixcInFcIixcInJwXCIsXCJydFwiLFwicnVieVwiLFwic1wiLFwic2FtcFwiLFwic2NyaXB0XCIsXCJzZWN0aW9uXCIsXCJzZWxlY3RcIixcInNtYWxsXCIsXCJzb3VyY2VcIixcInNwYW5cIixcInN0cm9uZ1wiLFwic3R5bGVcIixcInN1YlwiLFwic3VtbWFyeVwiLFwic3VwXCIsXCJ0YWJsZVwiLFwidGJvZHlcIixcInRkXCIsXCJ0ZXh0YXJlYVwiLFwidGZvb3RcIixcInRoXCIsXCJ0aGVhZFwiLFwidGltZVwiLFwidGl0bGVcIixcInRyXCIsXCJ0cmFja1wiLFwidVwiLFwidWxcIixcInZhclwiLFwidmlkZW9cIixcIndiclwiLFwiY2lyY2xlXCIsXCJjbGlwUGF0aFwiLFwiZGVmc1wiLFwiZWxsaXBzZVwiLFwiZm9yZWlnbk9iamVjdFwiLFwiZ1wiLFwiaW1hZ2VcIixcImxpbmVcIixcImxpbmVhckdyYWRpZW50XCIsXCJtYXJrZXJcIixcIm1hc2tcIixcInBhdGhcIixcInBhdHRlcm5cIixcInBvbHlnb25cIixcInBvbHlsaW5lXCIsXCJyYWRpYWxHcmFkaWVudFwiLFwicmVjdFwiLFwic3RvcFwiLFwic3ZnXCIsXCJ0ZXh0XCIsXCJ0c3BhblwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtxZVtlXT1xZShlKX0pKTt2YXIgSGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5ydWxlcz1lLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmlzU3RhdGljPXJlKGUpLFoucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkKzEpfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZVN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1yKE5lKHRoaXMucnVsZXMsdCxuLHIpLmpvaW4oXCJcIiksXCJcIikscz10aGlzLmNvbXBvbmVudElkK2U7bi5pbnNlcnRSdWxlcyhzLHMsbyl9LHQucmVtb3ZlU3R5bGVzPWZ1bmN0aW9uKGUsdCl7dC5jbGVhclJ1bGVzKHRoaXMuY29tcG9uZW50SWQrZSl9LHQucmVuZGVyU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe2U+MiYmWi5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrZSksdGhpcy5yZW1vdmVTdHlsZXMoZSxuKSx0aGlzLmNyZWF0ZVN0eWxlcyhlLHQsbixyKX0sZX0oKTtmdW5jdGlvbiAkZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKW5bby0xXT1hcmd1bWVudHNbb107dmFyIGk9QWUuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLGE9XCJzYy1nbG9iYWwtXCIrVGUoSlNPTi5zdHJpbmdpZnkoaSkpLHU9bmV3IEhlKGksYSk7ZnVuY3Rpb24gbChlKXt2YXIgdD1mZSgpLG49bWUoKSxvPXMoemUpLGw9Yyh0LmFsbG9jYXRlR1NJbnN0YW5jZShhKSkuY3VycmVudDtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZyLkNoaWxkcmVuLmNvdW50KGUuY2hpbGRyZW4pJiZjb25zb2xlLndhcm4oXCJUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCBcIithK1wiIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCJAaW1wb3J0XCIpfSkpJiZjb25zb2xlLndhcm4oXCJQbGVhc2UgZG8gbm90IHVzZSBAaW1wb3J0IENTUyBzeW50YXggaW4gY3JlYXRlR2xvYmFsU3R5bGUgYXQgdGhpcyB0aW1lLCBhcyB0aGUgQ1NTT00gQVBJcyB3ZSB1c2UgaW4gcHJvZHVjdGlvbiBkbyBub3QgaGFuZGxlIGl0IHdlbGwuIEluc3RlYWQsIHdlIHJlY29tbWVuZCB1c2luZyBhIGxpYnJhcnkgc3VjaCBhcyByZWFjdC1oZWxtZXQgdG8gaW5qZWN0IGEgdHlwaWNhbCA8bGluaz4gbWV0YSB0YWcgdG8gdGhlIHN0eWxlc2hlZXQsIG9yIHNpbXBseSBlbWJlZGRpbmcgaXQgbWFudWFsbHkgaW4geW91ciBpbmRleC5odG1sIDxoZWFkPiBzZWN0aW9uIGZvciBhIHNpbXBsZXIgYXBwLlwiKSxkKChmdW5jdGlvbigpe3JldHVybiBoKGwsZSx0LG8sbiksZnVuY3Rpb24oKXtyZXR1cm4gdS5yZW1vdmVTdHlsZXMobCx0KX19KSxbbCxlLHQsbyxuXSksbnVsbH1mdW5jdGlvbiBoKGUsdCxuLHIsbyl7aWYodS5pc1N0YXRpYyl1LnJlbmRlclN0eWxlcyhlLE8sbixvKTtlbHNle3ZhciBzPXYoe30sdCx7dGhlbWU6T2UodCxyLGwuZGVmYXVsdFByb3BzKX0pO3UucmVuZGVyU3R5bGVzKGUscyxuLG8pfX1yZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZQZShhKSxyLm1lbW8obCl9ZnVuY3Rpb24gV2UoZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcImBrZXlmcmFtZXNgIGNhbm5vdCBiZSB1c2VkIG9uIFJlYWN0TmF0aXZlLCBvbmx5IG9uIHRoZSB3ZWIuIFRvIGRvIGFuaW1hdGlvbiBpbiBSZWFjdE5hdGl2ZSBwbGVhc2UgdXNlIEFuaW1hdGVkLlwiKTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dmFyIG89QWUuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLmpvaW4oXCJcIikscz1UZShvKTtyZXR1cm4gbmV3IHZlKHMsbyl9dmFyIFVlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXRoaXM7dGhpcy5fZW1pdFNoZWV0Q1NTPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5pbnN0YW5jZS50b1N0cmluZygpLG49cSgpO3JldHVyblwiPHN0eWxlIFwiK1tuJiYnbm9uY2U9XCInK24rJ1wiJyxBKyc9XCJ0cnVlXCInLCdkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4yLjFcIiddLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKStcIj5cIit0K1wiPC9zdHlsZT5cIn0sdGhpcy5nZXRTdHlsZVRhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gZS5zZWFsZWQ/aigyKTplLl9lbWl0U2hlZXRDU1MoKX0sdGhpcy5nZXRTdHlsZUVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdDtpZihlLnNlYWxlZClyZXR1cm4gaigyKTt2YXIgbj0oKHQ9e30pW0FdPVwiXCIsdFtcImRhdGEtc3R5bGVkLXZlcnNpb25cIl09XCI1LjIuMVwiLHQuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e19faHRtbDplLmluc3RhbmNlLnRvU3RyaW5nKCl9LHQpLG89cSgpO3JldHVybiBvJiYobi5ub25jZT1vKSxbci5jcmVhdGVFbGVtZW50KFwic3R5bGVcIix2KHt9LG4se2tleTpcInNjLTAtMFwifSkpXX0sdGhpcy5zZWFsPWZ1bmN0aW9uKCl7ZS5zZWFsZWQ9ITB9LHRoaXMuaW5zdGFuY2U9bmV3IFooe2lzU2VydmVyOiEwfSksdGhpcy5zZWFsZWQ9ITF9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY29sbGVjdFN0eWxlcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZWFsZWQ/aigyKTpyLmNyZWF0ZUVsZW1lbnQoeWUse3NoZWV0OnRoaXMuaW5zdGFuY2V9LGUpfSx0LmludGVybGVhdmVXaXRoTm9kZVN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gaigzKX0sZX0oKSxKZT1mdW5jdGlvbihlKXt2YXIgdD1yLmZvcndhcmRSZWYoKGZ1bmN0aW9uKHQsbil7dmFyIG89cyh6ZSksaT1lLmRlZmF1bHRQcm9wcyxhPU9lKHQsbyxpKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2b2lkIDA9PT1hJiZjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJytfKGUpKydcIicpLHIuY3JlYXRlRWxlbWVudChlLHYoe30sdCx7dGhlbWU6YSxyZWY6bn0pKX0pKTtyZXR1cm4geSh0LGUpLHQuZGlzcGxheU5hbWU9XCJXaXRoVGhlbWUoXCIrXyhlKStcIilcIix0fSxYZT1mdW5jdGlvbigpe3JldHVybiBzKHplKX0sWmU9e1N0eWxlU2hlZXQ6WixtYXN0ZXJTaGVldDpoZX07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgeW91J3ZlIGltcG9ydGVkICdzdHlsZWQtY29tcG9uZW50cycgb24gUmVhY3QgTmF0aXZlLlxcblBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblJlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmVcIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ0ZXN0XCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdPXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdfHwwLDE9PT13aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2YgJ3N0eWxlZC1jb21wb25lbnRzJyBpbml0aWFsaXplZCBpbiB0aGlzIGFwcGxpY2F0aW9uLiBUaGlzIG1heSBjYXVzZSBkeW5hbWljIHN0eWxlcyB0byBub3QgcmVuZGVyIHByb3Blcmx5LCBlcnJvcnMgZHVyaW5nIHRoZSByZWh5ZHJhdGlvbiBwcm9jZXNzLCBhIG1pc3NpbmcgdGhlbWUgcHJvcCwgYW5kIG1ha2VzIHlvdXIgYXBwbGljYXRpb24gYmlnZ2VyIHdpdGhvdXQgZ29vZCByZWFzb24uXFxuXFxuU2VlIGh0dHBzOi8vcy1jLnNoLzJCQVh6ZWQgZm9yIG1vcmUgaW5mby5cIiksd2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl0rPTEpO2V4cG9ydCBkZWZhdWx0IHFlO2V4cG9ydHtVZSBhcyBTZXJ2ZXJTdHlsZVNoZWV0LGxlIGFzIFN0eWxlU2hlZXRDb25zdW1lcix1ZSBhcyBTdHlsZVNoZWV0Q29udGV4dCx5ZSBhcyBTdHlsZVNoZWV0TWFuYWdlcixMZSBhcyBUaGVtZUNvbnN1bWVyLHplIGFzIFRoZW1lQ29udGV4dCxHZSBhcyBUaGVtZVByb3ZpZGVyLFplIGFzIF9fUFJJVkFURV9fLCRlIGFzIGNyZWF0ZUdsb2JhbFN0eWxlLEFlIGFzIGNzcyxOIGFzIGlzU3R5bGVkQ29tcG9uZW50LFdlIGFzIGtleWZyYW1lcyxYZSBhcyB1c2VUaGVtZSxDIGFzIHZlcnNpb24sSmUgYXMgd2l0aFRoZW1lfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgYXRvbSB9IGZyb20gXCJyZWNvaWxcIjtcblxuY29uc3QgaW5zdGFsbFByb21wdFN0YXRlID0gYXRvbSh7XG4gIGtleTogXCJpbnN0YWxsYXRpb25TdGF0ZVwiLFxuICBkZWZhdWx0OiBudWxsLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGluc3RhbGxQcm9tcHRTdGF0ZTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkLCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgeyB1c2VSZWNvaWxTdGF0ZSB9IGZyb20gXCJyZWNvaWxcIjtcbmltcG9ydCBpbnN0YWxsUHJvbXB0U3RhdGUgZnJvbSBcIi4uL3N0YXRlL2luc3RhbGxQcm9tcHRTdGF0ZVwiO1xuXG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi4vbG9nZ2VyXCI7XG5cbmNvbnN0IGtmMSA9IGtleWZyYW1lc2BcbiAgZnJvbSB7XG4gICAgbWFyZ2luLXJpZ2h0OiAtNTBweDtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG1hcmdpbi1yaWdodDogMHB4O1xuICB9XG5cbmA7XG5cbmNvbnN0IGtmMiA9IGtleWZyYW1lc2BcbiAgZnJvbSB7XG4gICAgbWFyZ2luLXJpZ2h0OiAtNTBweDtcbiAgfVxuXG4gIDEwMCUge1xuICAgIG1hcmdpbi1yaWdodDogMHB4O1xuICB9XG5cbmA7XG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogYmxhY2s7XG4gIG1hcmdpbjogLTUwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZpbGw6IGJsYWNrO1xuICAvL2JhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogNXB4IDUwcHggNXB4IDEwcHg7XG4gIGhlaWdodDogMzJweDtcbiAgYnV0dG9uIHtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgYm90dG9tOiAxMHB4O1xuICAgIHJpZ2h0OiA1cHg7XG4gICAgbWFyZ2luLXJpZ2h0OiAtNTBweDtcbiAgICBhbmltYXRpb24tbmFtZTogJHtrZjJ9O1xuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogNTAwbXM7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAycztcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcbiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC4yMiwgMC42MSwgMC4zNiwgMSk7XG4gIH1cbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEluc3RhbGxQcm9tcHQoeyBzaG93IH0pIHtcbiAgY29uc3QgW2luc3RhbGxTdGF0ZSwgc2V0SW5zdGFsbFN0YXRlXSA9IHVzZVJlY29pbFN0YXRlKGluc3RhbGxQcm9tcHRTdGF0ZSk7XG4gIGNvbnN0IFtkaXNtaXNzZWQsIHNldERpc21pc3NlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGFzeW5jIGZ1bmN0aW9uIGNsaWNrKCkge1xuICAgIC8vIFNob3cgdGhlIGluc3RhbGwgcHJvbXB0XG4gICAgaWYgKGluc3RhbGxTdGF0ZSkge1xuICAgICAgaW5zdGFsbFN0YXRlLnByb21wdCgpO1xuICAgICAgLy8gLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcmVzcG9uZCB0byB0aGUgcHJvbXB0XG4gICAgICBjb25zdCB7IG91dGNvbWUgfSA9IGF3YWl0IGluc3RhbGxTdGF0ZS51c2VyQ2hvaWNlO1xuICAgICAgLy8gT3B0aW9uYWxseSwgc2VuZCBhbmFseXRpY3MgZXZlbnQgd2l0aCBvdXRjb21lIG9mIHVzZXIgY2hvaWNlXG4gICAgICBsb2coYFVzZXIgcmVzcG9uc2UgdG8gdGhlIGluc3RhbGwgcHJvbXB0OiAke291dGNvbWV9YCk7XG4gICAgICAvLyBXZSd2ZSB1c2VkIHRoZSBwcm9tcHQsIGFuZCBjYW4ndCB1c2UgaXQgYWdhaW4sIHRocm93IGl0IGF3YXlcbiAgICAgIHNldEluc3RhbGxTdGF0ZShudWxsKTtcbiAgICAgIHNldERpc21pc3NlZCh0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpbnN0YWxsU3RhdGUgfHwgZGlzbWlzc2VkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxDb250YWluZXI+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGlkPVwiaW5zdGFsbC1idXR0b25cIlxuICAgICAgICBjbGFzc05hbWU9XCJ1cGRhdGUgdGV4dC1ibGFjayBib3JkZXItMCBiZy15ZWxsb3ctNTAwIHJvdW5kZWQgbWwtMiBmbGV4IGZsZXgtY29sIGl0ZW1zLWNlbnRlciBwLTFcIlxuICAgICAgICBvbkNsaWNrPXtjbGlja31cbiAgICAgID5cbiAgICAgICAgPHN2Z1xuICAgICAgICAgIGNsYXNzTmFtZT1cImZpbGwtY3VycmVudFwiXG4gICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgaGVpZ2h0PVwiMjRcIlxuICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgICAgIHdpZHRoPVwiMjRcIlxuICAgICAgICA+XG4gICAgICAgICAgPHBhdGggZD1cIk0wIC41aDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIiAvPlxuICAgICAgICAgIDxwYXRoIGQ9XCJNMTIgMTYuNWw0LTRoLTN2LTloLTJ2OUg4bDQgNHptOS0xM2gtNnYxLjk5aDZ2MTQuMDNIM1Y1LjQ5aDZWMy41SDNjLTEuMSAwLTIgLjktMiAydjE0YzAgMS4xLjkgMiAyIDJoMThjMS4xIDAgMi0uOSAyLTJ2LTE0YzAtMS4xLS45LTItMi0yelwiIC8+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgPC9idXR0b24+XG4gICAgPC9Db250YWluZXI+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgSW5zdGFsbFByb21wdCBmcm9tIFwiLi9JbnN0YWxsUHJvbXB0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEhlYWRlcigpIHtcbiAgY29uc3QgdmVyc2lvbiA9IFdFQlBBQ0tfVkVSU0lPTjtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxzcGFuPkNsYXB0YXN0aWM8L3NwYW4+XG4gICAgICAgIDxzcGFuIGlkPVwidmVyc2lvblwiIGNsYXNzTmFtZT1cInZlcnNpb25cIj5cbiAgICAgICAgICBWe3ZlcnNpb259XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4XCI+XG4gICAgICAgIDxJbnN0YWxsUHJvbXB0PjwvSW5zdGFsbFByb21wdD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImMzYjVjZjY3Y2IwYzA3YTYzYjg2NThhYTc2MzEyZWM0Lm1wM1wiOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBsb2NhbEZvcmFnZSBmcm9tIFwibG9jYWxmb3JhZ2VcIjtcbmltcG9ydCBhdWRpb0ZpbGVVcmwgZnJvbSBcIi4uL21lZGlhL2F1ZGlvLm1wM1wiO1xuXG5jb25zdCBhdWRpbyA9IG5ldyBBdWRpbygpO1xuXG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi9sb2dnZXJcIjtcbmNvbnN0IHsgZXJyb3IgfSA9IGxvZ2dlcihcImNsYXBCdXR0b25cIik7XG5jb25zdCBjbGFwQXVkaW9TdG9yYWdlS2V5SXRlbSA9IFwibXAzXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRNcDMoKSB7XG4gIC8vIE5vdGljZWQgc29tZSBvZGQgYmVoYXZpb3IgaW4gYW5kcm9pZCB3aGVyZSBpZiBvZmZsaW5lIGZvciBjZXJ0YWluIGFtb3VudCBvZiB0aW1lIGxvb2tzIGxpa2UgYXVkaW8gaXNcbiAgLy8gcmVtb3ZlZCBmcm9tIGNhY2hlP1xuICAvLyBzdG9yZSBpbiBpbmRleGRiIGp1c3QgdG8gYmUgc2FmZVxuICAvLyBJZiB3ZSBoYXZlIHByZXZpb3VzIHNhdmVkIHZlcnNpb24gaW4gZGIsIHdlIG1heSBzdGlsbCBsaXZlXG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhdWRpb0ZpbGVVcmwpO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IHJlc3BvbnNlO1xuICAgIH1cblxuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG4gICAgYXdhaXQgbG9jYWxGb3JhZ2Uuc2V0SXRlbShjbGFwQXVkaW9TdG9yYWdlS2V5SXRlbSwgYmxvYik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBlcnJvcihcIkZhaWxlZCB0byBsb2FkIGF1ZGlvXCIsIGUpO1xuICB9XG5cbiAgcmV0dXJuIGxvY2FsRm9yYWdlLmdldEl0ZW0oY2xhcEF1ZGlvU3RvcmFnZUtleUl0ZW0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXR1cEF1ZGlvKCkge1xuICBjb25zdCBibG9iID0gYXdhaXQgbG9hZE1wMygpO1xuICBhdWRpby5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICBhdWRpby5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgKF8pID0+IHtcbiAgICBzdG9wQW5pbSgpO1xuICB9KTtcbiAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlcIiwgKF8pID0+IHtcbiAgICBzdGFydEFuaW0oKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBsYXkoKSB7XG4gIHJldHVybiBhdWRpby5wbGF5KCk7XG59XG5cbmxldCBpbnRlcnZhbDtcbmZ1bmN0aW9uIHN0YXJ0QW5pbSgpIHtcbiAgaWYgKGludGVydmFsICE9IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpY29uXCIpO1xuICBsZXQgdG9nZ2xlID0gZmFsc2U7XG4gIGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgIGlmICghdG9nZ2xlKSB7XG4gICAgICBlbGUuc3R5bGUudHJhbnNmb3JtID0gXCJzY2FsZSgxLjIpXCI7XG4gICAgICB0b2dnbGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGUuc3R5bGUudHJhbnNmb3JtID0gXCJzY2FsZSgxKVwiO1xuICAgICAgdG9nZ2xlID0gZmFsc2U7XG4gICAgfVxuICB9LCAxMDApO1xufVxuZnVuY3Rpb24gc3RvcEFuaW0oKSB7XG4gIGlmIChpbnRlcnZhbCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICBpbnRlcnZhbCA9IG51bGw7XG4gIGNvbnN0IGVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWNvblwiKTtcbiAgZWxlLnN0eWxlLnRyYW5zZm9ybSA9IHVuZGVmaW5lZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0dXBTdG9wQXV0b1doZW5IaWRkZW4oKSB7XG4gIHZhciBoaWRkZW4sIHZpc2liaWxpdHlDaGFuZ2U7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQuaGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gT3BlcmEgMTIuMTAgYW5kIEZpcmVmb3ggMTggYW5kIGxhdGVyIHN1cHBvcnRcbiAgICBoaWRkZW4gPSBcImhpZGRlblwiO1xuICAgIHZpc2liaWxpdHlDaGFuZ2UgPSBcInZpc2liaWxpdHljaGFuZ2VcIjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQubXNIaWRkZW4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBoaWRkZW4gPSBcIm1zSGlkZGVuXCI7XG4gICAgdmlzaWJpbGl0eUNoYW5nZSA9IFwibXN2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGhpZGRlbiA9IFwid2Via2l0SGlkZGVuXCI7XG4gICAgdmlzaWJpbGl0eUNoYW5nZSA9IFwid2Via2l0dmlzaWJpbGl0eWNoYW5nZVwiO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgaWYgKGRvY3VtZW50W2hpZGRlbl0pIHtcbiAgICAgIHN0b3BBbmltKCk7XG4gICAgICBhdWRpby5sb2FkKCk7XG4gICAgfVxuICB9XG5cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih2aXNpYmlsaXR5Q2hhbmdlLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCBmYWxzZSk7XG59XG5cbihhc3luYyAoKSA9PiB7XG4gIGF3YWl0IHNldHVwQXVkaW8oKTtcbiAgYXdhaXQgc2V0dXBTdG9wQXV0b1doZW5IaWRkZW4oKTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENsYXBCdXR0b24oKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3cmFwcGVyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbi13cmFwcGVyXCI+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnV0dG9uLWljb25cIiBvbkNsaWNrPXtwbGF5fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2Zy13cmFwcGVyXCI+XG4gICAgICAgICAgICA8c3ZnXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImljb25cIlxuICAgICAgICAgICAgICB2ZXJzaW9uPVwiMS4xXCJcbiAgICAgICAgICAgICAgaWQ9XCJpY29uXCJcbiAgICAgICAgICAgICAgeD1cIjBweFwiXG4gICAgICAgICAgICAgIHk9XCIwcHhcIlxuICAgICAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI5Ny4yMjEgMjk3LjIyMVwiXG4gICAgICAgICAgICAgIHN0eWxlPXt7IGVuYWJsZUJhY2tncm91bmQ6IFwibmV3IDAgMCAyOTcuMjIxIDI5Ny4yMjFcIiB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8Zz5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZD1cIk0yODMuNzYyLDMyLjgzNWMyLjcwNS0xLjkxMywzLjM0Ni01LjY1OCwxLjQzMi04LjM2M2MtMS45MTQtMi43MDUtNS42NTctMy4zNDctOC4zNjMtMS40MzJsLTE0Ljk4NCwxMC42MDJcblx0XHRjLTIuNzA1LDEuOTEzLTMuMzQ2LDUuNjU4LTEuNDMyLDguMzYzYzEuMTY5LDEuNjUyLDMuMDIyLDIuNTM1LDQuOTAyLDIuNTM1YzEuMTk4LDAsMi40MDgtMC4zNTgsMy40NjEtMS4xMDRMMjgzLjc2MiwzMi44MzV6XCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgICBkPVwiTTI0NC4wNjQsMjkuMzg3YzAuNjk1LDAuMjYyLDEuNDA5LDAuMzg2LDIuMTEsMC4zODZjMi40MjgsMCw0LjcxMy0xLjQ4NCw1LjYxNy0zLjg5MWw2LjQ2LTE3LjE4MlxuXHRcdGMxLjE2Ni0zLjEwMS0wLjQwMy02LjU2MS0zLjUwNS03LjcyN2MtMy4xMDEtMS4xNjctNi41NjIsMC40MDQtNy43MjgsMy41MDVsLTYuNDYsMTcuMTgyXG5cdFx0QzIzOS4zOTMsMjQuNzYxLDI0MC45NjIsMjguMjIxLDI0NC4wNjQsMjkuMzg3elwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZD1cIk0yOTEuMjIzLDU1LjYxMWMtMC4wNDEsMC0wLjA4MiwwLTAuMTI0LDBsLTE4LjM1MSwwLjE1NGMtMy4zMTMsMC4wNjctNS45NDQsMi42MDUtNS44NzcsNS45MThcblx0XHRjMC4wNjYsMy4yNzEsMi43MzksNS45MjgsNS45OTcsNS45MjhjMC4wNDEsMCwwLjA4MiwwLDAuMTI0LDBsMTguMzUxLTAuMzEzYzMuMzEzLTAuMDY4LDUuOTQ0LTIuNzMyLDUuODc3LTYuMDQ1XG5cdFx0QzI5Ny4xNTQsNTcuOTgyLDI5NC40ODEsNTUuNjExLDI5MS4yMjMsNTUuNjExelwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8cGF0aFxuICAgICAgICAgICAgICAgICAgZD1cIk0yNTQuMiwxNDcuMTU0Yy0zLjA3My0yLjQzMy02LjcxMS00LjA4OS0xMC41NTctNC44NjdjMC4yNTQtMC40NiwwLjQ5MS0wLjkyOCwwLjcxNS0xLjQwM2wyLjQwOC0yLjQwOFxuXHRcdGM5LjI3NC05LjI3NSwxMC4yNDgtMjMuODc0LDIuMjY0LTMzLjk2MWMtMy43NjktNC43NjEtOS4wMDEtNy45MjUtMTQuODEyLTkuMTA2YzAuNDE1LTAuNzY0LDAuNzgzLTEuNTQ1LDEuMTE3LTIuMzM4XG5cdFx0YzYuMzE2LTkuMTQ5LDYuMjEzLTIxLjQ0NS0wLjc4Mi0zMC4yODNjLTMuNzctNC43NjQtOS4wMDQtNy45MzgtMTQuODE4LTkuMTE3YzQuOC04LjgyNiw0LjE4Ny0xOS44MjYtMi4yMjUtMjcuOTI1XG5cdFx0Yy00Ljg0OC02LjEyNS0xMi4xMDktOS42MzktMTkuOTIzLTkuNjM5Yy02LjI1NywwLTEyLjE2LDIuMjM2LTE2Ljc5Miw2LjMzYy0wLjcwMS0zLjk3OS0yLjM2My03LjgyMi01LjAxMi0xMS4xNjlcblx0XHRjLTQuODQ5LTYuMTI1LTEyLjExLTkuNjM4LTE5LjkyNC05LjYzOWwwLDBjLTYuNzksMC0xMy4xNjQsMi42MzUtMTcuOTQ3LDcuNDE4bC02MC44NCw2MC44NGwtMC4yMzItOC4xMlxuXHRcdGMtMC4xMDctMTMuODMtMTEuMzkyLTI1LjA0OS0yNS4yNDctMjUuMDQ5Yy0xMy42MDQsMC0yNC43MjksMTAuODE1LTI1LjIyOSwyNC4yOThsLTEyLjE0Niw4OC4zMDZsLTkuOTgzLDExLjYwNFxuXHRcdGMtNS45ODMsNi45NTctNS41ODIsMTcuNDgxLDAuOTE1LDIzLjk2MkwxOS45ODcsMTk5LjdjLTQuNTc0LDYuODgxLTMuNzczLDE2LjI2NiwyLjIwNiwyMi4yM2w2OS42NjcsNjkuNTU3XG5cdFx0YzMuMzI5LDMuMzIxLDcuNzQ4LDUuMTQ4LDEyLjQ0Niw1LjE0OGMzLjg1NywwLDcuNjY4LTEuMjk1LDEwLjcyOS0zLjY0NWwxNC41NDQtMTEuMTY4YzEzLjk5MS0zLjMwNSwyOS40MTYtMTAuODEzLDQ1Ljg3NC0yMi4zM1xuXHRcdGMxNC4zNzEtMTAuMDU4LDI5Ljk2Mi0yMy40Niw0Ni4zMzctMzkuODM2bDM0LjYzMS0zNC42MzFjNS4xMDctNS4xMDcsNy43OTUtMTIuMTg4LDcuMzc1LTE5LjQyN1xuXHRcdEMyNjMuMzc2LDE1OC4zNzEsMjU5Ljg3OSwxNTEuNjQ5LDI1NC4yLDE0Ny4xNTR6IE0xODguMTI0LDMyLjAwOWMyLjYwMy0yLjYwMiw2LjAzMi0zLjkwMyw5LjQ2Mi0zLjkwM1xuXHRcdGMzLjkxNSwwLDcuODMxLDEuNjk1LDEwLjUxNSw1LjA4NmM0LjI1Niw1LjM3NywzLjUxLDEzLjE4LTEuMzM5LDE4LjAyOGwtNi4xNzcsNi4xNzZjLTAuOTUyLDAuNjM1LTEuODc5LDEuMzE0LTIuNzQ3LDIuMDgzXG5cdFx0Yy0wLjcwMS0zLjk4LTIuMzY0LTcuODIzLTUuMDEzLTExLjE2OWMtMy4yNTctNC4xMTQtNy42MDQtNy4wNDMtMTIuNDc1LTguNTI3TDE4OC4xMjQsMzIuMDA5eiBNMTQ2LjM5NywxNy41MzJcblx0XHRjMi42MDItMi42MDIsNi4wMzItMy45MDMsOS40NjItMy45MDNjMy45MTYsMC4wMDEsNy44MzEsMS42OTYsMTAuNTE1LDUuMDg3YzQuMjU2LDUuMzc3LDMuNTEsMTMuMTc5LTEuMzM5LDE4LjAyN2wtNzAuOTE5LDcwLjE4NlxuXHRcdGwtMC4yMzMtOC4xMTljLTAuMDYxLTcuODI1LTMuNy0xNC44MTItOS4zNTYtMTkuNDA1TDE0Ni4zOTcsMTcuNTMyeiBNMTMuNjI0LDE3Ni4zOTFjLTIuMDgyLTIuMDc4LTIuMjA5LTUuNDEtMC4yOTEtNy42NFxuXHRcdGwxMi4yODEtMTQuMjc3YzAuMDA2LTAuMDA3LDAuMDExLTAuMDE3LDAuMDEyLTAuMDI2bDEyLjcyLTkyLjQ4M2MwLTcuMjg2LDUuOTYxLTEzLjI0NywxMy4yNDctMTMuMjQ3XG5cdFx0YzcuMjg2LDAsMTMuMjQ4LDUuOTYxLDEzLjI0OCwxMy4yNDdMNjUuMTg2LDc0Yy0xMS45ODgsMS42NDYtMjEuMzIyLDExLjczMy0yMS43OCwyNC4wNTdsLTEyLjE0NSw4OC4zMDdsLTMuNTMzLDQuMTA4XG5cdFx0TDEzLjYyNCwxNzYuMzkxeiBNMjQ3LjkzNSwxNzYuNTM5bC0zNC42MywzNC42MzFjLTI5LjU3NywyOS41NzctNjAuNDk0LDUzLjMxOC04Ny42NTMsNTkuMjM3XG5cdFx0Yy0wLjgyNSwwLjE4MS0xLjYwMSwwLjUyOC0yLjI3MSwxLjA0M2wtMTUuNjU1LDEyLjAyMmMtMS4wMTQsMC43NzktMi4yMTksMS4xNjItMy40MTksMS4xNjJjLTEuNDQzLDAtMi44OC0wLjU1NS0zLjk2OC0xLjY0MVxuXHRcdGwtNjkuNjcxLTY5LjU2Yy0yLjA4My0yLjA3Ny0yLjIxLTUuNDA5LTAuMjkxLTcuNjRsMTIuMjgtMTQuMjc2YzAuMDA3LTAuMDA4LDAuMDExLTAuMDE3LDAuMDEzLTAuMDI2bDEyLjcxOS05Mi40ODNcblx0XHRjMC03LjI4Niw1Ljk2Mi0xMy4yNDgsMTMuMjQ4LTEzLjI0OGM3LjI4NiwwLDEzLjI0Nyw1Ljk2MiwxMy4yNDcsMTMuMjQ4bDAuNjI2LDIxLjgyNGMwLjEwNCwzLjYyNiwzLjA4Nyw1Ljk4Nyw2LjE5MSw1Ljk4N1xuXHRcdGMxLjUxNCwwLDMuMDU4LTAuNTYzLDQuMzA5LTEuODEzbDcwLjQzMS03MC40MzFjMi42MDMtMi42MDMsNi4wMzEtMy45MDMsOS40NjItMy45MDNjMy45MTUsMCw3LjgzMSwxLjY5NSwxMC41MTUsNS4wODZcblx0XHRjNC4yNTYsNS4zNzcsMy41MDksMTMuMTgtMS4zNCwxOC4wMjhsLTQ4LjUxOCw0OC41MThjLTIuNTE5LDIuNTItMi41MTksNi42MDMsMCw5LjEyMWwwLDBjMS4yNzUsMS4yNzUsMi45NDYsMS45MTMsNC42MTcsMS45MTNcblx0XHRzMy4zNDMtMC42MzgsNC42MTctMS45MTNsNjIuMzc0LTYyLjM3M2MyLjYwMi0yLjYwMyw2LjAzMS0zLjkwMyw5LjQ2Mi0zLjkwM2MzLjkxNSwwLjAwMSw3LjgzMSwxLjY5NiwxMC41MTUsNS4wODdcblx0XHRjNC4yNTYsNS4zNzYsMy41MDksMTMuMTc5LTEuMzQsMTguMDI3bC02Mi4wODEsNjIuMDgxYy0yLjU1MywyLjU1NC0yLjU1Myw2LjY5MiwwLDkuMjQ2YzEuMjU4LDEuMjU4LDIuOTA2LDEuODg3LDQuNTU2LDEuODg3XG5cdFx0YzEuNjQ4LDAsMy4yOTctMC42MjksNC41NTUtMS44ODdsNDguODExLTQ4LjgxYzIuNjAzLTIuNjAzLDYuMDMyLTMuOTAzLDkuNDYyLTMuOTAzYzMuOTE1LDAsNy44MzEsMS42OTUsMTAuNTE1LDUuMDg3XG5cdFx0YzQuMjU2LDUuMzc2LDMuNTA5LDEzLjE3OS0xLjM0LDE4LjAyN2wtNDguMzQ5LDQ4LjM1Yy0yLjYxMiwyLjYxMS0yLjYxMiw2Ljg0NywwLDkuNDU4bDAuMDc4LDAuMDc5XG5cdFx0YzEuMjA3LDEuMjA3LDIuNzg5LDEuODEsNC4zNywxLjgxYzEuNTgyLDAsMy4xNjQtMC42MDMsNC4zNy0xLjgxbDI5Ljk3NC0yOS45NzRjMi43MDEtMi43MDEsNi4zMTctNC4xMjksOS45MjEtNC4xMjlcblx0XHRjMi44NjcsMCw1LjcyNiwwLjkwNCw4LjEwNywyLjc4OUMyNTMuMTE0LDE2MS41OTgsMjUzLjUwOCwxNzAuOTY3LDI0Ny45MzUsMTc2LjUzOXpcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZz5cbiAgICAgICAgICAgICAgPGc+PC9nPlxuICAgICAgICAgICAgICA8Zz48L2c+XG4gICAgICAgICAgICAgIDxnPjwvZz5cbiAgICAgICAgICAgICAgPGc+PC9nPlxuICAgICAgICAgICAgICA8Zz48L2c+XG4gICAgICAgICAgICAgIDxnPjwvZz5cbiAgICAgICAgICAgICAgPGc+PC9nPlxuICAgICAgICAgICAgICA8Zz48L2c+XG4gICAgICAgICAgICAgIDxnPjwvZz5cbiAgICAgICAgICAgICAgPGc+PC9nPlxuICAgICAgICAgICAgICA8Zz48L2c+XG4gICAgICAgICAgICAgIDxnPjwvZz5cbiAgICAgICAgICAgICAgPGc+PC9nPlxuICAgICAgICAgICAgICA8Zz48L2c+XG4gICAgICAgICAgICAgIDxnPjwvZz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmNvbnN0IGRpYWxvZ1Nob3duS2V5ID0gXCJkaWFsb2dfc2hvd25cIjtcblxuY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIG1hcmdpbi1yaWdodDogYXV0bztcbmA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0YXJ0RGlhbG9nKCkge1xuICBjb25zdCBbc2hvd0RpYWxvZywgc2V0U2hvd0RpYWxvZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgZnVuY3Rpb24gY2xvc2VEaWFsb2coKSB7XG4gICAgc2V0U2hvd0RpYWxvZyhmYWxzZSk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oZGlhbG9nU2hvd25LZXksIFwiWVwiKTtcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZGlhbG9nU2hvd24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShkaWFsb2dTaG93bktleSk7XG4gICAgaWYgKCFkaWFsb2dTaG93bikge1xuICAgICAgc2V0U2hvd0RpYWxvZyh0cnVlKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIHNob3dEaWFsb2cgJiYgKFxuICAgICAgPGRpdlxuICAgICAgICBpZD1cImRpYWxvZ1wiXG4gICAgICAgIGNsYXNzTmFtZT1cImRpYWxvZy13cmFwcGVyIGZpeGVkIHRvcC0wIHctZnVsbCBoLWZ1bGwgZmxleCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgei0xMFwiXG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGlhbG9nIHJvdW5kZWQgbS02IHAtNiB0ZXh0LWxnIG1kOnctMi8zIHotMTBcIj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtYi02XCI+XG4gICAgICAgICAgICBZb3UgZXZlciB0cmllZCBjbGFwcGluZyB3aGlsZSBob2xkaW5nIHlvdXIgcGhvbmU/XG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwPldlbGwgbm93IHlvdSBjYW48L3A+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicm91bmRlZCBwLTIgdGV4dC1tZCB3LWZ1bGwgYmctZ3JlZW4tNTAwIG10LTggdGV4dC13aGl0ZVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtjbG9zZURpYWxvZ31cbiAgICAgICAgICA+XG4gICAgICAgICAgICBDbG9zZVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkaWFsb2ctYmcgaW5zZXQtMCBvcGFjaXR5LTUwIGJnLXdoaXRlIGFic29sdXRlXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuL0hlYWRlclwiO1xuaW1wb3J0IENsYXBCdXR0b24gZnJvbSBcIi4vQ2xhcEJ1dHRvblwiO1xuaW1wb3J0IFN0YXJ0RGlhbG9nIGZyb20gXCIuL1N0YXJ0RGlhbG9nXCI7XG5pbXBvcnQgaW5zdGFsbFByb21wdFN0YXRlIGZyb20gXCIuLi9zdGF0ZS9pbnN0YWxsUHJvbXB0U3RhdGVcIjtcbmltcG9ydCB7IHVzZVNldFJlY29pbFN0YXRlIH0gZnJvbSBcInJlY29pbFwiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4uL2xvZ2dlclwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKCkge1xuICBjb25zdCBzZXRJbnN0YWxsU3RhdGUgPSB1c2VTZXRSZWNvaWxTdGF0ZShpbnN0YWxsUHJvbXB0U3RhdGUpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5zdGFsbHByb21wdFwiLCAoZSkgPT4ge1xuICAgICAgbG9nKFwiUHJvbXB0aW5nIGluc3RhbGxcIik7XG4gICAgICAvLyBQcmV2ZW50IENocm9tZSA2NyBhbmQgZWFybGllciBmcm9tIGF1dG9tYXRpY2FsbHkgc2hvd2luZyB0aGUgcHJvbXB0XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBTdGFzaCB0aGUgZXZlbnQgc28gaXQgY2FuIGJlIHRyaWdnZXJlZCBsYXRlci5cblxuICAgICAgc2V0SW5zdGFsbFN0YXRlKGUpO1xuICAgICAgLy8gVXBkYXRlIFVJIHRvIG5vdGlmeSB0aGUgdXNlciB0aGV5IGNhbiBhZGQgdG8gaG9tZSBzY3JlZW5cbiAgICB9KTtcbiAgfSwgW10pO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8U3RhcnREaWFsb2c+PC9TdGFydERpYWxvZz5cbiAgICAgIDxIZWFkZXI+PC9IZWFkZXI+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZS1jb250ZW50XCI+XG4gICAgICAgIDxDbGFwQnV0dG9uPjwvQ2xhcEJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGVzLmNzc1wiO1xuXG5pbXBvcnQgeyBSZWNvaWxSb290IH0gZnJvbSBcInJlY29pbFwiO1xuXG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi9sb2dnZXJcIjtcblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9jb21wb25lbnRzL0FwcFwiO1xucmVuZGVyKFxuICA8UmVjb2lsUm9vdD5cbiAgICA8QXBwIC8+XG4gIDwvUmVjb2lsUm9vdD4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKVxuKTtcbmxvZyhcIkluaXRpYWxpc2luZ1wiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=