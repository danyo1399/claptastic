/*! For license information please see main.09df58c3f65be44dbfaa.js.LICENSE.txt */
(()=>{var e={105:e=>{"use strict";e.exports=function(e){return function(){var t=arguments.length;if(t){for(var n=[],r=-1;++r<t;)n[r]=arguments[r];return e.call(this,n)}return e.call(this,[])}}},187:e=>{"use strict";var t,n="object"==typeof Reflect?Reflect:null,r=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var o=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(n,r){function o(n){e.removeListener(t,i),r(n)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",o),n([].slice.call(arguments))}v(e,t,i,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&v(e,"error",t,{once:!0})}(e,o)}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var a=10;function u(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function s(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function l(e,t,n,r){var o,i,a,l;if(u(n),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),a=i[t]),void 0===a)a=i[t]=n,++e._eventsCount;else if("function"==typeof a?a=i[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(o=s(e))>0&&a.length>o&&!a.warned){a.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=a.length,l=c,console&&console.warn&&console.warn(l)}return e}function c(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function f(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},o=c.bind(r);return o.listener=n,r.wrapFn=o,o}function d(e,t,n){var r=e._events;if(void 0===r)return[];var o=r[t];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(o):h(o,o.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function h(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function v(e,t,n,r){if("function"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function o(i){r.once&&e.removeEventListener(t,o),n(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return a},set:function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");a=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||o(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return s(this)},i.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,i=this._events;if(void 0!==i)o=o&&void 0===i.error;else if(!o)return!1;if(o){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var u=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw u.context=a,u}var s=i[e];if(void 0===s)return!1;if("function"==typeof s)r(s,this,t);else{var l=s.length,c=h(s,l);for(n=0;n<l;++n)r(c[n],this,t)}return!0},i.prototype.addListener=function(e,t){return l(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return l(this,e,t,!0)},i.prototype.once=function(e,t){return u(t),this.on(e,f(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return u(t),this.prependListener(e,f(this,e,t)),this},i.prototype.removeListener=function(e,t){var n,r,o,i,a;if(u(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){a=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,o),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",e,a||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},679:(e,t,n)=>{"use strict";var r=n(864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function s(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var l=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var u=s(t),v=s(n),m=0;m<a.length;++m){var g=a[m];if(!(i[g]||r&&r[g]||v&&v[g]||u&&u[g])){var y=d(n,g);try{l(t,g,y)}catch(e){}}}}return t}},717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}}},483:(e,t,n)=>{e.exports=function e(t,n,r){function o(a,u){if(!n[a]){if(!t[a]){if(i)return i(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var l=n[a]={exports:{}};t[a][0].call(l.exports,(function(e){return o(t[a][1][e]||e)}),l,l.exports,e,t,n,r)}return n[a].exports}for(var i=void 0,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,r){(function(e){"use strict";var n,r,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var i=0,a=new o(c),u=e.document.createTextNode("");a.observe(u,{characterData:!0}),n=function(){u.data=i=++i%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){c(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(c,0)};else{var s=new e.MessageChannel;s.port1.onmessage=c,n=function(){s.port2.postMessage(0)}}var l=[];function c(){var e,t;r=!0;for(var n=l.length;n;){for(t=l,l=[],e=-1;++e<n;)t[e]();n=l.length}r=!1}t.exports=function(e){1!==l.push(e)||r||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){"use strict";var r=e(1);function o(){}var i={},a=["REJECTED"],u=["FULFILLED"],s=["PENDING"];function l(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=s,this.queue=[],this.outcome=void 0,e!==o&&p(this,e)}function c(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function f(e,t,n){r((function(){var r;try{r=t(n)}catch(t){return i.reject(e,t)}r===e?i.reject(e,new TypeError("Cannot resolve promise with itself")):i.resolve(e,r)}))}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var n=!1;function r(t){n||(n=!0,i.reject(e,t))}function o(t){n||(n=!0,i.resolve(e,t))}var a=h((function(){t(o,r)}));"error"===a.status&&r(a.value)}function h(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=l,l.prototype.catch=function(e){return this.then(null,e)},l.prototype.then=function(e,t){if("function"!=typeof e&&this.state===u||"function"!=typeof t&&this.state===a)return this;var n=new this.constructor(o);return this.state!==s?f(n,this.state===u?e:t,this.outcome):this.queue.push(new c(n,e,t)),n},c.prototype.callFulfilled=function(e){i.resolve(this.promise,e)},c.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},c.prototype.callRejected=function(e){i.reject(this.promise,e)},c.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},i.resolve=function(e,t){var n=h(d,t);if("error"===n.status)return i.reject(e,n.value);var r=n.value;if(r)p(e,r);else{e.state=u,e.outcome=t;for(var o=-1,a=e.queue.length;++o<a;)e.queue[o].callFulfilled(t)}return e},i.reject=function(e,t){e.state=a,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},l.resolve=function(e){return e instanceof this?e:i.resolve(new this(o),e)},l.reject=function(e){var t=new this(o);return i.reject(t,e)},l.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var a=new Array(n),u=0,s=-1,l=new this(o);++s<n;)c(e[s],s);return l;function c(e,o){t.resolve(e).then((function(e){a[o]=e,++u!==n||r||(r=!0,i.resolve(l,a))}),(function(e){r||(r=!0,i.reject(l,e))}))}},l.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n,r=e.length,a=!1;if(!r)return this.resolve([]);for(var u=-1,s=new this(o);++u<r;)n=e[u],t.resolve(n).then((function(e){a||(a=!0,i.resolve(s,e))}),(function(e){a||(a=!0,i.reject(s,e))}));return s}},{1:1}],3:[function(e,t,r){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var o=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function i(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var a=Promise;function u(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function s(e,t,n){"function"==typeof t&&e.then(t),"function"==typeof n&&e.catch(n)}function l(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function c(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var f="local-forage-detect-blob-support",d=void 0,p={},h=Object.prototype.toString,v="readonly",m="readwrite";function g(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),o=0;o<t;o++)r[o]=e.charCodeAt(o);return n}function y(e){return"boolean"==typeof d?a.resolve(d):function(e){return new a((function(t){var n=e.transaction(f,m),r=i([""]);n.objectStore(f).put(r,"key"),n.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},n.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)}})).catch((function(){return!1}))}(e).then((function(e){return d=e}))}function b(e){var t=p[e.name],n={};n.promise=new a((function(e,t){n.resolve=e,n.reject=t})),t.deferredOperations.push(n),t.dbReady?t.dbReady=t.dbReady.then((function(){return n.promise})):t.dbReady=n.promise}function _(e){var t=p[e.name].deferredOperations.pop();if(t)return t.resolve(),t.promise}function w(e,t){var n=p[e.name].deferredOperations.pop();if(n)return n.reject(t),n.promise}function k(e,t){return new a((function(n,r){if(p[e.name]=p[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);b(e),e.db.close()}var i=[e.name];t&&i.push(e.version);var a=o.open.apply(o,i);t&&(a.onupgradeneeded=function(t){var n=a.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore(f)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),a.onerror=function(e){e.preventDefault(),r(a.error)},a.onsuccess=function(){n(a.result),_(e)}}))}function S(e){return k(e,!1)}function E(e){return k(e,!0)}function x(e,t){if(!e.db)return!0;var n=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,o=e.version>e.db.version;if(r&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||n){if(n){var i=e.db.version+1;i>e.version&&(e.version=i)}return!0}return!1}function A(e){return i([g(atob(e.data))],{type:e.type})}function C(e){return e&&e.__local_forage_encoded_blob}function O(e){var t=this,n=t._initReady().then((function(){var e=p[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady}));return s(n,e,e),n}function T(e,t,n,r){void 0===r&&(r=1);try{var o=e.db.transaction(e.storeName,t);n(null,o)}catch(o){if(r>0&&(!e.db||"InvalidStateError"===o.name||"NotFoundError"===o.name))return a.resolve().then((function(){if(!e.db||"NotFoundError"===o.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),E(e)})).then((function(){return function(e){b(e);for(var t=p[e.name],n=t.forages,r=0;r<n.length;r++){var o=n[r];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return e.db=null,S(e).then((function(t){return e.db=t,x(e)?E(e):t})).then((function(r){e.db=t.db=r;for(var o=0;o<n.length;o++)n[o]._dbInfo.db=r})).catch((function(t){throw w(e,t),t}))}(e).then((function(){T(e,t,n,r-1)}))})).catch(n);n(o)}}var P={_driver:"asyncStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=e[r];var o=p[n.name];o||(o={forages:[],db:null,dbReady:null,deferredOperations:[]},p[n.name]=o),o.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=O);var i=[];function u(){return a.resolve()}for(var s=0;s<o.forages.length;s++){var l=o.forages[s];l!==t&&i.push(l._initReady().catch(u))}var c=o.forages.slice(0);return a.all(i).then((function(){return n.db=o.db,S(n)})).then((function(e){return n.db=e,x(n,t._defaultConfig.version)?E(n):e})).then((function(e){n.db=o.db=e,t._dbInfo=n;for(var r=0;r<c.length;r++){var i=c[r];i!==t&&(i._dbInfo.db=n.db,i._dbInfo.version=n.version)}}))},_support:function(){try{if(!o||!o.open)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=new a((function(t,r){n.ready().then((function(){T(n._dbInfo,v,(function(o,i){if(o)return r(o);try{var a=i.objectStore(n._dbInfo.storeName).openCursor(),u=1;a.onsuccess=function(){var n=a.result;if(n){var r=n.value;C(r)&&(r=A(r));var o=e(r,n.key,u++);void 0!==o?t(o):n.continue()}else t()},a.onerror=function(){r(a.error)}}catch(e){r(e)}}))})).catch(r)}));return u(r,t),r},getItem:function(e,t){var n=this;e=l(e);var r=new a((function(t,r){n.ready().then((function(){T(n._dbInfo,v,(function(o,i){if(o)return r(o);try{var a=i.objectStore(n._dbInfo.storeName).get(e);a.onsuccess=function(){var e=a.result;void 0===e&&(e=null),C(e)&&(e=A(e)),t(e)},a.onerror=function(){r(a.error)}}catch(e){r(e)}}))})).catch(r)}));return u(r,t),r},setItem:function(e,t,n){var r=this;e=l(e);var o=new a((function(n,o){var i;r.ready().then((function(){return i=r._dbInfo,"[object Blob]"===h.call(t)?y(i.db).then((function(e){return e?t:(n=t,new a((function(e,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:r,type:n.type})},r.readAsBinaryString(n)})));var n})):t})).then((function(t){T(r._dbInfo,m,(function(i,a){if(i)return o(i);try{var u=a.objectStore(r._dbInfo.storeName);null===t&&(t=void 0);var s=u.put(t,e);a.oncomplete=function(){void 0===t&&(t=null),n(t)},a.onabort=a.onerror=function(){var e=s.error?s.error:s.transaction.error;o(e)}}catch(e){o(e)}}))})).catch(o)}));return u(o,n),o},removeItem:function(e,t){var n=this;e=l(e);var r=new a((function(t,r){n.ready().then((function(){T(n._dbInfo,m,(function(o,i){if(o)return r(o);try{var a=i.objectStore(n._dbInfo.storeName).delete(e);i.oncomplete=function(){t()},i.onerror=function(){r(a.error)},i.onabort=function(){var e=a.error?a.error:a.transaction.error;r(e)}}catch(e){r(e)}}))})).catch(r)}));return u(r,t),r},clear:function(e){var t=this,n=new a((function(e,n){t.ready().then((function(){T(t._dbInfo,m,(function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=i.error?i.error:i.transaction.error;n(e)}}catch(e){n(e)}}))})).catch(n)}));return u(n,e),n},length:function(e){var t=this,n=new a((function(e,n){t.ready().then((function(){T(t._dbInfo,v,(function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).count();i.onsuccess=function(){e(i.result)},i.onerror=function(){n(i.error)}}catch(e){n(e)}}))})).catch(n)}));return u(n,e),n},key:function(e,t){var n=this,r=new a((function(t,r){e<0?t(null):n.ready().then((function(){T(n._dbInfo,v,(function(o,i){if(o)return r(o);try{var a=i.objectStore(n._dbInfo.storeName),u=!1,s=a.openKeyCursor();s.onsuccess=function(){var n=s.result;n?0===e||u?t(n.key):(u=!0,n.advance(e)):t(null)},s.onerror=function(){r(s.error)}}catch(e){r(e)}}))})).catch(r)}));return u(r,t),r},keys:function(e){var t=this,n=new a((function(e,n){t.ready().then((function(){T(t._dbInfo,v,(function(r,o){if(r)return n(r);try{var i=o.objectStore(t._dbInfo.storeName).openKeyCursor(),a=[];i.onsuccess=function(){var t=i.result;t?(a.push(t.key),t.continue()):e(a)},i.onerror=function(){n(i.error)}}catch(e){n(e)}}))})).catch(n)}));return u(n,e),n},dropInstance:function(e,t){t=c.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,i=this;if(e.name){var s=e.name===n.name&&i._dbInfo.db?a.resolve(i._dbInfo.db):S(e).then((function(t){var n=p[e.name],r=n.forages;n.db=t;for(var o=0;o<r.length;o++)r[o]._dbInfo.db=t;return t}));r=e.storeName?s.then((function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1;b(e);var r=p[e.name],i=r.forages;t.close();for(var u=0;u<i.length;u++){var s=i[u];s._dbInfo.db=null,s._dbInfo.version=n}return new a((function(t,r){var i=o.open(e.name,n);i.onerror=function(e){i.result.close(),r(e)},i.onupgradeneeded=function(){i.result.deleteObjectStore(e.storeName)},i.onsuccess=function(){var e=i.result;e.close(),t(e)}})).then((function(e){r.db=e;for(var t=0;t<i.length;t++){var n=i[t];n._dbInfo.db=e,_(n._dbInfo)}})).catch((function(t){throw(w(e,t)||a.resolve()).catch((function(){})),t}))}})):s.then((function(t){b(e);var n=p[e.name],r=n.forages;t.close();for(var i=0;i<r.length;i++)r[i]._dbInfo.db=null;return new a((function(t,n){var r=o.deleteDatabase(e.name);r.onerror=r.onblocked=function(e){var t=r.result;t&&t.close(),n(e)},r.onsuccess=function(){var e=r.result;e&&e.close(),t(e)}})).then((function(e){n.db=e;for(var t=0;t<r.length;t++)_(r[t]._dbInfo)})).catch((function(t){throw(w(e,t)||a.resolve()).catch((function(){})),t}))}))}else r=a.reject("Invalid arguments");return u(r,t),r}};var R="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",N=/^~~local_forage_type~([^~]+)~/,I="__lfsc__:",L=I.length,j="arbf",M="blob",D="si08",z="ui08",B="uic8",V="si16",F="si32",U="ur16",$="ui32",q="fl32",W="fl64",H=L+j.length,K=Object.prototype.toString;function Q(e){var t,n,r,o,i,a=.75*e.length,u=e.length,s=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var l=new ArrayBuffer(a),c=new Uint8Array(l);for(t=0;t<u;t+=4)n=R.indexOf(e[t]),r=R.indexOf(e[t+1]),o=R.indexOf(e[t+2]),i=R.indexOf(e[t+3]),c[s++]=n<<2|r>>4,c[s++]=(15&r)<<4|o>>2,c[s++]=(3&o)<<6|63&i;return l}function G(e){var t,n=new Uint8Array(e),r="";for(t=0;t<n.length;t+=3)r+=R[n[t]>>2],r+=R[(3&n[t])<<4|n[t+1]>>4],r+=R[(15&n[t+1])<<2|n[t+2]>>6],r+=R[63&n[t+2]];return n.length%3==2?r=r.substring(0,r.length-1)+"=":n.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var Y={serialize:function(e,t){var n="";if(e&&(n=K.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===K.call(e.buffer))){var r,o=I;e instanceof ArrayBuffer?(r=e,o+=j):(r=e.buffer,"[object Int8Array]"===n?o+=D:"[object Uint8Array]"===n?o+=z:"[object Uint8ClampedArray]"===n?o+=B:"[object Int16Array]"===n?o+=V:"[object Uint16Array]"===n?o+=U:"[object Int32Array]"===n?o+=F:"[object Uint32Array]"===n?o+=$:"[object Float32Array]"===n?o+=q:"[object Float64Array]"===n?o+=W:t(new Error("Failed to get type for BinaryArray"))),t(o+G(r))}else if("[object Blob]"===n){var i=new FileReader;i.onload=function(){var n="~~local_forage_type~"+e.type+"~"+G(this.result);t("__lfsc__:blob"+n)},i.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},deserialize:function(e){if(e.substring(0,L)!==I)return JSON.parse(e);var t,n=e.substring(H),r=e.substring(L,H);if(r===M&&N.test(n)){var o=n.match(N);t=o[1],n=n.substring(o[0].length)}var a=Q(n);switch(r){case j:return a;case M:return i([a],{type:t});case D:return new Int8Array(a);case z:return new Uint8Array(a);case B:return new Uint8ClampedArray(a);case V:return new Int16Array(a);case U:return new Uint16Array(a);case F:return new Int32Array(a);case $:return new Uint32Array(a);case q:return new Float32Array(a);case W:return new Float64Array(a);default:throw new Error("Unkown type: "+r)}},stringToBuffer:Q,bufferToString:G};function J(e,t,n,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,r)}function X(e,t,n,r,o,i){e.executeSql(n,r,o,(function(e,a){a.code===a.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],(function(e,u){u.rows.length?i(e,a):J(e,t,(function(){e.executeSql(n,r,o,i)}),i)}),i):i(e,a)}),i)}function Z(e,t,n,r){var o=this;e=l(e);var i=new a((function(i,a){o.ready().then((function(){void 0===t&&(t=null);var u=t,s=o._dbInfo;s.serializer.serialize(t,(function(t,l){l?a(l):s.db.transaction((function(n){X(n,s,"INSERT OR REPLACE INTO "+s.storeName+" (key, value) VALUES (?, ?)",[e,t],(function(){i(u)}),(function(e,t){a(t)}))}),(function(t){if(t.code===t.QUOTA_ERR){if(r>0)return void i(Z.apply(o,[e,u,n,r-1]));a(t)}}))}))})).catch(a)}));return u(i,n),i}function ee(e){return new a((function(t,n){e.transaction((function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,r){for(var o=[],i=0;i<r.rows.length;i++)o.push(r.rows.item(i).name);t({db:e,storeNames:o})}),(function(e,t){n(t)}))}),(function(e){n(e)}))}))}var te={_driver:"webSQLStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]="string"!=typeof e[r]?e[r].toString():e[r];var o=new a((function(e,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return r(e)}n.db.transaction((function(o){J(o,n,(function(){t._dbInfo=n,e()}),(function(e,t){r(t)}))}),r)}));return n.serializer=Y,o},_support:"function"==typeof openDatabase,iterate:function(e,t){var n=this,r=new a((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){X(n,o,"SELECT * FROM "+o.storeName,[],(function(n,r){for(var i=r.rows,a=i.length,u=0;u<a;u++){var s=i.item(u),l=s.value;if(l&&(l=o.serializer.deserialize(l)),void 0!==(l=e(l,s.key,u+1)))return void t(l)}t()}),(function(e,t){r(t)}))}))})).catch(r)}));return u(r,t),r},getItem:function(e,t){var n=this;e=l(e);var r=new a((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){X(n,o,"SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],(function(e,n){var r=n.rows.length?n.rows.item(0).value:null;r&&(r=o.serializer.deserialize(r)),t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return u(r,t),r},setItem:function(e,t,n){return Z.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this;e=l(e);var r=new a((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){X(n,o,"DELETE FROM "+o.storeName+" WHERE key = ?",[e],(function(){t()}),(function(e,t){r(t)}))}))})).catch(r)}));return u(r,t),r},clear:function(e){var t=this,n=new a((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){X(t,r,"DELETE FROM "+r.storeName,[],(function(){e()}),(function(e,t){n(t)}))}))})).catch(n)}));return u(n,e),n},length:function(e){var t=this,n=new a((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){X(t,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],(function(t,n){var r=n.rows.item(0).c;e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return u(n,e),n},key:function(e,t){var n=this,r=new a((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){X(n,o,"SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],(function(e,n){var r=n.rows.length?n.rows.item(0).key:null;t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return u(r,t),r},keys:function(e){var t=this,n=new a((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){X(t,r,"SELECT key FROM "+r.storeName,[],(function(t,n){for(var r=[],o=0;o<n.rows.length;o++)r.push(n.rows.item(o).key);e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return u(n,e),n},dropInstance:function(e,t){t=c.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,o=this;return u(r=e.name?new a((function(t){var r;r=e.name===n.name?o._dbInfo.db:openDatabase(e.name,"","",0),e.storeName?t({db:r,storeNames:[e.storeName]}):t(ee(r))})).then((function(e){return new a((function(t,n){e.db.transaction((function(r){function o(e){return new a((function(t,n){r.executeSql("DROP TABLE IF EXISTS "+e,[],(function(){t()}),(function(e,t){n(t)}))}))}for(var i=[],u=0,s=e.storeNames.length;u<s;u++)i.push(o(e.storeNames[u]));a.all(i).then((function(){t()})).catch((function(e){n(e)}))}),(function(e){n(e)}))}))})):a.reject("Invalid arguments"),t),r}};function ne(e,t){var n=e.name+"/";return e.storeName!==t.storeName&&(n+=e.storeName+"/"),n}function re(){return!function(){var e="_localforage_support_test";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch(e){return!0}}()||localStorage.length>0}var oe={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=ne(e,this._defaultConfig),re()?(this._dbInfo=t,t.serializer=Y,a.resolve()):a.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=n.ready().then((function(){for(var t=n._dbInfo,r=t.keyPrefix,o=r.length,i=localStorage.length,a=1,u=0;u<i;u++){var s=localStorage.key(u);if(0===s.indexOf(r)){var l=localStorage.getItem(s);if(l&&(l=t.serializer.deserialize(l)),void 0!==(l=e(l,s.substring(o),a++)))return l}}}));return u(r,t),r},getItem:function(e,t){var n=this;e=l(e);var r=n.ready().then((function(){var t=n._dbInfo,r=localStorage.getItem(t.keyPrefix+e);return r&&(r=t.serializer.deserialize(r)),r}));return u(r,t),r},setItem:function(e,t,n){var r=this;e=l(e);var o=r.ready().then((function(){void 0===t&&(t=null);var n=t;return new a((function(o,i){var a=r._dbInfo;a.serializer.serialize(t,(function(t,r){if(r)i(r);else try{localStorage.setItem(a.keyPrefix+e,t),o(n)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||i(e),i(e)}}))}))}));return u(o,n),o},removeItem:function(e,t){var n=this;e=l(e);var r=n.ready().then((function(){var t=n._dbInfo;localStorage.removeItem(t.keyPrefix+e)}));return u(r,t),r},clear:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var r=localStorage.key(n);0===r.indexOf(e)&&localStorage.removeItem(r)}}));return u(n,e),n},length:function(e){var t=this.keys().then((function(e){return e.length}));return u(t,e),t},key:function(e,t){var n=this,r=n.ready().then((function(){var t,r=n._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(r.keyPrefix.length)),t}));return u(r,t),r},keys:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo,n=localStorage.length,r=[],o=0;o<n;o++){var i=localStorage.key(o);0===i.indexOf(e.keyPrefix)&&r.push(i.substring(e.keyPrefix.length))}return r}));return u(n,e),n},dropInstance:function(e,t){if(t=c.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var n=this.config();e.name=e.name||n.name,e.storeName=e.storeName||n.storeName}var r,o=this;return u(r=e.name?new a((function(t){e.storeName?t(ne(e,o._defaultConfig)):t(e.name+"/")})).then((function(e){for(var t=localStorage.length-1;t>=0;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}})):a.reject("Invalid arguments"),t),r}},ie=function(e,t){for(var n=e.length,r=0;r<n;){if((o=e[r])===(i=t)||"number"==typeof o&&"number"==typeof i&&isNaN(o)&&isNaN(i))return!0;r++}var o,i;return!1},ae=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},ue={},se={},le={INDEXEDDB:P,WEBSQL:te,LOCALSTORAGE:oe},ce=[le.INDEXEDDB._driver,le.WEBSQL._driver,le.LOCALSTORAGE._driver],fe=["dropInstance"],de=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(fe),pe={description:"",driver:ce.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function he(e,t){e[t]=function(){var n=arguments;return e.ready().then((function(){return e[t].apply(e,n)}))}}function ve(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var n in t)t.hasOwnProperty(n)&&(ae(t[n])?arguments[0][n]=t[n].slice():arguments[0][n]=t[n])}return arguments[0]}var me=new(function(){function e(t){for(var n in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),le)if(le.hasOwnProperty(n)){var r=le[n],o=r._driver;this[n]=o,ue[o]||this.defineDriver(r)}this._defaultConfig=ve({},pe),this._config=ve({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":r(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e)||!e.driver||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,n){var r=new a((function(t,n){try{var r=e._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void n(o);for(var i=de.concat("_initStorage"),s=0,l=i.length;s<l;s++){var c=i[s];if((!ie(fe,c)||e[c])&&"function"!=typeof e[c])return void n(o)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),n=a.reject(t);return u(n,arguments[arguments.length-1]),n}},n=0,r=fe.length;n<r;n++){var o=fe[n];e[o]||(e[o]=t(o))}}();var f=function(n){ue[r]&&console.info("Redefining LocalForage driver: "+r),ue[r]=e,se[r]=n,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(f,n):f(!!e._support):f(!0)}catch(e){n(e)}}));return s(r,t,n),r},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,n){var r=ue[e]?a.resolve(ue[e]):a.reject(new Error("Driver not found."));return s(r,t,n),r},e.prototype.getSerializer=function(e){var t=a.resolve(Y);return s(t,e),t},e.prototype.ready=function(e){var t=this,n=t._driverSet.then((function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready}));return s(n,e,e),n},e.prototype.setDriver=function(e,t,n){var r=this;ae(e)||(e=[e]);var o=this._getSupportedDrivers(e);function i(){r._config.driver=r.driver()}function u(e){return r._extend(e),i(),r._ready=r._initStorage(r._config),r._ready}var l=null!==this._driverSet?this._driverSet.catch((function(){return a.resolve()})):a.resolve();return this._driverSet=l.then((function(){var e=o[0];return r._dbInfo=null,r._ready=null,r.getDriver(e).then((function(e){r._driver=e._driver,i(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var o=e[t];return t++,r._dbInfo=null,r._ready=null,r.getDriver(o).then(u).catch(n)}i();var s=new Error("No available storage method found.");return r._driverSet=a.reject(s),r._driverSet}()}}(o)}))})).catch((function(){i();var e=new Error("No available storage method found.");return r._driverSet=a.reject(e),r._driverSet})),s(this._driverSet,t,n),this._driverSet},e.prototype.supports=function(e){return!!se[e]},e.prototype._extend=function(e){ve(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e[n];this.supports(o)&&t.push(o)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=de.length;e<t;e++)he(this,de[e])},e.prototype.createInstance=function(t){return new e(t)},e}());t.exports=me},{3:3}]},{},[4])(4)},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,u,s=o(e),l=1;l<arguments.length;l++){for(var c in a=Object(arguments[l]))n.call(a,c)&&(s[c]=a[c]);if(t){u=t(a);for(var f=0;f<u.length;f++)r.call(a,u[f])&&(s[u[f]]=a[u[f]])}}return s}},558:(e,t,n)=>{"use strict";var r,o,i,a=[n(692),n(905),n(551),n(316),n(355),n(122)],u=-1,s=[],l=!1;function c(){r&&o&&(r=!1,o.length?s=o.concat(s):u=-1,s.length&&f())}function f(){if(!r){l=!1,r=!0;for(var e=s.length,t=setTimeout(c);e;){for(o=s,s=[];o&&++u<e;)o[u].run();u=-1,e=s.length}o=null,u=-1,r=!1,clearTimeout(t)}}for(var d=-1,p=a.length;++d<p;)if(a[d]&&a[d].test&&a[d].test()){i=a[d].install(f);break}function h(e,t){this.fun=e,this.array=t}h.prototype.run=function(){var e=this.fun,t=this.array;switch(t.length){case 0:return e();case 1:return e(t[0]);case 2:return e(t[0],t[1]);case 3:return e(t[0],t[1],t[2]);default:return e.apply(null,t)}},e.exports=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),l||r||(l=!0,i())}},316:(e,t,n)=>{"use strict";t.test=function(){return!n.g.setImmediate&&void 0!==n.g.MessageChannel},t.install=function(e){var t=new n.g.MessageChannel;return t.port1.onmessage=e,function(){t.port2.postMessage(0)}}},551:(e,t,n)=>{"use strict";var r=n.g.MutationObserver||n.g.WebKitMutationObserver;t.test=function(){return r},t.install=function(e){var t=0,o=new r(e),i=n.g.document.createTextNode("");return o.observe(i,{characterData:!0}),function(){i.data=t=++t%2}}},905:(e,t,n)=>{"use strict";t.test=function(){return"function"==typeof n.g.queueMicrotask},t.install=function(e){return function(){n.g.queueMicrotask(e)}}},355:(e,t,n)=>{"use strict";t.test=function(){return"document"in n.g&&"onreadystatechange"in n.g.document.createElement("script")},t.install=function(e){return function(){var t=n.g.document.createElement("script");return t.onreadystatechange=function(){e(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},n.g.document.documentElement.appendChild(t),e}}},122:(e,t)=>{"use strict";t.test=function(){return!0},t.install=function(e){return function(){setTimeout(e,0)}}},302:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;const n=[];for(let e=0;e<256;++e)n.push((e+256).toString(16).substr(1));t.default=function(e,t){const r=t||0,o=n;return(o[e[r+0]]+o[e[r+1]]+o[e[r+2]]+o[e[r+3]]+"-"+o[e[r+4]]+o[e[r+5]]+"-"+o[e[r+6]]+o[e[r+7]]+"-"+o[e[r+8]]+o[e[r+9]]+"-"+o[e[r+10]]+o[e[r+11]]+o[e[r+12]]+o[e[r+13]]+o[e[r+14]]+o[e[r+15]]).toLowerCase()}},340:(e,t,n)=>{"use strict";Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return a.default}});var r=u(n(160)),o=u(n(461)),i=u(n(750)),a=u(n(693));function u(e){return e&&e.__esModule?e:{default:e}}},251:(e,t)=>{"use strict";function n(e){return 14+(e+64>>>9<<4)+1}function r(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,o,i,a){return r((u=r(r(t,e),r(o,a)))<<(s=i)|u>>>32-s,n);var u,s}function i(e,t,n,r,i,a,u){return o(t&n|~t&r,e,t,i,a,u)}function a(e,t,n,r,i,a,u){return o(t&r|n&~r,e,t,i,a,u)}function u(e,t,n,r,i,a,u){return o(t^n^r,e,t,i,a,u)}function s(e,t,n,r,i,a,u){return o(n^(t|~r),e,t,i,a,u)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let n=0;n<t.length;++n)e[n]=t.charCodeAt(n)}return function(e){const t=[],n=32*e.length,r="0123456789abcdef";for(let o=0;o<n;o+=8){const n=e[o>>5]>>>o%32&255,i=parseInt(r.charAt(n>>>4&15)+r.charAt(15&n),16);t.push(i)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[n(t)-1]=t;let o=1732584193,l=-271733879,c=-1732584194,f=271733878;for(let t=0;t<e.length;t+=16){const n=o,d=l,p=c,h=f;o=i(o,l,c,f,e[t],7,-680876936),f=i(f,o,l,c,e[t+1],12,-389564586),c=i(c,f,o,l,e[t+2],17,606105819),l=i(l,c,f,o,e[t+3],22,-1044525330),o=i(o,l,c,f,e[t+4],7,-176418897),f=i(f,o,l,c,e[t+5],12,1200080426),c=i(c,f,o,l,e[t+6],17,-1473231341),l=i(l,c,f,o,e[t+7],22,-45705983),o=i(o,l,c,f,e[t+8],7,1770035416),f=i(f,o,l,c,e[t+9],12,-1958414417),c=i(c,f,o,l,e[t+10],17,-42063),l=i(l,c,f,o,e[t+11],22,-1990404162),o=i(o,l,c,f,e[t+12],7,1804603682),f=i(f,o,l,c,e[t+13],12,-40341101),c=i(c,f,o,l,e[t+14],17,-1502002290),l=i(l,c,f,o,e[t+15],22,1236535329),o=a(o,l,c,f,e[t+1],5,-165796510),f=a(f,o,l,c,e[t+6],9,-1069501632),c=a(c,f,o,l,e[t+11],14,643717713),l=a(l,c,f,o,e[t],20,-373897302),o=a(o,l,c,f,e[t+5],5,-701558691),f=a(f,o,l,c,e[t+10],9,38016083),c=a(c,f,o,l,e[t+15],14,-660478335),l=a(l,c,f,o,e[t+4],20,-405537848),o=a(o,l,c,f,e[t+9],5,568446438),f=a(f,o,l,c,e[t+14],9,-1019803690),c=a(c,f,o,l,e[t+3],14,-187363961),l=a(l,c,f,o,e[t+8],20,1163531501),o=a(o,l,c,f,e[t+13],5,-1444681467),f=a(f,o,l,c,e[t+2],9,-51403784),c=a(c,f,o,l,e[t+7],14,1735328473),l=a(l,c,f,o,e[t+12],20,-1926607734),o=u(o,l,c,f,e[t+5],4,-378558),f=u(f,o,l,c,e[t+8],11,-2022574463),c=u(c,f,o,l,e[t+11],16,1839030562),l=u(l,c,f,o,e[t+14],23,-35309556),o=u(o,l,c,f,e[t+1],4,-1530992060),f=u(f,o,l,c,e[t+4],11,1272893353),c=u(c,f,o,l,e[t+7],16,-155497632),l=u(l,c,f,o,e[t+10],23,-1094730640),o=u(o,l,c,f,e[t+13],4,681279174),f=u(f,o,l,c,e[t],11,-358537222),c=u(c,f,o,l,e[t+3],16,-722521979),l=u(l,c,f,o,e[t+6],23,76029189),o=u(o,l,c,f,e[t+9],4,-640364487),f=u(f,o,l,c,e[t+12],11,-421815835),c=u(c,f,o,l,e[t+15],16,530742520),l=u(l,c,f,o,e[t+2],23,-995338651),o=s(o,l,c,f,e[t],6,-198630844),f=s(f,o,l,c,e[t+7],10,1126891415),c=s(c,f,o,l,e[t+14],15,-1416354905),l=s(l,c,f,o,e[t+5],21,-57434055),o=s(o,l,c,f,e[t+12],6,1700485571),f=s(f,o,l,c,e[t+3],10,-1894986606),c=s(c,f,o,l,e[t+10],15,-1051523),l=s(l,c,f,o,e[t+1],21,-2054922799),o=s(o,l,c,f,e[t+8],6,1873313359),f=s(f,o,l,c,e[t+15],10,-30611744),c=s(c,f,o,l,e[t+6],15,-1560198380),l=s(l,c,f,o,e[t+13],21,1309151649),o=s(o,l,c,f,e[t+4],6,-145523070),f=s(f,o,l,c,e[t+11],10,-1120210379),c=s(c,f,o,l,e[t+2],15,718787259),l=s(l,c,f,o,e[t+9],21,-343485551),o=r(o,n),l=r(l,d),c=r(c,p),f=r(f,h)}return[o,l,c,f]}(function(e){if(0===e.length)return[];const t=8*e.length,r=new Uint32Array(n(t));for(let n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))}},624:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(r)};const n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),r=new Uint8Array(16)},244:(e,t)=>{"use strict";function n(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:return t^n^r;case 2:return t&n^t&r^n&r;case 3:return t^n^r}}function r(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let n=0;n<t.length;++n)e.push(t.charCodeAt(n))}e.push(128);const i=e.length/4+2,a=Math.ceil(i/16),u=new Array(a);for(let t=0;t<a;++t){const n=new Uint32Array(16);for(let r=0;r<16;++r)n[r]=e[64*t+4*r]<<24|e[64*t+4*r+1]<<16|e[64*t+4*r+2]<<8|e[64*t+4*r+3];u[t]=n}u[a-1][14]=8*(e.length-1)/Math.pow(2,32),u[a-1][14]=Math.floor(u[a-1][14]),u[a-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<a;++e){const i=new Uint32Array(80);for(let t=0;t<16;++t)i[t]=u[e][t];for(let e=16;e<80;++e)i[e]=r(i[e-3]^i[e-8]^i[e-14]^i[e-16],1);let a=o[0],s=o[1],l=o[2],c=o[3],f=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),u=r(a,5)+n(o,s,l,c)+f+t[o]+i[e]>>>0;f=c,c=l,l=r(s,30)>>>0,s=a,a=u}o[0]=o[0]+a>>>0,o[1]=o[1]+s>>>0,o[2]=o[2]+l>>>0,o[3]=o[3]+c>>>0,o[4]=o[4]+f>>>0}return[o[0]>>24&255,o[0]>>16&255,o[0]>>8&255,255&o[0],o[1]>>24&255,o[1]>>16&255,o[1]>>8&255,255&o[1],o[2]>>24&255,o[2]>>16&255,o[2]>>8&255,255&o[2],o[3]>>24&255,o[3]>>16&255,o[3]>>8&255,255&o[3],o[4]>>24&255,o[4]>>16&255,o[4]>>8&255,255&o[4]]}},160:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(624)),o=i(n(302));function i(e){return e&&e.__esModule?e:{default:e}}let a,u,s=0,l=0;t.default=function(e,t,n){let i=t&&n||0;const c=t||[];let f=(e=e||{}).node||a,d=void 0!==e.clockseq?e.clockseq:u;if(null==f||null==d){const t=e.random||(e.rng||r.default)();null==f&&(f=a=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==d&&(d=u=16383&(t[6]<<8|t[7]))}let p=void 0!==e.msecs?e.msecs:Date.now(),h=void 0!==e.nsecs?e.nsecs:l+1;const v=p-s+(h-l)/1e4;if(v<0&&void 0===e.clockseq&&(d=d+1&16383),(v<0||p>s)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=p,l=h,u=d,p+=122192928e5;const m=(1e4*(268435455&p)+h)%4294967296;c[i++]=m>>>24&255,c[i++]=m>>>16&255,c[i++]=m>>>8&255,c[i++]=255&m;const g=p/4294967296*1e4&268435455;c[i++]=g>>>8&255,c[i++]=255&g,c[i++]=g>>>24&15|16,c[i++]=g>>>16&255,c[i++]=d>>>8|128,c[i++]=255&d;for(let e=0;e<6;++e)c[i+e]=f[e];return t||(0,o.default)(c)}},461:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(428)),o=i(n(251));function i(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)("v3",48,o.default);t.default=a},428:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){function r(e,r,i,a){const u=i&&a||0;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let n=0;n<e.length;++n)t.push(e.charCodeAt(n));return t}(e)),"string"==typeof r&&(r=function(e){const t=[];return e.replace(/[a-fA-F0-9]{2}/g,(function(e){t.push(parseInt(e,16))})),t}(r)),!Array.isArray(e))throw TypeError("value must be an array of bytes");if(!Array.isArray(r)||16!==r.length)throw TypeError("namespace must be uuid string or an Array of 16 byte values");const s=n(r.concat(e));if(s[6]=15&s[6]|t,s[8]=63&s[8]|128,i)for(let e=0;e<16;++e)i[u+e]=s[e];return i||(0,o.default)(s)}try{r.name=e}catch(e){}return r.DNS=i,r.URL=a,r},t.URL=t.DNS=void 0;var r,o=(r=n(302))&&r.__esModule?r:{default:r};const i="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=i;const a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=a},750:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(624)),o=i(n(302));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,n){"string"==typeof e&&(t="binary"===e?new Uint8Array(16):null,e=null);const i=(e=e||{}).random||(e.rng||r.default)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){const e=n||0;for(let n=0;n<16;++n)t[e+n]=i[n];return t}return(0,o.default)(i)}},693:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(428)),o=i(n(244));function i(e){return e&&e.__esModule?e:{default:e}}var a=(0,r.default)("v5",80,o.default);t.default=a},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var u=new Set,s={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},v={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function _(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(v,e)||!p.call(h,e)&&(d.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,S=60106,E=60107,x=60108,A=60114,C=60109,O=60110,T=60112,P=60113,R=60120,N=60115,I=60116,L=60121,j=60128,M=60129,D=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var B=Symbol.for;k=B("react.element"),S=B("react.portal"),E=B("react.fragment"),x=B("react.strict_mode"),A=B("react.profiler"),C=B("react.provider"),O=B("react.context"),T=B("react.forward_ref"),P=B("react.suspense"),R=B("react.suspense_list"),N=B("react.memo"),I=B("react.lazy"),L=B("react.block"),B("react.scope"),j=B("react.opaque.id"),M=B("react.debug_trace_mode"),D=B("react.offscreen"),z=B("react.legacy_hidden")}var V,F="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}function $(e){if(void 0===V)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);V=t&&t[1]||""}return"\n"+V+e}var q=!1;function W(e,t){if(!e||q)return"";q=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=u);break}}}finally{q=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function H(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return W(e.type,!1);case 11:return W(e.type.render,!1);case 22:return W(e.type._render,!1);case 1:return W(e.type,!0);default:return""}}function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case S:return"Portal";case A:return"Profiler";case x:return"StrictMode";case P:return"Suspense";case R:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case N:return K(e.type);case L:return K(e._render);case I:t=e._payload,e=e._init;try{return K(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function G(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=G(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function J(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=G(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ue(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function se(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function le(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,ve,me=(ve=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=_e(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var ke=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function xe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,Ce=null,Oe=null;function Te(e){if(e=Zr(e)){if("function"!=typeof Ae)throw Error(a(280));var t=e.stateNode;t&&(t=to(t),Ae(e.stateNode,e.type,t))}}function Pe(e){Ce?Oe?Oe.push(e):Oe=[e]:Ce=e}function Re(){if(Ce){var e=Ce,t=Oe;if(Oe=Ce=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Ne(e,t){return e(t)}function Ie(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var je=Ne,Me=!1,De=!1;function ze(){null===Ce&&null===Oe||(Le(),Re())}function Be(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ve=!1;if(f)try{var Fe={};Object.defineProperty(Fe,"passive",{get:function(){Ve=!0}}),window.addEventListener("test",Fe,Fe),window.removeEventListener("test",Fe,Fe)}catch(ve){Ve=!1}function Ue(e,t,n,r,o,i,a,u,s){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var $e=!1,qe=null,We=!1,He=null,Ke={onError:function(e){$e=!0,qe=e}};function Qe(e,t,n,r,o,i,a,u,s){$e=!1,qe=null,Ue.apply(Ke,arguments)}function Ge(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Je(e){if(Ge(e)!==e)throw Error(a(188))}function Xe(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ge(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Je(o),e;if(i===r)return Je(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,s=o.child;s;){if(s===n){u=!0,n=o,r=i;break}if(s===r){u=!0,r=o,n=i;break}s=s.sibling}if(!u){for(s=i.child;s;){if(s===n){u=!0,n=i,r=o;break}if(s===r){u=!0,r=i,n=o;break}s=s.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,ut=null,st=null,lt=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function vt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Xr(e.target);if(null!==t){var n=Ge(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&gt(at)&&(at=null),null!==ut&&gt(ut)&&(ut=null),null!==st&&gt(st)&&(st=null),lt.forEach(yt),ct.forEach(yt)}function _t(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function wt(e){function t(t){return _t(t,e)}if(0<it.length){_t(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&_t(at,e),null!==ut&&_t(ut,e),null!==st&&_t(st,e),lt.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)mt(n),null===n.blockedOn&&ft.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},Et={},xt={};function At(e){if(Et[e])return Et[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in xt)return Et[e]=n[t];return e}f&&(xt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ct=At("animationend"),Ot=At("animationiteration"),Tt=At("animationstart"),Pt=At("transitionend"),Rt=new Map,Nt=new Map,It=["abort","abort",Ct,"animationEnd",Ot,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Pt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Nt.set(r,t),Rt.set(r,o),l(o,[r])}}(0,i.unstable_now)();var jt=8;function Mt(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!=(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!=(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!=(t=4186112&e)?(jt=6,t):0!=(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!=(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,u=e.pingedLanes;if(0!==i)r=i,o=jt=15;else if(0!=(i=134217727&n)){var s=i&~a;0!==s?(r=Mt(s),o=jt):0!=(u&=i)&&(r=Mt(u),o=jt)}else 0!=(i=n&~a)?(r=Mt(i),o=jt):0!==u&&(r=Mt(u),o=jt);if(0===r)return 0;if(r=n&((0>(r=31-$t(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Mt(t),o<=jt)return t;jt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-$t(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Bt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Vt(24&~t))?Bt(10,t):e;case 10:return 0===(e=Vt(192&~t))?Bt(8,t):e;case 8:return 0===(e=Vt(3584&~t))&&0===(e=Vt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Vt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Vt(e){return e&-e}function Ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-$t(t)]=n}var $t=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(qt(e)/Wt|0)|0},qt=Math.log,Wt=Math.LN2,Ht=i.unstable_UserBlockingPriority,Kt=i.unstable_runWithPriority,Qt=!0;function Gt(e,t,n,r){Me||Le();var o=Jt,i=Me;Me=!0;try{Ie(o,e,t,n,r)}finally{(Me=i)||ze()}}function Yt(e,t,n,r){Kt(Ht,Jt.bind(null,e,t,n,r))}function Jt(e,t,n,r){var o;if(Qt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Xt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=vt(at,e,t,n,r,o),!0;case"dragenter":return ut=vt(ut,e,t,n,r,o),!0;case"mouseover":return st=vt(st,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return lt.set(i,vt(lt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,vt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Rr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=xe(r);if(null!==(o=Xr(o))){var i=Ge(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Ye(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Rr(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function un(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var sn,ln,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=un(fn),pn=o({},fn,{view:0,detail:0}),hn=un(pn),vn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:An,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(sn=e.screenX-cn.screenX,ln=e.screenY-cn.screenY):ln=sn=0,cn=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),mn=un(vn),gn=un(o({},vn,{dataTransfer:0})),yn=un(o({},pn,{relatedTarget:0})),bn=un(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),_n=un(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),wn=un(o({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function An(){return xn}var Cn=un(o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:An,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),On=un(o({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=un(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:An})),Pn=un(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=un(o({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Nn=[9,13,27,32],In=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var jn=f&&"TextEvent"in window&&!Ln,Mn=f&&(!In||Ln&&8<Ln&&11>=Ln),Dn=String.fromCharCode(32),zn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Nn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function qn(e,t,n,r){Pe(r),0<(t=Ir(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,Hn=null;function Kn(e){xr(e,0)}function Qn(e){if(J(eo(e)))return e}function Gn(e,t){if("change"===e)return t}var Yn=!1;if(f){var Jn;if(f){var Xn="oninput"in document;if(!Xn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Xn="function"==typeof Zn.oninput}Jn=Xn}else Jn=!1;Yn=Jn&&(!document.documentMode||9<document.documentMode)}function er(){Wn&&(Wn.detachEvent("onpropertychange",tr),Hn=Wn=null)}function tr(e){if("value"===e.propertyName&&Qn(Hn)){var t=[];if(qn(t,Hn,e,xe(e)),e=Kn,Me)e(t);else{Me=!0;try{Ne(e,t)}finally{Me=!1,ze()}}}}function nr(e,t,n){"focusin"===e?(er(),Hn=n,(Wn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Hn)}function or(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function sr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function lr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=lr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=lr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,vr=null,mr=null,gr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==vr||vr!==X(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&sr(gr,r)||(gr=r,0<(r=Ir(mr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(It,2);for(var _r="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<_r.length;wr++)Nt.set(_r[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,u,s,l){if(Qe.apply(this,arguments),$e){if(!$e)throw Error(a(198));var c=qe;$e=!1,qe=null,We||(We=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function xr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],s=u.instance,l=u.currentTarget;if(u=u.listener,s!==i&&o.isPropagationStopped())break e;Er(o,u,l),i=s}else for(a=0;a<r.length;a++){if(s=(u=r[a]).instance,l=u.currentTarget,u=u.listener,s!==i&&o.isPropagationStopped())break e;Er(o,u,l),i=s}}}if(We)throw e=He,We=!1,He=null,e}function Ar(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Pr(t,e,2,!1),n.add(r))}var Cr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[Cr]||(e[Cr]=!0,u.forEach((function(t){Sr.has(t)||Tr(t,!1,e,null),Tr(t,!0,e,null)})))}function Tr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=no(i),u=e+"__"+(t?"capture":"bubble");a.has(u)||(t&&(o|=4),Pr(i,e,o,t),a.add(u))}function Pr(e,t,n,r){var o=Nt.get(t);switch(void 0===o?2:o){case 0:o=Gt;break;case 1:o=Yt;break;default:o=Jt}n=o.bind(null,t,n,e),o=void 0,!Ve||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var s=a.tag;if((3===s||4===s)&&((s=a.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=Xr(u)))return;if(5===(s=a.tag)||6===s){r=i=a;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{je(e,t,n)}finally{De=!1,ze()}}((function(){var r=i,o=xe(n),a=[];e:{var u=Rt.get(e);if(void 0!==u){var s=dn,l=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":s=Cn;break;case"focusin":l="focus",s=yn;break;case"focusout":l="blur",s=yn;break;case"beforeblur":case"afterblur":s=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case Ct:case Ot:case Tt:s=bn;break;case Pt:s=Pn;break;case"scroll":s=hn;break;case"wheel":s=Rn;break;case"copy":case"cut":case"paste":s=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=On}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=Be(h,d))&&c.push(Nr(h,v,p))),f)break;h=h.return}0<c.length&&(u=new s(u,l,null,n,o),a.push({event:u,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(l=n.relatedTarget||n.fromElement)||!Xr(l)&&!l[Yr])&&(s||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,s?(s=r,null!==(l=(l=n.relatedTarget||n.toElement)?Xr(l):null)&&(l!==(f=Ge(l))||5!==l.tag&&6!==l.tag)&&(l=null)):(s=null,l=r),s!==l)){if(c=mn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==s?u:eo(s),p=null==l?u:eo(l),(u=new c(v,h+"leave",s,n,o)).target=f,u.relatedTarget=p,v=null,Xr(o)===r&&((c=new c(d,h+"enter",l,n,o)).target=p,c.relatedTarget=f,v=c),f=v,s&&l)e:{for(d=l,h=0,p=c=s;p;p=Lr(p))h++;for(p=0,v=d;v;v=Lr(v))p++;for(;0<h-p;)c=Lr(c),h--;for(;0<p-h;)d=Lr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Lr(c),d=Lr(d)}c=null}else c=null;null!==s&&jr(a,u,s,c,!1),null!==l&&null!==f&&jr(a,f,l,c,!0)}if("select"===(s=(u=r?eo(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===s&&"file"===u.type)var m=Gn;else if($n(u))if(Yn)m=ir;else{m=rr;var g=nr}else(s=u.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(m=or);switch(m&&(m=m(e,r))?qn(a,m,n,o):(g&&g(e,u,r),"focusout"===e&&(g=u._wrapperState)&&g.controlled&&"number"===u.type&&oe(u,"number",u.value)),g=r?eo(r):window,e){case"focusin":($n(g)||"true"===g.contentEditable)&&(vr=g,mr=r,gr=null);break;case"focusout":gr=mr=vr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(a,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(a,n,o)}var y;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Fn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fn&&(y=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Fn=!0)),0<(g=Ir(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:g}),(y||null!==(y=Vn(n)))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(zn=!0,Dn);case"textInput":return(e=t.data)===Dn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Fn)return"compositionend"===e||!In&&Bn(e,t)?(e=nn(),tn=en=Zt=null,Fn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Ir(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}xr(a,t)}))}function Nr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ir(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Be(e,n))&&r.unshift(Nr(e,i,o)),null!=(i=Be(e,t))&&r.push(Nr(e,i,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,s=u.alternate,l=u.stateNode;if(null!==s&&s===r)break;5===u.tag&&null!==l&&(u=l,o?null!=(s=Be(n,i))&&a.unshift(Nr(n,s,u)):o||null!=(s=Be(n,i))&&a.push(Nr(n,s,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Mr(){}var Dr=null,zr=null;function Br(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Fr="function"==typeof setTimeout?setTimeout:void 0,Ur="function"==typeof clearTimeout?clearTimeout:void 0;function $r(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function qr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Hr=0,Kr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+Kr,Gr="__reactProps$"+Kr,Yr="__reactContainer$"+Kr,Jr="__reactEvents$"+Kr;function Xr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wr(e);null!==e;){if(n=e[Qr])return n;e=Wr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Qr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function to(e){return e[Gr]||null}function no(e){var t=e[Jr];return void 0===t&&(t=e[Jr]=new Set),t}var ro=[],oo=-1;function io(e){return{current:e}}function ao(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function uo(e,t){oo++,ro[oo]=e.current,e.current=t}var so={},lo=io(so),co=io(!1),fo=so;function po(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return null!=e.childContextTypes}function vo(){ao(co),ao(lo)}function mo(e,t,n){if(lo.current!==so)throw Error(a(168));uo(lo,t),uo(co,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,K(t)||"Unknown",i));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,fo=lo.current,uo(lo,e),uo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=go(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,ao(co),ao(lo),uo(lo,e)):ao(co),uo(co,n)}var _o=null,wo=null,ko=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,Eo=i.unstable_cancelCallback,xo=i.unstable_shouldYield,Ao=i.unstable_requestPaint,Co=i.unstable_now,Oo=i.unstable_getCurrentPriorityLevel,To=i.unstable_ImmediatePriority,Po=i.unstable_UserBlockingPriority,Ro=i.unstable_NormalPriority,No=i.unstable_LowPriority,Io=i.unstable_IdlePriority,Lo={},jo=void 0!==Ao?Ao:function(){},Mo=null,Do=null,zo=!1,Bo=Co(),Vo=1e4>Bo?Co:function(){return Co()-Bo};function Fo(){switch(Oo()){case To:return 99;case Po:return 98;case Ro:return 97;case No:return 96;case Io:return 95;default:throw Error(a(332))}}function Uo(e){switch(e){case 99:return To;case 98:return Po;case 97:return Ro;case 96:return No;case 95:return Io;default:throw Error(a(332))}}function $o(e,t){return e=Uo(e),ko(e,t)}function qo(e,t,n){return e=Uo(e),So(e,t,n)}function Wo(){if(null!==Do){var e=Do;Do=null,Eo(e)}Ho()}function Ho(){if(!zo&&null!==Mo){zo=!0;var e=0;try{var t=Mo;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Mo=null}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),So(To,Wo),t}finally{zo=!1}}}var Ko=w.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Go=io(null),Yo=null,Jo=null,Xo=null;function Zo(){Xo=Jo=Yo=null}function ei(e){var t=Go.current;ao(Go),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ni(e,t){Yo=e,Xo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ia=!0),e.firstContext=null)}function ri(e,t){if(Xo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Yo)throw Error(a(308));Jo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var oi=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ai(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ui(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function si(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function li(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ci(e,t,n,r){var i=e.updateQueue;oi=!1;var a=i.firstBaseUpdate,u=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,c=l.next;l.next=null,null===u?a=c:u.next=c,u=l;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=l)}}if(null!==a){for(d=i.baseState,u=0,f=c=l=null;;){s=a.lane;var p=a.eventTime;if((r&s)===s){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,v=a;switch(s=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,s);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(s="function"==typeof(h=v.payload)?h.call(p,d,s):h))break e;d=o({},d,s);break e;case 2:oi=!0}}null!==a.callback&&(e.flags|=32,null===(s=i.effects)?i.effects=[a]:s.push(a))}else p={eventTime:p,lane:s,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,l=d):f=f.next=p,u|=s;if(null===(a=a.next)){if(null===(s=i.shared.pending))break;a=s.next,s.next=null,i.lastBaseUpdate=s,i.shared.pending=null}}null===f&&(l=d),i.baseState=l,i.firstBaseUpdate=c,i.lastBaseUpdate=f,ju|=u,e.lanes=u,e.memoizedState=d}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var di=(new r.Component).refs;function pi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternals)&&Ge(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=as(),o=us(e),i=ui(r,o);i.payload=t,null!=n&&(i.callback=n),si(e,i),ss(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=as(),o=us(e),i=ui(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),si(e,i),ss(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=as(),r=us(e),o=ui(n,r);o.tag=2,null!=t&&(o.callback=t),si(e,o),ss(e,r,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(o,i))}function mi(e,t,n){var r=!1,o=so,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(o=ho(t)?fo:lo.current,i=(r=null!=(r=t.contextTypes))?po(e,o):so),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function yi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=di,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ri(i):(i=ho(t)?fo:lo.current,o.context=po(e,i)),ci(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(pi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&hi.enqueueReplaceState(o,o.state,null),ci(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var bi=Array.isArray;function _i(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===di&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function wi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ki(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vs(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=qs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=_i(e,t,n),r.return=e,r):((r=Fs(n.type,n.key,n.props,null,e.mode,r)).ref=_i(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ws(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Us(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=qs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Fs(t.type,t.key,t.props,null,e.mode,n)).ref=_i(e,null,t),n.return=e,n;case S:return(t=Ws(t,e.mode,n)).return=e,t}if(bi(t)||U(t))return(t=Us(t,e.mode,n,null)).return=e,t;wi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?n.type===E?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null}if(bi(n)||U(n))return null!==o?null:f(e,t,n,r,null);wi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===E?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(bi(r)||U(r))return f(t,e=e.get(n)||null,r,o,null);wi(t,r)}return null}function v(o,a,u,s){for(var l=null,c=null,f=a,v=a=0,m=null;null!==f&&v<u.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var g=p(o,f,u[v],s);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,v),null===c?l=g:c.sibling=g,c=g,f=m}if(v===u.length)return n(o,f),l;if(null===f){for(;v<u.length;v++)null!==(f=d(o,u[v],s))&&(a=i(f,a,v),null===c?l=f:c.sibling=f,c=f);return l}for(f=r(o,f);v<u.length;v++)null!==(m=h(f,o,v,u[v],s))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=i(m,a,v),null===c?l=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(o,e)})),l}function m(o,u,s,l){var c=U(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var f=c=null,v=u,m=u=0,g=null,y=s.next();null!==v&&!y.done;m++,y=s.next()){v.index>m?(g=v,v=null):g=v.sibling;var b=p(o,v,y.value,l);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,m),null===f?c=b:f.sibling=b,f=b,v=g}if(y.done)return n(o,v),c;if(null===v){for(;!y.done;m++,y=s.next())null!==(y=d(o,y.value,l))&&(u=i(y,u,m),null===f?c=y:f.sibling=y,f=y);return c}for(v=r(o,v);!y.done;m++,y=s.next())null!==(y=h(v,o,m,y.value,l))&&(e&&null!==y.alternate&&v.delete(null===y.key?m:y.key),u=i(y,u,m),null===f?c=y:f.sibling=y,f=y);return e&&v.forEach((function(e){return t(o,e)})),c}return function(e,r,i,s){var l="object"==typeof i&&null!==i&&i.type===E&&null===i.key;l&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case k:e:{for(c=i.key,l=r;null!==l;){if(l.key===c){switch(l.tag){case 7:if(i.type===E){n(e,l.sibling),(r=o(l,i.props.children)).return=e,e=r;break e}break;default:if(l.elementType===i.type){n(e,l.sibling),(r=o(l,i.props)).ref=_i(e,l,i),r.return=e,e=r;break e}}n(e,l);break}t(e,l),l=l.sibling}i.type===E?((r=Us(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=Fs(i.type,i.key,i.props,null,e.mode,s)).ref=_i(e,r,i),s.return=e,e=s)}return u(e);case S:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ws(i,e.mode,s)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=qs(i,e.mode,s)).return=e,e=r),u(e);if(bi(i))return v(e,r,i,s);if(U(i))return m(e,r,i,s);if(c&&wi(e,i),void 0===i&&!l)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,K(e.type)||"Component"))}return n(e,r)}}var Si=ki(!0),Ei=ki(!1),xi={},Ai=io(xi),Ci=io(xi),Oi=io(xi);function Ti(e){if(e===xi)throw Error(a(174));return e}function Pi(e,t){switch(uo(Oi,t),uo(Ci,e),uo(Ai,xi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Ai),uo(Ai,t)}function Ri(){ao(Ai),ao(Ci),ao(Oi)}function Ni(e){Ti(Oi.current);var t=Ti(Ai.current),n=pe(t,e.type);t!==n&&(uo(Ci,e),uo(Ai,n))}function Ii(e){Ci.current===e&&(ao(Ai),ao(Ci))}var Li=io(0);function ji(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Mi=null,Di=null,zi=!1;function Bi(e,t){var n=zs(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Vi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Fi(e){if(zi){var t=Di;if(t){var n=t;if(!Vi(e,t)){if(!(t=qr(n.nextSibling))||!Vi(e,t))return e.flags=-1025&e.flags|2,zi=!1,void(Mi=e);Bi(Mi,n)}Mi=e,Di=qr(t.firstChild)}else e.flags=-1025&e.flags|2,zi=!1,Mi=e}}function Ui(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Mi=e}function $i(e){if(e!==Mi)return!1;if(!zi)return Ui(e),zi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Vr(t,e.memoizedProps))for(t=Di;t;)Bi(e,t),t=qr(t.nextSibling);if(Ui(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Di=qr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Di=null}}else Di=Mi?qr(e.stateNode.nextSibling):null;return!0}function qi(){Di=Mi=null,zi=!1}var Wi=[];function Hi(){for(var e=0;e<Wi.length;e++)Wi[e]._workInProgressVersionPrimary=null;Wi.length=0}var Ki=w.ReactCurrentDispatcher,Qi=w.ReactCurrentBatchConfig,Gi=0,Yi=null,Ji=null,Xi=null,Zi=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,o,i){if(Gi=i,Yi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ki.current=null===e||null===e.memoizedState?Ta:Pa,e=n(r,o),ea){i=0;do{if(ea=!1,!(25>i))throw Error(a(301));i+=1,Xi=Ji=null,t.updateQueue=null,Ki.current=Ra,e=n(r,o)}while(ea)}if(Ki.current=Oa,t=null!==Ji&&null!==Ji.next,Gi=0,Xi=Ji=Yi=null,Zi=!1,t)throw Error(a(300));return e}function oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xi?Yi.memoizedState=Xi=e:Xi=Xi.next=e,Xi}function ia(){if(null===Ji){var e=Yi.alternate;e=null!==e?e.memoizedState:null}else e=Ji.next;var t=null===Xi?Yi.memoizedState:Xi.next;if(null!==t)Xi=t,Ji=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Ji=e).memoizedState,baseState:Ji.baseState,baseQueue:Ji.baseQueue,queue:Ji.queue,next:null},null===Xi?Yi.memoizedState=Xi=e:Xi=Xi.next=e}return Xi}function aa(e,t){return"function"==typeof t?t(e):t}function ua(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Ji,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=u=i=null,l=o;do{var c=l.lane;if((Gi&c)===c)null!==s&&(s=s.next={lane:0,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),r=l.eagerReducer===e?l.eagerState:e(r,l.action);else{var f={lane:c,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===s?(u=s=f,i=r):s=s.next=f,Yi.lanes|=c,ju|=c}l=l.next}while(null!==l&&l!==o);null===s?i=r:s.next=u,ar(r,t.memoizedState)||(Ia=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function sa(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);ar(i,t.memoizedState)||(Ia=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function la(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Gi&e)===e)&&(t._workInProgressVersionPrimary=r,Wi.push(t))),e)return n(t._source);throw Wi.push(t),Error(a(350))}function ca(e,t,n,r){var o=Cu;if(null===o)throw Error(a(349));var i=t._getVersion,u=i(t._source),s=Ki.current,l=s.useState((function(){return la(o,t,n)})),c=l[1],f=l[0];l=Xi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var m=Yi;return e.memoizedState={refs:p,source:t,subscribe:r},s.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ar(u,e)){e=n(t._source),ar(f,e)||(c(e),e=us(m),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var s=31-$t(a),l=1<<s;r[s]|=e,a&=~l}}}),[n,t,r]),s.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=us(m);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(v,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:f}).dispatch=c=Ca.bind(null,Yi,e),l.queue=e,l.baseQueue=null,f=la(o,t,n),l.memoizedState=l.baseState=f),f}function fa(e,t,n){return ca(ia(),e,t,n)}function da(e){var t=oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Ca.bind(null,Yi,e),[t.memoizedState,e]}function pa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Yi.updateQueue)?(t={lastEffect:null},Yi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ha(e){return e={current:e},oa().memoizedState=e}function va(){return ia().memoizedState}function ma(e,t,n,r){var o=oa();Yi.flags|=e,o.memoizedState=pa(1|t,n,void 0,void 0===r?null:r)}function ga(e,t,n,r){var o=ia();r=void 0===r?null:r;var i=void 0;if(null!==Ji){var a=Ji.memoizedState;if(i=a.destroy,null!==r&&na(r,a.deps))return void pa(t,n,i,r)}Yi.flags|=e,o.memoizedState=pa(1|t,n,i,r)}function ya(e,t){return ma(516,4,e,t)}function ba(e,t){return ga(516,4,e,t)}function _a(e,t){return ga(4,2,e,t)}function wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ka(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,2,wa.bind(null,t,e),n)}function Sa(){}function Ea(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function xa(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Aa(e,t){var n=Fo();$o(98>n?98:n,(function(){e(!0)})),$o(97<n?97:n,(function(){var n=Qi.transition;Qi.transition=1;try{e(!1),t()}finally{Qi.transition=n}}))}function Ca(e,t,n){var r=as(),o=us(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Yi||null!==a&&a===Yi)ea=Zi=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var u=t.lastRenderedState,s=a(u,n);if(i.eagerReducer=a,i.eagerState=s,ar(s,u))return}catch(e){}ss(e,o,r)}}var Oa={readContext:ri,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Ta={readContext:ri,useCallback:function(e,t){return oa().memoizedState=[e,void 0===t?null:t],e},useContext:ri,useEffect:ya,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ma(4,2,e,t)},useMemo:function(e,t){var n=oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ca.bind(null,Yi,e),[r.memoizedState,e]},useRef:ha,useState:da,useDebugValue:Sa,useDeferredValue:function(e){var t=da(e),n=t[0],r=t[1];return ya((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=da(!1),t=e[0];return ha(e=Aa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ca(r,e,t,n)},useOpaqueIdentifier:function(){if(zi){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Hr++).toString(36))),Error(a(355))})),n=da(t)[1];return 0==(2&Yi.mode)&&(Yi.flags|=516,pa(5,(function(){n("r:"+(Hr++).toString(36))}),void 0,null)),t}return da(t="r:"+(Hr++).toString(36)),t},unstable_isNewReconciler:!1},Pa={readContext:ri,useCallback:Ea,useContext:ri,useEffect:ba,useImperativeHandle:ka,useLayoutEffect:_a,useMemo:xa,useReducer:ua,useRef:va,useState:function(){return ua(aa)},useDebugValue:Sa,useDeferredValue:function(e){var t=ua(aa),n=t[0],r=t[1];return ba((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=ua(aa)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(aa)[0]},unstable_isNewReconciler:!1},Ra={readContext:ri,useCallback:Ea,useContext:ri,useEffect:ba,useImperativeHandle:ka,useLayoutEffect:_a,useMemo:xa,useReducer:sa,useRef:va,useState:function(){return sa(aa)},useDebugValue:Sa,useDeferredValue:function(e){var t=sa(aa),n=t[0],r=t[1];return ba((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=sa(aa)[0];return[va().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return sa(aa)[0]},unstable_isNewReconciler:!1},Na=w.ReactCurrentOwner,Ia=!1;function La(e,t,n,r){t.child=null===e?Ei(t,null,n,r):Si(t,e.child,n,r)}function ja(e,t,n,r,o){n=n.render;var i=t.ref;return ni(t,o),r=ra(e,t,n,r,i,o),null===e||Ia?(t.flags|=1,La(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Za(e,t,o))}function Ma(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Bs(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Fs(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Da(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:sr)(o,r)&&e.ref===t.ref)?Za(e,t,i):(t.flags|=1,(e=Vs(a,r)).ref=t.ref,e.return=t,t.child=e)}function Da(e,t,n,r,o,i){if(null!==e&&sr(e.memoizedProps,r)&&e.ref===t.ref){if(Ia=!1,0==(i&o))return t.lanes=e.lanes,Za(e,t,i);0!=(16384&e.flags)&&(Ia=!0)}return Va(e,t,n,r,i)}function za(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ms(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ms(0,e),null;t.memoizedState={baseLanes:0},ms(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,ms(0,r);return La(e,t,o,n),t.child}function Ba(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Va(e,t,n,r,o){var i=ho(n)?fo:lo.current;return i=po(t,i),ni(t,o),n=ra(e,t,n,r,i,o),null===e||Ia?(t.flags|=1,La(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Za(e,t,o))}function Fa(e,t,n,r,o){if(ho(n)){var i=!0;yo(t)}else i=!1;if(ni(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),mi(t,n,r),yi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var s=a.context,l=n.contextType;l="object"==typeof l&&null!==l?ri(l):po(t,l=ho(n)?fo:lo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==l)&&gi(t,a,r,l),oi=!1;var d=t.memoizedState;a.state=d,ci(t,r,a,o),s=t.memoizedState,u!==r||d!==s||co.current||oi?("function"==typeof c&&(pi(t,n,c,r),s=t.memoizedState),(u=oi||vi(t,n,u,r,d,s,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=l,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ai(e,t),u=t.memoizedProps,l=t.type===t.elementType?u:Qo(t.type,u),a.props=l,f=t.pendingProps,d=a.context,s="object"==typeof(s=n.contextType)&&null!==s?ri(s):po(t,s=ho(n)?fo:lo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==s)&&gi(t,a,r,s),oi=!1,d=t.memoizedState,a.state=d,ci(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||co.current||oi?("function"==typeof p&&(pi(t,n,p,r),h=t.memoizedState),(l=oi||vi(t,n,l,r,d,h,s))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=s,r=l):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ua(e,t,n,r,i,o)}function Ua(e,t,n,r,o,i){Ba(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&bo(t,n,!1),Za(e,t,i);r=t.stateNode,Na.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,u,i)):La(e,t,u,i),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function $a(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Pi(e,t.containerInfo)}var qa,Wa,Ha,Ka={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,o=t.pendingProps,i=Li.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),uo(Li,1&i),null===e?(void 0!==o.fallback&&Fi(t),e=o.children,i=o.fallback,a?(e=Ga(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ga(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ka,t.lanes=33554432,e):((n=$s({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var u={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=u,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Vs(a,u),null!==e?r=Vs(e,r):(r=Us(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ka,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Vs(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ga(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=$s(t,o,0,null),n=Us(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ya(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ti(e.return,t)}function Ja(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Xa(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(La(e,t,r.children,n),0!=(2&(r=Li.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ya(e,n);else if(19===e.tag)Ya(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(Li,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ji(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ja(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ji(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ja(t,!0,n,null,i,t.lastEffect);break;case"together":Ja(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Za(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),ju|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Vs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Vs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function eu(e,t){if(!zi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&vo(),null;case 3:return Ri(),ao(co),ao(lo),Hi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||($i(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ii(t);var i=Ti(Oi.current);if(n=t.type,null!==e&&null!=t.stateNode)Wa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ti(Ai.current),$i(t)){r=t.stateNode,n=t.type;var u=t.memoizedProps;switch(r[Qr]=t,r[Gr]=u,n){case"dialog":Ar("cancel",r),Ar("close",r);break;case"iframe":case"object":case"embed":Ar("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Ar(kr[e],r);break;case"source":Ar("error",r);break;case"img":case"image":case"link":Ar("error",r),Ar("load",r);break;case"details":Ar("toggle",r);break;case"input":ee(r,u),Ar("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Ar("invalid",r);break;case"textarea":se(r,u),Ar("invalid",r)}for(var l in Se(n,u),e=null,u)u.hasOwnProperty(l)&&(i=u[l],"children"===l?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):s.hasOwnProperty(l)&&null!=i&&"onScroll"===l&&Ar("scroll",r));switch(n){case"input":Y(r),re(r,u,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=Mr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(l=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[Qr]=t,e[Gr]=r,qa(e,t),t.stateNode=e,l=Ee(n,r),n){case"dialog":Ar("cancel",e),Ar("close",e),i=r;break;case"iframe":case"object":case"embed":Ar("load",e),i=r;break;case"video":case"audio":for(i=0;i<kr.length;i++)Ar(kr[i],e);i=r;break;case"source":Ar("error",e),i=r;break;case"img":case"image":case"link":Ar("error",e),Ar("load",e),i=r;break;case"details":Ar("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Ar("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Ar("invalid",e);break;case"textarea":se(e,r),i=ue(e,r),Ar("invalid",e);break;default:i=r}Se(n,i);var c=i;for(u in c)if(c.hasOwnProperty(u)){var f=c[u];"style"===u?we(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===u?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?null!=f&&"onScroll"===u&&Ar("scroll",e):null!=f&&_(e,u,f,l))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(u=r.value)?ae(e,!!r.multiple,u,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Mr)}Br(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ti(Oi.current),Ti(Ai.current),$i(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return ao(Li),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&$i(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Li.current)?0===Nu&&(Nu=3):(0!==Nu&&3!==Nu||(Nu=4),null===Cu||0==(134217727&ju)&&0==(134217727&Mu)||ds(Cu,Tu))),(r||n)&&(t.flags|=4),null);case 4:return Ri(),null===e&&Or(t.stateNode.containerInfo),null;case 10:return ei(t),null;case 17:return ho(t.type)&&vo(),null;case 19:if(ao(Li),null===(r=t.memoizedState))return null;if(u=0!=(64&t.flags),null===(l=r.rendering))if(u)eu(r,!1);else{if(0!==Nu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(l=ji(e))){for(t.flags|=64,eu(r,!1),null!==(u=l.updateQueue)&&(t.updateQueue=u,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(u=n).flags&=2,u.nextEffect=null,u.firstEffect=null,u.lastEffect=null,null===(l=u.alternate)?(u.childLanes=0,u.lanes=e,u.child=null,u.memoizedProps=null,u.memoizedState=null,u.updateQueue=null,u.dependencies=null,u.stateNode=null):(u.childLanes=l.childLanes,u.lanes=l.lanes,u.child=l.child,u.memoizedProps=l.memoizedProps,u.memoizedState=l.memoizedState,u.updateQueue=l.updateQueue,u.type=l.type,e=l.dependencies,u.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return uo(Li,1&Li.current|2),t.child}e=e.sibling}null!==r.tail&&Vo()>Vu&&(t.flags|=64,u=!0,eu(r,!1),t.lanes=33554432)}else{if(!u)if(null!==(e=ji(l))){if(t.flags|=64,u=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),eu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate&&!zi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Vo()-r.renderingStartTime>Vu&&1073741824!==n&&(t.flags|=64,u=!0,eu(r,!1),t.lanes=33554432);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Vo(),n.sibling=null,t=Li.current,uo(Li,u?1&t|2:1&t),n):null;case 23:case 24:return gs(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function nu(e){switch(e.tag){case 1:ho(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ri(),ao(co),ao(lo),Hi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ii(e),null;case 13:return ao(Li),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Li),null;case 4:return Ri(),null;case 10:return ei(e),null;case 23:case 24:return gs(),null;default:return null}}function ru(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ou(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}qa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wa=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ti(Ai.current);var a,u=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),u=[];break;case"option":i=ie(e,i),r=ie(e,r),u=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),u=[];break;case"textarea":i=ue(e,i),r=ue(e,r),u=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Mr)}for(f in Se(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var l=i[f];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(s.hasOwnProperty(f)?u||(u=[]):(u=u||[]).push(f,null));for(f in r){var c=r[f];if(l=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==l&&(null!=c||null!=l))if("style"===f)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(u||(u=[]),u.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(u=u||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(u=u||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(s.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Ar("scroll",e),u||l===c||(u=[])):"object"==typeof c&&null!==c&&c.$$typeof===j?c.toString():(u=u||[]).push(f,c))}n&&(u=u||[]).push("style",n);var f=u;(t.updateQueue=f)&&(t.flags|=4)}},Ha=function(e,t,n,r){n!==r&&(t.flags|=4)};var iu="function"==typeof WeakMap?WeakMap:Map;function au(e,t,n){(n=ui(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qu||(qu=!0,Wu=r),ou(0,t)},n}function uu(e,t,n){(n=ui(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ou(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hu?Hu=new Set([this]):Hu.add(this),ou(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var su="function"==typeof WeakSet?WeakSet:Set;function lu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ls(e,t)}else t.current=null}function cu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$r(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function fu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Rs(n,e),Ps(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Br(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function du(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=_e("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pu(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(_o,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Rs(t,n);else{r=t;try{o()}catch(e){Ls(r,e)}}n=n.next}while(n!==e)}break;case 1:if(lu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ls(t,e)}break;case 5:lu(t);break;case 4:bu(e,t)}}function hu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function vu(e){return 5===e.tag||3===e.tag||4===e.tag}function mu(e){e:{for(var t=e.return;null!==t;){if(vu(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||vu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?gu(e,n,t):yu(e,n,t)}function gu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Mr));else if(4!==r&&null!==(e=e.child))for(gu(e,t,n),e=e.sibling;null!==e;)gu(e,t,n),e=e.sibling}function yu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yu(e,t,n),e=e.sibling;null!==e;)yu(e,t,n),e=e.sibling}function bu(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var u=e,s=o,l=s;;)if(pu(u,l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===s)break e;for(;null===l.sibling;){if(null===l.return||l.return===s)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}r?(u=n,s=o.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function _u(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Gr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,o),t=Ee(e,r),o=0;o<i.length;o+=2){var u=i[o],s=i[o+1];"style"===u?we(n,s):"dangerouslySetInnerHTML"===u?me(n,s):"children"===u?ge(n,s):_(n,u,s,t)}switch(e){case"input":ne(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bu=Vo(),du(t.child,!0)),void wu(t);case 19:return void wu(t);case 17:return;case 23:case 24:return void du(t,null!==t.memoizedState)}throw Error(a(163))}function wu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new su),t.forEach((function(t){var r=Ms.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ku(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Su=Math.ceil,Eu=w.ReactCurrentDispatcher,xu=w.ReactCurrentOwner,Au=0,Cu=null,Ou=null,Tu=0,Pu=0,Ru=io(0),Nu=0,Iu=null,Lu=0,ju=0,Mu=0,Du=0,zu=null,Bu=0,Vu=1/0;function Fu(){Vu=Vo()+500}var Uu,$u=null,qu=!1,Wu=null,Hu=null,Ku=!1,Qu=null,Gu=90,Yu=[],Ju=[],Xu=null,Zu=0,es=null,ts=-1,ns=0,rs=0,os=null,is=!1;function as(){return 0!=(48&Au)?Vo():-1!==ts?ts:ts=Vo()}function us(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Fo()?1:2;if(0===ns&&(ns=Lu),0!==Ko.transition){0!==rs&&(rs=null!==zu?zu.pendingLanes:0),e=ns;var t=4186112&~rs;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Fo(),e=Bt(0!=(4&Au)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ns)}function ss(e,t,n){if(50<Zu)throw Zu=0,es=null,Error(a(185));if(null===(e=ls(e,t)))return null;Ut(e,t,n),e===Cu&&(Mu|=t,4===Nu&&ds(e,Tu));var r=Fo();1===t?0!=(8&Au)&&0==(48&Au)?ps(e):(cs(e,n),0===Au&&(Fu(),Wo())):(0==(4&Au)||98!==r&&99!==r||(null===Xu?Xu=new Set([e]):Xu.add(e)),cs(e,n)),zu=e}function ls(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cs(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,u=e.pendingLanes;0<u;){var s=31-$t(u),l=1<<s,c=i[s];if(-1===c){if(0==(l&r)||0!=(l&o)){c=t,Mt(l);var f=jt;i[s]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=l);u&=~l}if(r=Dt(e,e===Cu?Tu:0),t=jt,0===r)null!==n&&(n!==Lo&&Eo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Lo&&Eo(n)}15===t?(n=ps.bind(null,e),null===Mo?(Mo=[n],Do=So(To,Ho)):Mo.push(n),n=Lo):n=14===t?qo(99,ps.bind(null,e)):qo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),fs.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fs(e){if(ts=-1,rs=ns=0,0!=(48&Au))throw Error(a(327));var t=e.callbackNode;if(Ts()&&e.callbackNode!==t)return null;var n=Dt(e,e===Cu?Tu:0);if(0===n)return null;var r=n,o=Au;Au|=16;var i=_s();for(Cu===e&&Tu===r||(Fu(),ys(e,r));;)try{Ss();break}catch(t){bs(e,t)}if(Zo(),Eu.current=i,Au=o,null!==Ou?r=0:(Cu=null,Tu=0,r=Nu),0!=(Lu&Mu))ys(e,0);else if(0!==r){if(2===r&&(Au|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(n=zt(e))&&(r=ws(e,n))),1===r)throw t=Iu,ys(e,0),ds(e,n),cs(e,Vo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:As(e);break;case 3:if(ds(e,n),(62914560&n)===n&&10<(r=Bu+500-Vo())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){as(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Fr(As.bind(null,e),r);break}As(e);break;case 4:if(ds(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var u=31-$t(n);i=1<<u,(u=r[u])>o&&(o=u),n&=~i}if(n=o,10<(n=(120>(n=Vo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Su(n/1960))-n)){e.timeoutHandle=Fr(As.bind(null,e),n);break}As(e);break;case 5:As(e);break;default:throw Error(a(329))}}return cs(e,Vo()),e.callbackNode===t?fs.bind(null,e):null}function ds(e,t){for(t&=~Du,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-$t(t),r=1<<n;e[n]=-1,t&=~r}}function ps(e){if(0!=(48&Au))throw Error(a(327));if(Ts(),e===Cu&&0!=(e.expiredLanes&Tu)){var t=Tu,n=ws(e,t);0!=(Lu&Mu)&&(n=ws(e,t=Dt(e,t)))}else n=ws(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Au|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(t=zt(e))&&(n=ws(e,t))),1===n)throw n=Iu,ys(e,0),ds(e,t),cs(e,Vo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,As(e),cs(e,Vo()),null}function hs(e,t){var n=Au;Au|=1;try{return e(t)}finally{0===(Au=n)&&(Fu(),Wo())}}function vs(e,t){var n=Au;Au&=-2,Au|=8;try{return e(t)}finally{0===(Au=n)&&(Fu(),Wo())}}function ms(e,t){uo(Ru,Pu),Pu|=t,Lu|=t}function gs(){Pu=Ru.current,ao(Ru)}function ys(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ur(n)),null!==Ou)for(n=Ou.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ri(),ao(co),ao(lo),Hi();break;case 5:Ii(r);break;case 4:Ri();break;case 13:case 19:ao(Li);break;case 10:ei(r);break;case 23:case 24:gs()}n=n.return}Cu=e,Ou=Vs(e.current,null),Tu=Pu=Lu=t,Nu=0,Iu=null,Du=Mu=ju=0}function bs(e,t){for(;;){var n=Ou;try{if(Zo(),Ki.current=Oa,Zi){for(var r=Yi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Zi=!1}if(Gi=0,Xi=Ji=Yi=null,ea=!1,xu.current=null,null===n||null===n.return){Nu=1,Iu=t,Ou=null;break}e:{var i=e,a=n.return,u=n,s=t;if(t=Tu,u.flags|=2048,u.firstEffect=u.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var l=s;if(0==(2&u.mode)){var c=u.alternate;c?(u.updateQueue=c.updateQueue,u.memoizedState=c.memoizedState,u.lanes=c.lanes):(u.updateQueue=null,u.memoizedState=null)}var f=0!=(1&Li.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var v=d.memoizedProps;p=void 0!==v.fallback&&(!0!==v.unstable_avoidThisFallback||!f)}}if(p){var m=d.updateQueue;if(null===m){var g=new Set;g.add(l),d.updateQueue=g}else m.add(l);if(0==(2&d.mode)){if(d.flags|=64,u.flags|=16384,u.flags&=-2981,1===u.tag)if(null===u.alternate)u.tag=17;else{var y=ui(-1,1);y.tag=2,si(u,y)}u.lanes|=1;break e}s=void 0,u=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new iu,s=new Set,b.set(l,s)):void 0===(s=b.get(l))&&(s=new Set,b.set(l,s)),!s.has(u)){s.add(u);var _=js.bind(null,i,l,u);l.then(_,_)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);s=Error((K(u.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Nu&&(Nu=2),s=ru(s,u),d=a;do{switch(d.tag){case 3:i=s,d.flags|=4096,t&=-t,d.lanes|=t,li(d,au(0,i,t));break e;case 1:i=s;var w=d.type,k=d.stateNode;if(0==(64&d.flags)&&("function"==typeof w.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Hu||!Hu.has(k)))){d.flags|=4096,t&=-t,d.lanes|=t,li(d,uu(d,i,t));break e}}d=d.return}while(null!==d)}xs(n)}catch(e){t=e,Ou===n&&null!==n&&(Ou=n=n.return);continue}break}}function _s(){var e=Eu.current;return Eu.current=Oa,null===e?Oa:e}function ws(e,t){var n=Au;Au|=16;var r=_s();for(Cu===e&&Tu===t||ys(e,t);;)try{ks();break}catch(t){bs(e,t)}if(Zo(),Au=n,Eu.current=r,null!==Ou)throw Error(a(261));return Cu=null,Tu=0,Nu}function ks(){for(;null!==Ou;)Es(Ou)}function Ss(){for(;null!==Ou&&!xo();)Es(Ou)}function Es(e){var t=Uu(e.alternate,e,Pu);e.memoizedProps=e.pendingProps,null===t?xs(e):Ou=t,xu.current=null}function xs(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tu(n,t,Pu)))return void(Ou=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Pu)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nu(t)))return n.flags&=2047,void(Ou=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ou=t);Ou=t=e}while(null!==t);0===Nu&&(Nu=5)}function As(e){var t=Fo();return $o(99,Cs.bind(null,e,t)),null}function Cs(e,t){do{Ts()}while(null!==Qu);if(0!=(48&Au))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var u=e.eventTimes,s=e.expirationTimes;0<i;){var l=31-$t(i),c=1<<l;o[l]=0,u[l]=-1,s[l]=-1,i&=~c}if(null!==Xu&&0==(24&r)&&Xu.has(e)&&Xu.delete(e),e===Cu&&(Ou=Cu=null,Tu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Au,Au|=32,xu.current=null,Dr=Qt,pr(u=dr())){if("selectionStart"in u)s={start:u.selectionStart,end:u.selectionEnd};else e:if(s=(s=u.ownerDocument)&&s.defaultView||window,(c=s.getSelection&&s.getSelection())&&0!==c.rangeCount){s=c.anchorNode,i=c.anchorOffset,l=c.focusNode,c=c.focusOffset;try{s.nodeType,l.nodeType}catch(e){s=null;break e}var f=0,d=-1,p=-1,h=0,v=0,m=u,g=null;t:for(;;){for(var y;m!==s||0!==i&&3!==m.nodeType||(d=f+i),m!==l||0!==c&&3!==m.nodeType||(p=f+c),3===m.nodeType&&(f+=m.nodeValue.length),null!==(y=m.firstChild);)g=m,m=y;for(;;){if(m===u)break t;if(g===s&&++h===i&&(d=f),g===l&&++v===c&&(p=f),null!==(y=m.nextSibling))break;g=(m=g).parentNode}m=y}s=-1===d||-1===p?null:{start:d,end:p}}else s=null;s=s||{start:0,end:0}}else s=null;zr={focusedElem:u,selectionRange:s},Qt=!1,os=null,is=!1,$u=r;do{try{Os()}catch(e){if(null===$u)throw Error(a(330));Ls($u,e),$u=$u.nextEffect}}while(null!==$u);os=null,$u=r;do{try{for(u=e;null!==$u;){var b=$u.flags;if(16&b&&ge($u.stateNode,""),128&b){var _=$u.alternate;if(null!==_){var w=_.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:mu($u),$u.flags&=-3;break;case 6:mu($u),$u.flags&=-3,_u($u.alternate,$u);break;case 1024:$u.flags&=-1025;break;case 1028:$u.flags&=-1025,_u($u.alternate,$u);break;case 4:_u($u.alternate,$u);break;case 8:bu(u,s=$u);var k=s.alternate;hu(s),null!==k&&hu(k)}$u=$u.nextEffect}}catch(e){if(null===$u)throw Error(a(330));Ls($u,e),$u=$u.nextEffect}}while(null!==$u);if(w=zr,_=dr(),b=w.focusedElem,u=w.selectionRange,_!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==u&&pr(b)&&(_=u.start,void 0===(w=u.end)&&(w=_),"selectionStart"in b?(b.selectionStart=_,b.selectionEnd=Math.min(w,b.value.length)):(w=(_=b.ownerDocument||document)&&_.defaultView||window).getSelection&&(w=w.getSelection(),s=b.textContent.length,k=Math.min(u.start,s),u=void 0===u.end?k:Math.min(u.end,s),!w.extend&&k>u&&(s=u,u=k,k=s),s=cr(b,k),i=cr(b,u),s&&i&&(1!==w.rangeCount||w.anchorNode!==s.node||w.anchorOffset!==s.offset||w.focusNode!==i.node||w.focusOffset!==i.offset)&&((_=_.createRange()).setStart(s.node,s.offset),w.removeAllRanges(),k>u?(w.addRange(_),w.extend(i.node,i.offset)):(_.setEnd(i.node,i.offset),w.addRange(_))))),_=[];for(w=b;w=w.parentNode;)1===w.nodeType&&_.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<_.length;b++)(w=_[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Qt=!!Dr,zr=Dr=null,e.current=n,$u=r;do{try{for(b=e;null!==$u;){var S=$u.flags;if(36&S&&fu(b,$u.alternate,$u),128&S){_=void 0;var E=$u.ref;if(null!==E){var x=$u.stateNode;switch($u.tag){case 5:_=x;break;default:_=x}"function"==typeof E?E(_):E.current=_}}$u=$u.nextEffect}}catch(e){if(null===$u)throw Error(a(330));Ls($u,e),$u=$u.nextEffect}}while(null!==$u);$u=null,jo(),Au=o}else e.current=n;if(Ku)Ku=!1,Qu=e,Gu=t;else for($u=r;null!==$u;)t=$u.nextEffect,$u.nextEffect=null,8&$u.flags&&((S=$u).sibling=null,S.stateNode=null),$u=t;if(0===(r=e.pendingLanes)&&(Hu=null),1===r?e===es?Zu++:(Zu=0,es=e):Zu=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(_o,n,void 0,64==(64&n.current.flags))}catch(e){}if(cs(e,Vo()),qu)throw qu=!1,e=Wu,Wu=null,e;return 0!=(8&Au)||Wo(),null}function Os(){for(;null!==$u;){var e=$u.alternate;is||null===os||(0!=(8&$u.flags)?Ze($u,os)&&(is=!0):13===$u.tag&&ku(e,$u)&&Ze($u,os)&&(is=!0));var t=$u.flags;0!=(256&t)&&cu(e,$u),0==(512&t)||Ku||(Ku=!0,qo(97,(function(){return Ts(),null}))),$u=$u.nextEffect}}function Ts(){if(90!==Gu){var e=97<Gu?97:Gu;return Gu=90,$o(e,Ns)}return!1}function Ps(e,t){Yu.push(t,e),Ku||(Ku=!0,qo(97,(function(){return Ts(),null})))}function Rs(e,t){Ju.push(t,e),Ku||(Ku=!0,qo(97,(function(){return Ts(),null})))}function Ns(){if(null===Qu)return!1;var e=Qu;if(Qu=null,0!=(48&Au))throw Error(a(331));var t=Au;Au|=32;var n=Ju;Ju=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],u=o.destroy;if(o.destroy=void 0,"function"==typeof u)try{u()}catch(e){if(null===i)throw Error(a(330));Ls(i,e)}}for(n=Yu,Yu=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var s=o.create;o.destroy=s()}catch(e){if(null===i)throw Error(a(330));Ls(i,e)}}for(s=e.current.firstEffect;null!==s;)e=s.nextEffect,s.nextEffect=null,8&s.flags&&(s.sibling=null,s.stateNode=null),s=e;return Au=t,Wo(),!0}function Is(e,t,n){si(e,t=au(0,t=ru(n,t),1)),t=as(),null!==(e=ls(e,1))&&(Ut(e,1,t),cs(e,t))}function Ls(e,t){if(3===e.tag)Is(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Is(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hu||!Hu.has(r))){var o=uu(n,e=ru(t,e),1);if(si(n,o),o=as(),null!==(n=ls(n,1)))Ut(n,1,o),cs(n,o);else if("function"==typeof r.componentDidCatch&&(null===Hu||!Hu.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function js(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=as(),e.pingedLanes|=e.suspendedLanes&n,Cu===e&&(Tu&n)===n&&(4===Nu||3===Nu&&(62914560&Tu)===Tu&&500>Vo()-Bu?ys(e,0):Du|=n),cs(e,t)}function Ms(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Fo()?1:2:(0===ns&&(ns=Lu),0===(t=Vt(62914560&~ns))&&(t=4194304))),n=as(),null!==(e=ls(e,t))&&(Ut(e,t,n),cs(e,n))}function Ds(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zs(e,t,n,r){return new Ds(e,t,n,r)}function Bs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vs(e,t){var n=e.alternate;return null===n?((n=zs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fs(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Bs(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Us(n.children,o,i,t);case M:u=8,o|=16;break;case x:u=8,o|=1;break;case A:return(e=zs(12,n,t,8|o)).elementType=A,e.type=A,e.lanes=i,e;case P:return(e=zs(13,n,t,o)).type=P,e.elementType=P,e.lanes=i,e;case R:return(e=zs(19,n,t,o)).elementType=R,e.lanes=i,e;case D:return $s(n,o,i,t);case z:return(e=zs(24,n,t,o)).elementType=z,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:u=10;break e;case O:u=9;break e;case T:u=11;break e;case N:u=14;break e;case I:u=16,r=null;break e;case L:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=zs(u,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Us(e,t,n,r){return(e=zs(7,e,r,t)).lanes=n,e}function $s(e,t,n,r){return(e=zs(23,e,r,t)).elementType=D,e.lanes=n,e}function qs(e,t,n){return(e=zs(6,e,null,t)).lanes=n,e}function Ws(e,t,n){return(t=zs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hs(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ft(0),this.expirationTimes=Ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ft(0),this.mutableSourceEagerHydrationData=null}function Ks(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Qs(e,t,n,r){var o=t.current,i=as(),u=us(o);e:if(n){t:{if(Ge(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(ho(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(a(171))}if(1===n.tag){var l=n.type;if(ho(l)){n=go(n,l,s);break e}}n=s}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),si(o,t),ss(o,u,i),u}function Gs(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ys(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Js(e,t){Ys(e,t),(e=e.alternate)&&Ys(e,t)}function Xs(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Hs(e,t,null!=n&&!0===n.hydrate),t=zs(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ii(t),e[Yr]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function el(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Gs(a);u.call(e)}}Qs(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xs(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Gs(a);s.call(e)}}vs((function(){Qs(t,a,e,o)}))}return Gs(a)}function tl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zs(t))throw Error(a(200));return Ks(e,t,null,n)}Uu=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Ia=!0;else{if(0==(n&r)){switch(Ia=!1,t.tag){case 3:$a(t),qi();break;case 5:Ni(t);break;case 1:ho(t.type)&&yo(t);break;case 4:Pi(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;uo(Go,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(uo(Li,1&Li.current),null!==(t=Za(e,t,n))?t.sibling:null);uo(Li,1&Li.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Xa(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(Li,Li.current),r)break;return null;case 23:case 24:return t.lanes=0,za(e,t,n)}return Za(e,t,n)}Ia=0!=(16384&e.flags)}else Ia=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,lo.current),ni(t,n),o=ra(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var i=!0;yo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ii(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&pi(t,r,u,e),o.updater=hi,t.stateNode=o,o._reactInternals=t,yi(t,r,e,n),t=Ua(null,t,r,!0,i,n)}else t.tag=0,La(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Bs(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===N)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=Va(null,t,o,e,n);break e;case 1:t=Fa(null,t,o,e,n);break e;case 11:t=ja(null,t,o,e,n);break e;case 14:t=Ma(null,t,o,Qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Va(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Fa(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if($a(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ai(e,t),ci(t,r,null,n),(r=t.memoizedState.element)===o)qi(),t=Za(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Di=qr(t.stateNode.containerInfo.firstChild),Mi=t,i=zi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Wi.push(i);for(n=Ei(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else La(e,t,r,n),qi();t=t.child}return t;case 5:return Ni(t),null===e&&Fi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Vr(r,o)?u=null:null!==i&&Vr(r,i)&&(t.flags|=16),Ba(e,t),La(e,t,u,n),t.child;case 6:return null===e&&Fi(t),null;case 13:return Qa(e,t,n);case 4:return Pi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):La(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ja(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return La(e,t,t.pendingProps,n),t.child;case 8:case 12:return La(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var s=t.type._context;if(uo(Go,s._currentValue),s._currentValue=i,null!==u)if(s=u.value,0==(i=ar(s,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(u.children===o.children&&!co.current){t=Za(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var l=s.dependencies;if(null!==l){u=s.child;for(var c=l.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===s.tag&&((c=ui(-1,n&-n)).tag=2,si(s,c)),s.lanes|=n,null!==(c=s.alternate)&&(c.lanes|=n),ti(s.return,n),l.lanes|=n;break}c=c.next}}else u=10===s.tag&&s.type===t.type?null:s.child;if(null!==u)u.return=s;else for(u=s;null!==u;){if(u===t){u=null;break}if(null!==(s=u.sibling)){s.return=u.return,u=s;break}u=u.return}s=u}La(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(o=ri(o,i.unstable_observedBits)),t.flags|=1,La(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),Ma(e,t,o,i=Qo(o.type,i),r,n);case 15:return Da(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,yo(t)):e=!1,ni(t,n),mi(t,r,o),yi(t,r,o,n),Ua(null,t,r,!0,e,n);case 19:return Xa(e,t,n);case 23:case 24:return za(e,t,n)}throw Error(a(156,t.tag))},Xs.prototype.render=function(e){Qs(e,this._internalRoot,null,null)},Xs.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Qs(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(ss(e,4,as()),Js(e,4))},tt=function(e){13===e.tag&&(ss(e,67108864,as()),Js(e,67108864))},nt=function(e){if(13===e.tag){var t=as(),n=us(e);ss(e,n,t),Js(e,n)}},rt=function(e,t){return t()},Ae=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(a(90));J(r),ne(r,o)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Ne=hs,Ie=function(e,t,n,r,o){var i=Au;Au|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(Au=i)&&(Fu(),Wo())}},Le=function(){0==(49&Au)&&(function(){if(null!==Xu){var e=Xu;Xu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cs(e,Vo())}))}Wo()}(),Ts())},je=function(e,t){var n=Au;Au|=2;try{return e(t)}finally{0===(Au=n)&&(Fu(),Wo())}};var nl={Events:[Zr,eo,to,Pe,Re,Ts,{current:!1}]},rl={findFiberByHostInstance:Xr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},ol={bundleType:rl.bundleType,version:rl.version,rendererPackageName:rl.rendererPackageName,rendererConfig:rl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:rl.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var il=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!il.isDisabled&&il.supportsFiber)try{_o=il.inject(ol),wo=il}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nl,t.createPortal=tl,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Au;if(0!=(48&n))return e(t);Au|=1;try{if(e)return $o(99,e.bind(null,t))}finally{Au=n,Wo()}},t.hydrate=function(e,t,n){if(!Zs(t))throw Error(a(200));return el(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zs(t))throw Error(a(200));return el(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(a(40));return!!e._reactRootContainer&&(vs((function(){el(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=hs,t.unstable_createPortal=function(e,t){return tl(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zs(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return el(e,t,n,!1,r)},t.version="17.0.1"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,l=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,v=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,g=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case u:case a:case p:return e;default:switch(e=e&&e.$$typeof){case l:case d:case m:case v:case s:return e;default:return t}}case o:return t}}}function k(e){return w(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=l,t.ContextProvider=s,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=m,t.Memo=v,t.Portal=o,t.Profiler=u,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||w(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return w(e)===l},t.isContextProvider=function(e){return w(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===m},t.isMemo=function(e){return w(e)===v},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===u},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===v||e.$$typeof===s||e.$$typeof===l||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===_||e.$$typeof===g)},t.typeOf=w},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,u=60110,s=60112;t.Suspense=60113;var l=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),u=f("react.context"),s=f("react.forward_ref"),t.Suspense=f("react.suspense"),l=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function m(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=m.prototype;var b=y.prototype=new g;b.constructor=y,r(b,m.prototype),b.isPureReactComponent=!0;var _={current:null},w=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,r)&&!k.hasOwnProperty(r)&&(i[r]=t[r]);var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){for(var l=Array(s),c=0;c<s;c++)l[c]=arguments[c+2];i.children=l}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===i[r]&&(i[r]=s[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:_.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var x=/\/+/g;function A(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var s=!1;if(null===e)s=!0;else switch(u){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case i:s=!0}}if(s)return a=a(s=e),e=""===r?"."+A(s,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(x,"$&/")+"/"),C(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(x,"$&/")+"/")+e)),t.push(a)),1;if(s=0,r=""===r?".":r+":",Array.isArray(e))for(var l=0;l<e.length;l++){var c=r+A(u=e[l],l);s+=C(u,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),l=0;!(u=e.next()).done;)s+=C(u=u.value,t,n,c=r+A(u,l++),a);else if("object"===u)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function O(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var P={current:null};function R(){var e=P.current;if(null===e)throw Error(p(321));return e}var N={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,u=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,s=_.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)w.call(t,c)&&!k.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){l=Array(c);for(var f=0;f<c;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:u,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return R().useCallback(e,t)},t.useContext=function(e,t){return R().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return R().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return R().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return R().useLayoutEffect(e,t)},t.useMemo=function(e,t){return R().useMemo(e,t)},t.useReducer=function(e,t,n){return R().useReducer(e,t,n)},t.useRef=function(e){return R().useRef(e)},t.useState=function(e){return R().useState(e)},t.version="17.0.1"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var u=Date,s=u.now();t.unstable_now=function(){return u.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,f=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==l?setTimeout(n,0,e):(l=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,w=_.port2;_.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();b=e+y;try{m(!0,e)?w.postMessage(null):(v=!1,m=null)}catch(e){throw w.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,w.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<x(o,t)))break e;e[r]=t,e[n]=o,n=r}}function S(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,s=e[u];if(void 0!==a&&0>x(a,n))void 0!==s&&0>x(s,a)?(e[r]=s,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==s&&0>x(s,n)))break e;e[r]=s,e[u]=n,r=u}}}return t}return null}function x(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var A=[],C=[],O=1,T=null,P=3,R=!1,N=!1,I=!1;function L(e){for(var t=S(C);null!==t;){if(null===t.callback)E(C);else{if(!(t.startTime<=e))break;E(C),t.sortIndex=t.expirationTime,k(A,t)}t=S(C)}}function j(e){if(I=!1,L(e),!N)if(null!==S(A))N=!0,n(M);else{var t=S(C);null!==t&&r(j,t.startTime-e)}}function M(e,n){N=!1,I&&(I=!1,o()),R=!0;var i=P;try{for(L(n),T=S(A);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,P=T.priorityLevel;var u=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?T.callback=u:T===S(A)&&E(A),L(n)}else E(A);T=S(A)}if(null!==T)var s=!0;else{var l=S(C);null!==l&&r(j,l.startTime-n),s=!1}return s}finally{T=null,P=i,R=!1}}var D=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||R||(N=!0,n(M))},t.unstable_getCurrentPriorityLevel=function(){return P},t.unstable_getFirstCallbackNode=function(){return S(A)},t.unstable_next=function(e){switch(P){case 1:case 2:case 3:var t=3;break;default:t=P}var n=P;P=t;try{return e()}finally{P=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=P;P=e;try{return t()}finally{P=n}},t.unstable_scheduleCallback=function(e,i,a){var u=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?u+a:u,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:O++,callback:i,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>u?(e.sortIndex=a,k(C,e),null===S(A)&&e===S(C)&&(I?o():I=!0,r(j,a-u))):(e.sortIndex=s,k(A,e),N||R||(N=!0,n(M))),e},t.unstable_wrapCallback=function(e){var t=P;return function(){var n=P;P=t;try{return e.apply(this,arguments)}finally{P=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),a=Object.keys(t);if(i.length!==a.length)return!1;for(var u=Object.prototype.hasOwnProperty.bind(t),s=0;s<i.length;s++){var l=i[s];if(!u(l))return!1;var c=e[l],f=t[l];if(!1===(o=n?n.call(r,c,f,l):void 0)||void 0===o&&c!==f)return!1}return!0}},322:e=>{e.exports=function(e){"use strict";var t=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function n(e,t){var n=e[0],r=e[1],o=e[2],i=e[3];r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&o|~r&i)+t[0]-680876936|0)<<7|n>>>25)+r|0)&r|~n&o)+t[1]-389564586|0)<<12|i>>>20)+n|0)&n|~i&r)+t[2]+606105819|0)<<17|o>>>15)+i|0)&i|~o&n)+t[3]-1044525330|0)<<22|r>>>10)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&o|~r&i)+t[4]-176418897|0)<<7|n>>>25)+r|0)&r|~n&o)+t[5]+1200080426|0)<<12|i>>>20)+n|0)&n|~i&r)+t[6]-1473231341|0)<<17|o>>>15)+i|0)&i|~o&n)+t[7]-45705983|0)<<22|r>>>10)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&o|~r&i)+t[8]+1770035416|0)<<7|n>>>25)+r|0)&r|~n&o)+t[9]-1958414417|0)<<12|i>>>20)+n|0)&n|~i&r)+t[10]-42063|0)<<17|o>>>15)+i|0)&i|~o&n)+t[11]-1990404162|0)<<22|r>>>10)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&o|~r&i)+t[12]+1804603682|0)<<7|n>>>25)+r|0)&r|~n&o)+t[13]-40341101|0)<<12|i>>>20)+n|0)&n|~i&r)+t[14]-1502002290|0)<<17|o>>>15)+i|0)&i|~o&n)+t[15]+1236535329|0)<<22|r>>>10)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&i|o&~i)+t[1]-165796510|0)<<5|n>>>27)+r|0)&o|r&~o)+t[6]-1069501632|0)<<9|i>>>23)+n|0)&r|n&~r)+t[11]+643717713|0)<<14|o>>>18)+i|0)&n|i&~n)+t[0]-373897302|0)<<20|r>>>12)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&i|o&~i)+t[5]-701558691|0)<<5|n>>>27)+r|0)&o|r&~o)+t[10]+38016083|0)<<9|i>>>23)+n|0)&r|n&~r)+t[15]-660478335|0)<<14|o>>>18)+i|0)&n|i&~n)+t[4]-405537848|0)<<20|r>>>12)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&i|o&~i)+t[9]+568446438|0)<<5|n>>>27)+r|0)&o|r&~o)+t[14]-1019803690|0)<<9|i>>>23)+n|0)&r|n&~r)+t[3]-187363961|0)<<14|o>>>18)+i|0)&n|i&~n)+t[8]+1163531501|0)<<20|r>>>12)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r&i|o&~i)+t[13]-1444681467|0)<<5|n>>>27)+r|0)&o|r&~o)+t[2]-51403784|0)<<9|i>>>23)+n|0)&r|n&~r)+t[7]+1735328473|0)<<14|o>>>18)+i|0)&n|i&~n)+t[12]-1926607734|0)<<20|r>>>12)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r^o^i)+t[5]-378558|0)<<4|n>>>28)+r|0)^r^o)+t[8]-2022574463|0)<<11|i>>>21)+n|0)^n^r)+t[11]+1839030562|0)<<16|o>>>16)+i|0)^i^n)+t[14]-35309556|0)<<23|r>>>9)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r^o^i)+t[1]-1530992060|0)<<4|n>>>28)+r|0)^r^o)+t[4]+1272893353|0)<<11|i>>>21)+n|0)^n^r)+t[7]-155497632|0)<<16|o>>>16)+i|0)^i^n)+t[10]-1094730640|0)<<23|r>>>9)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r^o^i)+t[13]+681279174|0)<<4|n>>>28)+r|0)^r^o)+t[0]-358537222|0)<<11|i>>>21)+n|0)^n^r)+t[3]-722521979|0)<<16|o>>>16)+i|0)^i^n)+t[6]+76029189|0)<<23|r>>>9)+o|0,r=((r+=((o=((o+=((i=((i+=((n=((n+=(r^o^i)+t[9]-640364487|0)<<4|n>>>28)+r|0)^r^o)+t[12]-421815835|0)<<11|i>>>21)+n|0)^n^r)+t[15]+530742520|0)<<16|o>>>16)+i|0)^i^n)+t[2]-995338651|0)<<23|r>>>9)+o|0,r=((r+=((i=((i+=(r^((n=((n+=(o^(r|~i))+t[0]-198630844|0)<<6|n>>>26)+r|0)|~o))+t[7]+1126891415|0)<<10|i>>>22)+n|0)^((o=((o+=(n^(i|~r))+t[14]-1416354905|0)<<15|o>>>17)+i|0)|~n))+t[5]-57434055|0)<<21|r>>>11)+o|0,r=((r+=((i=((i+=(r^((n=((n+=(o^(r|~i))+t[12]+1700485571|0)<<6|n>>>26)+r|0)|~o))+t[3]-1894986606|0)<<10|i>>>22)+n|0)^((o=((o+=(n^(i|~r))+t[10]-1051523|0)<<15|o>>>17)+i|0)|~n))+t[1]-2054922799|0)<<21|r>>>11)+o|0,r=((r+=((i=((i+=(r^((n=((n+=(o^(r|~i))+t[8]+1873313359|0)<<6|n>>>26)+r|0)|~o))+t[15]-30611744|0)<<10|i>>>22)+n|0)^((o=((o+=(n^(i|~r))+t[6]-1560198380|0)<<15|o>>>17)+i|0)|~n))+t[13]+1309151649|0)<<21|r>>>11)+o|0,r=((r+=((i=((i+=(r^((n=((n+=(o^(r|~i))+t[4]-145523070|0)<<6|n>>>26)+r|0)|~o))+t[11]-1120210379|0)<<10|i>>>22)+n|0)^((o=((o+=(n^(i|~r))+t[2]+718787259|0)<<15|o>>>17)+i|0)|~n))+t[9]-343485551|0)<<21|r>>>11)+o|0,e[0]=n+e[0]|0,e[1]=r+e[1]|0,e[2]=o+e[2]|0,e[3]=i+e[3]|0}function r(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e.charCodeAt(t)+(e.charCodeAt(t+1)<<8)+(e.charCodeAt(t+2)<<16)+(e.charCodeAt(t+3)<<24);return n}function o(e){var t,n=[];for(t=0;t<64;t+=4)n[t>>2]=e[t]+(e[t+1]<<8)+(e[t+2]<<16)+(e[t+3]<<24);return n}function i(e){var t,o,i,a,u,s,l=e.length,c=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=l;t+=64)n(c,r(e.substring(t-64,t)));for(o=(e=e.substring(t-64)).length,i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<o;t+=1)i[t>>2]|=e.charCodeAt(t)<<(t%4<<3);if(i[t>>2]|=128<<(t%4<<3),t>55)for(n(c,i),t=0;t<16;t+=1)i[t]=0;return a=(a=8*l).toString(16).match(/(.*?)(.{0,8})$/),u=parseInt(a[2],16),s=parseInt(a[1],16)||0,i[14]=u,i[15]=s,n(c,i),c}function a(e){var n,r="";for(n=0;n<4;n+=1)r+=t[e>>8*n+4&15]+t[e>>8*n&15];return r}function u(e){var t;for(t=0;t<e.length;t+=1)e[t]=a(e[t]);return e.join("")}function s(e){return/[\u0080-\uFFFF]/.test(e)&&(e=unescape(encodeURIComponent(e))),e}function l(e){var t,n=[],r=e.length;for(t=0;t<r-1;t+=2)n.push(parseInt(e.substr(t,2),16));return String.fromCharCode.apply(String,n)}function c(){this.reset()}return u(i("hello")),"undefined"==typeof ArrayBuffer||ArrayBuffer.prototype.slice||function(){function e(e,t){return(e=0|e||0)<0?Math.max(e+t,0):Math.min(e,t)}ArrayBuffer.prototype.slice=function(t,n){var r,o,i,a,u=this.byteLength,s=e(t,u),l=u;return undefined!==n&&(l=e(n,u)),s>l?new ArrayBuffer(0):(r=l-s,o=new ArrayBuffer(r),i=new Uint8Array(o),a=new Uint8Array(this,s,r),i.set(a),o)}}(),c.prototype.append=function(e){return this.appendBinary(s(e)),this},c.prototype.appendBinary=function(e){this._buff+=e,this._length+=e.length;var t,o=this._buff.length;for(t=64;t<=o;t+=64)n(this._hash,r(this._buff.substring(t-64,t)));return this._buff=this._buff.substring(t-64),this},c.prototype.end=function(e){var t,n,r=this._buff,o=r.length,i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<o;t+=1)i[t>>2]|=r.charCodeAt(t)<<(t%4<<3);return this._finish(i,o),n=u(this._hash),e&&(n=l(n)),this.reset(),n},c.prototype.reset=function(){return this._buff="",this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},c.prototype.getState=function(){return{buff:this._buff,length:this._length,hash:this._hash.slice()}},c.prototype.setState=function(e){return this._buff=e.buff,this._length=e.length,this._hash=e.hash,this},c.prototype.destroy=function(){delete this._hash,delete this._buff,delete this._length},c.prototype._finish=function(e,t){var r,o,i,a=t;if(e[a>>2]|=128<<(a%4<<3),a>55)for(n(this._hash,e),a=0;a<16;a+=1)e[a]=0;r=(r=8*this._length).toString(16).match(/(.*?)(.{0,8})$/),o=parseInt(r[2],16),i=parseInt(r[1],16)||0,e[14]=o,e[15]=i,n(this._hash,e)},c.hash=function(e,t){return c.hashBinary(s(e),t)},c.hashBinary=function(e,t){var n=u(i(e));return t?l(n):n},c.ArrayBuffer=function(){this.reset()},c.ArrayBuffer.prototype.append=function(e){var t,r,i,a,u,s=(r=this._buff.buffer,i=e,a=!0,(u=new Uint8Array(r.byteLength+i.byteLength)).set(new Uint8Array(r)),u.set(new Uint8Array(i),r.byteLength),a?u:u.buffer),l=s.length;for(this._length+=e.byteLength,t=64;t<=l;t+=64)n(this._hash,o(s.subarray(t-64,t)));return this._buff=t-64<l?new Uint8Array(s.buffer.slice(t-64)):new Uint8Array(0),this},c.ArrayBuffer.prototype.end=function(e){var t,n,r=this._buff,o=r.length,i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(t=0;t<o;t+=1)i[t>>2]|=r[t]<<(t%4<<3);return this._finish(i,o),n=u(this._hash),e&&(n=l(n)),this.reset(),n},c.ArrayBuffer.prototype.reset=function(){return this._buff=new Uint8Array(0),this._length=0,this._hash=[1732584193,-271733879,-1732584194,271733878],this},c.ArrayBuffer.prototype.getState=function(){var e,t=c.prototype.getState.call(this);return t.buff=(e=t.buff,String.fromCharCode.apply(null,new Uint8Array(e))),t},c.ArrayBuffer.prototype.setState=function(e){return e.buff=function(e,t){var n,r=e.length,o=new ArrayBuffer(r),i=new Uint8Array(o);for(n=0;n<r;n+=1)i[n]=e.charCodeAt(n);return t?i:o}(e.buff,!0),c.prototype.setState.call(this,e)},c.ArrayBuffer.prototype.destroy=c.prototype.destroy,c.ArrayBuffer.prototype._finish=c.prototype._finish,c.ArrayBuffer.hash=function(e,t){var r=u(function(e){var t,r,i,a,u,s,l=e.length,c=[1732584193,-271733879,-1732584194,271733878];for(t=64;t<=l;t+=64)n(c,o(e.subarray(t-64,t)));for(r=(e=t-64<l?e.subarray(t-64):new Uint8Array(0)).length,i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],t=0;t<r;t+=1)i[t>>2]|=e[t]<<(t%4<<3);if(i[t>>2]|=128<<(t%4<<3),t>55)for(n(c,i),t=0;t<16;t+=1)i[t]=0;return a=(a=8*l).toString(16).match(/(.*?)(.{0,8})$/),u=parseInt(a[2],16),s=parseInt(a[1],16)||0,i[14]=u,i[15]=s,n(c,i),c}(new Uint8Array(e)));return t?l(r):r},c}()},684:(e,t)=>{"use strict";function n(e,t,n){var r=n[n.length-1];e===r.element&&(n.pop(),r=n[n.length-1]);var o=r.element,i=r.index;Array.isArray(o)?o.push(e):i===t.length-2?o[t.pop()]=e:t.push(e)}t.stringify=function(e){var t=[];t.push({obj:e});for(var n,r,o,i,a,u,s,l,c,f,d="";n=t.pop();)if(r=n.obj,d+=n.prefix||"",o=n.val||"")d+=o;else if("object"!=typeof r)d+=void 0===r?null:JSON.stringify(r);else if(null===r)d+="null";else if(Array.isArray(r)){for(t.push({val:"]"}),i=r.length-1;i>=0;i--)a=0===i?"":",",t.push({obj:r[i],prefix:a});t.push({val:"["})}else{for(s in u=[],r)r.hasOwnProperty(s)&&u.push(s);for(t.push({val:"}"}),i=u.length-1;i>=0;i--)c=r[l=u[i]],f=i>0?",":"",f+=JSON.stringify(l)+":",t.push({obj:c,prefix:f});t.push({val:"{"})}return d},t.parse=function(e){for(var t,r,o,i,a,u,s,l,c,f=[],d=[],p=0;;)if("}"!==(t=e[p++])&&"]"!==t&&void 0!==t)switch(t){case" ":case"\t":case"\n":case":":case",":break;case"n":p+=3,n(null,f,d);break;case"t":p+=3,n(!0,f,d);break;case"f":p+=4,n(!1,f,d);break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"-":for(r="",p--;;){if(o=e[p++],!/[\d\.\-e\+]/.test(o)){p--;break}r+=o}n(parseFloat(r),f,d);break;case'"':for(i="",a=void 0,u=0;'"'!==(s=e[p++])||"\\"===a&&u%2==1;)i+=s,"\\"===(a=s)?u++:u=0;n(JSON.parse('"'+i+'"'),f,d);break;case"[":l={element:[],index:f.length},f.push(l.element),d.push(l);break;case"{":c={element:{},index:f.length},f.push(c.element),d.push(c);break;default:throw new Error("unexpectedly reached end of input: "+t)}else{if(1===f.length)return f.pop();n(f.pop(),f,d)}}},692:()=>{}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{"use strict";var e=n(935),t=n(294);const r=new Map;function o(e){var t;return null!==(t=r.get(e))&&void 0!==t&&t}o.setPass=e=>{r.set(e,!0)},o.setFail=e=>{r.set(e,!1)};var i=o,a=function(e,t){const n=new Map;return e.forEach(((e,r)=>{n.set(r,t(e,r))})),n},u=function(e,t){if(null!=e)return e;throw new Error(null!=t?t:"Got unexpected null or undefined")},s=function(e,t,n){return n()},l=function(e){return e},c={setByAddingToSet:function(e,t){const n=new Set(e);return n.add(t),n},setByDeletingFromSet:function(e,t){const n=new Set(e);return n.delete(t),n},mapBySettingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n),r},mapByUpdatingInMap:function(e,t,n){const r=new Map(e);return r.set(t,n(r.get(t))),r},mapByDeletingFromMap:function(e,t){const n=new Map(e);return n.delete(t),n},mapByDeletingMultipleFromMap:function(e,t){const n=new Map(e);return t.forEach((e=>n.delete(e))),n}};function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class d{constructor(e){f(this,"key",void 0),this.key=e}}class p extends d{}class h extends d{}var v={AbstractRecoilValue:d,RecoilState:p,RecoilValueReadOnly:h,isRecoilValue:function(e){return e instanceof p||e instanceof h}},m=v.AbstractRecoilValue,g=v.RecoilState,y=v.RecoilValueReadOnly,b=v.isRecoilValue,_=Object.freeze({__proto__:null,AbstractRecoilValue:m,RecoilState:g,RecoilValueReadOnly:y,isRecoilValue:b});class w{}const k=new w;class S extends Error{constructor(e){super(`Tried to set the value of Recoil selector ${e} using an updater function, but it is an async selector in a pending or error state; this is not supported.`)}}const E=new Map,x=new Map;class A extends Error{}var C={nodes:E,recoilValues:x,registerNode:function(e){if(E.has(e.key)){const t=`Duplicate atom key "${e.key}". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`;console.warn(t)}E.set(e.key,e);const t=null==e.set?new _.RecoilValueReadOnly(e.key):new _.RecoilState(e.key);return x.set(e.key,t),t},getNode:function(e){const t=E.get(e);if(null==t)throw new A(`Missing definition for RecoilValue: "${e}""`);return t},getNodeMaybe:function(e){return E.get(e)},NodeMissingError:A,DefaultValue:w,DEFAULT_VALUE:k,RecoilValueNotReady:S};const{mapByDeletingFromMap:O,mapBySettingInMap:T,setByAddingToSet:P}=c,{getNode:R,getNodeMaybe:N}=C,I=Object.freeze(new Set);class L extends Error{}var j={getNodeLoadable:function(e,t,n){return R(n).get(e,t)},peekNodeLoadable:function(e,t,n){return R(n).peek(e,t)},setNodeValue:function(e,t,n,r){const o=R(n);if(null==o.set)throw new L(`Attempt to set read-only RecoilValue: ${n}`);return o.set(e,t,r)},cleanUpNode:function(e,t){R(t).cleanUp(e)},setUnvalidatedAtomValue_DEPRECATED:function(e,t,n){var r;const o=N(t);return null==o||null===(r=o.invalidate)||void 0===r||r.call(o,e),{...e,atomValues:O(e.atomValues,t),nonvalidatedAtoms:T(e.nonvalidatedAtoms,t,n),dirtyAtoms:P(e.dirtyAtoms,t)}},getDownstreamNodes:function(e,t,n){const r=new Set,o=Array.from(n),i=e.getGraph(t.version);for(let e=o.pop();e;e=o.pop()){var a;r.add(e);const t=null!==(a=i.nodeToNodeSubscriptions.get(e))&&void 0!==a?a:I;for(const e of t)r.has(e)||o.push(e)}return r}},M=function(e,...t){const n=new Set;e:for(const r of e){for(const e of t)if(e.has(r))continue e;n.add(r)}return n};function D(e,t,n){const{nodeDeps:r,nodeToNodeSubscriptions:o}=t;e.forEach(((e,t)=>{const i=r.get(t);i&&n&&i!==n.nodeDeps.get(t)||(r.set(t,new Set(e)),(null==i?e:M(e,i)).forEach((e=>{o.has(e)||o.set(e,new Set),u(o.get(e)).add(t)})),i&&M(i,e).forEach((e=>{if(!o.has(e))return;const n=u(o.get(e));n.delete(t),0===n.size&&o.delete(e)})))}))}var z={addToDependencyMap:function(e,t,n){n.has(e)||n.set(e,new Set),u(n.get(e)).add(t)},cloneGraph:function(e){return{nodeDeps:a(e.nodeDeps,(e=>new Set(e))),nodeToNodeSubscriptions:a(e.nodeToNodeSubscriptions,(e=>new Set(e)))}},graph:function(){return{nodeDeps:new Map,nodeToNodeSubscriptions:new Map}},mergeDepsIntoDependencyMap:function(e,t){e.forEach(((e,n)=>{t.has(n)||t.set(n,new Set);const r=u(t.get(n));e.forEach((e=>r.add(e)))}))},saveDependencyMapToStore:function(e,t,n){var r,o,i,a;const u=t.getState();n!==u.currentTree.version&&n!==(null===(r=u.nextTree)||void 0===r?void 0:r.version)&&(null===(o=u.previousTree)||void 0===o||o.version);const s=t.getGraph(n);if(D(e,s),n===(null===(i=u.previousTree)||void 0===i?void 0:i.version)&&D(e,t.getGraph(u.currentTree.version),s),n===(null===(a=u.previousTree)||void 0===a?void 0:a.version)||n===u.currentTree.version){var l;const n=null===(l=u.nextTree)||void 0===l?void 0:l.version;void 0!==n&&D(e,t.getGraph(n),s)}}};const{getDownstreamNodes:B,getNodeLoadable:V,setNodeValue:F}=j,{saveDependencyMapToStore:U}=z,{getNodeMaybe:$}=C,{DefaultValue:q,RecoilValueNotReady:W}=C,{AbstractRecoilValue:H,RecoilState:K,RecoilValueReadOnly:Q,isRecoilValue:G}=_;function Y(e,t,n){if("set"===n.type){const{recoilValue:r,valueOrUpdater:o}=n,i=function(e,t,{key:n},r){if("function"==typeof r){const o=V(e,t,n)[1];if("loading"===o.state)throw new W(n);if("hasError"===o.state)throw o.contents;return r(o.contents)}return r}(e,t,r,o),[a,u]=F(e,t,r.key,i);U(a,e,t.version);for(const[e,n]of u.entries())J(t,e,n)}else if("setLoadable"===n.type){const{recoilValue:{key:e},loadable:r}=n;J(t,e,r)}else if("markModified"===n.type){const{recoilValue:{key:e}}=n;t.dirtyAtoms.add(e)}else if("setUnvalidated"===n.type){var r;const{recoilValue:{key:e},unvalidatedValue:o}=n,i=$(e);null==i||null===(r=i.invalidate)||void 0===r||r.call(i,t),t.atomValues.delete(e),t.nonvalidatedAtoms.set(e,o),t.dirtyAtoms.add(e)}else n.type}function J(e,t,n){"hasValue"===n.state&&n.contents instanceof q?e.atomValues.delete(t):e.atomValues.set(t,n),e.dirtyAtoms.add(t),e.nonvalidatedAtoms.delete(t)}function X(e,t){e.replaceState((n=>{const r=function(e){return{...e,atomValues:new Map(e.atomValues),nonvalidatedAtoms:new Map(e.nonvalidatedAtoms),dirtyAtoms:new Set(e.dirtyAtoms)}}(n);for(const n of t)Y(e,r,n);return te(e,r),r}))}function Z(e,t,n,r){if(ee.length){const n=ee[ee.length-1];let r=n.get(e);r||n.set(e,r=[]),r.push(t)}else s(r,n,(()=>X(e,[t])))}const ee=[];function te(e,t){const n=B(e,t,t.dirtyAtoms);for(const e of n){var r,o;null===(r=$(e))||void 0===r||null===(o=r.invalidate)||void 0===o||o.call(r,t)}}function ne(e,t,n){Z(e,{type:"set",recoilValue:t,valueOrUpdater:n},t.key,"set Recoil value")}let re=0;var oe={RecoilValueReadOnly:Q,AbstractRecoilValue:H,RecoilState:K,getRecoilValueAsLoadable:function(e,{key:t},n=e.getState().currentTree){var r,o;const a=e.getState();n.version!==a.currentTree.version&&n.version!==(null===(r=a.nextTree)||void 0===r?void 0:r.version)&&(n.version,null===(o=a.previousTree)||void 0===o||o.version);const[u,s]=V(e,n,t);return i("recoil_async_selector_refactor")||U(u,e,n.version),s},setRecoilValue:ne,setRecoilValueLoadable:function(e,t,n){if(n instanceof q)return ne(e,t,n);Z(e,{type:"setLoadable",recoilValue:t,loadable:n},t.key,"set Recoil value")},markRecoilValueModified:function(e,t){Z(e,{type:"markModified",recoilValue:t},t.key,"mark RecoilValue modified")},setUnvalidatedRecoilValue:function(e,t,n){Z(e,{type:"setUnvalidated",recoilValue:t,unvalidatedValue:n},t.key,"set Recoil value")},subscribeToRecoilValue:function(e,{key:t},n,r=null){const o=re++,i=e.getState();return i.nodeToComponentSubscriptions.has(t)||i.nodeToComponentSubscriptions.set(t,new Map),u(i.nodeToComponentSubscriptions.get(t)).set(o,[null!=r?r:"<not captured>",n]),{release:()=>{const n=e.getState(),r=n.nodeToComponentSubscriptions.get(t);void 0!==r&&r.has(o)&&(r.delete(o),0===r.size&&n.nodeToComponentSubscriptions.delete(t))}}},isRecoilValue:G,applyAtomValueWrites:function(e,t){const n=a(e,(e=>e));return t.forEach(((e,t)=>{"hasValue"===e.state&&e.contents instanceof q?n.delete(t):n.set(t,e)})),n},batchStart:function(){const e=new Map;return ee.push(e),()=>{for(const[t,n]of e)s("Recoil batched updates","-",(()=>X(t,n)));ee.pop()}},invalidateDownstreams_FOR_TESTING:te};const{unstable_batchedUpdates:ie}=e;var ae={unstable_batchedUpdates:ie};const{batchStart:ue}=oe,{unstable_batchedUpdates:se}=ae;let le=se;var ce={getBatcher:()=>le,setBatcher:e=>{le=e},batchUpdates:e=>{le((()=>{let t=()=>{};try{t=ue(),e()}finally{t()}}))}},fe=function(e,t){t()},de=function*(e,t){let n=0;for(const r of e)t(r,n++)&&(yield r)};const{graph:pe}=z;let he=0;const ve=()=>he++;function me(){const e=ve();return{version:e,stateID:e,transactionMetadata:{},dirtyAtoms:new Set,atomValues:new Map,nonvalidatedAtoms:new Map}}var ge={makeEmptyTreeState:me,makeEmptyStoreState:function(){const e=me();return{currentTree:e,nextTree:null,previousTree:null,knownAtoms:new Set,knownSelectors:new Set,transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(e.version,pe()),versionsUsedByComponent:new Map}},getNextTreeStateVersion:ve};const{batchUpdates:ye}=ce,{getDownstreamNodes:be,peekNodeLoadable:_e}=j,{graph:we}=z,{DEFAULT_VALUE:ke,recoilValues:Se}=C,{getRecoilValueAsLoadable:Ee,setRecoilValue:xe}=oe,{getNextTreeStateVersion:Ae,makeEmptyStoreState:Ce}=ge;function Oe(e){return t=e,n=e=>u(Se.get(e)),function*(){let e=0;for(const r of t)yield n(r,e++)}();var t,n}class Te{constructor(e){f(this,"_store",void 0),f(this,"getLoadable",(e=>Ee(this._store,e))),f(this,"getPromise",(e=>this.getLoadable(e).toPromise())),f(this,"getNodes_UNSTABLE",(e=>{if(!0===(null==e?void 0:e.isModified))return!1===(null==e?void 0:e.isInitialized)?[]:Oe(this._store.getState().currentTree.dirtyAtoms);const t=this._store.getState().knownAtoms,n=this._store.getState().knownSelectors;return null==(null==e?void 0:e.isInitialized)?Se.values():!0===e.isInitialized?Oe(function*(e){for(const t of e)for(const e of t)yield e}([this._store.getState().knownAtoms,this._store.getState().knownSelectors])):de(Se.values(),(({key:e})=>!t.has(e)&&!n.has(e)))})),f(this,"getDeps_UNSTABLE",(e=>{this.getLoadable(e);const t=this._store.getGraph(this._store.getState().currentTree.version).nodeDeps.get(e.key);return Oe(null!=t?t:[])})),f(this,"getSubscribers_UNSTABLE",(({key:e})=>{const t=this._store.getState().currentTree;return{nodes:Oe(de(be(this._store,t,new Set([e])),(t=>t!==e)))}})),f(this,"getInfo_UNSTABLE",(e=>{var t;const{key:n}=e,r=this._store.getState().currentTree,o=this._store.getGraph(r.version),i=this._store.getState().knownAtoms.has(n)?"atom":this._store.getState().knownSelectors.has(n)?"selector":void 0;return{loadable:_e(this._store,r,n),isActive:this._store.getState().knownAtoms.has(n)||this._store.getState().knownSelectors.has(n),isSet:"selector"!==i&&r.atomValues.has(n),isModified:r.dirtyAtoms.has(n),type:i,deps:Oe(null!==(t=o.nodeDeps.get(n))&&void 0!==t?t:[]),subscribers:this.getSubscribers_UNSTABLE(e)}})),f(this,"map",(e=>{const t=new Ne(this);return e(t),Re(t.getStore_INTERNAL())})),f(this,"asyncMap",(async e=>{const t=new Ne(this);return await e(t),Re(t.getStore_INTERNAL())})),this._store={getState:()=>e,replaceState:t=>{e.currentTree=t(e.currentTree)},getGraph:t=>{const n=e.graphsByVersion;if(n.has(t))return u(n.get(t));const r=we();return n.set(t,r),r},subscribeToTransactions:()=>({release:()=>{}}),addTransactionMetadata:()=>{throw new Error("Cannot subscribe to Snapshots")}}}getStore_INTERNAL(){return this._store}getID(){return this.getID_INTERNAL()}getID_INTERNAL(){return this._store.getState().currentTree.stateID}}function Pe(e,t,n=!1){const r=e.getState(),o=n?Ae():t.version;return{currentTree:n?{version:o,stateID:o,transactionMetadata:{...t.transactionMetadata},dirtyAtoms:new Set(t.dirtyAtoms),atomValues:new Map(t.atomValues),nonvalidatedAtoms:new Map(t.nonvalidatedAtoms)}:t,nextTree:null,previousTree:null,knownAtoms:new Set(r.knownAtoms),knownSelectors:new Set(r.knownSelectors),transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(o,e.getGraph(t.version)),versionsUsedByComponent:new Map}}function Re(e,t="current"){const n=e.getState(),r="current"===t?n.currentTree:u(n.previousTree);return new Te(Pe(e,r))}class Ne extends Te{constructor(e){super(Pe(e.getStore_INTERNAL(),e.getStore_INTERNAL().getState().currentTree,!0)),f(this,"set",((e,t)=>{const n=this.getStore_INTERNAL();ye((()=>{xe(n,e,t)}))})),f(this,"reset",(e=>ye((()=>xe(this.getStore_INTERNAL(),e,ke)))))}}var Ie={Snapshot:Te,MutableSnapshot:Ne,freshSnapshot:function(e){const t=new Te(Ce());return null!=e?t.map(e):t},cloneSnapshot:Re},Le=Ie.Snapshot,je=Ie.MutableSnapshot,Me=Ie.freshSnapshot,De=Ie.cloneSnapshot,ze=Object.freeze({__proto__:null,Snapshot:Le,MutableSnapshot:je,freshSnapshot:Me,cloneSnapshot:De}),Be=function(...e){const t=new Set;for(const n of e)for(const e of n)t.add(e);return t};const{useContext:Ve,useEffect:Fe,useMemo:Ue,useRef:$e,useState:qe}=t,{cleanUpNode:We,getDownstreamNodes:He,setNodeValue:Ke,setUnvalidatedAtomValue_DEPRECATED:Qe}=j,{graph:Ge,saveDependencyMapToStore:Ye}=z,{cloneGraph:Je}=z,{applyAtomValueWrites:Xe}=oe,{freshSnapshot:Ze}=ze,{getNextTreeStateVersion:et,makeEmptyStoreState:tt}=ge,{mapByDeletingMultipleFromMap:nt}=c;function rt(){throw new Error("This component must be used inside a <RecoilRoot> component.")}const ot=Object.freeze({getState:rt,replaceState:rt,getGraph:rt,subscribeToTransactions:rt,addTransactionMetadata:rt});let it=!1;function at(e){if(it)throw new Error("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");if(null===e.nextTree){const t=e.currentTree.version,n=et();e.nextTree={...e.currentTree,version:n,stateID:n,dirtyAtoms:new Set,transactionMetadata:{}},e.graphsByVersion.set(n,Je(u(e.graphsByVersion.get(t))))}}const ut=t.createContext({current:ot}),st=()=>Ve(ut),lt=t.createContext(null);function ct(e){const t=e.getState(),n=t.currentTree,r=n.dirtyAtoms;if(r.size){for(const[n,o]of t.nodeTransactionSubscriptions)if(r.has(n))for(const[t,n]of o)n(e);for(const[n,r]of t.transactionSubscriptions)r(e);const o=He(e,n,r);for(const e of o){const r=t.nodeToComponentSubscriptions.get(e);if(r)for(const[e,[t,o]]of r)o(n)}let i="[available in dev build]";t.suspendedComponentResolvers.forEach((e=>s("value became available, waking components",i,e)))}t.queuedComponentCallbacks_DEPRECATED.forEach((e=>e(n))),t.queuedComponentCallbacks_DEPRECATED.splice(0,t.queuedComponentCallbacks_DEPRECATED.length)}function ft(e){const t=st(),[n,r]=qe([]);return e.setNotifyBatcherOfChange((()=>r({}))),Fe((()=>{fe("Batcher",(()=>{const e=t.current.getState(),{nextTree:n}=e;if(null===n)return;e.previousTree=e.currentTree,e.currentTree=n,e.nextTree=null,ct(t.current);const r=u(e.previousTree).version;e.graphsByVersion.delete(r),e.previousTree=null}))})),null}let dt=0;var pt,ht={useStoreRef:st,useRecoilMutableSource:()=>Ve(lt),RecoilRoot:function({initializeState_DEPRECATED:e,initializeState:n,store_INTERNAL:r,children:o}){var i;let a;const s=$e(null),l=null!==(i=t.createMutableSource)&&void 0!==i?i:t.unstable_createMutableSource,c=null!=r?r:{getState:()=>a.current,replaceState:e=>{const t=f.current.getState();at(t);const n=u(t.nextTree);let r;try{it=!0,r=e(n)}finally{it=!1}r!==n&&(t.nextTree=r,u(s.current)())},getGraph:e=>{const t=a.current.graphsByVersion;if(t.has(e))return u(t.get(e));const n=Ge();return t.set(e,n),n},subscribeToTransactions:(e,t)=>{if(null==t){const{transactionSubscriptions:t}=f.current.getState(),n=dt++;return t.set(n,e),{release:()=>{t.delete(n)}}}{const{nodeTransactionSubscriptions:n}=f.current.getState();n.has(t)||n.set(t,new Map);const r=dt++;return u(n.get(t)).set(r,e),{release:()=>{const e=n.get(t);e&&(e.delete(r),0===e.size&&n.delete(t))}}}},addTransactionMetadata:e=>{at(f.current.getState());for(const t of Object.keys(e))u(f.current.getState().nextTree).transactionMetadata[t]=e[t]}},f=$e(c);a=$e(null!=e?function(e,t){const n=tt();return t({set:(t,r)=>{const o=n.currentTree,[i,a]=Ke(e,o,t.key,r),u=new Set(a.keys());Ye(i,e,o.version);const s=nt(o.nonvalidatedAtoms,u);n.currentTree={...o,dirtyAtoms:Be(o.dirtyAtoms,u),atomValues:Xe(o.atomValues,a),nonvalidatedAtoms:s}},setUnvalidatedAtomValues:e=>{e.forEach(((e,t)=>{n.currentTree=Qe(n.currentTree,t,e)}))}}),n}(c,e):null!=n?function(e){return Ze().map(e).getStore_INTERNAL().getState()}(n):tt());const d=Ue((()=>l?l(a,(()=>a.current.currentTree.version)):null),[l,a]);return Fe((()=>()=>{for(const e of f.current.getState().knownAtoms)We(f.current,e)}),[]),t.createElement(ut.Provider,{value:f},t.createElement(lt.Provider,{value:d},t.createElement(ft,{setNotifyBatcherOfChange:function(e){s.current=e}}),o))},sendEndOfBatchNotifications_FOR_TESTING:ct},vt=function(e,t){if(!e)throw new Error(t)};const mt=null!==(pt=t.useMutableSource)&&void 0!==pt?pt:t.unstable_useMutableSource;var gt={mutableSourceExists:function(){return mt&&!("undefined"!=typeof window&&window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE)},useMutableSource:mt};const{useRef:yt}=t;var bt=function(){return yt(),"<component name not available>"};const{useCallback:_t,useEffect:wt,useMemo:kt,useRef:St,useState:Et}=t,{batchUpdates:xt}=ce,{DEFAULT_VALUE:At,getNode:Ct,nodes:Ot}=C,{useRecoilMutableSource:Tt,useStoreRef:Pt}=ht,{isRecoilValue:Rt}=_,{AbstractRecoilValue:Nt,getRecoilValueAsLoadable:It,setRecoilValue:Lt,setRecoilValueLoadable:jt,setUnvalidatedRecoilValue:Mt,subscribeToRecoilValue:Dt}=oe,{Snapshot:zt,cloneSnapshot:Bt}=ze,{setByAddingToSet:Vt}=c,{mutableSourceExists:Ft,useMutableSource:Ut}=gt;function $t(e,t,n){if("hasValue"===e.state)return e.contents;if("loading"===e.state)throw new Promise((e=>{n.current.getState().suspendedComponentResolvers.add(e)}));throw"hasError"===e.state?e.contents:new Error(`Invalid value of loadable atom "${t.key}"`)}function qt(e){return Ft()?function(e){const t=Pt(),n=_t((()=>It(t.current,e,t.current.getState().currentTree)),[t,e]),r=bt(),o=_t(((n,o)=>{const i=t.current,a=Dt(i,e,(()=>{s("RecoilValue subscription fired",e.key,(()=>{o()}))}),r);return()=>a.release(i)}),[e,t,r]);return Ut(Tt(),n,o)}(e):function(e){const t=Pt(),[n,r]=Et([]),o=bt();return wt((()=>{const n=t.current,i=Dt(n,e,(t=>{s("RecoilValue subscription fired",e.key,(()=>{r([])}))}),o);return s("initial update on subscribing",e.key,(()=>{n.getState().nextTree?n.getState().queuedComponentCallbacks_DEPRECATED.push(l((()=>{r([])}))):r([])})),()=>i.release(n)}),[e,t]),It(t.current,e)}(e)}function Wt(e){const t=Pt();return $t(qt(e),e,t)}function Ht(e){const t=Pt();return _t((n=>{Lt(t.current,e,n)}),[t,e])}function Kt(e){const t=Pt();wt((()=>t.current.subscribeToTransactions(e).release),[e,t])}function Qt(e){const t=e.atomValues,n=a(function(e,t){const n=new Map;for(const[r,o]of e)t(o,r)&&n.set(r,o);return n}(t,((e,t)=>{const n=Ct(t).persistence_UNSTABLE;return null!=n&&"none"!==n.type&&"hasValue"===e.state})),(e=>e.contents));return function(...e){const t=new Map;for(let n=0;n<e.length;n++){const r=e[n].keys();let o;for(;!(o=r.next()).done;)t.set(o.value,e[n].get(o.value))}return t}(e.nonvalidatedAtoms,n)}function Gt(){const e=Pt();return _t((t=>{var n;const r=e.current.getState(),o=null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree,i=t.getStore_INTERNAL().getState().currentTree;xt((()=>{const n=new Set;for(const e of[o.atomValues.keys(),i.atomValues.keys()])for(const t of e){var r,a;(null===(r=o.atomValues.get(t))||void 0===r?void 0:r.contents)!==(null===(a=i.atomValues.get(t))||void 0===a?void 0:a.contents)&&Ct(t).shouldRestoreFromSnapshots&&n.add(t)}n.forEach((t=>{jt(e.current,new Nt(t),i.atomValues.has(t)?u(i.atomValues.get(t)):At)})),e.current.replaceState((e=>({...e,stateID:t.getID_INTERNAL()})))}))}),[e])}class Yt{}const Jt=new Yt;var Xt={recoilComponentGetRecoilValueCount_FOR_TESTING:{current:0},useGotoRecoilSnapshot:Gt,useRecoilCallback:function(e,t){const n=Pt(),r=Gt();return _t(((...t)=>{const o=Bt(n.current);function i(e,t){Lt(n.current,e,t)}function a(e){Lt(n.current,e,At)}let u=Jt;return xt((()=>{u=e({set:i,reset:a,snapshot:o,gotoSnapshot:r})(...t)})),u instanceof Yt&&vt(!1),u}),null!=t?[...t,n]:void 0)},useRecoilInterface:function(){const e=Pt(),[t,n]=Et([]),r=St(new Set);r.current=new Set;const o=St(new Set),i=St(new Map),a=_t((t=>{const n=i.current.get(t);n&&(n.release(e.current),i.current.delete(t))}),[e,i]),u=bt();return wt((()=>{const t=e.current;function c(e,t){i.current.has(t)&&n([])}M(r.current,o.current).forEach((e=>{if(i.current.has(e))return;const n=Dt(t,new Nt(e),(t=>{s("RecoilValue subscription fired",e,(()=>{c(0,e)}))}),u);i.current.set(e,n),s("initial update on subscribing",e,(()=>{t.getState().nextTree?t.getState().queuedComponentCallbacks_DEPRECATED.push(l((()=>{c(t.getState(),e)}))):c(t.getState(),e)}))})),M(o.current,r.current).forEach((e=>{a(e)})),o.current=r.current})),wt((()=>{const e=i.current;return()=>e.forEach(((e,t)=>a(t)))}),[a]),kt((()=>{function t(t){return n=>{Lt(e.current,t,n)}}function n(t){return r.current.has(t.key)||(r.current=Vt(r.current,t.key)),It(e.current,t)}function o(t){return $t(n(t),t,e)}return{getRecoilValue:o,getRecoilValueLoadable:n,getRecoilState:function(e){return[o(e),t(e)]},getRecoilStateLoadable:function(e){return[n(e),t(e)]},getSetRecoilState:t,getResetRecoilState:function(t){return()=>Lt(e.current,t,At)}}}),[r,e])},useRecoilSnapshot:function(){const e=Pt(),[t,n]=Et((()=>Bt(e.current)));return Kt(_t((e=>n(Bt(e))),[])),t},useRecoilState:function(e){return[Wt(e),Ht(e)]},useRecoilStateLoadable:function(e){return[qt(e),Ht(e)]},useRecoilTransactionObserver:function(e){Kt(_t((t=>{e({snapshot:Bt(t,"current"),previousSnapshot:Bt(t,"previous")})}),[e]))},useRecoilValue:Wt,useRecoilValueLoadable:qt,useResetRecoilState:function(e){const t=Pt();return _t((()=>{Lt(t.current,e,At)}),[t,e])},useSetRecoilState:Ht,useSetUnvalidatedAtomValues:function(){const e=Pt();return(t,n={})=>{xt((()=>{e.current.addTransactionMetadata(n),t.forEach(((t,n)=>Mt(e.current,new Nt(n),t)))}))}},useTransactionObservation_DEPRECATED:function(e){Kt(_t((t=>{let n=t.getState().previousTree;const r=t.getState().currentTree;n||(n=t.getState().currentTree);const o=Qt(r),i=Qt(n),u=a(Ot,(e=>{var t,n,r,o;return{persistence_UNSTABLE:{type:null!==(t=null===(n=e.persistence_UNSTABLE)||void 0===n?void 0:n.type)&&void 0!==t?t:"none",backButton:null!==(r=null===(o=e.persistence_UNSTABLE)||void 0===o?void 0:o.backButton)&&void 0!==r&&r}}})),s=function(e,t){const n=new Set;for(const r of e)t(r)&&n.add(r);return n}(r.dirtyAtoms,(e=>o.has(e)||i.has(e)));e({atomValues:o,previousAtomValues:i,atomInfo:u,modifiedAtoms:s,transactionMetadata:{...r.transactionMetadata}})}),[e]))},useTransactionSubscription_DEPRECATED:Kt};const{useMemo:Zt}=t,{RecoilRoot:en,useStoreRef:tn}=ht;var nn=function(e){return!!e&&"function"==typeof e.then};const rn={getValue(){if("loading"===this.state&&i("recoil_async_selector_refactor"))throw this.contents.then((({__value:e})=>e));if("hasValue"!==this.state)throw this.contents;return this.contents},toPromise(){return"hasValue"===this.state?Promise.resolve(this.contents):"hasError"===this.state?Promise.reject(this.contents):i("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents},valueMaybe(){return"hasValue"===this.state?this.contents:void 0},valueOrThrow(){if("hasValue"!==this.state)throw new Error(`Loadable expected value, but in "${this.state}" state`);return this.contents},errorMaybe(){return"hasError"===this.state?this.contents:void 0},errorOrThrow(){if("hasError"!==this.state)throw new Error(`Loadable expected error, but in "${this.state}" state`);return this.contents},promiseMaybe(){return"loading"===this.state?i("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents:void 0},promiseOrThrow(){if("loading"!==this.state)throw new Error(`Loadable expected promise, but in "${this.state}" state`);return i("recoil_async_selector_refactor")?this.contents.then((({__value:e})=>e)):this.contents},map(e){if("hasError"===this.state)return this;if("hasValue"===this.state)try{const t=e(this.contents);return nn(t)?un(t):on(t)}catch(t){return nn(t)?un(t.next((()=>e(this.contents)))):an(t)}if("loading"===this.state)return un(this.contents.then(e).catch((t=>{if(nn(t))return t.then((()=>e(this.contents)));throw t})));throw new Error("Invalid Loadable state")}};function on(e){return Object.freeze({state:"hasValue",contents:e,...rn})}function an(e){return Object.freeze({state:"hasError",contents:e,...rn})}function un(e){return Object.freeze({state:"loading",contents:e,...rn})}var sn={loadableWithValue:on,loadableWithError:an,loadableWithPromise:un,loadableLoading:function(){return un(new Promise((()=>{})))},loadableAll:function(e){return e.every((e=>"hasValue"===e.state))?on(e.map((e=>e.contents))):e.some((e=>"hasError"===e.state))?an(u(e.find((e=>"hasError"===e.state)),"Invalid loadable passed to loadableAll").contents):un(i("recoil_async_selector_refactor")?Promise.all(e.map((e=>e.contents))).then((e=>({__value:e}))):Promise.all(e.map((e=>e.contents))))}};Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,DataView,"undefined"!=typeof navigator&&navigator.product;var ln=function(){let e,t;const n={get:n=>n===e?t:void 0,set:(r,o)=>(e=r,t=o,n)};return n};const cn=Symbol("ArrayKeyedMap"),fn=new Map;class dn{constructor(e){if(f(this,"_base",new Map),e instanceof dn)for(const[t,n]of e.entries())this.set(t,n);else if(e)for(const[t,n]of e)this.set(t,n);return this}get(e){const t=Array.isArray(e)?e:[e];let n=this._base;return t.forEach((e=>{var t;n=null!==(t=n.get(e))&&void 0!==t?t:fn})),void 0===n?void 0:n.get(cn)}set(e,t){const n=Array.isArray(e)?e:[e];let r=this._base,o=r;return n.forEach((e=>{o=r.get(e),o||(o=new Map,r.set(e,o)),r=o})),o.set(cn,t),this}delete(e){const t=Array.isArray(e)?e:[e];let n=this._base,r=n;return t.forEach((e=>{r=n.get(e),r||(r=new Map,n.set(e,r)),n=r})),r.delete(cn),this}entries(){const e=[];return function t(n,r){n.forEach(((n,o)=>{o===cn?e.push([r,n]):t(n,r.concat(o))}))}(this._base,[]),e.values()}toBuiltInMap(){return new Map(this.entries())}}var pn=dn,hn=Object.freeze({__proto__:null,ArrayKeyedMap:pn});const{ArrayKeyedMap:vn}=hn;var mn=function(){return new vn};function gn(e,t,n){if("string"==typeof e&&!e.includes('"')&&!e.includes("\\"))return`"${e}"`;switch(typeof e){case"undefined":return"";case"boolean":return e?"true":"false";case"number":case"symbol":return String(e);case"string":return JSON.stringify(e);case"function":if(!0!==(null==t?void 0:t.allowFunctions))throw new Error("Attempt to serialize function in a Recoil cache key");return`__FUNCTION(${e.name})__`}if(null===e)return"null";var r;if("object"!=typeof e)return null!==(r=JSON.stringify(e))&&void 0!==r?r:"";if(nn(e))return"__PROMISE__";if(Array.isArray(e))return`[${e.map(((e,n)=>gn(e,t,n.toString())))}]`;if("function"==typeof e.toJSON)return gn(e.toJSON(n),t,n);if(e instanceof Map){const r={};for(const[n,o]of e)r["string"==typeof n?n:gn(n,t)]=o;return gn(r,t,n)}return e instanceof Set?gn(Array.from(e).sort(((e,n)=>gn(e,t).localeCompare(gn(n,t)))),t,n):null!=e[Symbol.iterator]&&"function"==typeof e[Symbol.iterator]?gn(Array.from(e),t,n):`{${Object.keys(e).filter((t=>void 0!==e[t])).sort().map((n=>`${gn(n,t)}:${gn(e[n],t,n)}`)).join(",")}}`}var yn=function(e,t={allowFunctions:!1}){return gn(e,t)},bn=function(){const e=new Map,t={get:t=>e.get(yn(t)),set:(n,r)=>(e.set(yn(n),r),t),map:e};return t},_n={setInTreeCache:function e(t,n,r){if(null==t){if(0===n.length)return{type:"result",result:r};{const[t,...o]=n,[i,a]=t;return{type:"branch",nodeKey:i,branches:new Map([[a,e(null,o,r)]])}}}if(0===n.length)return"result"!==t.type&&vt(!1),t.result&&"loading"===t.result.state?{type:"result",result:r}:(t.result!==r&&vt(!1),t);{const[o,...i]=n,[a,u]=o;return"branch"!==t.type&&vt(!1),t.nodeKey!==a&&vt(!1),t.branches.set(u,e(t.branches.get(u),i,r)),t}},getFromTreeCache:function e(t,n,r){var o;if(null==t)return;if("result"===t.type)return t.result;null==r||null===(o=r.onCacheHit)||void 0===o||o.call(r,t.nodeKey);const i=n(t.nodeKey);return e(t.branches.get(i),n,r)}};const{getFromTreeCache:wn,setInTreeCache:kn}=_n;var Sn=function(){let e;return{get:(t,n)=>wn(e,t,n),set:(t,n)=>{e=kn(e,t,n)},getRoot:()=>e}};const{getFromTreeCache:En,setInTreeCache:xn}=_n;var An={startPerfBlock:function(e){return()=>null}};const{loadableWithError:Cn,loadableWithPromise:On,loadableWithValue:Tn}=sn,{getNodeLoadable:Pn,peekNodeLoadable:Rn,setNodeValue:Nn}=j,{saveDependencyMapToStore:In}=z,{DEFAULT_VALUE:Ln,RecoilValueNotReady:jn,registerNode:Mn}=C,{isRecoilValue:Dn}=_,{AbstractRecoilValue:zn}=_,{setRecoilValueLoadable:Bn}=oe,{startPerfBlock:Vn}=An,Fn=Object.freeze(new Set),Un=[],$n=new Map,qn=(()=>{let e=0;return()=>e++})();const{loadableWithError:Wn,loadableWithPromise:Hn,loadableWithValue:Kn}=sn,{getNodeLoadable:Qn,peekNodeLoadable:Gn,setNodeValue:Yn}=j,{addToDependencyMap:Jn,mergeDepsIntoDependencyMap:Xn,saveDependencyMapToStore:Zn}=z,{DEFAULT_VALUE:er,RecoilValueNotReady:tr,registerNode:nr}=C,{AbstractRecoilValue:rr}=_,{getRecoilValueAsLoadable:or,isRecoilValue:ir,setRecoilValueLoadable:ar}=oe,{startPerfBlock:ur}=An,sr=Object.freeze(new Set);function lr(e){const t=[];for(const n of Array.from(e.keys()).sort()){const r=u(e.get(n));t.push(n),t.push(r.state),t.push(r.contents)}return t}const cr=new Map;var fr=i("recoil_async_selector_refactor")?function(e){const{key:t,get:n,cacheImplementation_UNSTABLE:r}=e,o=null!=e.set?e.set:void 0,i=r===mn?Sn():r===bn?function(){let e;return{get:(t,n)=>En(e,(e=>yn(t(e))),n),set:(t,n)=>{e=xn(e,t.map((([e,t])=>[e,yn(t)])),n)},getRoot:()=>e}}():r===ln?function(){let e;return{get:(t,n)=>{if(void 0!==e){for(const[o,i]of e.route){var r;if(t(o)!==i)return;null==n||null===(r=n.onCacheHit)||void 0===r||r.call(n,o)}return e.value}},set:(t,n)=>{e={route:t,value:n}},getRoot:()=>e}}():Sn(),a={depValuesDiscoveredSoFarDuringAsyncWork:null,latestLoadable:null,latestExecutionId:null,stateVersion:null};function s(e){e.getState().knownSelectors.add(t)}function l(e,t,n){if("loading"===t.state){let t=$n.get(n);null==t&&$n.set(n,t=new Set),t.add(e)}}function c(e,t,n){if(t.atomValues.has(n))return[new Map,u(t.atomValues.get(n))];const[,r]=Pn(e,t,n),o=e.getState().knownSelectors.has(n);return"loading"!==r.state&&o&&t.atomValues.set(n,r),[new Map,r]}function f(e,n,r,o,i){return n.then((n=>{const{__key:o,__value:a}=n;null!=o&&r.atomValues.set(o,Tn(a));const[u,s]=v(e,r,i);if(w(i)&&_(s,i),k(u),"loading"!==u.state&&(E(r,m(s),u),d(u,i)),"hasError"===u.state)throw u.contents;return"hasValue"===u.state?{__value:u.contents,__key:t}:u.contents})).catch((e=>{const t=Cn(e);throw S(),E(r,m(o),Cn(e)),d(t,i),e}))}function d(e,n){w(n)&&(b(e),function(e,n){const r=$n.get(n);if(void 0!==r){for(const n of r)Bn(n,new zn(t),e);$n.delete(n)}}(e,n))}function p(e,n,r,o){var i,a,u,s,l,c,f;(w(o)||n.version===(null===(i=e.getState())||void 0===i||null===(a=i.currentTree)||void 0===a?void 0:a.version)||n.version===(null===(u=e.getState())||void 0===u||null===(s=u.nextTree)||void 0===s?void 0:s.version))&&In(new Map([[t,r]]),e,null!==(l=null===(c=e.getState())||void 0===c||null===(f=c.nextTree)||void 0===f?void 0:f.version)&&void 0!==l?l:e.getState().currentTree.version)}function h(e,t,n,r,o){n.add(r),p(e,t,n,o)}function v(e,r,o){const i=Vn(t);let a,u;const s=new Map,l=new Set;function v(t){const{key:n}=t;h(e,r,l,n,o);const[,i]=c(e,r,n);if(s.set(n,i),"hasValue"===i.state)return i.contents;throw i.contents}p(e,r,l,o);try{a=n({get:v}),a=Dn(a)?v(a):a,nn(a)?a=function(e,n,r,o,i){return n.then((e=>{const n=Tn(e);return S(),E(r,m(o),n),d(n,i),{__value:e,__key:t}})).catch((t=>{if(w(i)&&_(o,i),nn(t))return f(e,t,r,o,i);const n=Cn(t);throw S(),E(r,m(o),n),d(n,i),t}))}(e,a,r,s,o).finally(i):i()}catch(t){a=t,nn(a)?a=f(e,a,r,s,o).finally(i):i()}return u=a instanceof Error?Cn(a):nn(a)?On(a):Tn(a),k(u),[u,s]}function m(e){return Array.from(e.entries()).map((([e,t])=>[e,t.contents]))}function g(e,n){const r=function(e,n){var r;if(n.atomValues.has(t))return n.atomValues.get(t);const o=new Set(null!==(r=e.getGraph(n.version).nodeDeps.get(t))&&void 0!==r?r:Fn);return p(e,n,o,a.latestExecutionId),i.get((t=>{const[,r]=c(e,n,t);return r.contents}),{onCacheHit:r=>{r!==t&&h(e,n,o,r,a.latestExecutionId)}})}(e,n);return null!=r?(b(r),r):function(e,t){return null!=a.latestLoadable&&null!=a.latestExecutionId&&!function(e,t){var n,r;const o=null!==(n=a.depValuesDiscoveredSoFarDuringAsyncWork)&&void 0!==n?n:new Map,i=Array((null!==(r=y.get(t.version))&&void 0!==r?r:new Map).entries()),u=y.has(t.version)&&i.length===o.size&&i.every((([e,t])=>o.get(e)===t));return null!=o&&t.version!==a.stateVersion&&!u&&(y.set(t.version,new Map(o)),Array.from(o).some((([n,r])=>{const[,o]=c(e,t,n);return o.contents!==r.contents&&!("loading"===r.state&&"loading"!==o.state)})))}(e,t)}(e,n)?(l(e,u(a.latestLoadable),u(a.latestExecutionId)),u(a.latestLoadable)):function(e,t){const n=qn(),[r,o]=v(e,t,n);return b(r,o,n,t),function(e,t,n){"loading"!==n.state&&E(e,t,n)}(t,m(o),r),l(e,r,n),r}(e,n)}const y=new Map;function b(e,t,n,r){"loading"===e.state?(a.depValuesDiscoveredSoFarDuringAsyncWork=t,a.latestExecutionId=n,a.latestLoadable=e,a.stateVersion=null==r?void 0:r.version):(a.depValuesDiscoveredSoFarDuringAsyncWork=null,a.latestExecutionId=null,a.latestLoadable=null,a.stateVersion=null)}function _(e,t){w(t)&&(a.depValuesDiscoveredSoFarDuringAsyncWork=e)}function w(e){return e===a.latestExecutionId}function k(e){"loading"!==e.state&&S(e.contents)}function S(e){}function E(e,n,r){e.atomValues.set(t,r),i.set(n,r)}function x(e){if(Un.includes(t)){const e=`Recoil selector has circular dependencies: ${Un.slice(Un.indexOf(t)).join(" → ")}`;return Cn(new Error(e))}Un.push(t);try{return e()}finally{Un.pop()}}function A(e,t){return i.get((n=>{const r=Rn(e,t,n);return null==r?void 0:r.contents}))}function C(e,t){return s(e),[new Map,x((()=>g(e,t)))]}function O(e){e.atomValues.delete(t)}return Mn(null!=o?{key:t,peek:A,get:C,set:function(e,t,n){s(e);const r=new Map,i=new Map;function a({key:n}){const[,r]=c(e,t,n);if("hasValue"===r.state)return r.contents;throw"loading"===r.state?new jn(n):r.contents}function u(n,r){const o="function"==typeof r?r(a(n)):r,[,u]=Nn(e,t,n.key,o);u.forEach(((e,t)=>i.set(t,e)))}return o({set:u,get:a,reset:function(e){u(e,Ln)}},n),[r,i]},cleanUp:()=>{},invalidate:O,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1}:{key:t,peek:A,get:C,cleanUp:()=>{},invalidate:O,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1})}:function(e){const{key:t,get:n,cacheImplementation_UNSTABLE:r}=e,o=null!=e.set?e.set:void 0;let i=null!=r?r:mn();function a(e){e.getState().knownSelectors.add(t)}function u(e,t){if("loading"===t.state){let n=cr.get(t);void 0===n&&cr.set(t,n=new Set),n.add(e)}}function s(e,n){const r=cr.get(e);if(void 0!==r){for(const e of r)ar(e,new rr(t),n);cr.delete(e)}}function l(e,n){var r;const o=null!==(r=e.getGraph(n.version).nodeDeps.get(t))&&void 0!==r?r:sr,a=new Map(Array.from(o).sort().map((t=>[t,Gn(e,n,t)]))),u=new Map;for(const[e,t]of a.entries()){if(null==t)return;u.set(e,t)}const s=lr(u);return i.get(s)}function c(e){e.atomValues.delete(t)}function f(e,r){a(e);const o=r.atomValues.get(t);return void 0!==o?[new Map,o]:function(e,r){var o;const a=new Map,l=null!==(o=e.getGraph(r.version).nodeDeps.get(t))&&void 0!==o?o:sr,c=lr(new Map(Array.from(l).sort().map((t=>{const[n,o]=Qn(e,r,t);return Xn(n,a),Zn(a,e,r.version),[t,o]})))),f=i.get(c);if(null!=f)return u(e,f),[a,f];const[d,p,h]=function(e,r){const o=ur(t),i=new Map,a=new Map;function u({key:n}){Jn(t,n,a);const[o,u]=Qn(e,r,n);if(i.set(n,u),Xn(o,a),Zn(a,e,r.version),"hasValue"===u.state)return u.contents;throw u.contents}try{const e=n({get:u}),t=ir(e)?u(e):e;let r;return nn(t)?r=Hn(t.finally(o)):(o(),r=Kn(t)),[a,r,i]}catch(n){let r;return void 0!==n.then?r=Hn(n.then((()=>{const n=or(e,new rr(t));if("hasError"===n.state)throw n.contents;return n.contents})).finally(o)):(o(),r=Wn(n)),[a,r,i]}}(e,r);Xn(d,a),Zn(a,e,r.version);const v=lr(h);return u(e,p),function(e,n,r){"loading"!==r.state||r.contents.then((e=>{const t=Kn(e);return i=i.set(n,t),s(r,t),e})).catch((e=>{if(nn(e))return e;const t=Wn(e);return i=i.set(n,t),s(r,t),e})),i=i.set(n,r),"loading"!==r.state&&e.atomValues.set(t,r)}(r,v,p),[a,p]}(e,r)}return nr(null!=o?{key:t,peek:l,get:f,set:function(e,t,n){a(e);const r=new Map,i=new Map;function u({key:n}){const[o,i]=Qn(e,t,n);if(Xn(o,r),"hasValue"===i.state)return i.contents;throw"loading"===i.state?new tr(n):i.contents}function s(n,o){const a="function"==typeof o?o(u(n)):o,[s,l]=Yn(e,t,n.key,a);Xn(s,r),l.forEach(((e,t)=>i.set(t,e)))}return o({set:s,get:u,reset:function(e){s(e,er)}},n),[r,i]},invalidate:c,cleanUp:()=>{},dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1}:{key:t,peek:l,get:f,invalidate:c,cleanUp:()=>{},dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1})};const{loadableWithError:dr,loadableWithPromise:pr,loadableWithValue:hr}=sn,{DEFAULT_VALUE:vr,DefaultValue:mr,registerNode:gr}=C,{isRecoilValue:yr}=_,{markRecoilValueModified:br,setRecoilValue:_r,setRecoilValueLoadable:wr}=oe;var kr=function e(t){const{default:n,...r}=t;return yr(n)?function(t){const n=e({...t,default:vr,persistence_UNSTABLE:void 0===t.persistence_UNSTABLE?void 0:{...t.persistence_UNSTABLE,validator:e=>e instanceof mr?e:u(t.persistence_UNSTABLE).validator(e,vr)},effects_UNSTABLE:t.effects_UNSTABLE});return fr({key:`${t.key}__withFallback`,get:({get:e})=>{const r=e(n);return r instanceof mr?t.default:r},set:({set:e},t)=>e(n,t),dangerouslyAllowMutability:t.dangerouslyAllowMutability})}({...r,default:n}):function(e){const{key:t,persistence_UNSTABLE:n}=e;let r,o=nn(e.default)?pr(e.default.then((e=>(o=hr(e),{__key:t,__value:e}))).catch((e=>{throw o=dr(e),e}))):hr(e.default);const i=new Map;function a(n,r,a){if(n.getState().knownAtoms.has(t))return;if(n.getState().knownAtoms.add(t),"loading"===o.state){function u(){var e;(null!==(e=n.getState().nextTree)&&void 0!==e?e:n.getState().currentTree).atomValues.has(t)||br(n,s)}o.contents.then(u).catch(u)}let l=vr,c=null;if(null!=e.effects_UNSTABLE){let r=!0;const u=e=>t=>{if(r){const e=l instanceof mr||nn(l)?"hasValue"===o.state?o.contents:vr:l;l="function"==typeof t?t(e):t}else{if(nn(t))throw new Error("Setting atoms to async values is not implemented.");"function"!=typeof t&&(c={effect:e,value:t}),_r(n,s,"function"==typeof t?n=>{const r=t(n);return c={effect:e,value:r},r}:t)}},d=e=>()=>u(e)(vr),p=e=>r=>{n.subscribeToTransactions((n=>{var i;let{currentTree:a,previousTree:u}=n.getState();u||(u=a);const s=a.atomValues.get(t);if(null==s||"hasValue"===s.state){var l,f,d;const n=null!=s?s.contents:vr,i=null!==(l=u.atomValues.get(t))&&void 0!==l?l:o,a="hasValue"===i.state?i.contents:vr;(null===(f=c)||void 0===f?void 0:f.effect)===e&&(null===(d=c)||void 0===d?void 0:d.value)===n||r(n,a)}(null===(i=c)||void 0===i?void 0:i.effect)===e&&(c=null)}),t)};for(const t of null!==(f=e.effects_UNSTABLE)&&void 0!==f?f:[]){var f;const e=t({node:s,trigger:a,setSelf:u(t),resetSelf:d(t),onSet:p(t)});null!=e&&i.set(n,e)}r=!1}l instanceof mr||r.atomValues.set(t,nn(l)?pr(function(e,n){const r=n.then((n=>{var o,i;return(null===(i=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===i?void 0:i.contents)===r&&_r(e,s,n),{__key:t,__value:n}})).catch((n=>{var o,i;throw(null===(i=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===i?void 0:i.contents)===r&&wr(e,s,dr(n)),n}));return r}(n,l)):hr(l))}const s=gr({key:t,peek:function(e,n){var i,a,u;return null!==(i=null!==(a=n.atomValues.get(t))&&void 0!==a?a:null===(u=r)||void 0===u?void 0:u[1])&&void 0!==i?i:o},get:function(e,i){if(a(e,i,"get"),i.atomValues.has(t))return[new Map,u(i.atomValues.get(t))];if(i.nonvalidatedAtoms.has(t)){if(null!=r)return r;if(null==n)return[new Map,o];const e=i.nonvalidatedAtoms.get(t),a=n.validator(e,vr),u=a instanceof mr?o:hr(a);return r=[new Map,u],r}return[new Map,o]},set:function(e,n,o){if(a(e,n,"set"),n.atomValues.has(t)){const e=u(n.atomValues.get(t));if("hasValue"===e.state&&o===e.contents)return[new Map,new Map]}else if(!n.nonvalidatedAtoms.has(t)&&o instanceof mr)return[new Map,new Map];return r=void 0,[new Map,(new Map).set(t,hr(o))]},cleanUp:function(e){var t;null===(t=i.get(e))||void 0===t||t(),i.delete(e)},invalidate:function(){r=void 0},dangerouslyAllowMutability:e.dangerouslyAllowMutability,persistence_UNSTABLE:e.persistence_UNSTABLE?{type:e.persistence_UNSTABLE.type,backButton:e.persistence_UNSTABLE.backButton}:void 0,shouldRestoreFromSnapshots:!0});return s}({...r,default:n})};let Sr=0;var Er=function(e){var t,n;let r=null!==(t=null===(n=e.cacheImplementationForParams_UNSTABLE)||void 0===n?void 0:n.call(e))&&void 0!==t?t:bn();return t=>{var n,o;const i=r.get(t);if(null!=i)return i;const a=`${e.key}__selectorFamily/${null!==(n=yn(t,{allowFunctions:!0}))&&void 0!==n?n:"void"}/${Sr++}`,u=n=>e.get(t)(n),s=null===(o=e.cacheImplementation_UNSTABLE)||void 0===o?void 0:o.call(e);let l;if(null!=e.set){const n=e.set;l=fr({key:a,get:u,set:(e,r)=>n(t)(e,r),cacheImplementation_UNSTABLE:s,dangerouslyAllowMutability:e.dangerouslyAllowMutability})}else l=fr({key:a,get:u,cacheImplementation_UNSTABLE:s,dangerouslyAllowMutability:e.dangerouslyAllowMutability});return r=r.set(t,l),l}};const{DEFAULT_VALUE:xr,DefaultValue:Ar}=C;const Cr=Er({key:"__constant",get:e=>()=>e,cacheImplementationForParams_UNSTABLE:mn});const Or=Er({key:"__error",get:e=>()=>{throw new Error(e)},cacheImplementationForParams_UNSTABLE:mn});const{loadableWithError:Tr,loadableWithPromise:Pr,loadableWithValue:Rr}=sn;function Nr(e,t){const n=Array(t.length).fill(void 0),r=Array(t.length).fill(void 0);for(const[o,i]of t.entries())try{n[o]=e(i)}catch(e){r[o]=e}return[n,r]}function Ir(e){return null!=e&&!nn(e)}function Lr(e){return Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((t=>e[t]))}function jr(e){return null!=e&&"object"==typeof e&&e.hasOwnProperty("__value")?e.__value:e}function Mr(e,t){return Array.isArray(e)?t:Object.getOwnPropertyNames(e).reduce(((e,n,r)=>({...e,[n]:t[r]})),{})}function Dr(e,t,n){return Mr(e,n.map(((e,n)=>null==e?Rr(t[n]):nn(e)?Pr(e):Tr(e))))}var zr={waitForNone:Er({key:"__waitForNone",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Nr(t,n);return Dr(e,r,o)}}),waitForAny:Er({key:"__waitForAny",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Nr(t,n);if(o.some((e=>null==e)))return Dr(e,r,o);if(o.every(Ir))throw o.find(Ir);if(i("recoil_async_selector_refactor"))return new Promise(((t,n)=>{for(const[i,a]of o.entries())nn(a)&&a.then((n=>{r[i]=jr(n),o[i]=null,t(Dr(e,r,o))})).catch((e=>{o[i]=e,o.every(Ir)&&n(o[0])}))}));throw new Promise(((t,n)=>{for(const[i,a]of o.entries())nn(a)&&a.then((n=>{r[i]=n,o[i]=null,t(Dr(e,r,o))})).catch((e=>{o[i]=e,o.every(Ir)&&n(o[0])}))}))}}),waitForAll:Er({key:"__waitForAll",get:e=>({get:t})=>{const n=Lr(e),[r,o]=Nr(t,n);if(o.every((e=>null==e)))return Mr(e,r);const a=o.find(Ir);if(null!=a)throw a;if(i("recoil_async_selector_refactor"))return Promise.all(o).then((t=>{return Mr(e,(n=r,o=t,o.map(((e,t)=>void 0===e?n[t]:e))).map(jr));var n,o}));throw Promise.all(o).then((t=>Mr(e,t)))}}),noWait:Er({key:"__noWait",get:e=>({get:t})=>{try{return Rr(t(e))}catch(e){return nn(e)?Pr(e):Tr(e)}}})};const{batchUpdates:Br,setBatcher:Vr}=ce,{DefaultValue:Fr}=C,{RecoilRoot:Ur}=ht,{isRecoilValue:$r}=_,{freshSnapshot:qr}=ze,{useGotoRecoilSnapshot:Wr,useRecoilCallback:Hr,useRecoilSnapshot:Kr,useRecoilState:Qr,useRecoilStateLoadable:Gr,useRecoilTransactionObserver:Yr,useRecoilValue:Jr,useRecoilValueLoadable:Xr,useResetRecoilState:Zr,useSetRecoilState:eo,useSetUnvalidatedAtomValues:to,useTransactionObservation_DEPRECATED:no}=Xt,{noWait:ro,waitForAll:oo,waitForAny:io,waitForNone:ao}=zr;var uo={DefaultValue:Fr,RecoilRoot:Ur,useRecoilBridgeAcrossReactRoots_UNSTABLE:function(){const e=tn().current;return Zt((()=>function({children:n}){return t.createElement(en,{store_INTERNAL:e},n)}),[e])},atom:kr,selector:fr,atomFamily:function(e){let t=bn();const n={key:e.key,default:xr,persistence_UNSTABLE:e.persistence_UNSTABLE};let r;r=kr(n);const o=Er({key:`${e.key}__atomFamily/Default`,get:t=>({get:n})=>{const o=n("function"==typeof r?r(t):r);return o instanceof Ar?"function"==typeof e.default?e.default(t):e.default:o},dangerouslyAllowMutability:e.dangerouslyAllowMutability});return n=>{var r;const i=t.get(n);if(null!=i)return i;const a=kr({...e,key:`${e.key}__${null!==(r=yn(n))&&void 0!==r?r:"void"}`,default:o(n),effects_UNSTABLE:"function"==typeof e.effects_UNSTABLE?e.effects_UNSTABLE(n):e.effects_UNSTABLE});return t=t.set(n,a),a}},selectorFamily:Er,constSelector:function(e){return Cr(e)},errorSelector:function(e){return Or(e)},readOnlySelector:function(e){return e},useRecoilValue:Jr,useRecoilValueLoadable:Xr,useRecoilState:Qr,useRecoilStateLoadable:Gr,useSetRecoilState:eo,useResetRecoilState:Zr,useRecoilCallback:Hr,useGotoRecoilSnapshot:Wr,useRecoilSnapshot:Kr,useRecoilTransactionObserver_UNSTABLE:Yr,useTransactionObservation_UNSTABLE:no,useSetUnvalidatedAtomValues_UNSTABLE:to,noWait:ro,waitForNone:ao,waitForAny:io,waitForAll:oo,isRecoilValue:$r,batchUpdates:Br,setBatcher:Vr,snapshot_UNSTABLE:qr},so=uo.RecoilRoot,lo=uo.atom,co=uo.useRecoilValue,fo=uo.useRecoilState,po=uo.useSetRecoilState;function ho(e){const t="1.0.58-20210309222647";return{log:function(n,...r){console.log(`[${e} ${t}] ${n}`,...r)},error:function(n,...r){console.error(`[${e} ${t}] ${n}`,...r)},warn:function(n,...r){console.warn(`[${e} ${t}] ${n}`,...r)},debug:function(n,...r){console.debug(`[${e} ${t}] ${n}`,...r)}}}const{log:vo,error:mo,warn:go,debug:yo}=ho("app");var bo=n(864),_o=n(774),wo=n.n(_o);const ko=function(e){function t(e,r,s,l,d){for(var p,h,v,m,_,k=0,S=0,E=0,x=0,A=0,N=0,L=v=p=0,M=0,D=0,z=0,B=0,V=s.length,F=V-1,U="",$="",q="",W="";M<V;){if(h=s.charCodeAt(M),M===F&&0!==S+x+E+k&&(0!==S&&(h=47===S?10:47),x=E=k=0,V++,F++),0===S+x+E+k){if(M===F&&(0<D&&(U=U.replace(f,"")),0<U.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:U+=s.charAt(M)}h=59}switch(h){case 123:for(p=(U=U.trim()).charCodeAt(0),v=1,B=++M;M<V;){switch(h=s.charCodeAt(M)){case 123:v++;break;case 125:v--;break;case 47:switch(h=s.charCodeAt(M+1)){case 42:case 47:e:{for(L=M+1;L<F;++L)switch(s.charCodeAt(L)){case 47:if(42===h&&42===s.charCodeAt(L-1)&&M+2!==L){M=L+1;break e}break;case 10:if(47===h){M=L+1;break e}}M=L}}break;case 91:h++;case 40:h++;case 34:case 39:for(;M++<F&&s.charCodeAt(M)!==h;);}if(0===v)break;M++}switch(v=s.substring(B,M),0===p&&(p=(U=U.replace(c,"").trim()).charCodeAt(0)),p){case 64:switch(0<D&&(U=U.replace(f,"")),h=U.charCodeAt(1)){case 100:case 109:case 115:case 45:D=r;break;default:D=R}if(B=(v=t(r,D,v,h,d+1)).length,0<I&&(_=u(3,v,D=n(R,U,z),r,O,C,B,h,d,l),U=D.join(""),void 0!==_&&0===(B=(v=_.trim()).length)&&(h=0,v="")),0<B)switch(h){case 115:U=U.replace(w,a);case 100:case 109:case 45:v=U+"{"+v+"}";break;case 107:v=(U=U.replace(g,"$1 $2"))+"{"+v+"}",v=1===P||2===P&&i("@"+v,3)?"@-webkit-"+v+"@"+v:"@"+v;break;default:v=U+v,112===l&&($+=v,v="")}else v="";break;default:v=t(r,n(r,U,z),v,l,d+1)}q+=v,v=z=D=L=p=0,U="",h=s.charCodeAt(++M);break;case 125:case 59:if(1<(B=(U=(0<D?U.replace(f,""):U).trim()).length))switch(0===L&&(p=U.charCodeAt(0),45===p||96<p&&123>p)&&(B=(U=U.replace(" ",":")).length),0<I&&void 0!==(_=u(1,U,r,e,O,C,$.length,l,d,l))&&0===(B=(U=_.trim()).length)&&(U="\0\0"),p=U.charCodeAt(0),h=U.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){W+=U+s.charAt(M);break}default:58!==U.charCodeAt(B-1)&&($+=o(U,p,h,U.charCodeAt(2)))}z=D=L=p=0,U="",h=s.charCodeAt(++M)}}switch(h){case 13:case 10:47===S?S=0:0===1+p&&107!==l&&0<U.length&&(D=1,U+="\0"),0<I*j&&u(0,U,r,e,O,C,$.length,l,d,l),C=1,O++;break;case 59:case 125:if(0===S+x+E+k){C++;break}default:switch(C++,m=s.charAt(M),h){case 9:case 32:if(0===x+k+S)switch(A){case 44:case 58:case 9:case 32:m="";break;default:32!==h&&(m=" ")}break;case 0:m="\\0";break;case 12:m="\\f";break;case 11:m="\\v";break;case 38:0===x+S+k&&(D=z=1,m="\f"+m);break;case 108:if(0===x+S+k+T&&0<L)switch(M-L){case 2:112===A&&58===s.charCodeAt(M-3)&&(T=A);case 8:111===N&&(T=N)}break;case 58:0===x+S+k&&(L=M);break;case 44:0===S+E+x+k&&(D=1,m+="\r");break;case 34:case 39:0===S&&(x=x===h?0:0===x?h:x);break;case 91:0===x+S+E&&k++;break;case 93:0===x+S+E&&k--;break;case 41:0===x+S+k&&E--;break;case 40:if(0===x+S+k){if(0===p)switch(2*A+3*N){case 533:break;default:p=1}E++}break;case 64:0===S+E+x+k+L+v&&(v=1);break;case 42:case 47:if(!(0<x+k+E))switch(S){case 0:switch(2*h+3*s.charCodeAt(M+1)){case 235:S=47;break;case 220:B=M,S=42}break;case 42:47===h&&42===A&&B+2!==M&&(33===s.charCodeAt(B+2)&&($+=s.substring(B,M+1)),m="",S=0)}}0===S&&(U+=m)}N=A,A=h,M++}if(0<(B=$.length)){if(D=r,0<I&&void 0!==(_=u(2,$,D,e,O,C,B,l,d,l))&&0===($=_).length)return W+$+q;if($=D.join(",")+"{"+$+"}",0!=P*T){switch(2!==P||i($,2)||(T=0),T){case 111:$=$.replace(b,":-moz-$1")+$;break;case 112:$=$.replace(y,"::-webkit-input-$1")+$.replace(y,"::-moz-$1")+$.replace(y,":-ms-input-$1")+$}T=0}}return W+$+q}function n(e,t,n){var o=t.trim().split(v);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var u=0;for(e=0===a?"":e[0]+" ";u<i;++u)t[u]=r(e,t[u],n).trim();break;default:var s=u=0;for(t=[];u<i;++u)for(var l=0;l<a;++l)t[s++]=r(e[l]+" ",o[u],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(m,"$1"+e.trim());case 58:return e.trim()+t.replace(m,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(m,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var a=e+";",u=2*t+3*n+4*r;if(944===u){e=a.indexOf(":",9)+1;var s=a.substring(e,a.length-1).trim();return s=a.substring(0,e).trim()+s+";",1===P||2===P&&i(s,1)?"-webkit-"+s+s:s}if(0===P||2===P&&!i(a,1))return a;switch(u){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(A,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(s=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+s+a;case 1005:return p.test(a)?a.replace(d,":-webkit-")+a.replace(d,":-moz-")+a:a;case 1e3:switch(t=(s=a.substring(13).trim()).indexOf("-")+1,s.charCodeAt(0)+s.charCodeAt(t)){case 226:s=a.replace(_,"tb");break;case 232:s=a.replace(_,"tb-rl");break;case 220:s=a.replace(_,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+s+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,u=(s=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|s.charCodeAt(7))){case 203:if(111>s.charCodeAt(8))break;case 115:a=a.replace(s,"-webkit-"+s)+";"+a;break;case 207:case 102:a=a.replace(s,"-webkit-"+(102<u?"inline-":"")+"box")+";"+a.replace(s,"-webkit-"+s)+";"+a.replace(s,"-ms-"+s+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return s=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+s+"-ms-flex-"+s+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(S,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(S,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===x.test(e))return 115===(s=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):a.replace(s,"-webkit-"+s)+a.replace(s,"-moz-"+s.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+r&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),L(2!==t?r:r.replace(E,"$1"),n,t)}function a(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function u(e,t,n,r,o,i,a,u,s,c){for(var f,d=0,p=t;d<I;++d)switch(f=N[d].call(l,e,p,n,r,o,i,a,u,s,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function s(e){return void 0!==(e=e.prefix)&&(L=null,e?"function"!=typeof e?P=1:(P=2,L=e):P=0),s}function l(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<I){var o=u(-1,n,r,r,O,C,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var i=t(R,r,n,0,0);return 0<I&&void 0!==(o=u(-2,i,r,r,O,C,i.length,0,0,0))&&(i=o),T=0,C=O=1,i}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,v=/,\r+?/g,m=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,y=/::(place)/g,b=/:(read-only)/g,_=/[svh]\w+-[tblr]{2}/,w=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,S=/-self|flex-/g,E=/[^]*?(:[rp][el]a[\w-]+)[^]*/,x=/stretch|:\s*\w+\-(?:conte|avail)/,A=/([^-])(image-set\()/,C=1,O=1,T=0,P=1,R=[],N=[],I=0,L=null,j=0;return l.use=function e(t){switch(t){case void 0:case null:I=N.length=0;break;default:if("function"==typeof t)N[I++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else j=0|!!t}return e},l.set=s,void 0!==e&&s(e),l},So={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Eo=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const xo=(Ao={},function(e){return void 0===Ao[e]&&(Ao[e]=(t=e,Eo.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91)),Ao[e];var t});var Ao,Co=n(679),Oo=n.n(Co);function To(){return(To=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var Po=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},Ro=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,bo.typeOf)(e)},No=Object.freeze([]),Io=Object.freeze({});function Lo(e){return"function"==typeof e}function jo(e){return e.displayName||e.name||"Component"}function Mo(e){return e&&"string"==typeof e.styledComponentId}var Do="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",zo="undefined"!=typeof window&&"HTMLElement"in window,Bo=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY);function Vo(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var Fo=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&Vo(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var a=this.indexOfGroup(e+1),u=0,s=t.length;u<s;u++)this.tag.insertRule(a,t[u])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),Uo=new Map,$o=new Map,qo=1,Wo=function(e){if(Uo.has(e))return Uo.get(e);for(;$o.has(qo);)qo++;var t=qo++;return Uo.set(e,t),$o.set(t,e),t},Ho=function(e){return $o.get(e)},Ko=function(e,t){Uo.set(e,t),$o.set(t,e)},Qo="style["+Do+'][data-styled-version="5.2.1"]',Go=new RegExp("^"+Do+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),Yo=function(e,t,n){for(var r,o=n.split(","),i=0,a=o.length;i<a;i++)(r=o[i])&&e.registerName(t,r)},Jo=function(e,t){for(var n=t.innerHTML.split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var a=n[o].trim();if(a){var u=a.match(Go);if(u){var s=0|parseInt(u[1],10),l=u[2];0!==s&&(Ko(l,s),Yo(e,l,u[3]),e.getTag().insertRules(s,r)),r.length=0}else r.push(a)}}},Xo=function(){return n.nc},Zo=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(Do))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute(Do,"active"),r.setAttribute("data-styled-version","5.2.1");var a=Xo();return a&&r.setAttribute("nonce",a),n.insertBefore(r,i),r},ei=function(){function e(e){var t=this.element=Zo(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}Vo(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),ti=function(){function e(e){var t=this.element=Zo(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ni=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),ri=zo,oi={isServer:!zo,useCSSOMInjection:!Bo},ii=function(){function e(e,t,n){void 0===e&&(e=Io),void 0===t&&(t={}),this.options=To({},oi,{},e),this.gs=t,this.names=new Map(n),!this.options.isServer&&zo&&ri&&(ri=!1,function(e){for(var t=document.querySelectorAll(Qo),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(Do)&&(Jo(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return Wo(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(To({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new ni(o):r?new ei(o):new ti(o),new Fo(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(Wo(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(Wo(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(Wo(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=Ho(o);if(void 0!==i){var a=e.names.get(i),u=t.getGroup(o);if(void 0!==a&&0!==u.length){var s=Do+".g"+o+'[id="'+i+'"]',l="";void 0!==a&&a.forEach((function(e){e.length>0&&(l+=e+",")})),r+=""+u+s+'{content:"'+l+'"}/*!sc*/\n'}}}return r}(this)},e}(),ai=/(a)(d)/gi,ui=function(e){return String.fromCharCode(e+(e>25?39:97))};function si(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=ui(t%52)+n;return(ui(t%52)+n).replace(ai,"$1-$2")}var li=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ci=function(e){return li(5381,e)};function fi(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(Lo(n)&&!Mo(n))return!1}return!0}var di=ci("5.2.1"),pi=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&fi(e),this.componentId=t,this.baseHash=li(di,t),this.baseStyle=n,ii.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var i=Pi(this.rules,e,t,n).join(""),a=si(li(this.baseHash,i.length)>>>0);if(!t.hasNameForId(r,a)){var u=n(i,"."+a,void 0,r);t.insertRules(r,a,u)}o.push(a),this.staticRulesId=a}else{for(var s=this.rules.length,l=li(this.baseHash,n.hash),c="",f=0;f<s;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=Pi(d,e,t,n),h=Array.isArray(p)?p.join(""):p;l=li(l,h+f),c+=h}}if(c){var v=si(l>>>0);if(!t.hasNameForId(r,v)){var m=n(c,"."+v,void 0,r);t.insertRules(r,v,m)}o.push(v)}}return o.join(" ")},e}(),hi=/^\s*\/\/.*$/gm,vi=[":","[",".","#"];function mi(e){var t,n,r,o,i=void 0===e?Io:e,a=i.options,u=void 0===a?Io:a,s=i.plugins,l=void 0===s?No:s,c=new ko(u),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,u,s,l,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===l)return r+"/*|*/";break;case 3:switch(l){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,i){return 0===r&&vi.includes(i[n.length])||i.match(o)?e:"."+t};function h(e,i,a,u){void 0===u&&(u="&");var s=e.replace(hi,""),l=i&&a?a+" "+i+" { "+s+" }":s;return t=u,n=i,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),c(a||!i?"":i,l)}return c.use([].concat(l,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=l.length?l.reduce((function(e,t){return t.name||Vo(15),li(e,t.name)}),5381).toString():"",h}var gi=t.createContext(),yi=(gi.Consumer,t.createContext()),bi=(yi.Consumer,new ii),_i=mi();function wi(){return(0,t.useContext)(gi)||bi}function ki(e){var n=(0,t.useState)(e.stylisPlugins),r=n[0],o=n[1],i=wi(),a=(0,t.useMemo)((function(){var t=i;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),u=(0,t.useMemo)((function(){return mi({options:{prefix:!e.disableVendorPrefixes},plugins:r})}),[e.disableVendorPrefixes,r]);return(0,t.useEffect)((function(){wo()(r,e.stylisPlugins)||o(e.stylisPlugins)}),[e.stylisPlugins]),t.createElement(gi.Provider,{value:a},t.createElement(yi.Provider,{value:u},e.children))}var Si=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=_i);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return Vo(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=_i),this.name+e.hash},e}(),Ei=/([A-Z])/,xi=/([A-Z])/g,Ai=/^ms-/,Ci=function(e){return"-"+e.toLowerCase()};function Oi(e){return Ei.test(e)?e.replace(xi,Ci).replace(Ai,"-ms-"):e}var Ti=function(e){return null==e||!1===e||""===e};function Pi(e,t,n,r){if(Array.isArray(e)){for(var o,i=[],a=0,u=e.length;a<u;a+=1)""!==(o=Pi(e[a],t,n,r))&&(Array.isArray(o)?i.push.apply(i,o):i.push(o));return i}return Ti(e)?"":Mo(e)?"."+e.styledComponentId:Lo(e)?"function"!=typeof(s=e)||s.prototype&&s.prototype.isReactComponent||!t?e:Pi(e(t),t,n,r):e instanceof Si?n?(e.inject(n,r),e.getName(r)):e:Ro(e)?function e(t,n){var r,o,i=[];for(var a in t)t.hasOwnProperty(a)&&!Ti(t[a])&&(Ro(t[a])?i.push.apply(i,e(t[a],a)):Lo(t[a])?i.push(Oi(a)+":",t[a],";"):i.push(Oi(a)+": "+(r=a,(null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in So?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(i,["}"]):i}(e):e.toString();var s}function Ri(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return Lo(e)||Ro(e)?Pi(Po(No,[e].concat(n))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Pi(Po(e,n))}new Set;var Ni=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,Ii=/(^-|-$)/g;function Li(e){return e.replace(Ni,"-").replace(Ii,"")}var ji=function(e){return si(ci(e)>>>0)};function Mi(e){return"string"==typeof e&&!0}var Di=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},zi=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Bi(e,t,n){var r=e[n];Di(t)&&Di(r)?Vi(r,t):e[n]=t}function Vi(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var a=i[o];if(Di(a))for(var u in a)zi(u)&&Bi(e,a[u],u)}return e}var Fi=t.createContext();Fi.Consumer;var Ui={};function $i(e,n,r){var o=Mo(e),i=!Mi(e),a=n.attrs,u=void 0===a?No:a,s=n.componentId,l=void 0===s?function(e,t){var n="string"!=typeof e?"sc":Li(e);Ui[n]=(Ui[n]||0)+1;var r=n+"-"+ji("5.2.1"+n+Ui[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):s,c=n.displayName,f=void 0===c?function(e){return Mi(e)?"styled."+e:"Styled("+jo(e)+")"}(e):c,d=n.displayName&&n.componentId?Li(n.displayName)+"-"+n.componentId:n.componentId||l,p=o&&e.attrs?Array.prototype.concat(e.attrs,u).filter(Boolean):u,h=n.shouldForwardProp;o&&e.shouldForwardProp&&(h=n.shouldForwardProp?function(t,r){return e.shouldForwardProp(t,r)&&n.shouldForwardProp(t,r)}:e.shouldForwardProp);var v,m=new pi(r,d,o?e.componentStyle:void 0),g=m.isStatic&&0===u.length,y=function(e,n){return function(e,n,r,o){var i=e.attrs,a=e.componentStyle,u=e.defaultProps,s=e.foldedComponentIds,l=e.shouldForwardProp,c=e.styledComponentId,f=e.target,d=function(e,t,n){void 0===e&&(e=Io);var r=To({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,a=e;for(t in Lo(a)&&(a=a(r)),a)r[t]=o[t]="className"===t?(n=o[t],i=a[t],n&&i?n+" "+i:n||i):a[t]})),[r,o]}(function(e,t,n){return void 0===n&&(n=Io),e.theme!==n.theme&&e.theme||t||n.theme}(n,(0,t.useContext)(Fi),u)||Io,n,i),p=d[0],h=d[1],v=function(e,n,r,o){var i=wi(),a=(0,t.useContext)(yi)||_i;return n?e.generateAndInjectStyles(Io,i,a):e.generateAndInjectStyles(r,i,a)}(a,o,p),m=r,g=h.$as||n.$as||h.as||n.as||f,y=Mi(g),b=h!==n?To({},n,{},h):n,_={};for(var w in b)"$"!==w[0]&&"as"!==w&&("forwardedAs"===w?_.as=b[w]:(l?l(w,xo):!y||xo(w))&&(_[w]=b[w]));return n.style&&h.style!==n.style&&(_.style=To({},n.style,{},h.style)),_.className=Array.prototype.concat(s,c,v!==c?v:null,n.className,h.className).filter(Boolean).join(" "),_.ref=m,(0,t.createElement)(g,_)}(v,e,n,g)};return y.displayName=f,(v=t.forwardRef(y)).attrs=p,v.componentStyle=m,v.displayName=f,v.shouldForwardProp=h,v.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):No,v.styledComponentId=d,v.target=o?e.target:e,v.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),i=t&&t+"-"+(Mi(e)?e:Li(jo(e)));return $i(e,To({},o,{attrs:p,componentId:i}),r)},Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Vi({},e.defaultProps,t):t}}),v.toString=function(){return"."+v.styledComponentId},i&&Oo()(v,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),v}var qi=function(e){return function e(t,n,r){if(void 0===r&&(r=Io),!(0,bo.isValidElementType)(n))return Vo(1,String(n));var o=function(){return t(n,r,Ri.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,To({},r,{},o))},o.attrs=function(o){return e(t,n,To({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}($i,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){qi[e]=qi(e)})),function(){var e=function(e,t){this.rules=e,this.componentId=t,this.isStatic=fi(e),ii.registerId(this.componentId+1)}.prototype;e.createStyles=function(e,t,n,r){var o=r(Pi(this.rules,t,n,r).join(""),""),i=this.componentId+e;n.insertRules(i,i,o)},e.removeStyles=function(e,t){t.clearRules(this.componentId+e)},e.renderStyles=function(e,t,n,r){e>2&&ii.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)}}(),function(){var e=function(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString(),n=Xo();return"<style "+[n&&'nonce="'+n+'"',Do+'="true"','data-styled-version="5.2.1"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?Vo(2):e._emitSheetCSS()},this.getStyleElement=function(){var n;if(e.sealed)return Vo(2);var r=((n={})[Do]="",n["data-styled-version"]="5.2.1",n.dangerouslySetInnerHTML={__html:e.instance.toString()},n),o=Xo();return o&&(r.nonce=o),[t.createElement("style",To({},r,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0},this.instance=new ii({isServer:!0}),this.sealed=!1}.prototype;e.collectStyles=function(e){return this.sealed?Vo(2):t.createElement(ki,{sheet:this.instance},e)},e.interleaveWithNodeStream=function(e){return Vo(3)}}();const Wi=qi,Hi=lo({key:"installationState",default:null}),Ki=(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ri.apply(void 0,[e].concat(n)).join(""),i=ji(o);return new Si(i,o)})`
  from {
    margin-right: -50px;
    transform: none;
  }

  50% {
    margin-right: 0px;
    transform: none;
  }
  40% {
    margin-right: 0px;
    transform: none;
  }
  70% {
    transform:rotate3d(0, 1, 0, 180deg);
    background-color: white !important;
  }
  100% {
    margin-right: 0px;
    transform: rotate3d(0);
  }

`,Qi=Wi.div`
  display: contents;
  color: black;
  margin: -50px;
  fill: black;
  //background-color: rgba(255, 255, 255, 0.1);
  align-items: center;
  padding: 5px 50px 5px 10px;
  height: 32px;
  button {
    position: fixed;
    bottom: 10px;
    right: 10px;
    margin-right: -50px;
    animation-name: ${Ki};
    animation-duration: 1000ms;
    animation-delay: 1s;
    animation-fill-mode: forwards;
    animation-timing-function: cubic-bezier(0.22, 0.61, 0.36, 1);
  }
`;function Gi({show:e}){const[n,r]=fo(Hi),[o,i]=(0,t.useState)(!1);return!n||o?null:t.createElement(Qi,null,t.createElement("button",{id:"install-button",className:"update text-black border-0 bg-yellow-500 rounded ml-2 flex flex-col items-center p-1",onClick:async function(){if(n){n.prompt();const{outcome:e}=await n.userChoice;vo(`User response to the install prompt: ${e}`),r(null),i(!0)}}},t.createElement("svg",{className:"fill-current",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},t.createElement("path",{d:"M0 .5h24v24H0z",fill:"none"}),t.createElement("path",{d:"M12 16.5l4-4h-3v-9h-2v9H8l4 4zm9-13h-6v1.99h6v14.03H3V5.49h6V3.5H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-14c0-1.1-.9-2-2-2z"}))))}const Yi=lo({key:"sideNavState",default:{expanded:!1}});function Ji(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function Xi(e){return!!e&&!!e[Da]}function Zi(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[Ma]||!!e.constructor[Ma]||oa(e)||ia(e))}function ea(e,t,n){void 0===n&&(n=!1),0===ta(e)?(n?Object.keys:za)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function ta(e){var t=e[Da];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:oa(e)?2:ia(e)?3:0}function na(e,t){return 2===ta(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function ra(e,t,n){var r=ta(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function oa(e){return Na&&e instanceof Map}function ia(e){return Ia&&e instanceof Set}function aa(e){return e.o||e.t}function ua(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Ba(e);delete t[Da];for(var n=za(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function sa(e,t){return void 0===t&&(t=!1),ca(e)||Xi(e)||!Zi(e)||(ta(e)>1&&(e.set=e.add=e.clear=e.delete=la),Object.freeze(e),t&&ea(e,(function(e,t){return sa(t,!0)}),!0)),e}function la(){Ji(2)}function ca(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function fa(e){var t=Va[e];return t||Ji(18,e),t}function da(){return Pa}function pa(e,t){t&&(fa("Patches"),e.u=[],e.s=[],e.v=t)}function ha(e){va(e),e.p.forEach(ga),e.p=null}function va(e){e===Pa&&(Pa=e.l)}function ma(e){return Pa={p:[],l:Pa,h:e,m:!0,_:0}}function ga(e){var t=e[Da];0===t.i||1===t.i?t.j():t.g=!0}function ya(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.O||fa("ES5").S(t,e,r),r?(n[Da].P&&(ha(t),Ji(4)),Zi(e)&&(e=ba(t,e),t.l||wa(t,e)),t.u&&fa("Patches").M(n[Da],e,t.u,t.s)):e=ba(t,n,[]),ha(t),t.u&&t.v(t.u,t.s),e!==ja?e:void 0}function ba(e,t,n){if(ca(t))return t;var r=t[Da];if(!r)return ea(t,(function(o,i){return _a(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return wa(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=ua(r.k):r.o;ea(3===r.i?new Set(o):o,(function(t,i){return _a(e,r,o,t,i,n)})),wa(e,o,!1),n&&e.u&&fa("Patches").R(r,n,e.u,e.s)}return r.o}function _a(e,t,n,r,o,i){if(Xi(o)){var a=ba(e,o,i&&t&&3!==t.i&&!na(t.D,r)?i.concat(r):void 0);if(ra(n,r,a),!Xi(a))return;e.m=!1}if(Zi(o)&&!ca(o)){if(!e.h.N&&e._<1)return;ba(e,o),t&&t.A.l||wa(e,o)}}function wa(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&sa(t,n)}function ka(e,t){var n=e[Da];return(n?aa(n):e)[t]}function Sa(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function Ea(e){e.P||(e.P=!0,e.l&&Ea(e.l))}function xa(e){e.o||(e.o=ua(e.t))}function Aa(e,t,n){var r=oa(t)?fa("MapSet").T(t,n):ia(t)?fa("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:da(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=Fa;n&&(o=[r],i=Ua);var a=Proxy.revocable(o,i),u=a.revoke,s=a.proxy;return r.k=s,r.j=u,s}(t,n):fa("ES5").J(t,n);return(n?n.A:da()).p.push(r),r}function Ca(e){return Xi(e)||Ji(22,e),function e(t){if(!Zi(t))return t;var n,r=t[Da],o=ta(t);if(r){if(!r.P&&(r.i<4||!fa("ES5").K(r)))return r.t;r.I=!0,n=Oa(t,o),r.I=!1}else n=Oa(t,o);return ea(n,(function(t,o){r&&function(e,t){return 2===ta(e)?e.get(t):e[t]}(r.t,t)===o||ra(n,t,e(o))})),3===o?new Set(n):n}(e)}function Oa(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return ua(e)}var Ta,Pa,Ra="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Na="undefined"!=typeof Map,Ia="undefined"!=typeof Set,La="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,ja=Ra?Symbol.for("immer-nothing"):((Ta={})["immer-nothing"]=!0,Ta),Ma=Ra?Symbol.for("immer-draftable"):"__$immer_draftable",Da=Ra?Symbol.for("immer-state"):"__$immer_state",za=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),Ba=Object.getOwnPropertyDescriptors||function(e){var t={};return za(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Va={},Fa={get:function(e,t){if(t===Da)return e;var n=aa(e);if(!na(n,t))return function(e,t,n){var r,o=Sa(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!Zi(r)?r:r===ka(e.t,t)?(xa(e),e.o[t]=Aa(e.A.h,r,e)):r},has:function(e,t){return t in aa(e)},ownKeys:function(e){return Reflect.ownKeys(aa(e))},set:function(e,t,n){var r=Sa(aa(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=ka(aa(e),t),i=null==o?void 0:o[Da];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,o)&&(void 0!==n||na(e.t,t)))return!0;xa(e),Ea(e)}return e.o[t]=n,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==ka(e.t,t)||t in e.t?(e.D[t]=!1,xa(e),Ea(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=aa(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){Ji(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){Ji(12)}},Ua={};ea(Fa,(function(e,t){Ua[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Ua.deleteProperty=function(e,t){return Fa.deleteProperty.call(this,e[0],t)},Ua.set=function(e,t,n){return Fa.set.call(this,e[0],t,n,e[0])};var $a=new(function(){function e(e){this.O=La,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var t=e.prototype;return t.produce=function(e,t,n){if("function"==typeof e&&"function"!=typeof t){var r=t;t=e;var o=this;return function(e){var n=this;void 0===e&&(e=r);for(var i=arguments.length,a=Array(i>1?i-1:0),u=1;u<i;u++)a[u-1]=arguments[u];return o.produce(e,(function(e){var r;return(r=t).call.apply(r,[n,e].concat(a))}))}}var i;if("function"!=typeof t&&Ji(6),void 0!==n&&"function"!=typeof n&&Ji(7),Zi(e)){var a=ma(this),u=Aa(this,e,void 0),s=!0;try{i=t(u),s=!1}finally{s?ha(a):va(a)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return pa(a,n),ya(e,a)}),(function(e){throw ha(a),e})):(pa(a,n),ya(i,a))}if(!e||"object"!=typeof e){if((i=t(e))===ja)return;return void 0===i&&(i=e),this.N&&sa(i,!0),i}Ji(21,e)},t.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},t.createDraft=function(e){Zi(e)||Ji(8),Xi(e)&&(e=Ca(e));var t=ma(this),n=Aa(this,e,void 0);return n[Da].C=!0,va(t),n},t.finishDraft=function(e,t){var n=(e&&e[Da]).A;return pa(n,t),ya(void 0,n)},t.setAutoFreeze=function(e){this.N=e},t.setUseProxies=function(e){e&&!La&&Ji(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var o=fa("Patches").$;return Xi(e)?o(e,t):this.produce(e,(function(e){return o(e,t.slice(n+1))}))},e}()),qa=$a.produce;$a.produceWithPatches.bind($a),$a.setAutoFreeze.bind($a),$a.setUseProxies.bind($a),$a.applyPatches.bind($a),$a.createDraft.bind($a),$a.finishDraft.bind($a);const Wa=qa;function Ha(e){const[t,n]=fo(e);return[t,e=>n((t=>Wa(t,(t=>e(t)))))]}function Ka(){return t.createElement("svg",{className:"fill-current",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},t.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),t.createElement("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}))}function Qa(){return t.createElement("svg",{className:"fill-current",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},t.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),t.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}))}const Ga=lo({key:"clapsState",default:null}),Ya=Wi.button`
  color: white;
  outline: none !important;
`;function Ja(){const[e,n]=Ha(Yi);return t.createElement(Ya,{onClick:function(){n((e=>{e.expanded=!e.expanded}))},className:"min-height-hide","data-testid":"side-nav-button"},e.expanded?t.createElement(Ka,null):t.createElement(Qa,null))}const Xa=Wi.div`
  position: fixed;
  overflow: hidden;
  width: 100vw;
  top: 50px;
  left: 0px;
  background-color: white;
  bottom: 0;
  margin-left: -100vw;
  padding: 10px;
  color: gray;
  z-index: 20;
  transition-property: all;
  transition-duration: 200ms;
  transition-timing-function: ease-out;

  .version-header {
    font-weight: normal;
    font-size: 0.8rem;
    .version {
      padding-left: 0.5rem;
    }
  }
  ${e=>e.expanded&&Ri`
      margin-left: 0px;
    `}
`;function Za(){const e=co(Yi);return co(Ga),t.createElement(Xa,{className:"min-height-hide",expanded:e.expanded,"data-testid":"side-nav"},t.createElement("div",{className:"version-header"},"Version:",t.createElement("span",{id:"version",className:"version"},"1.0.58-20210309222647")),t.createElement("ul",null,t.createElement("li",{className:"li"})))}const eu=t.forwardRef((({clapping:e,width:n,height:r},o)=>t.createElement("svg",{className:"icon fill-current",version:"1.1",id:"icon",x:"0px",y:"0px",viewBox:"0 0 297.221 297.221","data-clapping":e,ref:o,style:{enableBackground:"new 0 0 297.221 297.221",width:n,height:r}},t.createElement("g",null,t.createElement("path",{d:"M283.762,32.835c2.705-1.913,3.346-5.658,1.432-8.363c-1.914-2.705-5.657-3.347-8.363-1.432l-14.984,10.602 c-2.705,1.913-3.346,5.658-1.432,8.363c1.169,1.652,3.022,2.535,4.902,2.535c1.198,0,2.408-0.358,3.461-1.104L283.762,32.835z"}),t.createElement("path",{d:"M244.064,29.387c0.695,0.262,1.409,0.386,2.11,0.386c2.428,0,4.713-1.484,5.617-3.891l6.46-17.182 c1.166-3.101-0.403-6.561-3.505-7.727c-3.101-1.167-6.562,0.404-7.728,3.505l-6.46,17.182 C239.393,24.761,240.962,28.221,244.064,29.387z"}),t.createElement("path",{d:"M291.223,55.611c-0.041,0-0.082,0-0.124,0l-18.351,0.154c-3.313,0.067-5.944,2.605-5.877,5.918 c0.066,3.271,2.739,5.928,5.997,5.928c0.041,0,0.082,0,0.124,0l18.351-0.313c3.313-0.068,5.944-2.732,5.877-6.045 C297.154,57.982,294.481,55.611,291.223,55.611z"}),t.createElement("path",{d:"M254.2,147.154c-3.073-2.433-6.711-4.089-10.557-4.867c0.254-0.46,0.491-0.928,0.715-1.403l2.408-2.408 c9.274-9.275,10.248-23.874,2.264-33.961c-3.769-4.761-9.001-7.925-14.812-9.106c0.415-0.764,0.783-1.545,1.117-2.338 c6.316-9.149,6.213-21.445-0.782-30.283c-3.77-4.764-9.004-7.938-14.818-9.117c4.8-8.826,4.187-19.826-2.225-27.925 c-4.848-6.125-12.109-9.639-19.923-9.639c-6.257,0-12.16,2.236-16.792,6.33c-0.701-3.979-2.363-7.822-5.012-11.169 c-4.849-6.125-12.11-9.638-19.924-9.639l0,0c-6.79,0-13.164,2.635-17.947,7.418l-60.84,60.84l-0.232-8.12 c-0.107-13.83-11.392-25.049-25.247-25.049c-13.604,0-24.729,10.815-25.229,24.298l-12.146,88.306l-9.983,11.604 c-5.983,6.957-5.582,17.481,0.915,23.962L19.987,199.7c-4.574,6.881-3.773,16.266,2.206,22.23l69.667,69.557 c3.329,3.321,7.748,5.148,12.446,5.148c3.857,0,7.668-1.295,10.729-3.645l14.544-11.168c13.991-3.305,29.416-10.813,45.874-22.33 c14.371-10.058,29.962-23.46,46.337-39.836l34.631-34.631c5.107-5.107,7.795-12.188,7.375-19.427 C263.376,158.371,259.879,151.649,254.2,147.154z M188.124,32.009c2.603-2.602,6.032-3.903,9.462-3.903 c3.915,0,7.831,1.695,10.515,5.086c4.256,5.377,3.51,13.18-1.339,18.028l-6.177,6.176c-0.952,0.635-1.879,1.314-2.747,2.083 c-0.701-3.98-2.364-7.823-5.013-11.169c-3.257-4.114-7.604-7.043-12.475-8.527L188.124,32.009z M146.397,17.532 c2.602-2.602,6.032-3.903,9.462-3.903c3.916,0.001,7.831,1.696,10.515,5.087c4.256,5.377,3.51,13.179-1.339,18.027l-70.919,70.186 l-0.233-8.119c-0.061-7.825-3.7-14.812-9.356-19.405L146.397,17.532z M13.624,176.391c-2.082-2.078-2.209-5.41-0.291-7.64 l12.281-14.277c0.006-0.007,0.011-0.017,0.012-0.026l12.72-92.483c0-7.286,5.961-13.247,13.247-13.247 c7.286,0,13.248,5.961,13.248,13.247L65.186,74c-11.988,1.646-21.322,11.733-21.78,24.057l-12.145,88.307l-3.533,4.108 L13.624,176.391z M247.935,176.539l-34.63,34.631c-29.577,29.577-60.494,53.318-87.653,59.237 c-0.825,0.181-1.601,0.528-2.271,1.043l-15.655,12.022c-1.014,0.779-2.219,1.162-3.419,1.162c-1.443,0-2.88-0.555-3.968-1.641 l-69.671-69.56c-2.083-2.077-2.21-5.409-0.291-7.64l12.28-14.276c0.007-0.008,0.011-0.017,0.013-0.026l12.719-92.483 c0-7.286,5.962-13.248,13.248-13.248c7.286,0,13.247,5.962,13.247,13.248l0.626,21.824c0.104,3.626,3.087,5.987,6.191,5.987 c1.514,0,3.058-0.563,4.309-1.813l70.431-70.431c2.603-2.603,6.031-3.903,9.462-3.903c3.915,0,7.831,1.695,10.515,5.086 c4.256,5.377,3.509,13.18-1.34,18.028l-48.518,48.518c-2.519,2.52-2.519,6.603,0,9.121l0,0c1.275,1.275,2.946,1.913,4.617,1.913 s3.343-0.638,4.617-1.913l62.374-62.373c2.602-2.603,6.031-3.903,9.462-3.903c3.915,0.001,7.831,1.696,10.515,5.087 c4.256,5.376,3.509,13.179-1.34,18.027l-62.081,62.081c-2.553,2.554-2.553,6.692,0,9.246c1.258,1.258,2.906,1.887,4.556,1.887 c1.648,0,3.297-0.629,4.555-1.887l48.811-48.81c2.603-2.603,6.032-3.903,9.462-3.903c3.915,0,7.831,1.695,10.515,5.087 c4.256,5.376,3.509,13.179-1.34,18.027l-48.349,48.35c-2.612,2.611-2.612,6.847,0,9.458l0.078,0.079 c1.207,1.207,2.789,1.81,4.37,1.81c1.582,0,3.164-0.603,4.37-1.81l29.974-29.974c2.701-2.701,6.317-4.129,9.921-4.129 c2.867,0,5.726,0.904,8.107,2.789C253.114,161.598,253.508,170.967,247.935,176.539z"})),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null),t.createElement("g",null)))),tu=Wi.div`
  height: 50px;
  width: 100%;
  background-color: #323030;
  color: white;
  display: flex;
  align-items: center;
  justify-content: space-between;
  font-weight: 100;
  padding: 0.5rem 0.5rem 0.5rem 1rem;
  font-size: 1.5rem;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  .sub-header {
    padding-left: 0.5rem;
    font-size: 0.8rem;
    font-weight: 100;
  }

  @media (max-width: 372px) {
    .sub-header {
      display: none;
    }
  }

  .right-section {
    display: contents;
  }
  .counter-icon {
    transform: rotate(-45deg);
    margin-bottom: -2px;
  }
`;function nu(){const e=co(Ga);return t.createElement(tu,{className:"min-height-hide"},t.createElement("div",{className:"flex"},t.createElement(Ja,null),t.createElement("span",{className:"pl-4"},"Claptastic"),t.createElement("span",{className:"sub-header"},"by danyo1399")),t.createElement("div",{className:"right-section flex"},t.createElement("div",{className:"flex items-center pr-1"},t.createElement("span",{className:"px-2"},e?.total_rows||0),t.createElement("div",{className:"counter-icon"},t.createElement(eu,{width:"1.25rem"}))),t.createElement(Gi,null)))}var ru=n(483),ou=n.n(ru);const iu=n.p+"c3b5cf67cb0c07a63b8658aa76312ec4.mp3";var au=n(558),uu=n.n(au),su=n(340);su.v1,su.v3;const lu=su.v4;su.v5;var cu,fu,du=n(322),pu=n.n(du),hu=n(684),vu=n(105),mu=n.n(vu),gu=n(717),yu=n.n(gu),bu=n(187),_u=n.n(bu);function wu(e){return"$"+e}function ku(e){return e.substring(1)}function Su(){this._store={}}function Eu(e){if(this._store=new Su,e&&Array.isArray(e))for(var t=0,n=e.length;t<n;t++)this.add(e[t])}Su.prototype.get=function(e){var t=wu(e);return this._store[t]},Su.prototype.set=function(e,t){var n=wu(e);return this._store[n]=t,!0},Su.prototype.has=function(e){return wu(e)in this._store},Su.prototype.delete=function(e){var t=wu(e),n=t in this._store;return delete this._store[t],n},Su.prototype.forEach=function(e){for(var t=Object.keys(this._store),n=0,r=t.length;n<r;n++){var o=t[n];e(this._store[o],o=ku(o))}},Object.defineProperty(Su.prototype,"size",{get:function(){return Object.keys(this._store).length}}),Eu.prototype.add=function(e){return this._store.set(e,!0)},Eu.prototype.has=function(e){return this._store.has(e)},Eu.prototype.forEach=function(e){this._store.forEach((function(t,n){e(n)}))},Object.defineProperty(Eu.prototype,"size",{get:function(){return this._store.size}}),function(){if("undefined"==typeof Symbol||"undefined"==typeof Map||"undefined"==typeof Set)return!1;var e=Object.getOwnPropertyDescriptor(Map,Symbol.species);return e&&"get"in e&&Map[Symbol.species]===Map}()?(cu=Set,fu=Map):(cu=Eu,fu=Su);var xu,Au=Function.prototype.toString,Cu=Au.call(Object);function Ou(e){var t,n,r;if(!e||"object"!=typeof e)return e;if(Array.isArray(e)){for(t=[],n=0,r=e.length;n<r;n++)t[n]=Ou(e[n]);return t}if(e instanceof Date)return e.toISOString();if(function(e){return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer||"undefined"!=typeof Blob&&e instanceof Blob}(e))return function(e){if(e instanceof ArrayBuffer)return function(e){if("function"==typeof e.slice)return e.slice(0);var t=new ArrayBuffer(e.byteLength),n=new Uint8Array(t),r=new Uint8Array(e);return n.set(r),t}(e);var t=e.size,n=e.type;return"function"==typeof e.slice?e.slice(0,t,n):e.webkitSlice(0,t,n)}(e);if(!function(e){var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=t.constructor;return"function"==typeof n&&n instanceof n&&Au.call(n)==Cu}(e))return e;for(n in t={},e)if(Object.prototype.hasOwnProperty.call(e,n)){var o=Ou(e[n]);void 0!==o&&(t[n]=o)}return t}function Tu(e){var t=!1;return mu()((function(n){if(t)throw new Error("once called more than once");t=!0,e.apply(this,n)}))}function Pu(e){return mu()((function(t){t=Ou(t);var n=this,r="function"==typeof t[t.length-1]&&t.pop(),o=new Promise((function(r,o){var i;try{var a=Tu((function(e,t){e?o(e):r(t)}));t.push(a),(i=e.apply(n,t))&&"function"==typeof i.then&&r(i)}catch(e){o(e)}}));return r&&o.then((function(e){r(null,e)}),r),o}))}function Ru(e,t){return Pu(mu()((function(n){if(this._closed)return Promise.reject(new Error("database is closed"));if(this._destroyed)return Promise.reject(new Error("database is destroyed"));var r=this;return function(e,t,n){if(e.constructor.listeners("debug").length){for(var r=["api",e.name,t],o=0;o<n.length-1;o++)r.push(n[o]);e.constructor.emit("debug",r);var i=n[n.length-1];n[n.length-1]=function(n,r){var o=["api",e.name,t];o=o.concat(n?["error",n]:["success",r]),e.constructor.emit("debug",o),i(n,r)}}}(r,e,n),this.taskqueue.isReady?t.apply(this,n):new Promise((function(t,o){r.taskqueue.addTask((function(i){i?o(i):t(r[e].apply(r,n))}))}))})))}function Nu(e,t){for(var n={},r=0,o=t.length;r<o;r++){var i=t[r];i in e&&(n[i]=e[i])}return n}function Iu(e){return e}function Lu(e){return[{ok:e}]}function ju(e,t,n){var r=t.docs,o=new fu;r.forEach((function(e){o.has(e.id)?o.get(e.id).push(e):o.set(e.id,[e])}));var i=o.size,a=0,u=new Array(i);var s=[];o.forEach((function(e,t){s.push(t)}));var l=0;!function r(){if(!(l>=s.length)){var c=Math.min(l+6,s.length),f=s.slice(l,c);!function(s,l){s.forEach((function(s,c){var f=l+c,d=o.get(s),p=Nu(d[0],["atts_since","attachments"]);p.open_revs=d.map((function(e){return e.rev})),p.open_revs=p.open_revs.filter(Iu);var h=Iu;0===p.open_revs.length&&(delete p.open_revs,h=Lu),["revs","attachments","binary","ajax","latest"].forEach((function(e){e in t&&(p[e]=t[e])})),e.get(s,p,(function(e,t){var o,l,c,d;o=e?[{error:e}]:h(t),l=s,c=o,u[f]={id:l,docs:c},++a===i&&(d=[],u.forEach((function(e){e.docs.forEach((function(t){d.push({id:e.id,docs:[t]})}))})),n(null,{results:d})),r()}))}))}(f,l),l+=f.length}}()}try{localStorage.setItem("_pouch_check_localstorage",1),xu=!!localStorage.getItem("_pouch_check_localstorage")}catch(e){xu=!1}function Mu(){return xu}function Du(){_u().call(this),this._listeners={},function(e){Mu()&&addEventListener("storage",(function(t){e.emit(t.key)}))}(this)}function zu(e){if("undefined"!=typeof console&&"function"==typeof console[e]){var t=Array.prototype.slice.call(arguments,1);console[e].apply(console,t)}}function Bu(e){var t=0;return e||(t=2e3),function(e,t){var n=6e5;return e=parseInt(e,10)||0,(t=parseInt(t,10))!=t||t<=e?t=(e||1)<<1:t+=1,t>n&&(e=3e5,t=n),~~((t-e)*Math.random()+e)}(e,t)}function Vu(e,t){zu("info","The above "+e+" is totally normal. "+t)}yu()(Du,_u()),Du.prototype.addListener=function(e,t,n,r){if(!this._listeners[t]){var o=this,i=!1;this._listeners[t]=a,this.on(e,a)}function a(){if(o._listeners[t])if(i)i="waiting";else{i=!0;var e=Nu(r,["style","include_docs","attachments","conflicts","filter","doc_ids","view","since","query_params","binary","return_docs"]);n.changes(e).on("change",(function(e){e.seq>r.since&&!r.cancelled&&(r.since=e.seq,r.onChange(e))})).on("complete",(function(){"waiting"===i&&uu()(a),i=!1})).on("error",(function(){i=!1}))}}},Du.prototype.removeListener=function(e,t){t in this._listeners&&(_u().prototype.removeListener.call(this,e,this._listeners[t]),delete this._listeners[t])},Du.prototype.notifyLocalWindows=function(e){Mu()&&(localStorage[e]="a"===localStorage[e]?"b":"a")},Du.prototype.notify=function(e){this.emit(e),this.notifyLocalWindows(e)};var Fu="function"==typeof Object.assign?Object.assign:function(e){for(var t=Object(e),n=1;n<arguments.length;n++){var r=arguments[n];if(null!=r)for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t};function Uu(e,t,n){Error.call(this,n),this.status=e,this.name=t,this.message=n,this.error=!0}yu()(Uu,Error),Uu.prototype.toString=function(){return JSON.stringify({status:this.status,name:this.name,message:this.message,reason:this.reason})},new Uu(401,"unauthorized","Name or password is incorrect.");var $u=new Uu(400,"bad_request","Missing JSON list of 'docs'"),qu=new Uu(404,"not_found","missing"),Wu=new Uu(409,"conflict","Document update conflict"),Hu=new Uu(400,"bad_request","_id field must contain a string"),Ku=new Uu(412,"missing_id","_id is required for puts"),Qu=new Uu(400,"bad_request","Only reserved document ids may start with underscore."),Gu=(new Uu(412,"precondition_failed","Database not open"),new Uu(500,"unknown_error","Database encountered an unknown error")),Yu=new Uu(500,"badarg","Some query argument is invalid"),Ju=(new Uu(400,"invalid_request","Request was invalid"),new Uu(400,"query_parse_error","Some query parameter is invalid")),Xu=new Uu(500,"doc_validation","Bad special document member"),Zu=new Uu(400,"bad_request","Something wrong with the request"),es=new Uu(400,"bad_request","Document must be a JSON object"),ts=(new Uu(404,"not_found","Database not found"),new Uu(500,"indexed_db_went_bad","unknown")),ns=(new Uu(500,"web_sql_went_bad","unknown"),new Uu(500,"levelDB_went_went_bad","unknown"),new Uu(403,"forbidden","Forbidden by design doc validate_doc_update function"),new Uu(400,"bad_request","Invalid rev format")),rs=(new Uu(412,"file_exists","The database could not be created, the file already exists."),new Uu(412,"missing_stub","A pre-existing attachment stub wasn't found"));function os(e,t){function n(t){for(var n=Object.getOwnPropertyNames(e),r=0,o=n.length;r<o;r++)"function"!=typeof e[n[r]]&&(this[n[r]]=e[n[r]]);void 0!==t&&(this.reason=t)}return n.prototype=Uu.prototype,new n(t)}function is(e){if("object"!=typeof e){var t=e;(e=Gu).data=t}return"error"in e&&"conflict"===e.error&&(e.name="conflict",e.status=409),"name"in e||(e.name=e.error||"unknown"),"status"in e||(e.status=500),"message"in e||(e.message=e.message||e.reason),e}function as(e){var t={},n=e.filter&&"function"==typeof e.filter;return t.query=e.query_params,function(r){r.doc||(r.doc={});var o=n&&function(e,t,n){try{return!e(t,n)}catch(e){var r="Filter function threw: "+e.toString();return os(Zu,r)}}(e.filter,r.doc,t);if("object"==typeof o)return o;if(o)return!1;if(e.include_docs){if(!e.attachments)for(var i in r.doc._attachments)r.doc._attachments.hasOwnProperty(i)&&(r.doc._attachments[i].stub=!0)}else delete r.doc;return!0}}function us(e){for(var t=[],n=0,r=e.length;n<r;n++)t=t.concat(e[n]);return t}function ss(e){var t;if(e?"string"!=typeof e?t=os(Hu):/^_/.test(e)&&!/^_(design|local)/.test(e)&&(t=os(Qu)):t=os(Ku),t)throw t}function ls(e){return"boolean"==typeof e._remote?e._remote:"function"==typeof e.type&&(zu("warn","db.type() is deprecated and will be removed in a future version of PouchDB"),"http"===e.type())}function cs(e){if(!e)return null;var t=e.split("/");return 2===t.length?t:1===t.length?[e,e]:null}function fs(e){var t=cs(e);return t?t.join("/"):null}new Uu(413,"invalid_url","Provided URL is invalid");var ds=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"],ps="queryKey",hs=/(?:^|&)([^&=]*)=?([^&]*)/g,vs=/^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;function ms(e){for(var t=vs.exec(e),n={},r=14;r--;){var o=ds[r],i=t[r]||"",a=-1!==["user","password"].indexOf(o);n[o]=a?decodeURIComponent(i):i}return n[ps]={},n[ds[12]].replace(hs,(function(e,t,r){t&&(n[ps][t]=r)})),n}function gs(e,t){var n=[],r=[];for(var o in t)t.hasOwnProperty(o)&&(n.push(o),r.push(t[o]));return n.push(e),Function.apply(null,n).apply(null,r)}function ys(e,t,n){return new Promise((function(r,o){e.get(t,(function(i,a){if(i){if(404!==i.status)return o(i);a={}}var u=a._rev,s=n(a);if(!s)return r({updated:!1,rev:u});s._id=t,s._rev=u,r(function(e,t,n){return e.put(t).then((function(e){return{updated:!0,rev:e.rev}}),(function(r){if(409!==r.status)throw r;return ys(e,t._id,n)}))}(e,s,n))}))}))}var bs=function(e){return atob(e)},_s=function(e){return btoa(e)};function ws(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}function ks(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),o=0;o<t;o++)r[o]=e.charCodeAt(o);return n}function Ss(e,t){return ws([ks(e)],{type:t})}function Es(e,t){return Ss(bs(e),t)}function xs(e,t){var n=new FileReader,r="function"==typeof n.readAsBinaryString;n.onloadend=function(e){var n=e.target.result||"";if(r)return t(n);t(function(e){for(var t="",n=new Uint8Array(e),r=n.byteLength,o=0;o<r;o++)t+=String.fromCharCode(n[o]);return t}(n))},r?n.readAsBinaryString(e):n.readAsArrayBuffer(e)}function As(e,t){xs(e,(function(e){t(e)}))}function Cs(e,t){As(e,(function(e){t(_s(e))}))}var Os=self.setImmediate||self.setTimeout;function Ts(e,t,n,r,o){(n>0||r<t.size)&&(t=function(e,t,n){return e.webkitSlice?e.webkitSlice(t,n):e.slice(t,n)}(t,n,r)),function(e,t){var n=new FileReader;n.onloadend=function(e){var n=e.target.result||new ArrayBuffer(0);t(n)},n.readAsArrayBuffer(e)}(t,(function(t){e.append(t),o()}))}function Ps(e,t,n,r,o){(n>0||r<t.length)&&(t=t.substring(n,r)),e.appendBinary(t),o()}function Rs(e,t){var n="string"==typeof e,r=n?e.length:e.size,o=Math.min(32768,r),i=Math.ceil(r/o),a=0,u=n?new(pu()):new(pu().ArrayBuffer),s=n?Ps:Ts;function l(){Os(f)}function c(){var e,n=(e=u.end(!0),_s(e));t(n),u.destroy()}function f(){var t=a*o;a++,s(u,e,t,t+o,a<i?l:c)}f()}function Ns(e){return pu().hash(e)}function Is(e,t){var n=Ou(e);return t?(delete n._rev_tree,Ns(JSON.stringify(n))):lu().replace(/-/g,"").toLowerCase()}var Ls=lu;function js(e){for(var t,n,r,o,i=e.rev_tree.slice();o=i.pop();){var a=o.ids,u=a[2],s=o.pos;if(u.length)for(var l=0,c=u.length;l<c;l++)i.push({pos:s+1,ids:u[l]});else{var f=!!a[1].deleted,d=a[0];t&&!(r!==f?r:n!==s?n<s:t<d)||(t=d,n=s,r=f)}}return n+"-"+t}function Ms(e,t){for(var n,r=e.slice();n=r.pop();)for(var o=n.pos,i=n.ids,a=i[2],u=t(0===a.length,o,i[0],n.ctx,i[1]),s=0,l=a.length;s<l;s++)r.push({pos:o+1,ids:a[s],ctx:u})}function Ds(e,t){return e.pos-t.pos}function zs(e){var t=[];Ms(e,(function(e,n,r,o,i){e&&t.push({rev:n+"-"+r,pos:n,opts:i})})),t.sort(Ds).reverse();for(var n=0,r=t.length;n<r;n++)delete t[n].pos;return t}function Bs(e){for(var t=js(e),n=zs(e.rev_tree),r=[],o=0,i=n.length;o<i;o++){var a=n[o];a.rev===t||a.opts.deleted||r.push(a.rev)}return r}function Vs(e){for(var t,n=[],r=e.slice();t=r.pop();){var o=t.pos,i=t.ids,a=i[0],u=i[1],s=i[2],l=0===s.length,c=t.history?t.history.slice():[];c.push({id:a,opts:u}),l&&n.push({pos:o+1-c.length,ids:c});for(var f=0,d=s.length;f<d;f++)r.push({pos:o+1,ids:s[f],history:c})}return n.reverse()}function Fs(e,t){return e.pos-t.pos}function Us(e,t,n){var r=function(e,t,n){for(var r,o=0,i=e.length;o<i;)n(e[r=o+i>>>1],t)<0?o=r+1:i=r;return o}(e,t,n);e.splice(r,0,t)}function $s(e,t){for(var n,r,o=t,i=e.length;o<i;o++){var a=e[o],u=[a.id,a.opts,[]];r?(r[2].push(u),r=u):n=r=u}return n}function qs(e,t){return e[0]<t[0]?-1:1}function Ws(e,t){for(var n=[{tree1:e,tree2:t}],r=!1;n.length>0;){var o=n.pop(),i=o.tree1,a=o.tree2;(i[1].status||a[1].status)&&(i[1].status="available"===i[1].status||"available"===a[1].status?"available":"missing");for(var u=0;u<a[2].length;u++)if(i[2][0]){for(var s=!1,l=0;l<i[2].length;l++)i[2][l][0]===a[2][u][0]&&(n.push({tree1:i[2][l],tree2:a[2][u]}),s=!0);s||(r="new_branch",Us(i[2],a[2][u],qs))}else r="new_leaf",i[2][0]=a[2][u]}return{conflicts:r,tree:e}}function Hs(e,t,n){var r,o=[],i=!1,a=!1;if(!e.length)return{tree:[t],conflicts:"new_leaf"};for(var u=0,s=e.length;u<s;u++){var l=e[u];if(l.pos===t.pos&&l.ids[0]===t.ids[0])r=Ws(l.ids,t.ids),o.push({pos:l.pos,ids:r.tree}),i=i||r.conflicts,a=!0;else if(!0!==n){var c=l.pos<t.pos?l:t,f=l.pos<t.pos?t:l,d=f.pos-c.pos,p=[],h=[];for(h.push({ids:c.ids,diff:d,parent:null,parentIdx:null});h.length>0;){var v=h.pop();if(0!==v.diff)for(var m=v.ids[2],g=0,y=m.length;g<y;g++)h.push({ids:m[g],diff:v.diff-1,parent:v.ids,parentIdx:g});else v.ids[0]===f.ids[0]&&p.push(v)}var b=p[0];b?(r=Ws(b.ids,f.ids),b.parent[2][b.parentIdx]=r.tree,o.push({pos:c.pos,ids:c.ids}),i=i||r.conflicts,a=!0):o.push(l)}else o.push(l)}return a||o.push(t),o.sort(Fs),{tree:o,conflicts:i||"internal_node"}}function Ks(e,t,n){var r=Hs(e,t),o=function(e,t){for(var n,r,o=Vs(e),i=0,a=o.length;i<a;i++){var u,s=o[i],l=s.ids;if(l.length>t){n||(n={});var c=l.length-t;u={pos:s.pos+c,ids:$s(l,c)};for(var f=0;f<c;f++){var d=s.pos+f+"-"+l[f].id;n[d]=!0}}else u={pos:s.pos,ids:$s(l,0)};r=r?Hs(r,u,!0).tree:[u]}return n&&Ms(r,(function(e,t,r){delete n[t+"-"+r]})),{tree:r,revs:n?Object.keys(n):[]}}(r.tree,n);return{tree:o.tree,stemmedRevs:o.revs,conflicts:r.conflicts}}function Qs(e){return e.ids}function Gs(e,t){t||(t=js(e));for(var n,r=t.substring(t.indexOf("-")+1),o=e.rev_tree.map(Qs);n=o.pop();){if(n[0]===r)return!!n[1].deleted;o=o.concat(n[2])}}function Ys(e){return/^_local/.test(e)}function Js(e,t,n){_u().call(this);var r=this;this.db=e;var o=(t=t?Ou(t):{}).complete=Tu((function(t,n){t?function(e,t){return"listenerCount"in e?e.listenerCount(t):_u().listenerCount(e,t)}(r,"error")>0&&r.emit("error",t):r.emit("complete",n),r.removeAllListeners(),e.removeListener("destroyed",i)}));function i(){r.cancel()}n&&(r.on("complete",(function(e){n(null,e)})),r.on("error",n)),e.once("destroyed",i),t.onChange=function(e,t,n){r.isCancelled||function(e,t,n,r){try{e.emit("change",t,n,r)}catch(e){zu("error",'Error in .on("change", function):',e)}}(r,e,t,n)};var a=new Promise((function(e,n){t.complete=function(t,r){t?n(t):e(r)}}));r.once("cancel",(function(){e.removeListener("destroyed",i),t.complete(null,{status:"cancelled"})})),this.then=a.then.bind(a),this.catch=a.catch.bind(a),this.then((function(e){o(null,e)}),o),e.taskqueue.isReady?r.validateChanges(t):e.taskqueue.addTask((function(e){e?t.complete(e):r.isCancelled?r.emit("cancel"):r.validateChanges(t)}))}function Xs(e,t,n){var r=[{rev:e._rev}];"all_docs"===n.style&&(r=zs(t.rev_tree).map((function(e){return{rev:e.rev}})));var o={id:t.id,changes:r,doc:e};return Gs(t,e._rev)&&(o.deleted=!0),n.conflicts&&(o.doc._conflicts=Bs(t),o.doc._conflicts.length||delete o.doc._conflicts),o}function Zs(e,t){return e<t?-1:e>t?1:0}function el(e,t){return function(n,r){n||r[0]&&r[0].error?((n=n||r[0]).docId=t,e(n)):e(null,r.length?r[0]:r)}}function tl(e,t){var n=Zs(e._id,t._id);return 0!==n?n:Zs(e._revisions?e._revisions.start:0,t._revisions?t._revisions.start:0)}function nl(e){var t=e._compactionQueue[0],n=t.opts,r=t.callback;e.get("_local/compaction").catch((function(){return!1})).then((function(t){t&&t.last_seq&&(n.last_seq=t.last_seq),e._compact(n,(function(t,n){t?r(t):r(null,n),uu()((function(){e._compactionQueue.shift(),e._compactionQueue.length&&nl(e)}))}))}))}function rl(){for(var e in _u().call(this),rl.prototype)"function"==typeof this[e]&&(this[e]=this[e].bind(this))}function ol(){this.isReady=!1,this.failed=!1,this.queue=[]}function il(e,t){if(!(this instanceof il))return new il(e,t);var n=this;if(t=t||{},e&&"object"==typeof e&&(e=(t=e).name,delete t.name),void 0===t.deterministic_revs&&(t.deterministic_revs=!0),this.__opts=t=Ou(t),n.auto_compaction=t.auto_compaction,n.prefix=il.prefix,"string"!=typeof e)throw new Error("Missing/invalid DB name");var r=function(e,t){var n=e.match(/([a-z-]*):\/\/(.*)/);if(n)return{name:/https?/.test(n[1])?n[1]+"://"+n[2]:n[2],adapter:n[1]};var r=il.adapters,o=il.preferredAdapters,i=il.prefix,a=t.adapter;if(!a)for(var u=0;u<o.length&&"idb"===(a=o[u])&&"websql"in r&&Mu()&&localStorage["_pouch__websqldb_"+i+e];++u)zu("log",'PouchDB is downgrading "'+e+'" to WebSQL to avoid data loss, because it was already opened with WebSQL.');var s=r[a];return{name:s&&"use_prefix"in s&&!s.use_prefix?e:i+e,adapter:a}}((t.prefix||"")+e,t);if(t.name=r.name,t.adapter=t.adapter||r.adapter,n.name=e,n._adapter=t.adapter,il.emit("debug",["adapter","Picked adapter: ",t.adapter]),!il.adapters[t.adapter]||!il.adapters[t.adapter].valid())throw new Error("Invalid Adapter: "+t.adapter);rl.call(n),n.taskqueue=new ol,n.adapter=t.adapter,il.adapters[t.adapter].call(n,t,(function(e){if(e)return n.taskqueue.fail(e);!function(e){function t(t){e.removeListener("closed",n),t||e.constructor.emit("destroyed",e.name)}function n(){e.removeListener("destroyed",t),e.constructor.emit("unref",e)}e.once("destroyed",t),e.once("closed",n),e.constructor.emit("ref",e)}(n),n.emit("created",n),il.emit("created",n.name),n.taskqueue.ready(n)}))}yu()(Js,_u()),Js.prototype.cancel=function(){this.isCancelled=!0,this.db.taskqueue.isReady&&this.emit("cancel")},Js.prototype.validateChanges=function(e){var t=e.complete,n=this;il._changesFilterPlugin?il._changesFilterPlugin.validate(e,(function(r){if(r)return t(r);n.doChanges(e)})):n.doChanges(e)},Js.prototype.doChanges=function(e){var t=this,n=e.complete;if("live"in(e=Ou(e))&&!("continuous"in e)&&(e.continuous=e.live),e.processChange=Xs,"latest"===e.since&&(e.since="now"),e.since||(e.since=0),"now"!==e.since){if(il._changesFilterPlugin){if(il._changesFilterPlugin.normalize(e),il._changesFilterPlugin.shouldFilter(this,e))return il._changesFilterPlugin.filter(this,e)}else["doc_ids","filter","selector","view"].forEach((function(t){t in e&&zu("warn",'The "'+t+'" option was passed in to changes/replicate, but pouchdb-changes-filter plugin is not installed, so it was ignored. Please install the plugin to enable filtering.')}));"descending"in e||(e.descending=!1),e.limit=0===e.limit?1:e.limit,e.complete=n;var r=this.db._changes(e);if(r&&"function"==typeof r.cancel){var o=t.cancel;t.cancel=mu()((function(e){r.cancel(),o.apply(this,e)}))}}else this.db.info().then((function(r){t.isCancelled?n(null,{status:"cancelled"}):(e.since=r.update_seq,t.doChanges(e))}),n)},yu()(rl,_u()),rl.prototype.post=Ru("post",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(os(es));this.bulkDocs({docs:[e]},t,el(n,e._id))})),rl.prototype.put=Ru("put",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"object"!=typeof e||Array.isArray(e))return n(os(es));if(ss(e._id),Ys(e._id)&&"function"==typeof this._putLocal)return e._deleted?this._removeLocal(e,n):this._putLocal(e,n);var r,o,i,a,u=this;function s(n){"function"==typeof u._put&&!1!==t.new_edits?u._put(e,t,n):u.bulkDocs({docs:[e]},t,el(n,e._id))}t.force&&e._rev?(o=(r=e._rev.split("-"))[1],i=parseInt(r[0],10)+1,a=Is(),e._revisions={start:i,ids:[a,o]},e._rev=i+"-"+a,t.new_edits=!1,s((function(t){var r=t?null:{ok:!0,id:e._id,rev:e._rev};n(t,r)}))):s(n)})),rl.prototype.putAttachment=Ru("putAttachment",(function(e,t,n,r,o){var i=this;function a(e){var n="_rev"in e?parseInt(e._rev,10):0;return e._attachments=e._attachments||{},e._attachments[t]={content_type:o,data:r,revpos:++n},i.put(e)}return"function"==typeof o&&(o=r,r=n,n=null),void 0===o&&(o=r,r=n,n=null),o||zu("warn","Attachment",t,"on document",e,"is missing content_type"),i.get(e).then((function(e){if(e._rev!==n)throw os(Wu);return a(e)}),(function(t){if(t.reason===qu.message)return a({_id:e});throw t}))})),rl.prototype.removeAttachment=Ru("removeAttachment",(function(e,t,n,r){var o=this;o.get(e,(function(e,i){if(e)r(e);else if(i._rev===n){if(!i._attachments)return r();delete i._attachments[t],0===Object.keys(i._attachments).length&&delete i._attachments,o.put(i,r)}else r(os(Wu))}))})),rl.prototype.remove=Ru("remove",(function(e,t,n,r){var o;"string"==typeof t?(o={_id:e,_rev:t},"function"==typeof n&&(r=n,n={})):(o=e,"function"==typeof t?(r=t,n={}):(r=n,n=t)),(n=n||{}).was_delete=!0;var i={_id:o._id,_rev:o._rev||n.rev,_deleted:!0};if(Ys(i._id)&&"function"==typeof this._removeLocal)return this._removeLocal(o,r);this.bulkDocs({docs:[i]},n,el(r,i._id))})),rl.prototype.revsDiff=Ru("revsDiff",(function(e,t,n){"function"==typeof t&&(n=t,t={});var r=Object.keys(e);if(!r.length)return n(null,{});var o=0,i=new fu;function a(e,t){i.has(e)||i.set(e,{missing:[]}),i.get(e).missing.push(t)}r.map((function(t){this._getRevisionTree(t,(function(u,s){if(u&&404===u.status&&"missing"===u.message)i.set(t,{missing:e[t]});else{if(u)return n(u);!function(t,n){var r=e[t].slice(0);Ms(n,(function(e,n,o,i,u){var s=n+"-"+o,l=r.indexOf(s);-1!==l&&(r.splice(l,1),"available"!==u.status&&a(t,s))})),r.forEach((function(e){a(t,e)}))}(t,s)}if(++o===r.length){var l={};return i.forEach((function(e,t){l[t]=e})),n(null,l)}}))}),this)})),rl.prototype.bulkGet=Ru("bulkGet",(function(e,t){ju(this,e,t)})),rl.prototype.compactDocument=Ru("compactDocument",(function(e,t,n){var r=this;this._getRevisionTree(e,(function(o,i){if(o)return n(o);var a=function(e){var t={},n=[];return Ms(e,(function(e,r,o,i){var a=r+"-"+o;return e&&(t[a]=0),void 0!==i&&n.push({from:i,to:a}),a})),n.reverse(),n.forEach((function(e){void 0===t[e.from]?t[e.from]=1+t[e.to]:t[e.from]=Math.min(t[e.from],1+t[e.to])})),t}(i),u=[],s=[];Object.keys(a).forEach((function(e){a[e]>t&&u.push(e)})),Ms(i,(function(e,t,n,r,o){var i=t+"-"+n;"available"===o.status&&-1!==u.indexOf(i)&&s.push(i)})),r._doCompaction(e,s,n)}))})),rl.prototype.compact=Ru("compact",(function(e,t){"function"==typeof e&&(t=e,e={});var n=this;e=e||{},n._compactionQueue=n._compactionQueue||[],n._compactionQueue.push({opts:e,callback:t}),1===n._compactionQueue.length&&nl(n)})),rl.prototype._compact=function(e,t){var n=this,r={return_docs:!1,last_seq:e.last_seq||0},o=[];n.changes(r).on("change",(function(e){o.push(n.compactDocument(e.id,0))})).on("complete",(function(e){var r=e.last_seq;Promise.all(o).then((function(){return ys(n,"_local/compaction",(function(e){return(!e.last_seq||e.last_seq<r)&&(e.last_seq=r,e)}))})).then((function(){t(null,{ok:!0})})).catch(t)})).on("error",t)},rl.prototype.get=Ru("get",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),"string"!=typeof e)return n(os(Hu));if(Ys(e)&&"function"==typeof this._getLocal)return this._getLocal(e,n);var r=[],o=this;function i(){var i=[],a=r.length;if(!a)return n(null,i);r.forEach((function(r){o.get(e,{rev:r,revs:t.revs,latest:t.latest,attachments:t.attachments,binary:t.binary},(function(e,t){if(e)i.push({missing:r});else{for(var o,u=0,s=i.length;u<s;u++)if(i[u].ok&&i[u].ok._rev===t._rev){o=!0;break}o||i.push({ok:t})}--a||n(null,i)}))}))}if(!t.open_revs)return this._get(e,t,(function(r,i){if(r)return r.docId=e,n(r);var a=i.doc,u=i.metadata,s=i.ctx;if(t.conflicts){var l=Bs(u);l.length&&(a._conflicts=l)}if(Gs(u,a._rev)&&(a._deleted=!0),t.revs||t.revs_info){for(var c=a._rev.split("-"),f=parseInt(c[0],10),d=c[1],p=Vs(u.rev_tree),h=null,v=0;v<p.length;v++){var m=p[v],g=m.ids.map((function(e){return e.id})).indexOf(d);(g===f-1||!h&&-1!==g)&&(h=m)}if(!h)return(r=new Error("invalid rev tree")).docId=e,n(r);var y=h.ids.map((function(e){return e.id})).indexOf(a._rev.split("-")[1])+1,b=h.ids.length-y;if(h.ids.splice(y,b),h.ids.reverse(),t.revs&&(a._revisions={start:h.pos+h.ids.length-1,ids:h.ids.map((function(e){return e.id}))}),t.revs_info){var _=h.pos+h.ids.length;a._revs_info=h.ids.map((function(e){return{rev:--_+"-"+e.id,status:e.opts.status}}))}}if(t.attachments&&a._attachments){var w=a._attachments,k=Object.keys(w).length;if(0===k)return n(null,a);Object.keys(w).forEach((function(e){this._getAttachment(a._id,e,w[e],{rev:a._rev,binary:t.binary,ctx:s},(function(t,r){var o=a._attachments[e];o.data=r,delete o.stub,delete o.length,--k||n(null,a)}))}),o)}else{if(a._attachments)for(var S in a._attachments)a._attachments.hasOwnProperty(S)&&(a._attachments[S].stub=!0);n(null,a)}}));if("all"===t.open_revs)this._getRevisionTree(e,(function(e,t){if(e)return n(e);r=zs(t).map((function(e){return e.rev})),i()}));else{if(!Array.isArray(t.open_revs))return n(os(Gu,"function_clause"));r=t.open_revs;for(var a=0;a<r.length;a++){var u=r[a];if("string"!=typeof u||!/^\d+-/.test(u))return n(os(ns))}i()}})),rl.prototype.getAttachment=Ru("getAttachment",(function(e,t,n,r){var o=this;n instanceof Function&&(r=n,n={}),this._get(e,n,(function(i,a){return i?r(i):a.doc._attachments&&a.doc._attachments[t]?(n.ctx=a.ctx,n.binary=!0,void o._getAttachment(e,t,a.doc._attachments[t],n,r)):r(os(qu))}))})),rl.prototype.allDocs=Ru("allDocs",(function(e,t){if("function"==typeof e&&(t=e,e={}),e.skip=void 0!==e.skip?e.skip:0,e.start_key&&(e.startkey=e.start_key),e.end_key&&(e.endkey=e.end_key),"keys"in e){if(!Array.isArray(e.keys))return t(new TypeError("options.keys must be an array"));var n=["startkey","endkey","key"].filter((function(t){return t in e}))[0];if(n)return void t(os(Ju,"Query parameter `"+n+"` is not compatible with multi-get"));if(!ls(this)&&(function(e){var t="limit"in e?e.keys.slice(e.skip,e.limit+e.skip):e.skip>0?e.keys.slice(e.skip):e.keys;e.keys=t,e.skip=0,delete e.limit,e.descending&&(t.reverse(),e.descending=!1)}(e),0===e.keys.length))return this._allDocs({limit:0},t)}return this._allDocs(e,t)})),rl.prototype.changes=function(e,t){return"function"==typeof e&&(t=e,e={}),(e=e||{}).return_docs="return_docs"in e?e.return_docs:!e.live,new Js(this,e,t)},rl.prototype.close=Ru("close",(function(e){return this._closed=!0,this.emit("closed"),this._close(e)})),rl.prototype.info=Ru("info",(function(e){var t=this;this._info((function(n,r){if(n)return e(n);r.db_name=r.db_name||t.name,r.auto_compaction=!(!t.auto_compaction||ls(t)),r.adapter=t.adapter,e(null,r)}))})),rl.prototype.id=Ru("id",(function(e){return this._id(e)})),rl.prototype.type=function(){return"function"==typeof this._type?this._type():this.adapter},rl.prototype.bulkDocs=Ru("bulkDocs",(function(e,t,n){if("function"==typeof t&&(n=t,t={}),t=t||{},Array.isArray(e)&&(e={docs:e}),!e||!e.docs||!Array.isArray(e.docs))return n(os($u));for(var r=0;r<e.docs.length;++r)if("object"!=typeof e.docs[r]||Array.isArray(e.docs[r]))return n(os(es));var o;if(e.docs.forEach((function(e){e._attachments&&Object.keys(e._attachments).forEach((function(t){o=o||function(e){return"_"===e.charAt(0)&&e+" is not a valid attachment name, attachment names cannot start with '_'"}(t),e._attachments[t].content_type||zu("warn","Attachment",t,"on document",e._id,"is missing content_type")}))})),o)return n(os(Zu,o));"new_edits"in t||(t.new_edits=!("new_edits"in e)||e.new_edits);var i=this;t.new_edits||ls(i)||e.docs.sort(tl),function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n._deleted)delete n._attachments;else if(n._attachments)for(var r=Object.keys(n._attachments),o=0;o<r.length;o++){var i=r[o];n._attachments[i]=Nu(n._attachments[i],["data","digest","content_type","length","revpos","stub"])}}}(e.docs);var a=e.docs.map((function(e){return e._id}));return this._bulkDocs(e,t,(function(e,r){if(e)return n(e);if(t.new_edits||(r=r.filter((function(e){return e.error}))),!ls(i))for(var o=0,u=r.length;o<u;o++)r[o].id=r[o].id||a[o];n(null,r)}))})),rl.prototype.registerDependentDatabase=Ru("registerDependentDatabase",(function(e,t){var n=new this.constructor(e,this.__opts);ys(this,"_local/_pouch_dependentDbs",(function(t){return t.dependentDbs=t.dependentDbs||{},!t.dependentDbs[e]&&(t.dependentDbs[e]=!0,t)})).then((function(){t(null,{db:n})})).catch(t)})),rl.prototype.destroy=Ru("destroy",(function(e,t){"function"==typeof e&&(t=e,e={});var n=this,r=!("use_prefix"in n)||n.use_prefix;function o(){n._destroy(e,(function(e,r){if(e)return t(e);n._destroyed=!0,n.emit("destroyed"),t(null,r||{ok:!0})}))}if(ls(n))return o();n.get("_local/_pouch_dependentDbs",(function(e,i){if(e)return 404!==e.status?t(e):o();var a=i.dependentDbs,u=n.constructor,s=Object.keys(a).map((function(e){var t=r?e.replace(new RegExp("^"+u.prefix),""):e;return new u(t,n.__opts).destroy()}));Promise.all(s).then(o,t)}))})),ol.prototype.execute=function(){var e;if(this.failed)for(;e=this.queue.shift();)e(this.failed);else for(;e=this.queue.shift();)e()},ol.prototype.fail=function(e){this.failed=e,this.execute()},ol.prototype.ready=function(e){this.isReady=!0,this.db=e,this.execute()},ol.prototype.addTask=function(e){this.queue.push(e),this.failed&&this.execute()},yu()(il,rl);var al="undefined"!=typeof AbortController?AbortController:function(){return{abort:function(){}}},ul=fetch,sl=Headers;il.adapters={},il.preferredAdapters=[],il.prefix="_pouch_";var ll=new(_u());function cl(e,t){for(var n=e,r=0,o=t.length;r<o&&(n=n[t[r]]);r++);return n}function fl(e){for(var t=[],n="",r=0,o=e.length;r<o;r++){var i=e[r];"."===i?r>0&&"\\"===e[r-1]?n=n.substring(0,n.length-1)+".":(t.push(n),n=""):n+=i}return t.push(n),t}!function(e){Object.keys(_u().prototype).forEach((function(t){"function"==typeof _u().prototype[t]&&(e[t]=ll[t].bind(ll))}));var t=e._destructionListeners=new fu;e.on("ref",(function(e){t.has(e.name)||t.set(e.name,[]),t.get(e.name).push(e)})),e.on("unref",(function(e){if(t.has(e.name)){var n=t.get(e.name),r=n.indexOf(e);r<0||(n.splice(r,1),n.length>1?t.set(e.name,n):t.delete(e.name))}})),e.on("destroyed",(function(e){if(t.has(e)){var n=t.get(e);t.delete(e),n.forEach((function(e){e.emit("destroyed",!0)}))}}))}(il),il.adapter=function(e,t,n){t.valid()&&(il.adapters[e]=t,n&&il.preferredAdapters.push(e))},il.plugin=function(e){if("function"==typeof e)e(il);else{if("object"!=typeof e||0===Object.keys(e).length)throw new Error('Invalid plugin: got "'+e+'", expected an object or a function');Object.keys(e).forEach((function(t){il.prototype[t]=e[t]}))}return this.__defaults&&(il.__defaults=Fu({},this.__defaults)),il},il.defaults=function(e){function t(e,n){if(!(this instanceof t))return new t(e,n);n=n||{},e&&"object"==typeof e&&(e=(n=e).name,delete n.name),n=Fu({},t.__defaults,n),il.call(this,e,n)}return yu()(t,il),t.preferredAdapters=il.preferredAdapters.slice(),Object.keys(il).forEach((function(e){e in t||(t[e]=il[e])})),t.__defaults=Fu({},this.__defaults,e),t},il.fetch=function(e,t){return ul(e,t)};var dl=["$or","$nor","$not"];function pl(e){return dl.indexOf(e)>-1}function hl(e){return Object.keys(e)[0]}function vl(e){var t={};return e.forEach((function(e){Object.keys(e).forEach((function(n){var r=e[n];if("object"!=typeof r&&(r={$eq:r}),pl(n))t[n]=r instanceof Array?r.map((function(e){return vl([e])})):vl([r]);else{var o=t[n]=t[n]||{};Object.keys(r).forEach((function(e){var t=r[e];return"$gt"===e||"$gte"===e?function(e,t,n){void 0===n.$eq&&(void 0!==n.$gte?"$gte"===e?t>n.$gte&&(n.$gte=t):t>=n.$gte&&(delete n.$gte,n.$gt=t):void 0!==n.$gt?"$gte"===e?t>n.$gt&&(delete n.$gt,n.$gte=t):t>n.$gt&&(n.$gt=t):n[e]=t)}(e,t,o):"$lt"===e||"$lte"===e?function(e,t,n){void 0===n.$eq&&(void 0!==n.$lte?"$lte"===e?t<n.$lte&&(n.$lte=t):t<=n.$lte&&(delete n.$lte,n.$lt=t):void 0!==n.$lt?"$lte"===e?t<n.$lt&&(delete n.$lt,n.$lte=t):t<n.$lt&&(n.$lt=t):n[e]=t)}(e,t,o):"$ne"===e?function(e,t){"$ne"in t?t.$ne.push(e):t.$ne=[e]}(t,o):"$eq"===e?function(e,t){delete t.$gt,delete t.$gte,delete t.$lt,delete t.$lte,delete t.$ne,t.$eq=e}(t,o):void(o[e]=t)}))}}))})),t}function ml(e){for(var t in e){if(Array.isArray(e))for(var n in e)e[n].$and&&(e[n]=vl(e[n].$and));var r=e[t];"object"==typeof r&&ml(r)}return e}function gl(e,t){for(var n in e){"$and"===n&&(t=!0);var r=e[n];"object"==typeof r&&(t=gl(r,t))}return t}function yl(e){var t=Ou(e),n=!1;gl(t,!1)&&("$and"in(t=ml(t))&&(t=vl(t.$and)),n=!0),["$or","$nor"].forEach((function(e){e in t&&t[e].forEach((function(e){for(var t=Object.keys(e),n=0;n<t.length;n++){var r=t[n],o=e[r];"object"==typeof o&&null!==o||(e[r]={$eq:o})}}))})),"$not"in t&&(t.$not=vl([t.$not]));for(var r=Object.keys(t),o=0;o<r.length;o++){var i=r[o],a=t[i];"object"!=typeof a||null===a?a={$eq:a}:"$ne"in a&&!n&&(a.$ne=[a.$ne]),t[i]=a}return t}function bl(e,t){if(e===t)return 0;e=_l(e),t=_l(t);var n=El(e),r=El(t);if(n-r!=0)return n-r;switch(typeof e){case"number":return e-t;case"boolean":return e<t?-1:1;case"string":return function(e,t){return e===t?0:e>t?1:-1}(e,t)}return Array.isArray(e)?function(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++){var o=bl(e[r],t[r]);if(0!==o)return o}return e.length===t.length?0:e.length>t.length?1:-1}(e,t):function(e,t){for(var n=Object.keys(e),r=Object.keys(t),o=Math.min(n.length,r.length),i=0;i<o;i++){var a=bl(n[i],r[i]);if(0!==a)return a;if(0!==(a=bl(e[n[i]],t[r[i]])))return a}return n.length===r.length?0:n.length>r.length?1:-1}(e,t)}function _l(e){switch(typeof e){case"undefined":return null;case"number":return e===1/0||e===-1/0||isNaN(e)?null:e;case"object":var t=e;if(Array.isArray(e)){var n=e.length;e=new Array(n);for(var r=0;r<n;r++)e[r]=_l(t[r])}else{if(e instanceof Date)return e.toJSON();if(null!==e)for(var o in e={},t)if(t.hasOwnProperty(o)){var i=t[o];void 0!==i&&(e[o]=_l(i))}}}return e}function wl(e){return El(e=_l(e))+""+function(e){if(null!==e)switch(typeof e){case"boolean":return e?1:0;case"number":return function(e){if(0===e)return"1";var t,n=e.toExponential().split(/e\+?/),r=parseInt(n[1],10),o=e<0,i=o?"0":"2";i+=""+(function(e,t,n){for(var r="",o=3-e.length;r.length<o;)r+="0";return r}(t=((o?-r:r)- -324).toString())+t);var a=Math.abs(parseFloat(n[0]));o&&(a=10-a);var u=a.toFixed(20);return i+""+u.replace(/\.?0+$/,"")}(e);case"string":return e.replace(/\u0002/g,"").replace(/\u0001/g,"").replace(/\u0000/g,"");case"object":var t=Array.isArray(e),n=t?e:Object.keys(e),r=-1,o=n.length,i="";if(t)for(;++r<o;)i+=wl(n[r]);else for(;++r<o;){var a=n[r];i+=wl(a)+wl(e[a])}return i}return""}(e)+"\0"}function kl(e,t){var n,r=t;if("1"===e[t])n=0,t++;else{var o="0"===e[t];t++;var i="",a=e.substring(t,t+3),u=parseInt(a,10)+-324;for(o&&(u=-u),t+=3;;){var s=e[t];if("\0"===s)break;i+=s,t++}n=1===(i=i.split(".")).length?parseInt(i,10):parseFloat(i[0]+"."+i[1]),o&&(n-=10),0!==u&&(n=parseFloat(n+"e"+u))}return{num:n,length:t-r}}function Sl(e,t){var n=e.pop();if(t.length){var r=t[t.length-1];n===r.element&&(t.pop(),r=t[t.length-1]);var o=r.element,i=r.index;Array.isArray(o)?o.push(n):i===e.length-2?o[e.pop()]=n:e.push(n)}}function El(e){var t=["boolean","number","string","object"].indexOf(typeof e);return~t?null===e?1:Array.isArray(e)?5:t<3?t+2:t+3:Array.isArray(e)?5:void 0}function xl(e,t,n){return n.every((function(n){var r=t[n],o=fl(n),i=cl(e,o);return pl(n)?function(e,t,n){return"$or"===e?t.some((function(e){return xl(n,e,Object.keys(e))})):"$not"===e?!xl(n,t,Object.keys(t)):!t.find((function(e){return xl(n,e,Object.keys(e))}))}(n,r,e):Al(r,e,o,i)}))}function Al(e,t,n,r){return!e||("object"==typeof e?Object.keys(e).every((function(o){var i=e[o];return function(e,t,n,r,o){if(!Pl[e])throw new Error('unknown operator "'+e+'" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, $nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');return Pl[e](t,n,r,o)}(o,t,i,n,r)})):e===r)}function Cl(e){return null!=e}function Ol(e){return void 0!==e}function Tl(e,t){return t.some((function(t){return e instanceof Array?e.indexOf(t)>-1:e===t}))}var Pl={$elemMatch:function(e,t,n,r){return!!Array.isArray(r)&&0!==r.length&&("object"==typeof r[0]?r.some((function(e){return xl(e,t,Object.keys(t))})):r.some((function(r){return Al(t,e,n,r)})))},$allMatch:function(e,t,n,r){return!!Array.isArray(r)&&0!==r.length&&("object"==typeof r[0]?r.every((function(e){return xl(e,t,Object.keys(t))})):r.every((function(r){return Al(t,e,n,r)})))},$eq:function(e,t,n,r){return Ol(r)&&0===bl(r,t)},$gte:function(e,t,n,r){return Ol(r)&&bl(r,t)>=0},$gt:function(e,t,n,r){return Ol(r)&&bl(r,t)>0},$lte:function(e,t,n,r){return Ol(r)&&bl(r,t)<=0},$lt:function(e,t,n,r){return Ol(r)&&bl(r,t)<0},$exists:function(e,t,n,r){return t?Ol(r):!Ol(r)},$mod:function(e,t,n,r){return Cl(r)&&function(e,t){var n=t[0],r=t[1];if(0===n)throw new Error("Bad divisor, cannot divide by zero");if(parseInt(n,10)!==n)throw new Error("Divisor is not an integer");if(parseInt(r,10)!==r)throw new Error("Modulus is not an integer");return parseInt(e,10)===e&&e%n===r}(r,t)},$ne:function(e,t,n,r){return t.every((function(e){return 0!==bl(r,e)}))},$in:function(e,t,n,r){return Cl(r)&&Tl(r,t)},$nin:function(e,t,n,r){return Cl(r)&&!Tl(r,t)},$size:function(e,t,n,r){return Cl(r)&&function(e,t){return e.length===t}(r,t)},$all:function(e,t,n,r){return Array.isArray(r)&&function(e,t){return t.every((function(t){return e.indexOf(t)>-1}))}(r,t)},$regex:function(e,t,n,r){return Cl(r)&&function(e,t){return new RegExp(t).test(e)}(r,t)},$type:function(e,t,n,r){return function(e,t){switch(t){case"null":return null===e;case"boolean":return"boolean"==typeof e;case"number":return"number"==typeof e;case"string":return"string"==typeof e;case"array":return e instanceof Array;case"object":return"[object Object]"==={}.toString.call(e)}throw new Error(t+" not supported as a type.Please use one of object, string, array, number, boolean or null.")}(r,t)}};function Rl(e,t){if(e.selector&&e.filter&&"_selector"!==e.filter){var n="string"==typeof e.filter?e.filter:"function";return t(new Error('selector invalid for filter "'+n+'"'))}t()}function Nl(e){e.view&&!e.filter&&(e.filter="_view"),e.selector&&!e.filter&&(e.filter="_selector"),e.filter&&"string"==typeof e.filter&&("_view"===e.filter?e.view=fs(e.view):e.filter=fs(e.filter))}function Il(e,t){return t.filter&&"string"==typeof t.filter&&!t.doc_ids&&!ls(e.db)}function Ll(e,t){var n=t.complete;if("_view"===t.filter){if(!t.view||"string"!=typeof t.view){var r=os(Zu,"`view` filter parameter not found or invalid.");return n(r)}var o=cs(t.view);e.db.get("_design/"+o[0],(function(r,i){if(e.isCancelled)return n(null,{status:"cancelled"});if(r)return n(is(r));var a=i&&i.views&&i.views[o[1]]&&i.views[o[1]].map;if(!a)return n(os(qu,i.views?"missing json key: "+o[1]:"missing json key: views"));t.filter=gs(["return function(doc) {",'  "use strict";',"  var emitted = false;","  var emit = function (a, b) {","    emitted = true;","  };","  var view = "+a+";","  view(doc);","  if (emitted) {","    return true;","  }","};"].join("\n"),{}),e.doChanges(t)}))}else if(t.selector)t.filter=function(e){return function(e,t){if("object"!=typeof t)throw new Error("Selector error: expected a JSON object");var n=function(e,t,n){if(e=e.filter((function(e){return xl(e.doc,t.selector,n)})),t.sort){var r=function(e){function t(t){return e.map((function(e){var n=fl(hl(e));return cl(t,n)}))}return function(e,n){var r,o,i=bl(t(e.doc),t(n.doc));return 0!==i?i:(r=e.doc._id)<(o=n.doc._id)?-1:r>o?1:0}}(t.sort);e=e.sort(r),"string"!=typeof t.sort[0]&&"desc"===(o=t.sort[0])[hl(o)]&&(e=e.reverse())}var o;if("limit"in t||"skip"in t){var i=t.skip||0,a=("limit"in t?t.limit:e.length)+i;e=e.slice(i,a)}return e}([{doc:e}],{selector:t=yl(t)},Object.keys(t));return n&&1===n.length}(e,t.selector)},e.doChanges(t);else{var i=cs(t.filter);e.db.get("_design/"+i[0],(function(r,o){if(e.isCancelled)return n(null,{status:"cancelled"});if(r)return n(is(r));var a=o&&o.filters&&o.filters[i[1]];if(!a)return n(os(qu,o&&o.filters?"missing json key: "+i[1]:"missing json key: filters"));t.filter=gs('"use strict";\nreturn '+a+";",{}),e.doChanges(t)}))}}function jl(e){return e.reduce((function(e,t){return e[t]=!0,e}),{})}il.plugin((function(e){e._changesFilterPlugin={validate:Rl,normalize:Nl,shouldFilter:Il,filter:Ll}})),il.version="7.2.2";var Ml=jl(["_id","_rev","_attachments","_deleted","_revisions","_revs_info","_conflicts","_deleted_conflicts","_local_seq","_rev_tree","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats","_removed"]),Dl=jl(["_attachments","_replication_id","_replication_state","_replication_state_time","_replication_state_reason","_replication_stats"]);function zl(e){if(!/^\d+-/.test(e))return os(ns);var t=e.indexOf("-"),n=e.substring(0,t),r=e.substring(t+1);return{prefix:parseInt(n,10),id:r}}function Bl(e,t,n){var r,o,i;n||(n={deterministic_revs:!0});var a={status:"available"};if(e._deleted&&(a.deleted=!0),t)if(e._id||(e._id=Ls()),o=Is(e,n.deterministic_revs),e._rev){if((i=zl(e._rev)).error)return i;e._rev_tree=[{pos:i.prefix,ids:[i.id,{status:"missing"},[[o,a,[]]]]}],r=i.prefix+1}else e._rev_tree=[{pos:1,ids:[o,a,[]]}],r=1;else if(e._revisions&&(e._rev_tree=function(e,t){for(var n=e.start-e.ids.length+1,r=e.ids,o=[r[0],t,[]],i=1,a=r.length;i<a;i++)o=[r[i],{status:"missing"},[o]];return[{pos:n,ids:o}]}(e._revisions,a),r=e._revisions.start,o=e._revisions.ids[0]),!e._rev_tree){if((i=zl(e._rev)).error)return i;r=i.prefix,o=i.id,e._rev_tree=[{pos:r,ids:[o,a,[]]}]}ss(e._id),e._rev=r+"-"+o;var u={metadata:{},data:{}};for(var s in e)if(Object.prototype.hasOwnProperty.call(e,s)){var l="_"===s[0];if(l&&!Ml[s]){var c=os(Xu,s);throw c.message=Xu.message+": "+s,c}l&&!Dl[s]?u.metadata[s.slice(1)]=e[s]:u.data[s]=e[s]}return u}function Vl(e,t,n){if(e.stub)return n();"string"==typeof e.data?function(e,t,n){var r=function(e){try{return bs(e)}catch(e){return{error:os(Yu,"Attachment is not a valid base64 string")}}}(e.data);if(r.error)return n(r.error);e.length=r.length,e.data="blob"===t?Ss(r,e.content_type):"base64"===t?_s(r):r,Rs(r,(function(t){e.digest="md5-"+t,n()}))}(e,t,n):function(e,t,n){Rs(e.data,(function(r){e.digest="md5-"+r,e.length=e.data.size||e.data.length||0,"binary"===t?As(e.data,(function(t){e.data=t,n()})):"base64"===t?Cs(e.data,(function(t){e.data=t,n()})):n()}))}(e,t,n)}function Fl(e,t,n,r,o,i,a,u,s){e=e||1e3;var l=u.new_edits,c=new fu,f=0,d=t.length;function p(){++f===d&&s&&s()}t.forEach((function(e,t){if(e._id&&Ys(e._id)){var r=e._deleted?"_removeLocal":"_putLocal";n[r](e,{ctx:o},(function(e,n){i[t]=e||n,p()}))}else{var a=e.metadata.id;c.has(a)?(d--,c.get(a).push([e,t])):c.set(a,[[e,t]])}})),c.forEach((function(t,n){var o=0;function s(){++o<t.length?c():p()}function c(){var c=t[o],f=c[0],d=c[1];if(r.has(n))!function(e,t,n,r,o,i,a,u){if(function(e,t){for(var n,r=e.slice(),o=t.split("-"),i=parseInt(o[0],10),a=o[1];n=r.pop();){if(n.pos===i&&n.ids[0]===a)return!0;for(var u=n.ids[2],s=0,l=u.length;s<l;s++)r.push({pos:n.pos+1,ids:u[s]})}return!1}(t.rev_tree,n.metadata.rev)&&!u)return r[o]=n,i();var s=t.winningRev||js(t),l="deleted"in t?t.deleted:Gs(t,s),c="deleted"in n.metadata?n.metadata.deleted:Gs(n.metadata),f=/^1-/.test(n.metadata.rev);if(l&&!c&&u&&f){var d=n.data;d._rev=s,d._id=n.metadata.id,n=Bl(d,u)}var p=Ks(t.rev_tree,n.metadata.rev_tree[0],e);if(u&&(l&&c&&"new_leaf"!==p.conflicts||!l&&"new_leaf"!==p.conflicts||l&&!c&&"new_branch"===p.conflicts)){var h=os(Wu);return r[o]=h,i()}var v=n.metadata.rev;n.metadata.rev_tree=p.tree,n.stemmedRevs=p.stemmedRevs||[],t.rev_map&&(n.metadata.rev_map=t.rev_map);var m=js(n.metadata),g=Gs(n.metadata,m),y=l===g?0:l<g?-1:1;a(n,m,g,v===m?g:Gs(n.metadata,v),!0,y,o,i)}(e,r.get(n),f,i,d,s,a,l);else{var p=Ks([],f.metadata.rev_tree[0],e);f.metadata.rev_tree=p.tree,f.stemmedRevs=p.stemmedRevs||[],function(e,t,n){var r=js(e.metadata),o=Gs(e.metadata,r);if("was_delete"in u&&o)return i[t]=os(qu,"deleted"),n();if(l&&function(e){return"missing"===e.metadata.rev_tree[0].ids[1].status}(e)){var s=os(Wu);return i[t]=s,n()}a(e,r,o,o,!1,o?0:1,t,n)}(f,d,s)}}c()}))}var Ul="document-store",$l="by-sequence",ql="attach-store",Wl="attach-seq-store",Hl="meta-store",Kl="local-store",Ql="detect-blob-support";function Gl(e){try{return JSON.stringify(e)}catch(t){return hu.stringify(e)}}function Yl(e){return function(t){var n="unknown_error";t.target&&t.target.error&&(n=t.target.error.name||t.target.error.message),e(os(ts,n,t.type))}}function Jl(e,t,n){return{data:Gl(e),winningRev:t,deletedOrLocal:n?"1":"0",seq:e.seq,id:e.id}}function Xl(e){if(!e)return null;var t=function(e){try{return JSON.parse(e)}catch(t){return hu.parse(e)}}(e.data);return t.winningRev=e.winningRev,t.deleted="1"===e.deletedOrLocal,t.seq=e.seq,t}function Zl(e){if(!e)return e;var t=e._doc_id_rev.lastIndexOf(":");return e._id=e._doc_id_rev.substring(0,t-1),e._rev=e._doc_id_rev.substring(t+1),delete e._doc_id_rev,e}function ec(e,t,n,r){n?r(e?"string"!=typeof e?e:Es(e,t):ws([""],{type:t})):e?"string"!=typeof e?xs(e,(function(e){r(_s(e))})):r(e):r("")}function tc(e,t,n,r){var o=Object.keys(e._attachments||{});if(!o.length)return r&&r();var i=0;function a(){++i===o.length&&r&&r()}o.forEach((function(r){t.attachments&&t.include_docs?function(e,t){var r=e._attachments[t],o=r.digest;n.objectStore(ql).get(o).onsuccess=function(e){r.body=e.target.result.body,a()}}(e,r):(e._attachments[r].stub=!0,a())}))}function nc(e,t){return Promise.all(e.map((function(e){if(e.doc&&e.doc._attachments){var n=Object.keys(e.doc._attachments);return Promise.all(n.map((function(n){var r=e.doc._attachments[n];if("body"in r){var o=r.body,i=r.content_type;return new Promise((function(a){ec(o,i,t,(function(t){e.doc._attachments[n]=Fu(Nu(r,["digest","content_type"]),{data:t}),a()}))}))}})))}})))}function rc(e,t,n){var r=[],o=n.objectStore($l),i=n.objectStore(ql),a=n.objectStore(Wl),u=e.length;function s(){--u||r.length&&r.forEach((function(e){a.index("digestSeq").count(IDBKeyRange.bound(e+"::",e+"::￿",!1,!1)).onsuccess=function(t){t.target.result||i.delete(e)}}))}e.forEach((function(e){var n=o.index("_doc_id_rev"),i=t+"::"+e;n.getKey(i).onsuccess=function(e){var t=e.target.result;if("number"!=typeof t)return s();o.delete(t),a.index("seq").openCursor(IDBKeyRange.only(t)).onsuccess=function(e){var t=e.target.result;if(t){var n=t.value.digestSeq.split("::")[0];r.push(n),a.delete(t.primaryKey),t.continue()}else s()}}}))}function oc(e,t,n){try{return{txn:e.transaction(t,n)}}catch(e){return{error:e}}}var ic=new Du;function ac(e,t,n,r,o,i){for(var a,u,s,l,c,f,d,p,h=t.docs,v=0,m=h.length;v<m;v++){var g=h[v];g._id&&Ys(g._id)||(g=h[v]=Bl(g,n.new_edits,e)).error&&!d&&(d=g)}if(d)return i(d);var y=!1,b=0,_=new Array(h.length),w=new fu,k=!1,S=r._meta.blobSupport?"blob":"base64";function E(){y=!0,x()}function x(){p&&y&&(p.docCount+=b,f.put(p))}function A(){k||(ic.notify(r._meta.name),i(null,_))}function C(e,t,n,r,o,i,a,u){e.metadata.winningRev=t,e.metadata.deleted=n;var s=e.data;if(s._id=e.metadata.id,s._rev=e.metadata.rev,r&&(s._deleted=!0),s._attachments&&Object.keys(s._attachments).length)return function(e,t,n,r,o,i){var a=e.data,u=0,s=Object.keys(a._attachments);function c(){u===s.length&&O(e,t,n,r,o,i)}function f(){u++,c()}s.forEach((function(n){var r=e.data._attachments[n];if(r.stub)u++,c();else{var o=r.data;delete r.data,r.revpos=parseInt(t,10),function(e,t,n){l.count(e).onsuccess=function(r){if(r.target.result)return n();var o={digest:e,body:t};l.put(o).onsuccess=n}}(r.digest,o,f)}}))}(e,t,n,o,a,u);b+=i,x(),O(e,t,n,o,a,u)}function O(e,t,n,o,i,l){var f=e.data,d=e.metadata;function p(i){var s=e.stemmedRevs||[];o&&r.auto_compaction&&(s=s.concat(function(e){var t=[];return Ms(e.rev_tree,(function(e,n,r,o,i){"available"!==i.status||e||(t.push(n+"-"+r),i.status="missing")})),t}(e.metadata))),s&&s.length&&rc(s,e.metadata.id,a),d.seq=i.target.result;var l=Jl(d,t,n);u.put(l).onsuccess=h}function h(){_[i]={ok:!0,id:d.id,rev:d.rev},w.set(e.metadata.id,e.metadata),function(e,t,n){var r=0,o=Object.keys(e.data._attachments||{});if(!o.length)return n();function i(){++r===o.length&&n()}function a(n){var r=e.data._attachments[n].digest,o=c.put({seq:t,digestSeq:r+"::"+t});o.onsuccess=i,o.onerror=function(e){e.preventDefault(),e.stopPropagation(),i()}}for(var u=0;u<o.length;u++)a(o[u])}(e,d.seq,l)}f._doc_id_rev=d.id+"::"+d.rev,delete f._id,delete f._rev;var v=s.put(f);v.onsuccess=p,v.onerror=function(e){e.preventDefault(),e.stopPropagation(),s.index("_doc_id_rev").getKey(f._doc_id_rev).onsuccess=function(e){s.put(f,e.target.result).onsuccess=p}}}!function(e,t,n){if(!e.length)return n();var r,o=0;function i(){o++,e.length===o&&(r?n(r):n())}e.forEach((function(e){var n=e.data&&e.data._attachments?Object.keys(e.data._attachments):[],o=0;if(!n.length)return i();function a(e){r=e,++o===n.length&&i()}for(var u in e.data._attachments)e.data._attachments.hasOwnProperty(u)&&Vl(e.data._attachments[u],t,a)}))}(h,S,(function(t){if(t)return i(t);!function(){var t=oc(o,[Ul,$l,ql,Kl,Wl,Hl],"readwrite");if(t.error)return i(t.error);(a=t.txn).onabort=Yl(i),a.ontimeout=Yl(i),a.oncomplete=A,u=a.objectStore(Ul),s=a.objectStore($l),l=a.objectStore(ql),c=a.objectStore(Wl),(f=a.objectStore(Hl)).get(Hl).onsuccess=function(e){p=e.target.result,x()},function(e){var t=[];if(h.forEach((function(e){e.data&&e.data._attachments&&Object.keys(e.data._attachments).forEach((function(n){var r=e.data._attachments[n];r.stub&&t.push(r.digest)}))})),!t.length)return e();var n,r=0;t.forEach((function(o){!function(e,t){l.get(e).onsuccess=function(n){if(n.target.result)t();else{var r=os(rs,"unknown stub attachment with digest "+e);r.status=412,t(r)}}}(o,(function(o){o&&!n&&(n=o),++r===t.length&&e(n)}))}))}((function(t){if(t)return k=!0,i(t);!function(){if(h.length)for(var t=0,o=0,i=h.length;o<i;o++){var s=h[o];s._id&&Ys(s._id)?l():u.get(s.metadata.id).onsuccess=c}function l(){++t===h.length&&Fl(e.revs_limit,h,r,w,a,_,C,n,E)}function c(e){var t=Xl(e.target.result);t&&w.set(t.id,t),l()}}()}))}()}))}function uc(e,t,n,r,o){var i,a,u;function s(e){a=e.target.result,i&&o(i,a,u)}function l(e){i=e.target.result,a&&o(i,a,u)}function c(e){var t=e.target.result;if(!t)return o();o([t.key],[t.value],t)}-1===r&&(r=1e3),"function"==typeof e.getAll&&"function"==typeof e.getAllKeys&&r>1&&!n?(u={continue:function(){if(!i.length)return o();var n,u=i[i.length-1];if(t&&t.upper)try{n=IDBKeyRange.bound(u,t.upper,!0,t.upperOpen)}catch(e){if("DataError"===e.name&&0===e.code)return o()}else n=IDBKeyRange.lowerBound(u,!0);t=n,i=null,a=null,e.getAll(t,r).onsuccess=s,e.getAllKeys(t,r).onsuccess=l}},e.getAll(t,r).onsuccess=s,e.getAllKeys(t,r).onsuccess=l):n?e.openCursor(t,"prev").onsuccess=c:e.openCursor(t).onsuccess=c}function sc(e,t,n){var r,o,i="startkey"in e&&e.startkey,a="endkey"in e&&e.endkey,u="key"in e&&e.key,s="keys"in e&&e.keys,l=e.skip||0,c="number"==typeof e.limit?e.limit:-1,f=!1!==e.inclusive_end;if(!s&&(o=(r=function(e,t,n,r,o){try{if(e&&t)return o?IDBKeyRange.bound(t,e,!n,!1):IDBKeyRange.bound(e,t,!1,!n);if(e)return o?IDBKeyRange.upperBound(e):IDBKeyRange.lowerBound(e);if(t)return o?IDBKeyRange.lowerBound(t,!n):IDBKeyRange.upperBound(t,!n);if(r)return IDBKeyRange.only(r)}catch(e){return{error:e}}return null}(i,a,f,u,e.descending))&&r.error)&&("DataError"!==o.name||0!==o.code))return n(os(ts,o.name,o.message));var d=[Ul,$l,Hl];e.attachments&&d.push(ql);var p=oc(t,d,"readonly");if(p.error)return n(p.error);var h=p.txn;h.oncomplete=function(){e.attachments?nc(w,e.binary).then(x):x()},h.onabort=Yl(n);var v,m,g=h.objectStore(Ul),y=h.objectStore($l),b=h.objectStore(Hl),_=y.index("_doc_id_rev"),w=[];function k(t,n){var r={id:n.id,key:n.id,value:{rev:t}};n.deleted?s&&(w.push(r),r.value.deleted=!0,r.doc=null):l--<=0&&(w.push(r),e.include_docs&&function(t,n,r){var o=t.id+"::"+r;_.get(o).onsuccess=function(r){if(n.doc=Zl(r.target.result)||{},e.conflicts){var o=Bs(t);o.length&&(n.doc._conflicts=o)}tc(n.doc,e,h)}}(n,r,t))}function S(e){for(var t=0,n=e.length;t<n&&w.length!==c;t++){var r=e[t];if(r.error&&s)w.push(r);else{var o=Xl(r);k(o.winningRev,o)}}}function E(e,t,n){n&&(S(t),w.length<c&&n.continue())}function x(){var t={total_rows:v,offset:e.skip,rows:w};e.update_seq&&void 0!==m&&(t.update_seq=m),n(null,t)}return b.get(Hl).onsuccess=function(e){v=e.target.result.docCount},e.update_seq&&(y.openCursor(null,"prev").onsuccess=function(e){var t=e.target.result,n=void 0;return t&&t.key&&(n=t.key),function(e){e.target.result&&e.target.result.length>0&&(m=e.target.result[0])}({target:{result:[n]}})}),o||0===c?void 0:s?function(e,t,n){var r=new Array(e.length),o=0;e.forEach((function(i,a){t.get(i).onsuccess=function(t){t.target.result?r[a]=t.target.result:r[a]={key:i,error:"not_found"},++o===e.length&&n(e,r,{})}}))}(e.keys,g,E):-1===c?function(e,t,n){if("function"!=typeof e.getAll){var r=[];e.openCursor(t).onsuccess=function(e){var t=e.target.result;t?(r.push(t.value),t.continue()):n({target:{result:r}})}}else e.getAll(t).onsuccess=n}(g,r,(function(t){var n=t.target.result;e.descending&&(n=n.reverse()),S(n)})):void uc(g,r,e.descending,c+l,E)}var lc=!1,cc=[];function fc(){!lc&&cc.length&&(lc=!0,cc.shift()())}var dc,pc=new fu,hc=new fu;function vc(e,t){var n=this;!function(t,r,o){cc.push((function(){(function(e,t,n){var r=t.name,o=null;function i(e){var t=e.createObjectStore(Ul,{keyPath:"id"});e.createObjectStore($l,{autoIncrement:!0}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0}),e.createObjectStore(ql,{keyPath:"digest"}),e.createObjectStore(Hl,{keyPath:"id",autoIncrement:!1}),e.createObjectStore(Ql),t.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),e.createObjectStore(Kl,{keyPath:"_id"});var n=e.createObjectStore(Wl,{autoIncrement:!0});n.createIndex("seq","seq"),n.createIndex("digestSeq","digestSeq",{unique:!0})}function a(e,t){var n=e.objectStore(Ul);n.createIndex("deletedOrLocal","deletedOrLocal",{unique:!1}),n.openCursor().onsuccess=function(e){var r=e.target.result;if(r){var o=r.value,i=Gs(o);o.deletedOrLocal=i?"1":"0",n.put(o),r.continue()}else t()}}function u(e){e.createObjectStore(Kl,{keyPath:"_id"}).createIndex("_doc_id_rev","_doc_id_rev",{unique:!0})}function s(e,t){var n=e.objectStore(Kl),r=e.objectStore(Ul),o=e.objectStore($l);r.openCursor().onsuccess=function(e){var i=e.target.result;if(i){var a=i.value,u=a.id,s=Ys(u),l=js(a);if(s){var c=u+"::"+l,f=u+"::",d=u+"::~",p=o.index("_doc_id_rev"),h=IDBKeyRange.bound(f,d,!1,!1),v=p.openCursor(h);v.onsuccess=function(e){if(v=e.target.result){var t=v.value;t._doc_id_rev===c&&n.put(t),o.delete(v.primaryKey),v.continue()}else r.delete(i.primaryKey),i.continue()}}else i.continue()}else t&&t()}}function l(e){var t=e.createObjectStore(Wl,{autoIncrement:!0});t.createIndex("seq","seq"),t.createIndex("digestSeq","digestSeq",{unique:!0})}function c(e,t){var n=e.objectStore($l),r=e.objectStore(ql),o=e.objectStore(Wl);r.count().onsuccess=function(e){if(!e.target.result)return t();n.openCursor().onsuccess=function(e){var n=e.target.result;if(!n)return t();for(var r=n.value,i=n.primaryKey,a=Object.keys(r._attachments||{}),u={},s=0;s<a.length;s++)u[r._attachments[a[s]].digest]=!0;var l=Object.keys(u);for(s=0;s<l.length;s++){var c=l[s];o.put({seq:i,digestSeq:c+"::"+i})}n.continue()}}}function f(e){function t(e){return e.data?Xl(e):(e.deleted="1"===e.deletedOrLocal,e)}var n=e.objectStore($l),r=e.objectStore(Ul);r.openCursor().onsuccess=function(e){var o=e.target.result;if(o){var i=t(o.value);if(i.winningRev=i.winningRev||js(i),i.seq)return u();a()}function a(){var e=i.id+"::",t=i.id+"::￿",r=n.index("_doc_id_rev").openCursor(IDBKeyRange.bound(e,t)),o=0;r.onsuccess=function(e){var t=e.target.result;if(!t)return i.seq=o,u();var n=t.primaryKey;n>o&&(o=n),t.continue()}}function u(){var e=Jl(i,i.winningRev,i.deleted);r.put(e).onsuccess=function(){o.continue()}}}}e._meta=null,e._remote=!1,e.type=function(){return"idb"},e._id=Pu((function(t){t(null,e._meta.instanceId)})),e._bulkDocs=function(n,r,i){ac(t,n,r,e,o,i)},e._get=function(e,t,n){var r,i,a,u=t.ctx;if(!u){var s=oc(o,[Ul,$l,ql],"readonly");if(s.error)return n(s.error);u=s.txn}function l(){n(a,{doc:r,metadata:i,ctx:u})}u.objectStore(Ul).get(e).onsuccess=function(e){if(!(i=Xl(e.target.result)))return a=os(qu,"missing"),l();var n;if(t.rev)n=t.latest?function(e,t){for(var n,r=t.rev_tree.slice();n=r.pop();){var o=n.pos,i=n.ids,a=i[0],u=i[1],s=i[2],l=0===s.length,c=n.history?n.history.slice():[];if(c.push({id:a,pos:o,opts:u}),l)for(var f=0,d=c.length;f<d;f++){var p=c[f];if(p.pos+"-"+p.id===e)return o+"-"+a}for(var h=0,v=s.length;h<v;h++)r.push({pos:o+1,ids:s[h],history:c})}throw new Error("Unable to resolve latest revision for id "+t.id+", rev "+e)}(t.rev,i):t.rev;else if(n=i.winningRev,Gs(i))return a=os(qu,"deleted"),l();var o=u.objectStore($l),s=i.id+"::"+n;o.index("_doc_id_rev").get(s).onsuccess=function(e){if((r=e.target.result)&&(r=Zl(r)),!r)return a=os(qu,"missing"),l();l()}}},e._getAttachment=function(e,t,n,r,i){var a;if(r.ctx)a=r.ctx;else{var u=oc(o,[Ul,$l,ql],"readonly");if(u.error)return i(u.error);a=u.txn}var s=n.digest,l=n.content_type;a.objectStore(ql).get(s).onsuccess=function(e){ec(e.target.result.body,l,r.binary,(function(e){i(null,e)}))}},e._info=function(t){var n,r,i=oc(o,[Hl,$l],"readonly");if(i.error)return t(i.error);var a=i.txn;a.objectStore(Hl).get(Hl).onsuccess=function(e){r=e.target.result.docCount},a.objectStore($l).openCursor(null,"prev").onsuccess=function(e){var t=e.target.result;n=t?t.key:0},a.oncomplete=function(){t(null,{doc_count:r,update_seq:n,idb_attachment_format:e._meta.blobSupport?"binary":"base64"})}},e._allDocs=function(e,t){sc(e,o,t)},e._changes=function(t){return function(e,t,n,r){if((e=Ou(e)).continuous){var o=n+":"+Ls();return ic.addListener(n,o,t,e),ic.notify(n),{cancel:function(){ic.removeListener(n,o)}}}var i=e.doc_ids&&new cu(e.doc_ids);e.since=e.since||0;var a=e.since,u="limit"in e?e.limit:-1;0===u&&(u=1);var s,l,c,f,d=[],p=0,h=as(e),v=new fu;function m(e,t,n,r){if(n.seq!==t)return r();if(n.winningRev===e._rev)return r(n,e);var o=e._id+"::"+n.winningRev;f.get(o).onsuccess=function(e){r(n,Zl(e.target.result))}}function g(){e.complete(null,{results:d,last_seq:a})}var y=[Ul,$l];e.attachments&&y.push(ql);var b=oc(r,y,"readonly");if(b.error)return e.complete(b.error);(s=b.txn).onabort=Yl(e.complete),s.oncomplete=function(){!e.continuous&&e.attachments?nc(d).then(g):g()},l=s.objectStore($l),c=s.objectStore(Ul),f=l.index("_doc_id_rev"),uc(l,e.since&&!e.descending?IDBKeyRange.lowerBound(e.since,!0):null,e.descending,u,(function(t,n,r){if(r&&t.length){var o=new Array(t.length),l=new Array(t.length),f=0;n.forEach((function(n,a){!function(e,t,n){if(i&&!i.has(e._id))return n();var r=v.get(e._id);if(r)return m(e,t,r,n);c.get(e._id).onsuccess=function(o){r=Xl(o.target.result),v.set(e._id,r),m(e,t,r,n)}}(Zl(n),t[a],(function(n,i){l[a]=n,o[a]=i,++f===t.length&&function(){for(var t=[],n=0,i=o.length;n<i&&p!==u;n++){var a=o[n];if(a){var s=l[n];t.push(g(s,a))}}Promise.all(t).then((function(t){for(var n=0,r=t.length;n<r;n++)t[n]&&e.onChange(t[n])})).catch(e.complete),p!==u&&r.continue()}()}))}))}function g(t,n){var r=e.processChange(n,t,e);a=r.seq=t.seq;var o=h(r);return"object"==typeof o?Promise.reject(o):o?(p++,e.return_docs&&d.push(r),e.attachments&&e.include_docs?new Promise((function(t){tc(n,e,s,(function(){nc([r],e.binary).then((function(){t(r)}))}))})):Promise.resolve(r)):Promise.resolve()}}))}(t,e,r,o)},e._close=function(e){o.close(),pc.delete(r),e()},e._getRevisionTree=function(e,t){var n=oc(o,[Ul],"readonly");if(n.error)return t(n.error);n.txn.objectStore(Ul).get(e).onsuccess=function(e){var n=Xl(e.target.result);n?t(null,n.rev_tree):t(os(qu))}},e._doCompaction=function(e,t,n){var r=oc(o,[Ul,$l,ql,Wl],"readwrite");if(r.error)return n(r.error);var i=r.txn;i.objectStore(Ul).get(e).onsuccess=function(n){var r=Xl(n.target.result);Ms(r.rev_tree,(function(e,n,r,o,i){var a=n+"-"+r;-1!==t.indexOf(a)&&(i.status="missing")})),rc(t,e,i);var o=r.winningRev,a=r.deleted;i.objectStore(Ul).put(Jl(r,o,a))},i.onabort=Yl(n),i.oncomplete=function(){n()}},e._getLocal=function(e,t){var n=oc(o,[Kl],"readonly");if(n.error)return t(n.error);var r=n.txn.objectStore(Kl).get(e);r.onerror=Yl(t),r.onsuccess=function(e){var n=e.target.result;n?(delete n._doc_id_rev,t(null,n)):t(os(qu))}},e._putLocal=function(e,t,n){"function"==typeof t&&(n=t,t={}),delete e._revisions;var r=e._rev,i=e._id;e._rev=r?"0-"+(parseInt(r.split("-")[1],10)+1):"0-1";var a,u=t.ctx;if(!u){var s=oc(o,[Kl],"readwrite");if(s.error)return n(s.error);(u=s.txn).onerror=Yl(n),u.oncomplete=function(){a&&n(null,a)}}var l,c=u.objectStore(Kl);r?(l=c.get(i)).onsuccess=function(o){var i=o.target.result;i&&i._rev===r?c.put(e).onsuccess=function(){a={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,a)}:n(os(Wu))}:((l=c.add(e)).onerror=function(e){n(os(Wu)),e.preventDefault(),e.stopPropagation()},l.onsuccess=function(){a={ok:!0,id:e._id,rev:e._rev},t.ctx&&n(null,a)})},e._removeLocal=function(e,t,n){"function"==typeof t&&(n=t,t={});var r,i=t.ctx;if(!i){var a=oc(o,[Kl],"readwrite");if(a.error)return n(a.error);(i=a.txn).oncomplete=function(){r&&n(null,r)}}var u=e._id,s=i.objectStore(Kl),l=s.get(u);l.onerror=Yl(n),l.onsuccess=function(o){var i=o.target.result;i&&i._rev===e._rev?(s.delete(u),r={ok:!0,id:u,rev:"0-0"},t.ctx&&n(null,r)):n(os(qu))}},e._destroy=function(e,t){ic.removeAllListeners(r);var n=hc.get(r);n&&n.result&&(n.result.close(),pc.delete(r));var o=indexedDB.deleteDatabase(r);o.onsuccess=function(){hc.delete(r),Mu()&&r in localStorage&&delete localStorage[r],t(null,{ok:!0})},o.onerror=Yl(t)};var d=pc.get(r);if(d)return o=d.idb,e._meta=d.global,uu()((function(){n(null,e)}));var p=indexedDB.open(r,5);hc.set(r,p),p.onupgradeneeded=function(e){var t=e.target.result;if(e.oldVersion<1)return i(t);var n=e.currentTarget.transaction;e.oldVersion<3&&u(t),e.oldVersion<4&&l(t);var r=[a,s,c,f],o=e.oldVersion;function d(){var e=r[o-1];o++,e&&e(n,d)}d()},p.onsuccess=function(t){(o=t.target.result).onversionchange=function(){o.close(),pc.delete(r)},o.onabort=function(e){zu("error","Database has a global failure",e.target.error),o.close(),pc.delete(r)};var i,a,u,s,l=o.transaction([Hl,Ql,Ul],"readwrite"),c=!1;function f(){void 0!==u&&c&&(e._meta={name:r,instanceId:s,blobSupport:u},pc.set(r,{idb:o,global:e._meta}),n(null,e))}function d(){if(void 0!==a&&void 0!==i){var e=r+"_id";e in i?s=i[e]:i[e]=s=Ls(),i.docCount=a,l.objectStore(Hl).put(i)}}l.objectStore(Hl).get(Hl).onsuccess=function(e){i=e.target.result||{id:Hl},d()},function(e,t){e.objectStore(Ul).index("deletedOrLocal").count(IDBKeyRange.only("0")).onsuccess=function(e){t(e.target.result)}}(l,(function(e){a=e,d()})),dc||(dc=function(e){return new Promise((function(t){var n=ws([""]),r=e.objectStore(Ql).put(n,"key");r.onsuccess=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)},r.onerror=e.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)}})).catch((function(){return!1}))}(l)),dc.then((function(e){u=e,f()})),l.oncomplete=function(){c=!0,f()},l.onabort=Yl(n)},p.onerror=function(e){var t=e.target.error&&e.target.error.message;t?-1!==t.indexOf("stored database is a higher version")&&(t=new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter')):t="Failed to open indexedDB, are you in private browsing mode?",zu("error",t),n(os(ts,t))}})(n,e,(function(e,t){!function(e,t,n,r){try{e(t,n)}catch(t){r.emit("error",t)}}(r,e,t,o),lc=!1,uu()((function(){fc()}))}))})),fc()}(0,t,n.constructor)}vc.valid=function(){try{return"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}};var mc=5e3,gc={};function yc(e){var t=e.doc||e.ok,n=t&&t._attachments;n&&Object.keys(n).forEach((function(e){var t=n[e];t.data=Es(t.data,t.content_type)}))}function bc(e){return/^_design/.test(e)?"_design/"+encodeURIComponent(e.slice(8)):/^_local/.test(e)?"_local/"+encodeURIComponent(e.slice(7)):encodeURIComponent(e)}function _c(e){return e._attachments&&Object.keys(e._attachments)?Promise.all(Object.keys(e._attachments).map((function(t){var n=e._attachments[t];if(n.data&&"string"!=typeof n.data)return new Promise((function(e){Cs(n.data,e)})).then((function(e){n.data=e}))}))):Promise.resolve()}function wc(e,t){return kc(e,e.db+"/"+t)}function kc(e,t){var n=e.path?"/":"";return e.protocol+"://"+e.host+(e.port?":"+e.port:"")+"/"+e.path+n+t}function Sc(e){return"?"+Object.keys(e).map((function(t){return t+"="+encodeURIComponent(e[t])})).join("&")}function Ec(e,t){var n=this,r=function(e,t){if(function(e){if(!e.prefix)return!1;var t=ms(e.prefix).protocol;return"http"===t||"https"===t}(t)){var n=t.name.substr(t.prefix.length);e=t.prefix.replace(/\/?$/,"/")+encodeURIComponent(n)}var r=ms(e);(r.user||r.password)&&(r.auth={username:r.user,password:r.password});var o=r.path.replace(/(^\/|\/$)/g,"").split("/");return r.db=o.pop(),-1===r.db.indexOf("%")&&(r.db=encodeURIComponent(r.db)),r.path=o.join("/"),r}(e.name,e),o=wc(r,"");e=Ou(e);var i,a=function(t,n){if((n=n||{}).headers=n.headers||new sl,n.credentials="include",e.auth||r.auth){var o=e.auth||r.auth,i=o.username+":"+o.password,a=_s(unescape(encodeURIComponent(i)));n.headers.set("Authorization","Basic "+a)}var u=e.headers||{};return Object.keys(u).forEach((function(e){n.headers.append(e,u[e])})),function(e){var t="undefined"!=typeof navigator&&navigator.userAgent?navigator.userAgent.toLowerCase():"",n=-1!==t.indexOf("msie"),r=-1!==t.indexOf("trident"),o=-1!==t.indexOf("edge"),i=!("method"in e)||"GET"===e.method;return(n||r||o)&&i}(n)&&(t+=(-1===t.indexOf("?")?"?":"&")+"_nonce="+Date.now()),(e.fetch||ul)(t,n)};function u(e,t){return Ru(e,mu()((function(e){l().then((function(){return t.apply(this,e)})).catch((function(t){e.pop()(t)}))}))).bind(n)}function s(e,t,n){var r={};return(t=t||{}).headers=t.headers||new sl,t.headers.get("Content-Type")||t.headers.set("Content-Type","application/json"),t.headers.get("Accept")||t.headers.set("Accept","application/json"),a(e,t).then((function(e){return r.ok=e.ok,r.status=e.status,e.json()})).then((function(e){if(r.data=e,!r.ok){r.data.status=r.status;var t=is(r.data);if(n)return n(t);throw t}if(Array.isArray(r.data)&&(r.data=r.data.map((function(e){return e.error||e.missing?is(e):e}))),!n)return r;n(null,r.data)}))}function l(){return e.skip_setup?Promise.resolve():i||((i=s(o).catch((function(e){return e&&e.status&&404===e.status?(Vu(404,"PouchDB is just detecting if the remote exists."),s(o,{method:"PUT"})):Promise.reject(e)})).catch((function(e){return!(!e||!e.status||412!==e.status)||Promise.reject(e)}))).catch((function(){i=null})),i)}function c(e){return e.split("/").map(encodeURIComponent).join("/")}uu()((function(){t(null,n)})),n._remote=!0,n.type=function(){return"http"},n.id=u("id",(function(e){a(kc(r,"")).then((function(e){return e.json()})).catch((function(){return{}})).then((function(t){var n=t&&t.uuid?t.uuid+r.db:wc(r,"");e(null,n)}))})),n.compact=u("compact",(function(e,t){"function"==typeof e&&(t=e,e={}),e=Ou(e),s(wc(r,"_compact"),{method:"POST"}).then((function(){!function r(){n.info((function(n,o){o&&!o.compact_running?t(null,{ok:!0}):setTimeout(r,e.interval||200)}))}()}))})),n.bulkGet=Ru("bulkGet",(function(e,t){var n=this;function o(t){var n={};e.revs&&(n.revs=!0),e.attachments&&(n.attachments=!0),e.latest&&(n.latest=!0),s(wc(r,"_bulk_get"+Sc(n)),{method:"POST",body:JSON.stringify({docs:e.docs})}).then((function(n){e.attachments&&e.binary&&n.data.results.forEach((function(e){e.docs.forEach(yc)})),t(null,n.data)})).catch(t)}function i(){var r=Math.ceil(e.docs.length/50),o=0,i=new Array(r);function a(e){return function(n,a){i[e]=a.results,++o===r&&t(null,{results:us(i)})}}for(var u=0;u<r;u++){var s=Nu(e,["revs","attachments","binary","latest"]);s.docs=e.docs.slice(50*u,Math.min(e.docs.length,50*(u+1))),ju(n,s,a(u))}}var a=kc(r,""),u=gc[a];"boolean"!=typeof u?o((function(e,n){e?(gc[a]=!1,Vu(e.status,"PouchDB is just detecting if the remote supports the _bulk_get API."),i()):(gc[a]=!0,t(null,n))})):u?o(t):i()})),n._info=function(e){l().then((function(){return a(wc(r,""))})).then((function(e){return e.json()})).then((function(t){t.host=wc(r,""),e(null,t)})).catch(e)},n.fetch=function(e,t){return l().then((function(){var n="/"===e.substring(0,1)?kc(r,e.substring(1)):wc(r,e);return a(n,t)}))},n.get=u("get",(function(e,t,n){"function"==typeof t&&(n=t,t={});var o={};function i(e){var n,o=e._attachments,i=o&&Object.keys(o);if(o&&i.length)return n=i.map((function(n){return function(){return function(n){var i=o[n],u=bc(e._id)+"/"+c(n)+"?rev="+e._rev;return a(wc(r,u)).then((function(e){return"buffer"in e?e.buffer():e.blob()})).then((function(e){if(t.binary){var n=Object.getOwnPropertyDescriptor(e.__proto__,"type");return n&&!n.set||(e.type=i.content_type),e}return new Promise((function(t){Cs(e,t)}))})).then((function(e){delete i.stub,delete i.length,i.data=e}))}(n)}})),new Promise((function(e,t){var r,o=0,i=0,a=0,u=n.length;function s(){++a===u?r?t(r):e():f()}function l(){o--,s()}function c(e){o--,r=r||e,s()}function f(){for(;o<5&&i<u;)o++,n[i++]().then(l,c)}f()}))}(t=Ou(t)).revs&&(o.revs=!0),t.revs_info&&(o.revs_info=!0),t.latest&&(o.latest=!0),t.open_revs&&("all"!==t.open_revs&&(t.open_revs=JSON.stringify(t.open_revs)),o.open_revs=t.open_revs),t.rev&&(o.rev=t.rev),t.conflicts&&(o.conflicts=t.conflicts),t.update_seq&&(o.update_seq=t.update_seq),e=bc(e),s(wc(r,e+Sc(o))).then((function(e){return Promise.resolve().then((function(){if(t.attachments)return n=e.data,Array.isArray(n)?Promise.all(n.map((function(e){if(e.ok)return i(e.ok)}))):i(n);var n})).then((function(){n(null,e.data)}))})).catch((function(t){t.docId=e,n(t)}))})),n.remove=u("remove",(function(e,t,n,o){var i;"string"==typeof t?(i={_id:e,_rev:t},"function"==typeof n&&(o=n,n={})):(i=e,"function"==typeof t?(o=t,n={}):(o=n,n=t));var a=i._rev||n.rev;s(wc(r,bc(i._id))+"?rev="+a,{method:"DELETE"},o).catch(o)})),n.getAttachment=u("getAttachment",(function(e,t,n,o){"function"==typeof n&&(o=n,n={});var i,u=n.rev?"?rev="+n.rev:"",s=wc(r,bc(e))+"/"+c(t)+u;a(s,{method:"GET"}).then((function(e){if(i=e.headers.get("content-type"),e.ok)return"undefined"==typeof process||process.browser||"function"!=typeof e.buffer?e.blob():e.buffer();throw e})).then((function(e){"undefined"==typeof process||process.browser||(e.type=i),o(null,e)})).catch((function(e){o(e)}))})),n.removeAttachment=u("removeAttachment",(function(e,t,n,o){s(wc(r,bc(e)+"/"+c(t))+"?rev="+n,{method:"DELETE"},o).catch(o)})),n.putAttachment=u("putAttachment",(function(e,t,n,o,i,a){"function"==typeof i&&(a=i,i=o,o=n,n=null);var u=bc(e)+"/"+c(t),l=wc(r,u);if(n&&(l+="?rev="+n),"string"==typeof o){var f;try{f=bs(o)}catch(e){return a(os(Yu,"Attachment is not a valid base64 string"))}o=f?Ss(f,i):""}s(l,{headers:new sl({"Content-Type":i}),method:"PUT",body:o},a).catch(a)})),n._bulkDocs=function(e,t,n){e.new_edits=t.new_edits,l().then((function(){return Promise.all(e.docs.map(_c))})).then((function(){return s(wc(r,"_bulk_docs"),{method:"POST",body:JSON.stringify(e)},n)})).catch(n)},n._put=function(e,t,n){l().then((function(){return _c(e)})).then((function(){return s(wc(r,bc(e._id)),{method:"PUT",body:JSON.stringify(e)})})).then((function(e){n(null,e.data)})).catch((function(t){t.docId=e&&e._id,n(t)}))},n.allDocs=u("allDocs",(function(e,t){"function"==typeof e&&(t=e,e={});var n,o={},i="GET";(e=Ou(e)).conflicts&&(o.conflicts=!0),e.update_seq&&(o.update_seq=!0),e.descending&&(o.descending=!0),e.include_docs&&(o.include_docs=!0),e.attachments&&(o.attachments=!0),e.key&&(o.key=JSON.stringify(e.key)),e.start_key&&(e.startkey=e.start_key),e.startkey&&(o.startkey=JSON.stringify(e.startkey)),e.end_key&&(e.endkey=e.end_key),e.endkey&&(o.endkey=JSON.stringify(e.endkey)),void 0!==e.inclusive_end&&(o.inclusive_end=!!e.inclusive_end),void 0!==e.limit&&(o.limit=e.limit),void 0!==e.skip&&(o.skip=e.skip);var a=Sc(o);void 0!==e.keys&&(i="POST",n={keys:e.keys}),s(wc(r,"_all_docs"+a),{method:i,body:JSON.stringify(n)}).then((function(n){e.include_docs&&e.attachments&&e.binary&&n.data.rows.forEach(yc),t(null,n.data)})).catch(t)})),n._changes=function(e){var t="batch_size"in e?e.batch_size:25;(e=Ou(e)).continuous&&!("heartbeat"in e)&&(e.heartbeat=1e4);var n="timeout"in e?e.timeout:3e4;"timeout"in e&&e.timeout&&n-e.timeout<mc&&(n=e.timeout+mc),"heartbeat"in e&&e.heartbeat&&n-e.heartbeat<mc&&(n=e.heartbeat+mc);var o={};"timeout"in e&&e.timeout&&(o.timeout=e.timeout);var i=void 0!==e.limit&&e.limit,a=i;if(e.style&&(o.style=e.style),(e.include_docs||e.filter&&"function"==typeof e.filter)&&(o.include_docs=!0),e.attachments&&(o.attachments=!0),e.continuous&&(o.feed="longpoll"),e.seq_interval&&(o.seq_interval=e.seq_interval),e.conflicts&&(o.conflicts=!0),e.descending&&(o.descending=!0),e.update_seq&&(o.update_seq=!0),"heartbeat"in e&&e.heartbeat&&(o.heartbeat=e.heartbeat),e.filter&&"string"==typeof e.filter&&(o.filter=e.filter),e.view&&"string"==typeof e.view&&(o.filter="_view",o.view=e.view),e.query_params&&"object"==typeof e.query_params)for(var u in e.query_params)e.query_params.hasOwnProperty(u)&&(o[u]=e.query_params[u]);var c,f="GET";e.doc_ids?(o.filter="_doc_ids",f="POST",c={doc_ids:e.doc_ids}):e.selector&&(o.filter="_selector",f="POST",c={selector:e.selector});var d,p=new al,h=function(n,u){if(!e.aborted){o.since=n,"object"==typeof o.since&&(o.since=JSON.stringify(o.since)),e.descending?i&&(o.limit=a):o.limit=!i||a>t?t:a;var h=wc(r,"_changes"+Sc(o)),v={signal:p.signal,method:f,body:JSON.stringify(c)};d=n,e.aborted||l().then((function(){return s(h,v,u)})).catch(u)}},v={results:[]},m=function(n,r){if(!e.aborted){var o=0;if(r&&r.results){o=r.results.length,v.last_seq=r.last_seq;var u=null,s=null;"number"==typeof r.pending&&(u=r.pending),"string"!=typeof v.last_seq&&"number"!=typeof v.last_seq||(s=v.last_seq),e.query_params,r.results=r.results.filter((function(t){a--;var n=as(e)(t);return n&&(e.include_docs&&e.attachments&&e.binary&&yc(t),e.return_docs&&v.results.push(t),e.onChange(t,u,s)),n}))}else if(n)return e.aborted=!0,void e.complete(n);r&&r.last_seq&&(d=r.last_seq);var l=i&&a<=0||r&&o<t||e.descending;(!e.continuous||i&&a<=0)&&l?e.complete(null,v):uu()((function(){h(d,m)}))}};return h(e.since||0,m),{cancel:function(){e.aborted=!0,p.abort()}}},n.revsDiff=u("revsDiff",(function(e,t,n){"function"==typeof t&&(n=t,t={}),s(wc(r,"_revs_diff"),{method:"POST",body:JSON.stringify(e)},n).catch(n)})),n._close=function(e){e()},n._destroy=function(e,t){s(wc(r,""),{method:"DELETE"}).then((function(e){t(null,e)})).catch((function(e){404===e.status?t(null,{ok:!0}):t(e)}))}}function xc(e){this.status=400,this.name="query_parse_error",this.message=e,this.error=!0;try{Error.captureStackTrace(this,xc)}catch(e){}}function Ac(e){this.status=404,this.name="not_found",this.message=e,this.error=!0;try{Error.captureStackTrace(this,Ac)}catch(e){}}function Cc(e){this.status=500,this.name="invalid_value",this.message=e,this.error=!0;try{Error.captureStackTrace(this,Cc)}catch(e){}}function Oc(e,t){return t&&e.then((function(e){uu()((function(){t(null,e)}))}),(function(e){uu()((function(){t(e)}))})),e}function Tc(e,t){return function(){var n=arguments,r=this;return e.add((function(){return t.apply(r,n)}))}}function Pc(e){var t=new cu(e),n=new Array(t.size),r=-1;return t.forEach((function(e){n[++r]=e})),n}function Rc(e){var t=new Array(e.size),n=-1;return e.forEach((function(e,r){t[++n]=r})),t}function Nc(e){return new Cc("builtin "+e+" function requires map values to be numbers or number arrays")}function Ic(e){for(var t=0,n=0,r=e.length;n<r;n++){var o=e[n];if("number"!=typeof o){if(!Array.isArray(o))throw Nc("_sum");t="number"==typeof t?[t]:t;for(var i=0,a=o.length;i<a;i++){var u=o[i];if("number"!=typeof u)throw Nc("_sum");void 0===t[i]?t.push(u):t[i]+=u}}else"number"==typeof t?t+=o:t[0]+=o}return t}Ec.valid=function(){return!0},yu()(xc,Error),yu()(Ac,Error),yu()(Cc,Error);var Lc=zu.bind(null,"log"),jc=Array.isArray,Mc=JSON.parse;function Dc(e,t){return gs("return ("+e.replace(/;\s*$/,"")+");",{emit:t,sum:Ic,log:Lc,isArray:jc,toJSON:Mc})}function zc(){this.promise=new Promise((function(e){e()}))}function Bc(e){if(!e)return"undefined";switch(typeof e){case"function":case"string":return e.toString();default:return JSON.stringify(e)}}function Vc(e,t,n,r,o,i){var a,u=function(e,t){return Bc(e)+Bc(t)+"undefined"}(n,r);if(!o&&(a=e._cachedViews=e._cachedViews||{})[u])return a[u];var s=e.info().then((function(s){var l=s.db_name+"-mrview-"+(o?"temp":Ns(u));return ys(e,"_local/"+i,(function(e){e.views=e.views||{};var n=t;-1===n.indexOf("/")&&(n=t+"/"+t);var r=e.views[n]=e.views[n]||{};if(!r[l])return r[l]=!0,e})).then((function(){return e.registerDependentDatabase(l).then((function(t){var o=t.db;o.auto_compaction=!0;var i={name:l,db:o,sourceDB:e,adapter:e.adapter,mapFun:n,reduceFun:r};return i.db.get("_local/lastSeq").catch((function(e){if(404!==e.status)throw e})).then((function(e){return i.seq=e?e.seq:0,a&&i.db.once("destroyed",(function(){delete a[u]})),i}))}))}))}));return a&&(a[u]=s),s}zc.prototype.add=function(e){return this.promise=this.promise.catch((function(){})).then((function(){return e()})),this.promise},zc.prototype.finish=function(){return this.promise};var Fc={},Uc=new zc;function $c(e){return-1===e.indexOf("/")?[e,e]:e.split("/")}function qc(e,t){try{e.emit("error",t)}catch(e){zu("error","The user's map/reduce function threw an uncaught error.\nYou can debug this error by doing:\nmyDatabase.on('error', function (err) { debugger; });\nPlease double-check your map/reduce function."),zu("error",t)}}var Wc=function(e,t){return Ic(t)},Hc=function(e,t){return t.length},Kc=function(e,t){return{sum:Ic(t),min:Math.min.apply(null,t),max:Math.max.apply(null,t),count:t.length,sumsqr:function(e){for(var t=0,n=0,r=e.length;n<r;n++){var o=e[n];t+=o*o}return t}(t)}},Qc=function(e,t,n,r){function o(e,t,n){try{t(n)}catch(t){qc(e,t)}}function i(e,t,n,r,o){try{return{output:t(n,r,o)}}catch(t){return qc(e,t),{error:t}}}function a(e,t){var n=bl(e.key,t.key);return 0!==n?n:bl(e.value,t.value)}function u(e,t,n){return n=n||0,"number"==typeof t?e.slice(n,t+n):n>0?e.slice(n):e}function s(e){var t=e.value;return t&&"object"==typeof t&&t._id||e.id}function l(e){return function(t){return e.include_docs&&e.attachments&&e.binary&&function(e){e.rows.forEach((function(e){var t=e.doc&&e.doc._attachments;t&&Object.keys(t).forEach((function(e){var n=t[e];t[e].data=Es(n.data,n.content_type)}))}))}(t),t}}function c(e,t,n,r){var o=t[e];void 0!==o&&(r&&(o=encodeURIComponent(JSON.stringify(o))),n.push(e+"="+o))}function f(e){if(void 0!==e){var t=Number(e);return isNaN(t)||t!==parseInt(e,10)?e:t}}function d(e,t){var n=e.descending?"endkey":"startkey",r=e.descending?"startkey":"endkey";if(void 0!==e[n]&&void 0!==e[r]&&bl(e[n],e[r])>0)throw new xc("No rows can match your key range, reverse your start_key and end_key or set {descending : true}");if(t.reduce&&!1!==e.reduce){if(e.include_docs)throw new xc("{include_docs:true} is invalid for reduce");if(e.keys&&e.keys.length>1&&!e.group&&!e.group_level)throw new xc("Multi-key fetches for reduce views must use {group: true}")}["group_level","limit","skip"].forEach((function(t){var n=function(e){if(e){if("number"!=typeof e)return new xc('Invalid value for integer: "'+e+'"');if(e<0)return new xc('Invalid value for positive integer: "'+e+'"')}}(e[t]);if(n)throw n}))}function p(e){return function(t){if(404===t.status)return e;throw t}}function h(e){var t="string"==typeof e?e:e.name,n=Fc[t];return n||(n=Fc[t]=new zc),n}function v(e){return Tc(h(e),(function(){return function(e){var t,n;var r=function(e,t){if("function"==typeof e&&2===e.length){var n=e;return function(e){return n(e,t)}}return Dc(e.toString(),t)}(e.mapFun,(function(e,r){var o={id:n._id,key:_l(e)};null!=r&&(o.value=_l(r)),t.push(o)})),i=e.seq||0;function u(t,n){return function(){return function(e,t,n){var r="_local/lastSeq";return e.db.get(r).catch(p({_id:r,seq:0})).then((function(r){var o=Rc(t);return Promise.all(o.map((function(n){return function(e,t,n){var r="_local/doc_"+e,o={_id:r,keys:[]},i=n.get(e),a=i[0];return(function(e){return 1===e.length&&/^1-/.test(e[0].rev)}(i[1])?Promise.resolve(o):t.db.get(r).catch(p(o))).then((function(e){return function(e){return e.keys.length?t.db.allDocs({keys:e.keys,include_docs:!0}):Promise.resolve({rows:[]})}(e).then((function(t){return function(e,t){for(var n=[],r=new cu,o=0,i=t.rows.length;o<i;o++){var u=t.rows[o].doc;if(u&&(n.push(u),r.add(u._id),u._deleted=!a.has(u._id),!u._deleted)){var s=a.get(u._id);"value"in s&&(u.value=s.value)}}var l=Rc(a);return l.forEach((function(e){if(!r.has(e)){var t={_id:e},o=a.get(e);"value"in o&&(t.value=o.value),n.push(t)}})),e.keys=Pc(l.concat(e.keys)),n.push(e),n}(e,t)}))}))}(n,e,t)}))).then((function(t){var o=us(t);return r.seq=n,o.push(r),e.db.bulkDocs({docs:o})}))}))}(e,t,n)}}var s=new zc;function l(){return e.sourceDB.changes({return_docs:!0,conflicts:!0,include_docs:!0,style:"all_docs",since:i,limit:50}).then(c)}function c(c){var d=c.results;if(d.length){var p=function(u){for(var s=new fu,l=0,c=u.length;l<c;l++){var d=u[l];if("_"!==d.doc._id[0]){t=[],(n=d.doc)._deleted||o(e.sourceDB,r,n),t.sort(a);var p=f(t);s.set(d.doc._id,[p,d.changes])}i=d.seq}return s}(d);if(s.add(u(p,i)),!(d.length<50))return l()}}function f(e){for(var t,n=new fu,r=0,o=e.length;r<o;r++){var i=e[r],a=[i.key,i.id];r>0&&0===bl(i.key,t)&&a.push(r),n.set(wl(a),i),t=i.key}return n}return l().then((function(){return s.finish()})).then((function(){e.seq=i}))}(e)}))()}function m(e,t){return Tc(h(e),(function(){return function(e,t){var n,r=e.reduceFun&&!1!==t.reduce,o=t.skip||0;function a(t){return t.include_docs=!0,e.db.allDocs(t).then((function(e){return n=e.total_rows,e.rows.map((function(e){if("value"in e.doc&&"object"==typeof e.doc.value&&null!==e.doc.value){var t=Object.keys(e.doc.value).sort(),n=["id","key","value"];if(!(t<n||t>n))return e.doc.value}var r=function(e){for(var t=[],n=[],r=0;;){var o=e[r++];if("\0"!==o)switch(o){case"1":t.push(null);break;case"2":t.push("1"===e[r]),r++;break;case"3":var i=kl(e,r);t.push(i.num),r+=i.length;break;case"4":for(var a="";;){var u=e[r];if("\0"===u)break;a+=u,r++}a=a.replace(/\u0001\u0001/g,"\0").replace(/\u0001\u0002/g,"").replace(/\u0002\u0002/g,""),t.push(a);break;case"5":var s={element:[],index:t.length};t.push(s.element),n.push(s);break;case"6":var l={element:{},index:t.length};t.push(l.element),n.push(l);break;default:throw new Error("bad collationIndex or unexpectedly reached end of input: "+o)}else{if(1===t.length)return t.pop();Sl(t,n)}}}(e.doc._id);return{key:r[0],id:r[1],value:"value"in e.doc?e.doc.value:null}}))}))}function l(a){var l;if(l=r?function(e,t,n){0===n.group_level&&delete n.group_level;var r=n.group||n.group_level,o=function(e){var t=e.toString();return function(e){if(/^_sum/.test(e))return Wc;if(/^_count/.test(e))return Hc;if(/^_stats/.test(e))return Kc;if(/^_/.test(e))throw new Error(e+" is not a supported reduce function.")}(t)||Dc(t)}(e.reduceFun),a=[],s=isNaN(n.group_level)?Number.POSITIVE_INFINITY:n.group_level;t.forEach((function(e){var t=a[a.length-1],n=r?e.key:null;if(r&&Array.isArray(n)&&(n=n.slice(0,s)),t&&0===bl(t.groupKey,n))return t.keys.push([e.key,e.id]),void t.values.push(e.value);a.push({keys:[[e.key,e.id]],values:[e.value],groupKey:n})})),t=[];for(var l=0,c=a.length;l<c;l++){var f=a[l],d=i(e.sourceDB,o,f.keys,f.values,!1);if(d.error&&d.error instanceof Cc)throw d.error;t.push({value:d.error?null:d.output,key:f.groupKey})}return{rows:u(t,n.limit,n.skip)}}(e,a,t):{total_rows:n,offset:o,rows:a},t.update_seq&&(l.update_seq=e.seq),t.include_docs){var c=Pc(a.map(s));return e.sourceDB.allDocs({keys:c,include_docs:!0,conflicts:t.conflicts,attachments:t.attachments,binary:t.binary}).then((function(e){var t=new fu;return e.rows.forEach((function(e){t.set(e.id,e.doc)})),a.forEach((function(e){var n=s(e),r=t.get(n);r&&(e.doc=r)})),l}))}return l}if(void 0===t.keys||t.keys.length||(t.limit=0,delete t.keys),void 0!==t.keys){var c=t.keys.map((function(e){var n={startkey:wl([e]),endkey:wl([e,{}])};return t.update_seq&&(n.update_seq=!0),a(n)}));return Promise.all(c).then(us).then(l)}var f,d,p={descending:t.descending};if(t.update_seq&&(p.update_seq=!0),"start_key"in t&&(f=t.start_key),"startkey"in t&&(f=t.startkey),"end_key"in t&&(d=t.end_key),"endkey"in t&&(d=t.endkey),void 0!==f&&(p.startkey=t.descending?wl([f,{}]):wl([f])),void 0!==d){var h=!1!==t.inclusive_end;t.descending&&(h=!h),p.endkey=wl(h?[d,{}]:[d])}if(void 0!==t.key){var v=wl([t.key]),m=wl([t.key,{}]);p.descending?(p.endkey=v,p.startkey=m):(p.startkey=v,p.endkey=m)}return r||("number"==typeof t.limit&&(p.limit=t.limit),p.skip=o),a(p).then(l)}(e,t)}))()}function g(t,n,r){if("function"==typeof t._query)return function(e,t,n){return new Promise((function(r,o){e._query(t,n,(function(e,t){if(e)return o(e);r(t)}))}))}(t,n,r);if(ls(t))return function(e,t,n){var r,o,i,a=[],u="GET";if(c("reduce",n,a),c("include_docs",n,a),c("attachments",n,a),c("limit",n,a),c("descending",n,a),c("group",n,a),c("group_level",n,a),c("skip",n,a),c("stale",n,a),c("conflicts",n,a),c("startkey",n,a,!0),c("start_key",n,a,!0),c("endkey",n,a,!0),c("end_key",n,a,!0),c("inclusive_end",n,a),c("key",n,a,!0),c("update_seq",n,a),a=""===(a=a.join("&"))?"":"?"+a,void 0!==n.keys){var s="keys="+encodeURIComponent(JSON.stringify(n.keys));s.length+a.length+1<=2e3?a+=("?"===a[0]?"&":"?")+s:(u="POST","string"==typeof t?r={keys:n.keys}:t.keys=n.keys)}if("string"==typeof t){var f=$c(t);return e.fetch("_design/"+f[0]+"/_view/"+f[1]+a,{headers:new sl({"Content-Type":"application/json"}),method:u,body:JSON.stringify(r)}).then((function(e){return o=e.ok,i=e.status,e.json()})).then((function(e){if(!o)throw e.status=i,is(e);return e.rows.forEach((function(e){if(e.value&&e.value.error&&"builtin_reduce_error"===e.value.error)throw new Error(e.reason)})),e})).then(l(n))}return r=r||{},Object.keys(t).forEach((function(e){Array.isArray(t[e])?r[e]=t[e]:r[e]=t[e].toString()})),e.fetch("_temp_view"+a,{headers:new sl({"Content-Type":"application/json"}),method:"POST",body:JSON.stringify(r)}).then((function(e){return o=e.ok,i=e.status,e.json()})).then((function(e){if(!o)throw e.status=i,is(e);return e})).then(l(n))}(t,n,r);if("string"!=typeof n)return d(r,n),Uc.add((function(){return Vc(t,"temp_view/temp_view",n.map,n.reduce,!0,e).then((function(e){return t=v(e).then((function(){return m(e,r)})),n=function(){return e.db.destroy()},t.then((function(e){return n().then((function(){return e}))}),(function(e){return n().then((function(){throw e}))}));var t,n}))})),Uc.finish();var o=n,i=$c(o),a=i[0],u=i[1];return t.get("_design/"+a).then((function(n){var i=n.views&&n.views[u];if(!i)throw new Ac("ddoc "+n._id+" has no view named "+u);return function(e,t){var n=e.views&&e.views[t];if("string"!=typeof n.map)throw new Ac("ddoc "+e._id+" has no string view named "+t+", instead found object of type: "+typeof n.map)}(n,u),d(r,i),Vc(t,o,i.map,i.reduce,!1,e).then((function(e){return"ok"===r.stale||"update_after"===r.stale?("update_after"===r.stale&&uu()((function(){v(e)})),m(e,r)):v(e).then((function(){return m(e,r)}))}))}))}var y;return{query:function(e,t,n){var r=this;"function"==typeof t&&(n=t,t={}),t=t?function(e){return e.group_level=f(e.group_level),e.limit=f(e.limit),e.skip=f(e.skip),e}(t):{},"function"==typeof e&&(e={map:e});var o=Promise.resolve().then((function(){return g(r,e,t)}));return Oc(o,n),o},viewCleanup:(y=function(){var e=this;return"function"==typeof e._viewCleanup?function(e){return new Promise((function(t,n){e._viewCleanup((function(e,r){if(e)return n(e);t(r)}))}))}(e):ls(e)?function(e){return e.fetch("_view_cleanup",{headers:new sl({"Content-Type":"application/json"}),method:"POST"}).then((function(e){return e.json()}))}(e):function(e){return e.get("_local/mrviews").then((function(t){var n=new fu;Object.keys(t.views).forEach((function(e){var t=$c(e),r="_design/"+t[0],o=t[1],i=n.get(r);i||(i=new cu,n.set(r,i)),i.add(o)}));var r={keys:Rc(n),include_docs:!0};return e.allDocs(r).then((function(r){var o={};r.rows.forEach((function(e){var r=e.key.substring(8);n.get(e.key).forEach((function(n){var i=r+"/"+n;t.views[i]||(i=n);var a=Object.keys(t.views[i]),u=e.doc&&e.doc.views&&e.doc.views[n];a.forEach((function(e){o[e]=o[e]||u}))}))}));var i=Object.keys(o).filter((function(e){return!o[e]})).map((function(t){return Tc(h(t),(function(){return new e.constructor(t,e.__opts).destroy()}))()}));return Promise.all(i).then((function(){return{ok:!0}}))}))}),p({ok:!0}))}(e)},mu()((function(e){var t=e.pop(),n=y.apply(this,e);return"function"==typeof t&&Oc(n,t),n})))}}("mrviews"),Gc={query:function(e,t,n){return Qc.query.call(this,e,t,n)},viewCleanup:function(e){return Qc.viewCleanup.call(this,e)}};function Yc(e){return/^1-/.test(e)}function Jc(e,t){var n=Object.keys(t._attachments);return Promise.all(n.map((function(n){return e.getAttachment(t._id,n,{rev:t._rev})})))}function Xc(e,t,n,r){n=Ou(n);var o=[],i=!0;return Promise.resolve().then((function(){var t=Object.keys(n).filter((function(e){var t=n[e].missing;return 1===t.length&&Yc(t[0])}));if(t.length>0)return function(t){return e.allDocs({keys:t,include_docs:!0,conflicts:!0}).then((function(e){if(r.cancelled)throw new Error("cancelled");e.rows.forEach((function(e){var t;e.deleted||!e.doc||!Yc(e.value.rev)||(t=e.doc)._attachments&&Object.keys(t._attachments).length>0||function(e){return e._conflicts&&e._conflicts.length>0}(e.doc)||(e.doc._conflicts&&delete e.doc._conflicts,o.push(e.doc),delete n[e.id])}))}))}(t)})).then((function(){var a=function(e){var t=[];return Object.keys(e).forEach((function(n){e[n].missing.forEach((function(e){t.push({id:n,rev:e})}))})),{docs:t,revs:!0,latest:!0}}(n);if(a.docs.length)return e.bulkGet(a).then((function(n){if(r.cancelled)throw new Error("cancelled");return Promise.all(n.results.map((function(n){return Promise.all(n.docs.map((function(n){var r=n.ok;return n.error&&(i=!1),r&&r._attachments?function(e,t,n){var r=ls(t)&&!ls(e),o=Object.keys(n._attachments);return r?e.get(n._id).then((function(r){return Promise.all(o.map((function(o){return function(e,t,n){return!e._attachments||!e._attachments[n]||e._attachments[n].digest!==t._attachments[n].digest}(r,n,o)?t.getAttachment(n._id,o):e.getAttachment(r._id,o)})))})).catch((function(e){if(404!==e.status)throw e;return Jc(t,n)})):Jc(t,n)}(t,e,r).then((function(e){var t=Object.keys(r._attachments);return e.forEach((function(e,n){var o=r._attachments[t[n]];delete o.stub,delete o.length,o.data=e})),r})):r})))}))).then((function(e){o=o.concat(us(e).filter(Boolean))}))}))})).then((function(){return{ok:i,docs:o}}))}var Zc="pouchdb";function ef(e,t,n,r,o){return e.get(t).catch((function(n){if(404===n.status)return"http"!==e.adapter&&"https"!==e.adapter||Vu(404,"PouchDB is just checking if a remote checkpoint exists."),{session_id:r,_id:t,history:[],replicator:Zc,version:1};throw n})).then((function(i){if(!o.cancelled&&i.last_seq!==n)return i.history=(i.history||[]).filter((function(e){return e.session_id!==r})),i.history.unshift({last_seq:n,session_id:r}),i.history=i.history.slice(0,5),i.version=1,i.replicator=Zc,i.session_id=r,i.last_seq=n,e.put(i).catch((function(i){if(409===i.status)return ef(e,t,n,r,o);throw i}))}))}function tf(e,t,n,r,o){this.src=e,this.target=t,this.id=n,this.returnValue=r,this.opts=o||{}}tf.prototype.writeCheckpoint=function(e,t){var n=this;return this.updateTarget(e,t).then((function(){return n.updateSource(e,t)}))},tf.prototype.updateTarget=function(e,t){return this.opts.writeTargetCheckpoint?ef(this.target,this.id,e,t,this.returnValue):Promise.resolve(!0)},tf.prototype.updateSource=function(e,t){if(this.opts.writeSourceCheckpoint){var n=this;return ef(this.src,this.id,e,t,this.returnValue).catch((function(e){if(af(e))return n.opts.writeSourceCheckpoint=!1,!0;throw e}))}return Promise.resolve(!0)};var nf={undefined:function(e,t){return 0===bl(e.last_seq,t.last_seq)?t.last_seq:0},1:function(e,t){return(n=t,r=e,n.session_id===r.session_id?{last_seq:n.last_seq,history:n.history}:rf(n.history,r.history)).last_seq;var n,r}};function rf(e,t){var n=e[0],r=e.slice(1),o=t[0],i=t.slice(1);return n&&0!==t.length?of(n.session_id,t)?{last_seq:n.last_seq,history:e}:of(o.session_id,r)?{last_seq:o.last_seq,history:i}:rf(r,i):{last_seq:0,history:[]}}function of(e,t){var n=t[0],r=t.slice(1);return!(!e||0===t.length)&&(e===n.session_id||of(e,r))}function af(e){return"number"==typeof e.status&&4===Math.floor(e.status/100)}function uf(e,t,n,r,o){var i,a,u,s=[],l={seq:0,changes:[],docs:[]},c=!1,f=!1,d=!1,p=0,h=n.continuous||n.live||!1,v=n.batch_size||100,m=n.batches_limit||10,g=!1,y=n.doc_ids,b=n.selector,_=[],w=Ls();o=o||{ok:!0,start_time:(new Date).toISOString(),docs_read:0,docs_written:0,doc_write_failures:0,errors:[]};var k={};function S(){return u?Promise.resolve():function(e,t,n){var r=n.doc_ids?n.doc_ids.sort(bl):"",o=n.filter?n.filter.toString():"",i="",a="",u="";return n.selector&&(u=JSON.stringify(n.selector)),n.filter&&n.query_params&&(i=JSON.stringify(function(e){return Object.keys(e).sort(bl).reduce((function(t,n){return t[n]=e[n],t}),{})}(n.query_params))),n.filter&&"_view"===n.filter&&(a=n.view.toString()),Promise.all([e.id(),t.id()]).then((function(e){var t=e[0]+e[1]+o+a+i+r+u;return new Promise((function(e){Rs(t,e)}))})).then((function(e){return"_local/"+e.replace(/\//g,".").replace(/\+/g,"_")}))}(e,t,n).then((function(o){a=o;var i;i=!1===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!1}:"source"===n.checkpoint?{writeSourceCheckpoint:!0,writeTargetCheckpoint:!1}:"target"===n.checkpoint?{writeSourceCheckpoint:!1,writeTargetCheckpoint:!0}:{writeSourceCheckpoint:!0,writeTargetCheckpoint:!0},u=new tf(e,t,a,r,i)}))}function E(){if(_=[],0!==i.docs.length){var e=i.docs,a={timeout:n.timeout};return t.bulkDocs({docs:e,new_edits:!1},a).then((function(t){if(r.cancelled)throw P(),new Error("cancelled");var n=Object.create(null);t.forEach((function(e){e.error&&(n[e.id]=e)}));var i=Object.keys(n).length;o.doc_write_failures+=i,o.docs_written+=e.length-i,e.forEach((function(e){var t=n[e._id];if(t){o.errors.push(t);var i=(t.name||"").toLowerCase();if("unauthorized"!==i&&"forbidden"!==i)throw t;r.emit("denied",Ou(t))}else _.push(e)}))}),(function(t){throw o.doc_write_failures+=e.length,t}))}}function x(){if(i.error)throw new Error("There was a problem getting docs.");o.last_seq=p=i.seq;var e=Ou(o);return _.length&&(e.docs=_,"number"==typeof i.pending&&(e.pending=i.pending,delete i.pending),r.emit("change",e)),c=!0,u.writeCheckpoint(i.seq,w).then((function(){if(c=!1,r.cancelled)throw P(),new Error("cancelled");i=void 0,L()})).catch((function(e){throw M(e),e}))}function A(){return Xc(e,t,i.diffs,r).then((function(e){i.error=!e.ok,e.docs.forEach((function(e){delete i.diffs[e._id],o.docs_read++,i.docs.push(e)}))}))}function C(){var e;r.cancelled||i||(0!==s.length?(i=s.shift(),(e={},i.changes.forEach((function(t){"_user/"!==t.id&&(e[t.id]=t.changes.map((function(e){return e.rev})))})),t.revsDiff(e).then((function(e){if(r.cancelled)throw P(),new Error("cancelled");i.diffs=e}))).then(A).then(E).then(x).then(C).catch((function(e){T("batch processing terminated with error",e)}))):O(!0))}function O(e){0!==l.changes.length?(e||f||l.changes.length>=v)&&(s.push(l),l={seq:0,changes:[],docs:[]},"pending"!==r.state&&"stopped"!==r.state||(r.state="active",r.emit("active")),C()):0!==s.length||i||((h&&k.live||f)&&(r.state="pending",r.emit("paused")),f&&P())}function T(e,t){d||(t.message||(t.message=e),o.ok=!1,o.status="aborting",s=[],l={seq:0,changes:[],docs:[]},P(t))}function P(i){if(!(d||r.cancelled&&(o.status="cancelled",c)))if(o.status=o.status||"complete",o.end_time=(new Date).toISOString(),o.last_seq=p,d=!0,i){(i=os(i)).result=o;var a=(i.name||"").toLowerCase();"unauthorized"===a||"forbidden"===a?(r.emit("error",i),r.removeAllListeners()):function(e,t,n,r){if(!1===e.retry)return t.emit("error",n),void t.removeAllListeners();if("function"!=typeof e.back_off_function&&(e.back_off_function=Bu),t.emit("requestError",n),"active"===t.state||"pending"===t.state){t.emit("paused",n),t.state="stopped";var o=function(){e.current_back_off=0};t.once("paused",(function(){t.removeListener("active",o)})),t.once("active",o)}e.current_back_off=e.current_back_off||0,e.current_back_off=e.back_off_function(e.current_back_off),setTimeout(r,e.current_back_off)}(n,r,i,(function(){uf(e,t,n,r)}))}else r.emit("complete",o),r.removeAllListeners()}function R(e,t,o){if(r.cancelled)return P();"number"==typeof t&&(l.pending=t),as(n)(e)&&(l.seq=e.seq||o,l.changes.push(e),uu()((function(){O(0===s.length&&k.live)})))}function N(e){if(g=!1,r.cancelled)return P();if(e.results.length>0)k.since=e.results[e.results.length-1].seq,L(),O(!0);else{var t=function(){h?(k.live=!0,L()):f=!0,O(!0)};i||0!==e.results.length?t():(c=!0,u.writeCheckpoint(e.last_seq,w).then((function(){c=!1,o.last_seq=p=e.last_seq,t()})).catch(M))}}function I(e){if(g=!1,r.cancelled)return P();T("changes rejected",e)}function L(){if(!g&&!f&&s.length<m){g=!0,r._changes&&(r.removeListener("cancel",r._abortChanges),r._changes.cancel()),r.once("cancel",o);var t=e.changes(k).on("change",R);t.then(i,i),t.then(N).catch(I),n.retry&&(r._changes=t,r._abortChanges=o)}function o(){t.cancel()}function i(){r.removeListener("cancel",o)}}function j(){S().then((function(){if(!r.cancelled)return u.getCheckpoint().then((function(e){k={since:p=e,limit:v,batch_size:v,style:"all_docs",doc_ids:y,selector:b,return_docs:!0},n.filter&&("string"!=typeof n.filter?k.include_docs=!0:k.filter=n.filter),"heartbeat"in n&&(k.heartbeat=n.heartbeat),"timeout"in n&&(k.timeout=n.timeout),n.query_params&&(k.query_params=n.query_params),n.view&&(k.view=n.view),L()}));P()})).catch((function(e){T("getCheckpoint rejected with ",e)}))}function M(e){c=!1,T("writeCheckpoint completed with error",e)}r.ready(e,t),r.cancelled?P():(r._addedListeners||(r.once("cancel",P),"function"==typeof n.complete&&(r.once("error",n.complete),r.once("complete",(function(e){n.complete(null,e)}))),r._addedListeners=!0),void 0===n.since?j():S().then((function(){return c=!0,u.writeCheckpoint(n.since,w)})).then((function(){c=!1,r.cancelled?P():(p=n.since,j())})).catch(M))}function sf(){_u().call(this),this.cancelled=!1,this.state="pending";var e=this,t=new Promise((function(t,n){e.once("complete",t),e.once("error",n)}));e.then=function(e,n){return t.then(e,n)},e.catch=function(e){return t.catch(e)},e.catch((function(){}))}function lf(e,t){var n=t.PouchConstructor;return"string"==typeof e?new n(e,t):e}function cf(e,t,n,r){if("function"==typeof n&&(r=n,n={}),void 0===n&&(n={}),n.doc_ids&&!Array.isArray(n.doc_ids))throw os(Zu,"`doc_ids` filter parameter is not a list.");n.complete=r,(n=Ou(n)).continuous=n.continuous||n.live,n.retry="retry"in n&&n.retry,n.PouchConstructor=n.PouchConstructor||this;var o=new sf(n);return uf(lf(e,n),lf(t,n),n,o),o}function ff(e,t,n,r){return"function"==typeof n&&(r=n,n={}),void 0===n&&(n={}),(n=Ou(n)).PouchConstructor=n.PouchConstructor||this,new df(e=lf(e,n),t=lf(t,n),n,r)}function df(e,t,n,r){var o=this;this.canceled=!1;var i=n.push?Fu({},n,n.push):n,a=n.pull?Fu({},n,n.pull):n;function u(e){o.emit("change",{direction:"pull",change:e})}function s(e){o.emit("change",{direction:"push",change:e})}function l(e){o.emit("denied",{direction:"push",doc:e})}function c(e){o.emit("denied",{direction:"pull",doc:e})}function f(){o.pushPaused=!0,o.pullPaused&&o.emit("paused")}function d(){o.pullPaused=!0,o.pushPaused&&o.emit("paused")}function p(){o.pushPaused=!1,o.pullPaused&&o.emit("active",{direction:"push"})}function h(){o.pullPaused=!1,o.pushPaused&&o.emit("active",{direction:"pull"})}this.push=cf(e,t,i),this.pull=cf(t,e,a),this.pushPaused=!0,this.pullPaused=!0;var v={};function m(e){return function(t,n){("change"===t&&(n===u||n===s)||"denied"===t&&(n===c||n===l)||"paused"===t&&(n===d||n===f)||"active"===t&&(n===h||n===p))&&(t in v||(v[t]={}),v[t][e]=!0,2===Object.keys(v[t]).length&&o.removeAllListeners(t))}}function g(e,t,n){-1==e.listeners(t).indexOf(n)&&e.on(t,n)}n.live&&(this.push.on("complete",o.pull.cancel.bind(o.pull)),this.pull.on("complete",o.push.cancel.bind(o.push))),this.on("newListener",(function(e){"change"===e?(g(o.pull,"change",u),g(o.push,"change",s)):"denied"===e?(g(o.pull,"denied",c),g(o.push,"denied",l)):"active"===e?(g(o.pull,"active",h),g(o.push,"active",p)):"paused"===e&&(g(o.pull,"paused",d),g(o.push,"paused",f))})),this.on("removeListener",(function(e){"change"===e?(o.pull.removeListener("change",u),o.push.removeListener("change",s)):"denied"===e?(o.pull.removeListener("denied",c),o.push.removeListener("denied",l)):"active"===e?(o.pull.removeListener("active",h),o.push.removeListener("active",p)):"paused"===e&&(o.pull.removeListener("paused",d),o.push.removeListener("paused",f))})),this.pull.on("removeListener",m("pull")),this.push.on("removeListener",m("push"));var y=Promise.all([this.push,this.pull]).then((function(e){var t={push:e[0],pull:e[1]};return o.emit("complete",t),r&&r(null,t),o.removeAllListeners(),t}),(function(e){if(o.cancel(),r?r(e):o.emit("error",e),o.removeAllListeners(),r)throw e}));this.then=function(e,t){return y.then(e,t)},this.catch=function(e){return y.catch(e)}}tf.prototype.getCheckpoint=function(){var e=this;return e.opts&&e.opts.writeSourceCheckpoint&&!e.opts.writeTargetCheckpoint?e.src.get(e.id).then((function(e){return e.last_seq||0})).catch((function(e){if(404!==e.status)throw e;return 0})):e.target.get(e.id).then((function(t){return e.opts&&e.opts.writeTargetCheckpoint&&!e.opts.writeSourceCheckpoint?t.last_seq||0:e.src.get(e.id).then((function(e){return t.version!==e.version?0:(n=t.version?t.version.toString():"undefined")in nf?nf[n](t,e):0;var n}),(function(n){if(404===n.status&&t.last_seq)return e.src.put({_id:e.id,last_seq:0}).then((function(){return 0}),(function(n){return af(n)?(e.opts.writeSourceCheckpoint=!1,t.last_seq):0}));throw n}))})).catch((function(e){if(404!==e.status)throw e;return 0}))},yu()(sf,_u()),sf.prototype.cancel=function(){this.cancelled=!0,this.state="cancelled",this.emit("cancel")},sf.prototype.ready=function(e,t){var n=this;function r(){n.cancel()}n._readyCalled||(n._readyCalled=!0,e.once("destroyed",r),t.once("destroyed",r),n.once("complete",(function(){e.removeListener("destroyed",r),t.removeListener("destroyed",r)})))},yu()(df,_u()),df.prototype.cancel=function(){this.canceled||(this.canceled=!0,this.push.cancel(),this.pull.cancel())},il.plugin((function(e){e.adapter("idb",vc,!0)})).plugin((function(e){e.adapter("http",Ec,!1),e.adapter("https",Ec,!1)})).plugin(Gc).plugin((function(e){e.replicate=cf,e.sync=ff,Object.defineProperty(e.prototype,"replicate",{get:function(){var e=this;return void 0===this.replicateMethods&&(this.replicateMethods={from:function(t,n,r){return e.constructor.replicate(t,e,n,r)},to:function(t,n,r){return e.constructor.replicate(e,t,n,r)}}),this.replicateMethods}}),e.prototype.sync=function(e,t,n){return this.constructor.sync(this,e,t,n)}}));var pf=new il("my_database");const hf=Wi.div`
  width: 80vw;
  max-width: 400px;
  max-height: 80vh;

  animation-name: loadButton;
  animation-duration: 500ms;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier();
  @media (max-height: 480px) {
    max-width: 300px;
  }

  @media (max-height: 360px) {
    max-width: 200px;
  }

  .svg-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
  }

  .button-wrapper {
    position: relative;
    padding-bottom: 100%;
    height: 0;
    width: 100%;
  }

  .button-icon {
    outline: none !important;

    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 999px;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at bottom center, #ffc837 15px, #ff8008);
    box-shadow: 0 10px 10px -5px rgba(0, 0, 0, 0.2);
  }

  @keyframes loadButton {
    from {
      transform: rotate(180deg) scale(0.1);
      opacity: 0.1;
    }
    to {
      transform: none;
      opacity: 1;
    }
  } ;
`,vf=new Audio,{error:mf}=ho("clapButton");function gf(){const[e,n]=(0,t.useState)(null),r=(0,t.useRef)(),[o,i]=Ha(Ga),a=(0,t.useRef)(null);function u(){null!=r.current&&(clearInterval(r.current),r.current=null,a.current.style.transform=void 0)}return(0,t.useEffect)((()=>{const e=e=>{u(),n(null)},t=async e=>{!function(){if(null!=r.current)return;const e=a.current;let t=!1;r.current=setInterval((()=>{t?(e.style.transform="scale(1)",t=!1):(e.style.transform="scale(1.2)",t=!0)}),100)}(),n(!0);const t=await async function(e,t,n){return await pf.put({_id:Date.now().toString().padStart(15,"0"),message:void 0,x:void 0,y:void 0,date:Date.now()})}();i((e=>{e.total_rows++,e.rows.push(t)}))};return vf.addEventListener("ended",e),vf.addEventListener("play",t),()=>{vf.removeEventListener("ended",e),vf.removeEventListener("play",t)}}),[]),(0,t.useEffect)((()=>{var e,t;async function n(){document[e]&&(u(),vf.load())}return void 0!==document.hidden?(e="hidden",t="visibilitychange"):void 0!==document.msHidden?(e="msHidden",t="msvisibilitychange"):void 0!==document.webkitHidden&&(e="webkitHidden",t="webkitvisibilitychange"),document.addEventListener(t,n,!1),()=>document.removeEventListener(t,n)}),[]),t.createElement(hf,null,t.createElement("div",{className:"button-wrapper"},t.createElement("button",{className:"button-icon",onClick:async function(){return vf.play()}},t.createElement("div",{className:"svg-wrapper"},t.createElement(eu,{clapping:e,ref:a})))))}(async()=>{const e=await async function(){try{const e=await fetch(iu);if(!e.ok)throw e;const t=await e.blob();await ou().setItem("mp3",t)}catch(e){mf("Failed to load audio",e)}return ou().getItem("mp3")}();vf.src=URL.createObjectURL(e)})();const yf="dialog_shown",bf=Wi.button`
  margin-left: auto;
  margin-right: auto;
`;function _f(){const[e,n]=(0,t.useState)(!1);return(0,t.useEffect)((()=>{localStorage.getItem(yf)||n(!0)}),[]),e?t.createElement("div",{id:"dialog",className:"dialog-wrapper fixed top-0 w-full h-full flex justify-center items-center z-10"},t.createElement("div",{className:"dialog rounded m-6 p-6 text-lg md:w-2/3 z-10 max-w-md"},t.createElement("p",{className:"mb-6"},"You ever tried clapping while holding your phone?"),t.createElement("p",null,"Well now you can"),t.createElement(bf,{className:"rounded p-2 text-md w-full bg-green-500 mt-8 text-white",onClick:function(){n(!1),localStorage.setItem(yf,"Y")}},"Close")),t.createElement("div",{className:"dialog-bg inset-0 opacity-50 bg-white absolute"})):null}function wf(){const e=po(Hi);return function(){const[e,n]=Ha(Ga);(0,t.useEffect)((async()=>{!async function(){const e=await async function(){return await pf.allDocs()}();n((()=>e))}()}),[])}(),(0,t.useEffect)((()=>{window.addEventListener("beforeinstallprompt",(t=>{vo("Prompting install"),t.preventDefault(),e(t)}))}),[]),t.createElement(t.Fragment,null,t.createElement(_f,null),t.createElement(nu,null),t.createElement(Za,null),t.createElement("div",{className:"page-content"},t.createElement(gf,null)))}console.log("Current environment","production"),"serviceWorker"in navigator&&window.addEventListener("load",(()=>{navigator.serviceWorker.register("service-worker.js").then((e=>{console.log("SW registered: ",e)})).catch((e=>{console.log("SW registration failed: ",e)}))})),(0,e.render)(t.createElement(so,null,t.createElement(wf,null)),document.getElementById("root")),vo("Initialising")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,