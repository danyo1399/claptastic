(()=>{"use strict";const e=[/tailwind/i],t="claptastic-store-1.0.37-24168",{error:n,debug:r,log:c,warn:s}=function(e){const t="1.0.37-24168";return{log:function(e,...n){console.log(`[sw ${t}] ${e}`,...n)},error:function(e,...n){console.error(`[sw ${t}] ${e}`,...n)},warn:function(e,...n){console.warn(`[sw ${t}] ${e}`,...n)},debug:function(e,...n){console.debug(`[sw ${t}] ${e}`,...n)}}}();c("loading service worker"),self.addEventListener("activate",(e=>{c("activating",e),e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if(t!==e)return c("deleting cache",e),caches.delete(e)}))))))})),self.addEventListener("install",(e=>{c("installing"),self.skipWaiting()})),self.addEventListener("fetch",(n=>{n.respondWith((async()=>{const i=await caches.open(t);let a;const o=n.request.url;try{if(function(t){return e.some((e=>e.test(t)))}(o)){const e=await i.match(n.request);if(e)return c("returning immutable cached resource: "+o),e}if(r("fetching: "+o),a=await fetch(n.request),!a.ok)throw a;r(`updating cache: ${o}`),await i.put(n.request,a.clone())}catch(e){s(`Error fetching response. Last chance find a local cache version: ${o}`,e);const t=i.match(n.request);if(t)return t}return a})())}))})();